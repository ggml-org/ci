+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4334 (4ddd199f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.021.156 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.166 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.177 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.184 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.191 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.191 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.192 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.196 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.198 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.198 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.486 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.511 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.251 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.257 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.258 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.258 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.260 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.260 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.263 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.264 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.266 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.266 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.267 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.270 I llama_model_loader: - type  f32:   37 tensors
0.00.132.271 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.769 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.486 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.974 I llm_load_vocab: special tokens cache size = 5
0.00.262.791 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.805 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.806 I llm_load_print_meta: arch             = gemma
0.00.262.807 I llm_load_print_meta: vocab type       = SPM
0.00.262.808 I llm_load_print_meta: n_vocab          = 256000
0.00.262.808 I llm_load_print_meta: n_merges         = 0
0.00.262.808 I llm_load_print_meta: vocab_only       = 0
0.00.262.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.809 I llm_load_print_meta: n_embd           = 2048
0.00.262.809 I llm_load_print_meta: n_layer          = 18
0.00.262.820 I llm_load_print_meta: n_head           = 8
0.00.262.821 I llm_load_print_meta: n_head_kv        = 1
0.00.262.821 I llm_load_print_meta: n_rot            = 256
0.00.262.821 I llm_load_print_meta: n_swa            = 0
0.00.262.822 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.822 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.823 I llm_load_print_meta: n_gqa            = 8
0.00.262.824 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.825 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.826 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.827 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.827 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.828 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.828 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.829 I llm_load_print_meta: n_ff             = 16384
0.00.262.829 I llm_load_print_meta: n_expert         = 0
0.00.262.830 I llm_load_print_meta: n_expert_used    = 0
0.00.262.830 I llm_load_print_meta: causal attn      = 1
0.00.262.830 I llm_load_print_meta: pooling type     = 0
0.00.262.831 I llm_load_print_meta: rope type        = 2
0.00.262.831 I llm_load_print_meta: rope scaling     = linear
0.00.262.832 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.833 I llm_load_print_meta: freq_scale_train = 1
0.00.262.833 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.834 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.834 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.834 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.834 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.835 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.835 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.835 I llm_load_print_meta: model type       = 2B
0.00.262.836 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.837 I llm_load_print_meta: model params     = 2.51 B
0.00.262.838 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.838 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.838 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.839 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.839 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.839 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.840 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.840 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.840 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.841 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.842 I llm_load_print_meta: max token length = 93
0.00.363.294 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.301 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.302 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.303 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.304 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.305 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.470 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.477 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.477 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.478 I llama_new_context_with_model: n_batch       = 2048
0.00.368.478 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.479 I llama_new_context_with_model: flash_attn    = 0
0.00.368.481 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.482 I llama_new_context_with_model: freq_scale    = 1
0.00.368.483 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.826 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.841 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.931 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.202 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.208 I llama_new_context_with_model: graph nodes  = 601
0.00.385.209 I llama_new_context_with_model: graph splits = 1
0.00.385.211 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.763 I main: llama threadpool init, n_threads = 4
0.00.470.779 I 
0.00.470.856 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.860 I 
0.00.470.902 I sampler seed: 4095312379
0.00.470.913 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.925 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.926 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.927 I 
 increasities, and other forms of sexual harassment.

Sexual harassment is a pervasive problem that affects individuals across all genders and demographics. It undermines individuals' dignity,

0.02.709.638 I llama_perf_sampler_print:    sampling time =       4.60 ms /    33 runs   (    0.14 ms per token,  7173.91 tokens per second)
0.02.709.641 I llama_perf_context_print:        load time =     470.02 ms
0.02.709.642 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.709.645 I llama_perf_context_print:        eval time =    2220.90 ms /    32 runs   (   69.40 ms per token,    14.41 tokens per second)
0.02.709.646 I llama_perf_context_print:       total time =    2238.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.579 I build: 4334 (4ddd199f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.000.784 I main: load the model and apply lora adapter, if any
0.00.021.127 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.147 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.160 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.161 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.163 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.163 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.164 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.164 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.169 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.170 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.171 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.172 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.173 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.624 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.285 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.291 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.292 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.293 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.294 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.296 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.296 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.300 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.300 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.301 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.302 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.304 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.307 I llama_model_loader: - type  f32:   37 tensors
0.00.134.309 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.429 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.575 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.055 I llm_load_vocab: special tokens cache size = 5
0.00.266.664 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.680 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.680 I llm_load_print_meta: arch             = gemma
0.00.266.681 I llm_load_print_meta: vocab type       = SPM
0.00.266.682 I llm_load_print_meta: n_vocab          = 256000
0.00.266.682 I llm_load_print_meta: n_merges         = 0
0.00.266.682 I llm_load_print_meta: vocab_only       = 0
0.00.266.683 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.683 I llm_load_print_meta: n_embd           = 2048
0.00.266.683 I llm_load_print_meta: n_layer          = 18
0.00.266.694 I llm_load_print_meta: n_head           = 8
0.00.266.695 I llm_load_print_meta: n_head_kv        = 1
0.00.266.695 I llm_load_print_meta: n_rot            = 256
0.00.266.696 I llm_load_print_meta: n_swa            = 0
0.00.266.696 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.696 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.697 I llm_load_print_meta: n_gqa            = 8
0.00.266.698 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.699 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.700 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.701 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.702 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.702 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.702 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.703 I llm_load_print_meta: n_ff             = 16384
0.00.266.704 I llm_load_print_meta: n_expert         = 0
0.00.266.704 I llm_load_print_meta: n_expert_used    = 0
0.00.266.705 I llm_load_print_meta: causal attn      = 1
0.00.266.705 I llm_load_print_meta: pooling type     = 0
0.00.266.705 I llm_load_print_meta: rope type        = 2
0.00.266.706 I llm_load_print_meta: rope scaling     = linear
0.00.266.707 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.707 I llm_load_print_meta: freq_scale_train = 1
0.00.266.708 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.708 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.709 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.710 I llm_load_print_meta: model type       = 2B
0.00.266.710 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.711 I llm_load_print_meta: model params     = 2.51 B
0.00.266.712 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.713 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.713 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.713 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.714 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.714 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.714 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.715 I llm_load_print_meta: max token length = 93
0.00.362.313 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.367.348 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.354 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.354 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.355 I llama_new_context_with_model: n_batch       = 2048
0.00.367.355 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.356 I llama_new_context_with_model: flash_attn    = 0
0.00.367.358 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.359 I llama_new_context_with_model: freq_scale    = 1
0.00.367.360 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.867 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.879 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.966 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.189 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.195 I llama_new_context_with_model: graph nodes  = 601
0.00.383.195 I llama_new_context_with_model: graph splits = 1
0.00.383.197 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.244 I main: llama threadpool init, n_threads = 4
0.00.464.260 I 
0.00.464.338 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.341 I 
0.00.464.385 I sampler seed: 1421103258
0.00.464.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.403 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.406 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.407 I 
 seconally.

The question is asking for the meaning of the sentence.

Please provide a textual interpretation of the sentence.

I am unable to provide a

0.02.642.995 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7081.55 tokens per second)
0.02.642.998 I llama_perf_context_print:        load time =     463.44 ms
0.02.642.999 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.643.000 I llama_perf_context_print:        eval time =    2160.35 ms /    32 runs   (   67.51 ms per token,    14.81 tokens per second)
0.02.643.001 I llama_perf_context_print:       total time =    2178.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.587 I build: 4334 (4ddd199f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.216 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.226 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.234 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.240 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.244 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.245 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.245 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.246 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.246 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.247 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.251 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.252 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.252 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.253 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.253 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.733 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.766 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.539 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.546 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.546 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.547 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.548 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.549 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.550 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.552 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.553 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.554 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.554 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.555 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.558 I llama_model_loader: - type  f32:   37 tensors
0.00.132.559 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.850 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.282 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.824 I llm_load_vocab: special tokens cache size = 5
0.00.265.478 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.494 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.494 I llm_load_print_meta: arch             = gemma
0.00.265.495 I llm_load_print_meta: vocab type       = SPM
0.00.265.496 I llm_load_print_meta: n_vocab          = 256000
0.00.265.496 I llm_load_print_meta: n_merges         = 0
0.00.265.496 I llm_load_print_meta: vocab_only       = 0
0.00.265.497 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.497 I llm_load_print_meta: n_embd           = 2048
0.00.265.497 I llm_load_print_meta: n_layer          = 18
0.00.265.508 I llm_load_print_meta: n_head           = 8
0.00.265.509 I llm_load_print_meta: n_head_kv        = 1
0.00.265.510 I llm_load_print_meta: n_rot            = 256
0.00.265.510 I llm_load_print_meta: n_swa            = 0
0.00.265.510 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.510 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.511 I llm_load_print_meta: n_gqa            = 8
0.00.265.512 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.513 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.514 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.515 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.516 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.516 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.516 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.517 I llm_load_print_meta: n_ff             = 16384
0.00.265.518 I llm_load_print_meta: n_expert         = 0
0.00.265.518 I llm_load_print_meta: n_expert_used    = 0
0.00.265.518 I llm_load_print_meta: causal attn      = 1
0.00.265.518 I llm_load_print_meta: pooling type     = 0
0.00.265.519 I llm_load_print_meta: rope type        = 2
0.00.265.519 I llm_load_print_meta: rope scaling     = linear
0.00.265.520 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.521 I llm_load_print_meta: freq_scale_train = 1
0.00.265.522 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.522 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.522 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.523 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.523 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.523 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.524 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.524 I llm_load_print_meta: model type       = 2B
0.00.265.525 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.525 I llm_load_print_meta: model params     = 2.51 B
0.00.265.526 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.527 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.527 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.527 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.528 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.528 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.530 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.530 I llm_load_print_meta: max token length = 93
0.00.342.202 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.210 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.211 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.212 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.212 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.213 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.478 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.485 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.486 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.486 I llama_new_context_with_model: n_batch       = 2048
0.00.347.487 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.488 I llama_new_context_with_model: flash_attn    = 0
0.00.347.490 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.492 I llama_new_context_with_model: freq_scale    = 1
0.00.347.493 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.844 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.857 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.955 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.272 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.279 I llama_new_context_with_model: graph nodes  = 601
0.00.364.279 I llama_new_context_with_model: graph splits = 1
0.00.364.281 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.575 I main: llama threadpool init, n_threads = 4
0.00.454.591 I 
0.00.454.663 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.664 I 
0.00.454.711 I sampler seed: 1123595292
0.00.454.719 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.722 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.723 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.723 I 
 increasively and is a synonym for 'rising'.

**Answer:** Ascending.

**Explanation:** Ascending means moving in the direction of increasing height or

0.02.733.703 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7113.60 tokens per second)
0.02.733.706 I llama_perf_context_print:        load time =     453.76 ms
0.02.733.707 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.733.708 I llama_perf_context_print:        eval time =    2260.92 ms /    32 runs   (   70.65 ms per token,    14.15 tokens per second)
0.02.733.709 I llama_perf_context_print:       total time =    2279.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.167 I build: 4334 (4ddd199f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.358 I main: llama backend init
0.00.000.366 I main: load the model and apply lora adapter, if any
0.00.020.624 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.634 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.645 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.650 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.652 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.656 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.657 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.658 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.658 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.659 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.659 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.663 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.664 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.664 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.665 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.666 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.837 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.314 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.141 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.141 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.142 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.142 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.143 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.144 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.146 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.146 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.147 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.148 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.149 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.152 I llama_model_loader: - type  f32:   37 tensors
0.00.132.153 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.030 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.728 I llm_load_vocab: special tokens cache size = 5
0.00.265.595 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.612 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.612 I llm_load_print_meta: arch             = gemma
0.00.265.613 I llm_load_print_meta: vocab type       = SPM
0.00.265.614 I llm_load_print_meta: n_vocab          = 256000
0.00.265.614 I llm_load_print_meta: n_merges         = 0
0.00.265.614 I llm_load_print_meta: vocab_only       = 0
0.00.265.615 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.615 I llm_load_print_meta: n_embd           = 2048
0.00.265.616 I llm_load_print_meta: n_layer          = 18
0.00.265.627 I llm_load_print_meta: n_head           = 8
0.00.265.628 I llm_load_print_meta: n_head_kv        = 1
0.00.265.628 I llm_load_print_meta: n_rot            = 256
0.00.265.628 I llm_load_print_meta: n_swa            = 0
0.00.265.629 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.629 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.630 I llm_load_print_meta: n_gqa            = 8
0.00.265.631 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.632 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.632 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.634 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.634 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.634 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.635 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.636 I llm_load_print_meta: n_ff             = 16384
0.00.265.636 I llm_load_print_meta: n_expert         = 0
0.00.265.636 I llm_load_print_meta: n_expert_used    = 0
0.00.265.636 I llm_load_print_meta: causal attn      = 1
0.00.265.636 I llm_load_print_meta: pooling type     = 0
0.00.265.637 I llm_load_print_meta: rope type        = 2
0.00.265.637 I llm_load_print_meta: rope scaling     = linear
0.00.265.638 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.639 I llm_load_print_meta: freq_scale_train = 1
0.00.265.639 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.639 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.640 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.640 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.641 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.641 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.642 I llm_load_print_meta: model type       = 2B
0.00.265.642 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.643 I llm_load_print_meta: model params     = 2.51 B
0.00.265.644 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.644 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.645 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.645 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.645 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.646 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.647 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.647 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.648 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.648 I llm_load_print_meta: max token length = 93
0.00.336.881 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.888 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.881 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.886 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.887 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.887 I llama_new_context_with_model: n_batch       = 2048
0.00.341.888 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.888 I llama_new_context_with_model: flash_attn    = 0
0.00.341.890 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.891 I llama_new_context_with_model: freq_scale    = 1
0.00.341.892 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.349 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.362 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.454 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.705 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.709 I llama_new_context_with_model: graph nodes  = 601
0.00.357.709 I llama_new_context_with_model: graph splits = 1
0.00.357.711 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.462 I main: llama threadpool init, n_threads = 4
0.00.446.477 I 
0.00.446.553 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.556 I 
0.00.446.597 I sampler seed: 1059372881
0.00.446.608 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.611 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.612 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.612 I 
 seconary to the main idea.

The main idea is that in order to understand the world, we must first understand our own minds and the ways they process

0.02.850.797 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.02.850.800 I llama_perf_context_print:        load time =     446.08 ms
0.02.850.801 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.850.803 I llama_perf_context_print:        eval time =    2385.24 ms /    32 runs   (   74.54 ms per token,    13.42 tokens per second)
0.02.850.804 I llama_perf_context_print:       total time =    2404.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.424s
user	0m39.273s
sys	0m9.375s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4334 (4ddd199f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40244.94 ms
main:    total time = 40244.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4334 (4ddd199f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.397 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.406 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.415 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.426 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.430 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.431 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.431 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.437 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.438 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.439 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.439 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.440 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.182 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.419 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.609 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.615 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.616 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.616 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.617 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.618 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.618 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.621 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.622 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.622 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.624 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.624 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.628 I llama_model_loader: - type  f32:   37 tensors
0.00.134.629 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.630 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.418 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.780 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.386 I llm_load_vocab: special tokens cache size = 5
0.00.267.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.415 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.416 I llm_load_print_meta: arch             = gemma
0.00.267.416 I llm_load_print_meta: vocab type       = SPM
0.00.267.416 I llm_load_print_meta: n_vocab          = 256000
0.00.267.417 I llm_load_print_meta: n_merges         = 0
0.00.267.417 I llm_load_print_meta: vocab_only       = 0
0.00.267.417 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.418 I llm_load_print_meta: n_embd           = 2048
0.00.267.418 I llm_load_print_meta: n_layer          = 18
0.00.267.428 I llm_load_print_meta: n_head           = 8
0.00.267.429 I llm_load_print_meta: n_head_kv        = 1
0.00.267.429 I llm_load_print_meta: n_rot            = 256
0.00.267.429 I llm_load_print_meta: n_swa            = 0
0.00.267.430 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.430 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.431 I llm_load_print_meta: n_gqa            = 8
0.00.267.432 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.433 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.433 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.435 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.435 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.436 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.436 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.437 I llm_load_print_meta: n_ff             = 16384
0.00.267.437 I llm_load_print_meta: n_expert         = 0
0.00.267.437 I llm_load_print_meta: n_expert_used    = 0
0.00.267.437 I llm_load_print_meta: causal attn      = 1
0.00.267.438 I llm_load_print_meta: pooling type     = 0
0.00.267.438 I llm_load_print_meta: rope type        = 2
0.00.267.438 I llm_load_print_meta: rope scaling     = linear
0.00.267.440 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.440 I llm_load_print_meta: freq_scale_train = 1
0.00.267.441 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.441 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.442 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.442 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.442 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.443 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.443 I llm_load_print_meta: model type       = 2B
0.00.267.443 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.444 I llm_load_print_meta: model params     = 2.51 B
0.00.267.445 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.445 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.446 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.446 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.446 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.447 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.448 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.448 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.448 I llm_load_print_meta: max token length = 93
0.00.327.703 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.710 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.711 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.712 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.712 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.713 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.974 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.980 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.980 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.981 I llama_new_context_with_model: n_batch       = 2048
0.00.332.981 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.982 I llama_new_context_with_model: flash_attn    = 0
0.00.332.984 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.985 I llama_new_context_with_model: freq_scale    = 1
0.00.332.986 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.212 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.225 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.314 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.561 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.568 I llama_new_context_with_model: graph nodes  = 601
0.00.348.568 I llama_new_context_with_model: graph splits = 1
0.00.348.571 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.013 I main: llama threadpool init, n_threads = 4
0.00.424.028 I 
0.00.424.099 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.103 I 
0.00.424.143 I sampler seed: 2042589018
0.00.424.154 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.158 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.159 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.159 I 
 maneuorn. The context is a conversation between a doctor and a patient.

**Doctor:** "I understand you're experiencing some discomfort with your knee."

0.02.009.235 I llama_perf_sampler_print:    sampling time =       5.28 ms /    33 runs   (    0.16 ms per token,  6252.37 tokens per second)
0.02.009.237 I llama_perf_context_print:        load time =     423.25 ms
0.02.009.239 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.240 I llama_perf_context_print:        eval time =    1565.52 ms /    32 runs   (   48.92 ms per token,    20.44 tokens per second)
0.02.009.241 I llama_perf_context_print:       total time =    1585.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4334 (4ddd199f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40181.39 ms
main:    total time = 40181.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.557 I build: 4334 (4ddd199f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.565 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.582 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.591 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.595 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.599 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.601 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.602 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.602 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.603 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.604 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.608 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.609 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.609 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.610 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.611 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.269 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.275 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.275 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.276 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.277 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.278 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.278 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.281 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.281 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.285 I llama_model_loader: - type  f32:   37 tensors
0.00.133.286 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.287 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.410 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.071 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.562 I llm_load_vocab: special tokens cache size = 5
0.00.264.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.136 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.136 I llm_load_print_meta: arch             = gemma
0.00.264.137 I llm_load_print_meta: vocab type       = SPM
0.00.264.137 I llm_load_print_meta: n_vocab          = 256000
0.00.264.138 I llm_load_print_meta: n_merges         = 0
0.00.264.138 I llm_load_print_meta: vocab_only       = 0
0.00.264.138 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.139 I llm_load_print_meta: n_embd           = 2048
0.00.264.139 I llm_load_print_meta: n_layer          = 18
0.00.264.151 I llm_load_print_meta: n_head           = 8
0.00.264.152 I llm_load_print_meta: n_head_kv        = 1
0.00.264.152 I llm_load_print_meta: n_rot            = 256
0.00.264.152 I llm_load_print_meta: n_swa            = 0
0.00.264.153 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.153 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.154 I llm_load_print_meta: n_gqa            = 8
0.00.264.155 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.156 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.157 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.158 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.159 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.159 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.160 I llm_load_print_meta: n_ff             = 16384
0.00.264.161 I llm_load_print_meta: n_expert         = 0
0.00.264.161 I llm_load_print_meta: n_expert_used    = 0
0.00.264.161 I llm_load_print_meta: causal attn      = 1
0.00.264.162 I llm_load_print_meta: pooling type     = 0
0.00.264.162 I llm_load_print_meta: rope type        = 2
0.00.264.163 I llm_load_print_meta: rope scaling     = linear
0.00.264.164 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.164 I llm_load_print_meta: freq_scale_train = 1
0.00.264.165 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.165 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.165 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.166 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.166 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.166 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.167 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.167 I llm_load_print_meta: model type       = 2B
0.00.264.168 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.169 I llm_load_print_meta: model params     = 2.51 B
0.00.264.170 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.170 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.170 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.171 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.171 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.171 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.171 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.172 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.172 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.172 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.173 I llm_load_print_meta: max token length = 93
0.00.321.686 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.978 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.983 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.983 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.984 I llama_new_context_with_model: n_batch       = 2048
0.00.326.984 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.985 I llama_new_context_with_model: flash_attn    = 0
0.00.326.987 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.990 I llama_new_context_with_model: freq_scale    = 1
0.00.326.991 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.369 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.380 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.466 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.716 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.723 I llama_new_context_with_model: graph nodes  = 601
0.00.342.723 I llama_new_context_with_model: graph splits = 1
0.00.342.725 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.963 I main: llama threadpool init, n_threads = 4
0.00.416.979 I 
0.00.417.056 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.417.059 I 
0.00.417.103 I sampler seed: 1897352702
0.00.417.114 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.130 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.130 I 
 increasities and puns.

**Question:** What do you call a person who exaggerates their emotions?

**Answer:** A hyperbole.

**Explanation

0.01.984.964 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6411.50 tokens per second)
0.01.984.967 I llama_perf_context_print:        load time =     416.18 ms
0.01.984.968 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.969 I llama_perf_context_print:        eval time =    1549.25 ms /    32 runs   (   48.41 ms per token,    20.66 tokens per second)
0.01.984.970 I llama_perf_context_print:       total time =    1568.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.212s
user	10m23.968s
sys	0m6.828s
