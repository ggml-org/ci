+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.706 I build: 4446 (4d2b3d88) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.000.922 I main: load the model and apply lora adapter, if any
0.00.085.359 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.370 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.466 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.488 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.493 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.496 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.499 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.500 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.502 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.510 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.511 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.513 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.515 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.516 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.604 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.575 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.824 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.838 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.840 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.846 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.851 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.855 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.857 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.858 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.414.867 I llama_model_loader: - type  f32:   37 tensors
0.00.414.869 I llama_model_loader: - type q8_0:  127 tensors
0.00.682.767 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.801.281 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.802.260 I llm_load_vocab: special tokens cache size = 5
0.01.016.867 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.016.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.016.953 I llm_load_print_meta: arch             = gemma
0.01.016.954 I llm_load_print_meta: vocab type       = SPM
0.01.016.956 I llm_load_print_meta: n_vocab          = 256000
0.01.016.958 I llm_load_print_meta: n_merges         = 0
0.01.016.958 I llm_load_print_meta: vocab_only       = 0
0.01.016.958 I llm_load_print_meta: n_ctx_train      = 8192
0.01.016.959 I llm_load_print_meta: n_embd           = 2048
0.01.016.959 I llm_load_print_meta: n_layer          = 18
0.01.017.037 I llm_load_print_meta: n_head           = 8
0.01.017.045 I llm_load_print_meta: n_head_kv        = 1
0.01.017.048 I llm_load_print_meta: n_rot            = 256
0.01.017.049 I llm_load_print_meta: n_swa            = 0
0.01.017.049 I llm_load_print_meta: n_embd_head_k    = 256
0.01.017.049 I llm_load_print_meta: n_embd_head_v    = 256
0.01.017.054 I llm_load_print_meta: n_gqa            = 8
0.01.017.058 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.017.063 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.017.065 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.017.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.017.067 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.017.068 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.017.069 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.017.074 I llm_load_print_meta: n_ff             = 16384
0.01.017.075 I llm_load_print_meta: n_expert         = 0
0.01.017.075 I llm_load_print_meta: n_expert_used    = 0
0.01.017.076 I llm_load_print_meta: causal attn      = 1
0.01.017.076 I llm_load_print_meta: pooling type     = 0
0.01.017.077 I llm_load_print_meta: rope type        = 2
0.01.017.080 I llm_load_print_meta: rope scaling     = linear
0.01.017.081 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.017.082 I llm_load_print_meta: freq_scale_train = 1
0.01.017.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.017.084 I llm_load_print_meta: rope_finetuned   = unknown
0.01.017.084 I llm_load_print_meta: ssm_d_conv       = 0
0.01.017.099 I llm_load_print_meta: ssm_d_inner      = 0
0.01.017.100 I llm_load_print_meta: ssm_d_state      = 0
0.01.017.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.017.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.017.120 I llm_load_print_meta: model type       = 2B
0.01.017.122 I llm_load_print_meta: model ftype      = Q8_0
0.01.017.123 I llm_load_print_meta: model params     = 2.51 B
0.01.017.124 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.017.132 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.017.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.017.133 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.017.134 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.017.135 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.017.135 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.017.136 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.017.143 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.017.144 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.017.145 I llm_load_print_meta: max token length = 93
0.01.121.219 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.121.227 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.121.228 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.121.229 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.121.229 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.121.230 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.128.288 I llama_new_context_with_model: n_seq_max     = 1
0.01.128.294 I llama_new_context_with_model: n_ctx         = 4096
0.01.128.295 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.128.295 I llama_new_context_with_model: n_batch       = 2048
0.01.128.295 I llama_new_context_with_model: n_ubatch      = 512
0.01.128.296 I llama_new_context_with_model: flash_attn    = 0
0.01.128.299 I llama_new_context_with_model: freq_base     = 10000.0
0.01.128.300 I llama_new_context_with_model: freq_scale    = 1
0.01.128.301 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.128.393 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.142.961 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.143.000 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.143.124 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.146.338 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.146.342 I llama_new_context_with_model: graph nodes  = 601
0.01.146.343 I llama_new_context_with_model: graph splits = 1
0.01.146.368 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.146.371 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.757.767 I main: llama threadpool init, n_threads = 4
0.01.757.783 I 
0.01.757.929 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.757.934 I 
0.01.758.167 I sampler seed: 1083917624
0.01.758.183 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.758.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.758.196 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.758.197 I 
 increasities with the intention of capturing them in a way that preserves the context of the original event.

This practice is often referred to as **narrative capture**.

0.15.335.883 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.01 tokens per second)
0.15.335.898 I llama_perf_context_print:        load time =    1756.75 ms
0.15.335.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.335.903 I llama_perf_context_print:        eval time =   13493.00 ms /    32 runs   (  421.66 ms per token,     2.37 tokens per second)
0.15.335.908 I llama_perf_context_print:       total time =   13578.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4446 (4d2b3d88) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.085.758 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.862 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.890 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.898 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.903 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.905 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.907 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.922 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.925 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.927 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.934 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.942 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.467 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.266 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.217 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.229 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.231 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.232 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.234 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.236 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.238 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.243 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.245 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.416.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.250 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.416.251 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.416.260 I llama_model_loader: - type  f32:   37 tensors
0.00.416.262 I llama_model_loader: - type q8_0:  127 tensors
0.00.685.607 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.809.529 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.810.546 I llm_load_vocab: special tokens cache size = 5
0.01.032.932 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.033.014 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.033.019 I llm_load_print_meta: arch             = gemma
0.01.033.019 I llm_load_print_meta: vocab type       = SPM
0.01.033.020 I llm_load_print_meta: n_vocab          = 256000
0.01.033.023 I llm_load_print_meta: n_merges         = 0
0.01.033.024 I llm_load_print_meta: vocab_only       = 0
0.01.033.024 I llm_load_print_meta: n_ctx_train      = 8192
0.01.033.024 I llm_load_print_meta: n_embd           = 2048
0.01.033.025 I llm_load_print_meta: n_layer          = 18
0.01.033.104 I llm_load_print_meta: n_head           = 8
0.01.033.125 I llm_load_print_meta: n_head_kv        = 1
0.01.033.125 I llm_load_print_meta: n_rot            = 256
0.01.033.126 I llm_load_print_meta: n_swa            = 0
0.01.033.126 I llm_load_print_meta: n_embd_head_k    = 256
0.01.033.127 I llm_load_print_meta: n_embd_head_v    = 256
0.01.033.133 I llm_load_print_meta: n_gqa            = 8
0.01.033.138 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.033.143 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.033.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.033.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.033.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.033.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.033.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.033.153 I llm_load_print_meta: n_ff             = 16384
0.01.033.154 I llm_load_print_meta: n_expert         = 0
0.01.033.154 I llm_load_print_meta: n_expert_used    = 0
0.01.033.155 I llm_load_print_meta: causal attn      = 1
0.01.033.155 I llm_load_print_meta: pooling type     = 0
0.01.033.156 I llm_load_print_meta: rope type        = 2
0.01.033.156 I llm_load_print_meta: rope scaling     = linear
0.01.033.158 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.033.158 I llm_load_print_meta: freq_scale_train = 1
0.01.033.159 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.033.160 I llm_load_print_meta: rope_finetuned   = unknown
0.01.033.160 I llm_load_print_meta: ssm_d_conv       = 0
0.01.033.161 I llm_load_print_meta: ssm_d_inner      = 0
0.01.033.161 I llm_load_print_meta: ssm_d_state      = 0
0.01.033.162 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.033.163 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.033.166 I llm_load_print_meta: model type       = 2B
0.01.033.167 I llm_load_print_meta: model ftype      = Q8_0
0.01.033.168 I llm_load_print_meta: model params     = 2.51 B
0.01.033.169 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.033.170 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.033.171 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.033.171 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.033.172 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.033.172 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.033.173 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.033.174 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.033.180 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.033.181 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.033.182 I llm_load_print_meta: max token length = 93
0.01.131.044 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.138.025 I llama_new_context_with_model: n_seq_max     = 1
0.01.138.031 I llama_new_context_with_model: n_ctx         = 4096
0.01.138.031 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.138.032 I llama_new_context_with_model: n_batch       = 2048
0.01.138.032 I llama_new_context_with_model: n_ubatch      = 512
0.01.138.033 I llama_new_context_with_model: flash_attn    = 0
0.01.138.035 I llama_new_context_with_model: freq_base     = 10000.0
0.01.138.036 I llama_new_context_with_model: freq_scale    = 1
0.01.138.036 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.138.119 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.152.858 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.152.900 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.153.050 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.156.587 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.156.591 I llama_new_context_with_model: graph nodes  = 601
0.01.156.592 I llama_new_context_with_model: graph splits = 1
0.01.156.616 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.156.619 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.770.757 I main: llama threadpool init, n_threads = 4
0.01.770.774 I 
0.01.770.893 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.770.897 I 
0.01.771.126 I sampler seed: 1396039131
0.01.771.142 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.771.164 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.771.166 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.771.166 I 
 increasities

The given sentence is grammatically incorrect because it has a misplaced modifier.

The increasities were so loud that they scared the children.

The

0.15.429.167 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.64 tokens per second)
0.15.429.171 I llama_perf_context_print:        load time =    1769.82 ms
0.15.429.173 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.429.175 I llama_perf_context_print:        eval time =   13573.15 ms /    32 runs   (  424.16 ms per token,     2.36 tokens per second)
0.15.429.176 I llama_perf_context_print:       total time =   13658.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4446 (4d2b3d88) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.000.914 I main: load the model and apply lora adapter, if any
0.00.086.311 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.436 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.466 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.472 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.481 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.486 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.488 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.490 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.497 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.511 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.517 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.519 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.522 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.524 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.262 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.496 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.627 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.640 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.642 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.644 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.645 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.647 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.649 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.654 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.656 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.658 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.660 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.415.662 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.415.670 I llama_model_loader: - type  f32:   37 tensors
0.00.415.672 I llama_model_loader: - type q8_0:  127 tensors
0.00.701.742 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.823.357 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.824.404 I llm_load_vocab: special tokens cache size = 5
0.01.040.818 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.040.902 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.040.907 I llm_load_print_meta: arch             = gemma
0.01.040.908 I llm_load_print_meta: vocab type       = SPM
0.01.040.909 I llm_load_print_meta: n_vocab          = 256000
0.01.040.911 I llm_load_print_meta: n_merges         = 0
0.01.040.911 I llm_load_print_meta: vocab_only       = 0
0.01.040.912 I llm_load_print_meta: n_ctx_train      = 8192
0.01.040.912 I llm_load_print_meta: n_embd           = 2048
0.01.040.913 I llm_load_print_meta: n_layer          = 18
0.01.040.991 I llm_load_print_meta: n_head           = 8
0.01.041.001 I llm_load_print_meta: n_head_kv        = 1
0.01.041.002 I llm_load_print_meta: n_rot            = 256
0.01.041.002 I llm_load_print_meta: n_swa            = 0
0.01.041.003 I llm_load_print_meta: n_embd_head_k    = 256
0.01.041.003 I llm_load_print_meta: n_embd_head_v    = 256
0.01.041.008 I llm_load_print_meta: n_gqa            = 8
0.01.041.013 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.041.018 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.041.020 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.041.022 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.041.022 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.041.023 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.041.024 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.041.028 I llm_load_print_meta: n_ff             = 16384
0.01.041.030 I llm_load_print_meta: n_expert         = 0
0.01.041.030 I llm_load_print_meta: n_expert_used    = 0
0.01.041.031 I llm_load_print_meta: causal attn      = 1
0.01.041.040 I llm_load_print_meta: pooling type     = 0
0.01.041.041 I llm_load_print_meta: rope type        = 2
0.01.041.044 I llm_load_print_meta: rope scaling     = linear
0.01.041.045 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.041.046 I llm_load_print_meta: freq_scale_train = 1
0.01.041.046 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.041.046 I llm_load_print_meta: rope_finetuned   = unknown
0.01.041.047 I llm_load_print_meta: ssm_d_conv       = 0
0.01.041.047 I llm_load_print_meta: ssm_d_inner      = 0
0.01.041.047 I llm_load_print_meta: ssm_d_state      = 0
0.01.041.048 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.041.048 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.041.051 I llm_load_print_meta: model type       = 2B
0.01.041.053 I llm_load_print_meta: model ftype      = Q8_0
0.01.041.053 I llm_load_print_meta: model params     = 2.51 B
0.01.041.054 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.041.055 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.041.055 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.041.067 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.041.068 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.041.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.041.069 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.041.070 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.041.077 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.041.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.041.082 I llm_load_print_meta: max token length = 93
0.01.122.437 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.122.445 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.122.446 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.122.447 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.122.448 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.122.449 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.129.804 I llama_new_context_with_model: n_seq_max     = 1
0.01.129.809 I llama_new_context_with_model: n_ctx         = 4096
0.01.129.810 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.129.810 I llama_new_context_with_model: n_batch       = 2048
0.01.129.811 I llama_new_context_with_model: n_ubatch      = 512
0.01.129.811 I llama_new_context_with_model: flash_attn    = 0
0.01.129.814 I llama_new_context_with_model: freq_base     = 10000.0
0.01.129.814 I llama_new_context_with_model: freq_scale    = 1
0.01.129.815 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.129.909 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.145.097 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.145.137 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.145.266 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.148.883 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.148.886 I llama_new_context_with_model: graph nodes  = 601
0.01.148.887 I llama_new_context_with_model: graph splits = 1
0.01.148.913 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.148.916 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.769.309 I main: llama threadpool init, n_threads = 4
0.01.769.326 I 
0.01.769.464 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.769.469 I 
0.01.769.706 I sampler seed: 3687636559
0.01.769.720 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.769.729 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.769.734 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.769.734 I 
 maneuvously,
"I've got news for you, my friend, that's bound to rock your world!"

What is the meaning of

0.15.282.174 I llama_perf_sampler_print:    sampling time =      49.48 ms /    33 runs   (    1.50 ms per token,   666.87 tokens per second)
0.15.282.177 I llama_perf_context_print:        load time =    1768.30 ms
0.15.282.178 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.282.193 I llama_perf_context_print:        eval time =   13428.23 ms /    32 runs   (  419.63 ms per token,     2.38 tokens per second)
0.15.282.195 I llama_perf_context_print:       total time =   13512.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4446 (4d2b3d88) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.084.851 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.084.864 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.084.956 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.084.973 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.084.975 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.084.980 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.084.982 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.084.983 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.084.985 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.084.987 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.084.988 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.084.995 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.084.997 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.084.998 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.000 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.001 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.246 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.801 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.971 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.972 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.974 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.976 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.978 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.985 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.987 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.989 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.991 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.992 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.415.000 I llama_model_loader: - type  f32:   37 tensors
0.00.415.003 I llama_model_loader: - type q8_0:  127 tensors
0.00.678.543 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.801.930 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.802.831 I llm_load_vocab: special tokens cache size = 5
0.01.021.638 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.021.719 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.021.723 I llm_load_print_meta: arch             = gemma
0.01.021.724 I llm_load_print_meta: vocab type       = SPM
0.01.021.725 I llm_load_print_meta: n_vocab          = 256000
0.01.021.727 I llm_load_print_meta: n_merges         = 0
0.01.021.728 I llm_load_print_meta: vocab_only       = 0
0.01.021.728 I llm_load_print_meta: n_ctx_train      = 8192
0.01.021.729 I llm_load_print_meta: n_embd           = 2048
0.01.021.729 I llm_load_print_meta: n_layer          = 18
0.01.021.806 I llm_load_print_meta: n_head           = 8
0.01.021.813 I llm_load_print_meta: n_head_kv        = 1
0.01.021.814 I llm_load_print_meta: n_rot            = 256
0.01.021.815 I llm_load_print_meta: n_swa            = 0
0.01.021.817 I llm_load_print_meta: n_embd_head_k    = 256
0.01.021.817 I llm_load_print_meta: n_embd_head_v    = 256
0.01.021.822 I llm_load_print_meta: n_gqa            = 8
0.01.021.826 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.021.831 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.021.832 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.021.834 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.021.835 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.021.836 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.021.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.021.841 I llm_load_print_meta: n_ff             = 16384
0.01.021.842 I llm_load_print_meta: n_expert         = 0
0.01.021.843 I llm_load_print_meta: n_expert_used    = 0
0.01.021.844 I llm_load_print_meta: causal attn      = 1
0.01.021.844 I llm_load_print_meta: pooling type     = 0
0.01.021.845 I llm_load_print_meta: rope type        = 2
0.01.021.846 I llm_load_print_meta: rope scaling     = linear
0.01.021.847 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.021.861 I llm_load_print_meta: freq_scale_train = 1
0.01.021.862 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.021.862 I llm_load_print_meta: rope_finetuned   = unknown
0.01.021.862 I llm_load_print_meta: ssm_d_conv       = 0
0.01.021.876 I llm_load_print_meta: ssm_d_inner      = 0
0.01.021.876 I llm_load_print_meta: ssm_d_state      = 0
0.01.021.886 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.021.886 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.021.890 I llm_load_print_meta: model type       = 2B
0.01.021.892 I llm_load_print_meta: model ftype      = Q8_0
0.01.021.892 I llm_load_print_meta: model params     = 2.51 B
0.01.021.893 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.021.894 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.021.895 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.021.896 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.021.896 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.021.897 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.021.897 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.021.898 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.021.905 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.021.906 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.021.906 I llm_load_print_meta: max token length = 93
0.01.095.343 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.095.353 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.102.197 I llama_new_context_with_model: n_seq_max     = 1
0.01.102.203 I llama_new_context_with_model: n_ctx         = 4096
0.01.102.203 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.102.203 I llama_new_context_with_model: n_batch       = 2048
0.01.102.204 I llama_new_context_with_model: n_ubatch      = 512
0.01.102.204 I llama_new_context_with_model: flash_attn    = 0
0.01.102.207 I llama_new_context_with_model: freq_base     = 10000.0
0.01.102.207 I llama_new_context_with_model: freq_scale    = 1
0.01.102.208 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.102.291 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.116.618 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.116.658 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.116.779 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.120.011 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.120.015 I llama_new_context_with_model: graph nodes  = 601
0.01.120.015 I llama_new_context_with_model: graph splits = 1
0.01.120.040 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.120.043 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.735.120 I main: llama threadpool init, n_threads = 4
0.01.735.136 I 
0.01.735.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.735.264 I 
0.01.735.492 I sampler seed: 1369913901
0.01.735.505 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.735.516 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.735.517 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.735.517 I 
 increably.

I am not able to access your personal information, including your social security number, banking information, or any other personally identifiable information. [end of text]


0.14.958.276 I llama_perf_sampler_print:    sampling time =      48.22 ms /    32 runs   (    1.51 ms per token,   663.63 tokens per second)
0.14.958.279 I llama_perf_context_print:        load time =    1734.21 ms
0.14.958.281 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.958.282 I llama_perf_context_print:        eval time =   13140.03 ms /    31 runs   (  423.87 ms per token,     2.36 tokens per second)
0.14.958.283 I llama_perf_context_print:       total time =   13223.17 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m12.805s
user	3m51.823s
sys	0m9.280s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4446 (4d2b3d88)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186267.23 ms
main:    total time = 186267.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4446 (4d2b3d88) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.085.507 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.520 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.618 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.650 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.654 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.656 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.658 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.660 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.661 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.669 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.673 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.675 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.676 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.288.528 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.001 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.058 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.068 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.070 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.072 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.074 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.076 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.082 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.084 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.416.086 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.416.088 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.090 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.416.091 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.416.101 I llama_model_loader: - type  f32:   37 tensors
0.00.416.103 I llama_model_loader: - type q4_K:  108 tensors
0.00.416.104 I llama_model_loader: - type q6_K:   19 tensors
0.00.684.874 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.818.613 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.819.658 I llm_load_vocab: special tokens cache size = 5
0.01.036.758 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.036.840 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.036.845 I llm_load_print_meta: arch             = gemma
0.01.036.846 I llm_load_print_meta: vocab type       = SPM
0.01.036.847 I llm_load_print_meta: n_vocab          = 256000
0.01.036.849 I llm_load_print_meta: n_merges         = 0
0.01.036.850 I llm_load_print_meta: vocab_only       = 0
0.01.036.850 I llm_load_print_meta: n_ctx_train      = 8192
0.01.036.850 I llm_load_print_meta: n_embd           = 2048
0.01.036.851 I llm_load_print_meta: n_layer          = 18
0.01.036.928 I llm_load_print_meta: n_head           = 8
0.01.036.939 I llm_load_print_meta: n_head_kv        = 1
0.01.036.940 I llm_load_print_meta: n_rot            = 256
0.01.036.940 I llm_load_print_meta: n_swa            = 0
0.01.036.941 I llm_load_print_meta: n_embd_head_k    = 256
0.01.036.942 I llm_load_print_meta: n_embd_head_v    = 256
0.01.036.946 I llm_load_print_meta: n_gqa            = 8
0.01.036.951 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.036.956 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.036.959 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.036.961 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.036.961 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.036.962 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.036.962 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.036.967 I llm_load_print_meta: n_ff             = 16384
0.01.036.968 I llm_load_print_meta: n_expert         = 0
0.01.036.969 I llm_load_print_meta: n_expert_used    = 0
0.01.036.969 I llm_load_print_meta: causal attn      = 1
0.01.036.969 I llm_load_print_meta: pooling type     = 0
0.01.036.970 I llm_load_print_meta: rope type        = 2
0.01.036.973 I llm_load_print_meta: rope scaling     = linear
0.01.036.974 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.036.975 I llm_load_print_meta: freq_scale_train = 1
0.01.036.975 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.036.976 I llm_load_print_meta: rope_finetuned   = unknown
0.01.036.976 I llm_load_print_meta: ssm_d_conv       = 0
0.01.036.976 I llm_load_print_meta: ssm_d_inner      = 0
0.01.036.977 I llm_load_print_meta: ssm_d_state      = 0
0.01.036.977 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.036.977 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.036.980 I llm_load_print_meta: model type       = 2B
0.01.036.982 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.036.983 I llm_load_print_meta: model params     = 2.51 B
0.01.036.984 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.036.984 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.036.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.036.985 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.036.987 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.036.987 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.036.988 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.036.988 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.036.994 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.036.995 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.036.996 I llm_load_print_meta: max token length = 93
0.01.100.482 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.100.488 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.100.489 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.100.490 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.100.490 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.100.491 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.107.456 I llama_new_context_with_model: n_seq_max     = 1
0.01.107.461 I llama_new_context_with_model: n_ctx         = 4096
0.01.107.462 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.107.462 I llama_new_context_with_model: n_batch       = 2048
0.01.107.462 I llama_new_context_with_model: n_ubatch      = 512
0.01.107.463 I llama_new_context_with_model: flash_attn    = 0
0.01.107.465 I llama_new_context_with_model: freq_base     = 10000.0
0.01.107.466 I llama_new_context_with_model: freq_scale    = 1
0.01.107.466 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.107.545 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.121.527 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.121.563 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.121.684 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.124.864 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.124.869 I llama_new_context_with_model: graph nodes  = 601
0.01.124.869 I llama_new_context_with_model: graph splits = 1
0.01.124.894 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.124.897 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.704.825 I main: llama threadpool init, n_threads = 4
0.01.704.843 I 
0.01.704.969 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.704.973 I 
0.01.705.215 I sampler seed: 172397307
0.01.705.246 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.705.258 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.705.259 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.705.259 I 
 seconally, the world was plunged into darkness. The skies darkened, and the sun vanished. Panic surged, and people huddled together for warmth and safety.



0.12.780.056 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.30 tokens per second)
0.12.780.059 I llama_perf_context_print:        load time =    1703.86 ms
0.12.780.060 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.780.063 I llama_perf_context_print:        eval time =   10989.72 ms /    32 runs   (  343.43 ms per token,     2.91 tokens per second)
0.12.780.064 I llama_perf_context_print:       total time =   11075.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4446 (4d2b3d88)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186321.73 ms
main:    total time = 186321.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 4446 (4d2b3d88) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.085.314 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.462 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.467 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.469 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.473 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.484 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.486 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.488 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.489 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.310.425 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.412.228 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.436.407 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.436.419 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.436.421 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.436.423 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.436.424 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.436.427 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.436.428 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.436.433 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.436.435 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.436.437 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.436.446 I llama_model_loader: - type  f32:   37 tensors
0.00.436.448 I llama_model_loader: - type q4_K:  108 tensors
0.00.436.449 I llama_model_loader: - type q6_K:   19 tensors
0.00.708.244 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.835.195 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.836.141 I llm_load_vocab: special tokens cache size = 5
0.01.063.086 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.063.174 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.063.179 I llm_load_print_meta: arch             = gemma
0.01.063.180 I llm_load_print_meta: vocab type       = SPM
0.01.063.181 I llm_load_print_meta: n_vocab          = 256000
0.01.063.183 I llm_load_print_meta: n_merges         = 0
0.01.063.183 I llm_load_print_meta: vocab_only       = 0
0.01.063.184 I llm_load_print_meta: n_ctx_train      = 8192
0.01.063.184 I llm_load_print_meta: n_embd           = 2048
0.01.063.184 I llm_load_print_meta: n_layer          = 18
0.01.063.265 I llm_load_print_meta: n_head           = 8
0.01.063.276 I llm_load_print_meta: n_head_kv        = 1
0.01.063.276 I llm_load_print_meta: n_rot            = 256
0.01.063.277 I llm_load_print_meta: n_swa            = 0
0.01.063.277 I llm_load_print_meta: n_embd_head_k    = 256
0.01.063.277 I llm_load_print_meta: n_embd_head_v    = 256
0.01.063.282 I llm_load_print_meta: n_gqa            = 8
0.01.063.286 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.063.291 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.063.292 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.063.294 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.063.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.063.295 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.063.296 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.063.302 I llm_load_print_meta: n_ff             = 16384
0.01.063.303 I llm_load_print_meta: n_expert         = 0
0.01.063.304 I llm_load_print_meta: n_expert_used    = 0
0.01.063.304 I llm_load_print_meta: causal attn      = 1
0.01.063.328 I llm_load_print_meta: pooling type     = 0
0.01.063.332 I llm_load_print_meta: rope type        = 2
0.01.063.333 I llm_load_print_meta: rope scaling     = linear
0.01.063.334 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.063.335 I llm_load_print_meta: freq_scale_train = 1
0.01.063.335 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.063.336 I llm_load_print_meta: rope_finetuned   = unknown
0.01.063.336 I llm_load_print_meta: ssm_d_conv       = 0
0.01.063.336 I llm_load_print_meta: ssm_d_inner      = 0
0.01.063.337 I llm_load_print_meta: ssm_d_state      = 0
0.01.063.337 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.063.338 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.063.341 I llm_load_print_meta: model type       = 2B
0.01.063.352 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.063.353 I llm_load_print_meta: model params     = 2.51 B
0.01.063.354 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.063.355 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.063.356 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.063.357 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.063.357 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.063.360 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.063.361 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.063.361 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.063.370 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.063.372 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.063.372 I llm_load_print_meta: max token length = 93
0.01.122.905 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.129.865 I llama_new_context_with_model: n_seq_max     = 1
0.01.129.870 I llama_new_context_with_model: n_ctx         = 4096
0.01.129.871 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.129.871 I llama_new_context_with_model: n_batch       = 2048
0.01.129.871 I llama_new_context_with_model: n_ubatch      = 512
0.01.129.872 I llama_new_context_with_model: flash_attn    = 0
0.01.129.874 I llama_new_context_with_model: freq_base     = 10000.0
0.01.129.875 I llama_new_context_with_model: freq_scale    = 1
0.01.129.875 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.129.957 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.144.886 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.144.928 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.145.058 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.148.268 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.148.272 I llama_new_context_with_model: graph nodes  = 601
0.01.148.273 I llama_new_context_with_model: graph splits = 1
0.01.148.297 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.148.300 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.728.404 I main: llama threadpool init, n_threads = 4
0.01.728.419 I 
0.01.728.543 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.728.548 I 
0.01.728.782 I sampler seed: 1705766248
0.01.728.796 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.728.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.728.809 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.728.809 I 
 fufilling me with her radiant smile, eyes twinkling with mischief.

I am captivated by her presence, unable to tear my gaze away from her enchanting aura.

0.12.871.200 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.11 tokens per second)
0.12.871.203 I llama_perf_context_print:        load time =    1727.44 ms
0.12.871.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.871.206 I llama_perf_context_print:        eval time =   11058.35 ms /    32 runs   (  345.57 ms per token,     2.89 tokens per second)
0.12.871.207 I llama_perf_context_print:       total time =   11142.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.451s
user	46m43.060s
sys	0m6.400s
