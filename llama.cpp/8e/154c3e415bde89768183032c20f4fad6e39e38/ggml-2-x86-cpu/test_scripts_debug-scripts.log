+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3977 (8e154c3e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.898 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.118 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.226 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.228 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.233 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.237 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.238 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.239 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.240 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.240 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.250 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.251 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.252 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.806 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.031 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.530 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.542 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.543 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.544 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.545 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.546 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.547 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.551 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.552 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.553 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.554 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.555 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.564 I llama_model_loader: - type  f32:   37 tensors
0.00.266.569 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.329 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.299 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.274 I llm_load_vocab: special tokens cache size = 5
0.00.624.368 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.440 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.441 I llm_load_print_meta: arch             = gemma
0.00.624.442 I llm_load_print_meta: vocab type       = SPM
0.00.624.443 I llm_load_print_meta: n_vocab          = 256000
0.00.624.445 I llm_load_print_meta: n_merges         = 0
0.00.624.445 I llm_load_print_meta: vocab_only       = 0
0.00.624.445 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.446 I llm_load_print_meta: n_embd           = 2048
0.00.624.446 I llm_load_print_meta: n_layer          = 18
0.00.624.510 I llm_load_print_meta: n_head           = 8
0.00.624.517 I llm_load_print_meta: n_head_kv        = 1
0.00.624.518 I llm_load_print_meta: n_rot            = 256
0.00.624.518 I llm_load_print_meta: n_swa            = 0
0.00.624.518 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.523 I llm_load_print_meta: n_gqa            = 8
0.00.624.529 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.536 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.537 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.537 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.538 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.538 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.543 I llm_load_print_meta: n_ff             = 16384
0.00.624.544 I llm_load_print_meta: n_expert         = 0
0.00.624.544 I llm_load_print_meta: n_expert_used    = 0
0.00.624.544 I llm_load_print_meta: causal attn      = 1
0.00.624.545 I llm_load_print_meta: pooling type     = 0
0.00.624.545 I llm_load_print_meta: rope type        = 2
0.00.624.546 I llm_load_print_meta: rope scaling     = linear
0.00.624.547 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.548 I llm_load_print_meta: freq_scale_train = 1
0.00.624.548 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.548 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.548 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.549 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.549 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.549 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.550 I llm_load_print_meta: model type       = 2B
0.00.624.551 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.552 I llm_load_print_meta: model params     = 2.51 B
0.00.624.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.554 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.554 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.554 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.555 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.556 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.561 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.561 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.567 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.568 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.569 I llm_load_print_meta: max token length = 93
0.00.624.737 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.725.617 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.725.628 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.725.629 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.725.630 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.725.630 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.725.631 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.731.508 I llama_new_context_with_model: n_ctx      = 8192
0.00.731.517 I llama_new_context_with_model: n_batch    = 2048
0.00.731.517 I llama_new_context_with_model: n_ubatch   = 512
0.00.731.518 I llama_new_context_with_model: flash_attn = 0
0.00.731.522 I llama_new_context_with_model: freq_base  = 10000.0
0.00.731.523 I llama_new_context_with_model: freq_scale = 1
0.00.762.928 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.762.969 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.763.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.515 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.520 I llama_new_context_with_model: graph nodes  = 601
0.00.764.520 I llama_new_context_with_model: graph splits = 1
0.00.764.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.162 I main: llama threadpool init, n_threads = 4
0.01.373.172 I 
0.01.373.283 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.373.287 I 
0.01.373.472 I sampler seed: 81426101
0.01.373.483 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.373.491 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.373.492 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.373.492 I 
 increasities and other vulnerabilities in a system can exploit weaknesses in the design and implementation of a software system.

Answer the following questions:

a) What are

0.14.774.604 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.22 tokens per second)
0.14.774.607 I llama_perf_context_print:        load time =    1370.29 ms
0.14.774.623 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.774.625 I llama_perf_context_print:        eval time =   13318.69 ms /    32 runs   (  416.21 ms per token,     2.40 tokens per second)
0.14.774.626 I llama_perf_context_print:       total time =   13401.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3977 (8e154c3e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.025.117 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.220 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.233 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.235 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.240 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.241 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.243 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.245 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.253 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.254 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.255 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.256 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.257 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.617 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.472 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.726 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.727 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.728 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.729 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.730 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.731 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.735 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.737 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.739 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.740 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.748 I llama_model_loader: - type  f32:   37 tensors
0.00.265.752 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.724 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.762 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.717 I llm_load_vocab: special tokens cache size = 5
0.00.618.738 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.812 I llm_load_print_meta: arch             = gemma
0.00.618.813 I llm_load_print_meta: vocab type       = SPM
0.00.618.814 I llm_load_print_meta: n_vocab          = 256000
0.00.618.816 I llm_load_print_meta: n_merges         = 0
0.00.618.817 I llm_load_print_meta: vocab_only       = 0
0.00.618.817 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.817 I llm_load_print_meta: n_embd           = 2048
0.00.618.818 I llm_load_print_meta: n_layer          = 18
0.00.618.883 I llm_load_print_meta: n_head           = 8
0.00.618.890 I llm_load_print_meta: n_head_kv        = 1
0.00.618.891 I llm_load_print_meta: n_rot            = 256
0.00.618.892 I llm_load_print_meta: n_swa            = 0
0.00.618.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.911 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.916 I llm_load_print_meta: n_gqa            = 8
0.00.618.921 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.930 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.932 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.933 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.933 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.934 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.939 I llm_load_print_meta: n_ff             = 16384
0.00.618.940 I llm_load_print_meta: n_expert         = 0
0.00.618.941 I llm_load_print_meta: n_expert_used    = 0
0.00.618.941 I llm_load_print_meta: causal attn      = 1
0.00.618.942 I llm_load_print_meta: pooling type     = 0
0.00.618.942 I llm_load_print_meta: rope type        = 2
0.00.618.943 I llm_load_print_meta: rope scaling     = linear
0.00.618.945 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.946 I llm_load_print_meta: freq_scale_train = 1
0.00.618.954 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.955 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.956 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.956 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.957 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.957 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.958 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.959 I llm_load_print_meta: model type       = 2B
0.00.618.960 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.962 I llm_load_print_meta: model params     = 2.51 B
0.00.618.963 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.963 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.964 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.965 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.966 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.966 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.967 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.973 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.975 I llm_load_print_meta: max token length = 93
0.00.619.145 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.851 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.720.652 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.660 I llama_new_context_with_model: n_batch    = 2048
0.00.720.660 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.661 I llama_new_context_with_model: flash_attn = 0
0.00.720.664 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.664 I llama_new_context_with_model: freq_scale = 1
0.00.751.370 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.415 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.528 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.902 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.907 I llama_new_context_with_model: graph nodes  = 601
0.00.752.907 I llama_new_context_with_model: graph splits = 1
0.00.752.923 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.995 I main: llama threadpool init, n_threads = 4
0.01.362.008 I 
0.01.362.119 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.123 I 
0.01.362.310 I sampler seed: 2770862981
0.01.362.320 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.328 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.362.329 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.329 I 
 increasities!

I am unable to generate the requested text due to the inappropriate and sexually suggestive nature of the prompt. My purpose is to assist with tasks that

0.14.993.721 I llama_perf_sampler_print:    sampling time =      49.82 ms /    33 runs   (    1.51 ms per token,   662.34 tokens per second)
0.14.993.739 I llama_perf_context_print:        load time =    1359.12 ms
0.14.993.741 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.993.742 I llama_perf_context_print:        eval time =   13548.65 ms /    32 runs   (  423.40 ms per token,     2.36 tokens per second)
0.14.993.743 I llama_perf_context_print:       total time =   13631.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 3977 (8e154c3e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.024.713 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.928 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.022 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.034 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.036 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.040 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.044 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.045 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.046 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.047 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.048 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.056 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.057 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.058 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.059 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.060 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.640 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.889 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.151 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.161 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.162 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.163 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.164 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.166 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.167 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.172 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.173 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.175 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.184 I llama_model_loader: - type  f32:   37 tensors
0.00.266.188 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.769 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.767 I llm_load_vocab: special tokens cache size = 5
0.00.615.312 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.382 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.383 I llm_load_print_meta: arch             = gemma
0.00.615.383 I llm_load_print_meta: vocab type       = SPM
0.00.615.384 I llm_load_print_meta: n_vocab          = 256000
0.00.615.386 I llm_load_print_meta: n_merges         = 0
0.00.615.387 I llm_load_print_meta: vocab_only       = 0
0.00.615.387 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.388 I llm_load_print_meta: n_embd           = 2048
0.00.615.388 I llm_load_print_meta: n_layer          = 18
0.00.615.452 I llm_load_print_meta: n_head           = 8
0.00.615.458 I llm_load_print_meta: n_head_kv        = 1
0.00.615.459 I llm_load_print_meta: n_rot            = 256
0.00.615.459 I llm_load_print_meta: n_swa            = 0
0.00.615.460 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.465 I llm_load_print_meta: n_gqa            = 8
0.00.615.469 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.474 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.475 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.477 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.478 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.483 I llm_load_print_meta: n_ff             = 16384
0.00.615.483 I llm_load_print_meta: n_expert         = 0
0.00.615.484 I llm_load_print_meta: n_expert_used    = 0
0.00.615.484 I llm_load_print_meta: causal attn      = 1
0.00.615.484 I llm_load_print_meta: pooling type     = 0
0.00.615.485 I llm_load_print_meta: rope type        = 2
0.00.615.485 I llm_load_print_meta: rope scaling     = linear
0.00.615.486 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.487 I llm_load_print_meta: freq_scale_train = 1
0.00.615.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.488 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.488 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.488 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.488 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.489 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.490 I llm_load_print_meta: model type       = 2B
0.00.615.491 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.492 I llm_load_print_meta: model params     = 2.51 B
0.00.615.492 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.493 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.493 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.493 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.494 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.494 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.495 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.495 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.500 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.502 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.502 I llm_load_print_meta: max token length = 93
0.00.615.670 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.692.808 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.692.820 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.692.820 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.692.821 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.692.822 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.692.822 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.698.579 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.587 I llama_new_context_with_model: n_batch    = 2048
0.00.698.588 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.588 I llama_new_context_with_model: flash_attn = 0
0.00.698.592 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.593 I llama_new_context_with_model: freq_scale = 1
0.00.729.930 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.973 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.086 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.511 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.517 I llama_new_context_with_model: graph nodes  = 601
0.00.731.517 I llama_new_context_with_model: graph splits = 1
0.00.731.533 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.754 I main: llama threadpool init, n_threads = 4
0.01.342.768 I 
0.01.342.874 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.877 I 
0.01.343.059 I sampler seed: 4249058061
0.01.343.070 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.078 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.343.079 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.079 I 
 increasities. 

The given text contains a misspelling of "incredials".

The correct spelling is "increments".

The corrected text should be

0.14.761.741 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.29 tokens per second)
0.14.761.744 I llama_perf_context_print:        load time =    1339.85 ms
0.14.761.755 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.761.757 I llama_perf_context_print:        eval time =   13336.56 ms /    32 runs   (  416.77 ms per token,     2.40 tokens per second)
0.14.761.758 I llama_perf_context_print:       total time =   13419.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 3977 (8e154c3e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
0.00.024.953 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.169 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.276 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.277 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.282 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.283 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.285 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.286 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.287 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.289 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.300 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.301 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.302 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.303 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.859 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.662 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.170 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.180 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.181 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.182 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.183 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.186 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.190 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.191 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.192 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.192 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.194 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.203 I llama_model_loader: - type  f32:   37 tensors
0.00.266.207 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.060 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.327 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.360 I llm_load_vocab: special tokens cache size = 5
0.00.607.814 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.884 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.888 I llm_load_print_meta: arch             = gemma
0.00.607.889 I llm_load_print_meta: vocab type       = SPM
0.00.607.889 I llm_load_print_meta: n_vocab          = 256000
0.00.607.892 I llm_load_print_meta: n_merges         = 0
0.00.607.892 I llm_load_print_meta: vocab_only       = 0
0.00.607.892 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.893 I llm_load_print_meta: n_embd           = 2048
0.00.607.893 I llm_load_print_meta: n_layer          = 18
0.00.607.957 I llm_load_print_meta: n_head           = 8
0.00.607.966 I llm_load_print_meta: n_head_kv        = 1
0.00.607.967 I llm_load_print_meta: n_rot            = 256
0.00.607.969 I llm_load_print_meta: n_swa            = 0
0.00.607.969 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.969 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.974 I llm_load_print_meta: n_gqa            = 8
0.00.607.978 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.984 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.985 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.987 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.988 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.988 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.988 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.994 I llm_load_print_meta: n_ff             = 16384
0.00.607.994 I llm_load_print_meta: n_expert         = 0
0.00.607.997 I llm_load_print_meta: n_expert_used    = 0
0.00.607.998 I llm_load_print_meta: causal attn      = 1
0.00.607.998 I llm_load_print_meta: pooling type     = 0
0.00.607.999 I llm_load_print_meta: rope type        = 2
0.00.607.999 I llm_load_print_meta: rope scaling     = linear
0.00.608.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.001 I llm_load_print_meta: freq_scale_train = 1
0.00.608.002 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.002 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.002 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.002 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.003 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.003 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.003 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.004 I llm_load_print_meta: model type       = 2B
0.00.608.005 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.006 I llm_load_print_meta: model params     = 2.51 B
0.00.608.007 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.008 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.018 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.019 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.020 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.020 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.021 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.022 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.028 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.032 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.032 I llm_load_print_meta: max token length = 93
0.00.608.202 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.522 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.679.529 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.685.203 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.211 I llama_new_context_with_model: n_batch    = 2048
0.00.685.212 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.212 I llama_new_context_with_model: flash_attn = 0
0.00.685.215 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.216 I llama_new_context_with_model: freq_scale = 1
0.00.715.145 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.186 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.302 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.681 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.686 I llama_new_context_with_model: graph nodes  = 601
0.00.716.687 I llama_new_context_with_model: graph splits = 1
0.00.716.703 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.309 I main: llama threadpool init, n_threads = 4
0.01.326.322 I 
0.01.326.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.440 I 
0.01.326.636 I sampler seed: 2472125948
0.01.326.648 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.667 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.326.671 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.671 I 
 increably.

I am unable to understand the provided text. Could you please provide additional information or context for me to understand it? [end of text]


0.13.087.555 I llama_perf_sampler_print:    sampling time =      43.20 ms /    29 runs   (    1.49 ms per token,   671.36 tokens per second)
0.13.087.559 I llama_perf_context_print:        load time =    1323.41 ms
0.13.087.561 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.087.562 I llama_perf_context_print:        eval time =   11688.01 ms /    28 runs   (  417.43 ms per token,     2.40 tokens per second)
0.13.087.575 I llama_perf_context_print:       total time =   11761.26 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.457s
user	3m41.478s
sys	0m9.645s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3977 (8e154c3e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198421.84 ms
main:    total time = 198421.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3977 (8e154c3e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.002.757 I main: load the model and apply lora adapter, if any
0.00.024.810 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.028 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.121 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.133 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.139 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.144 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.145 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.147 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.157 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.158 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.159 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.160 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.833 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.800 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.112 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.122 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.124 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.125 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.126 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.127 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.128 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.131 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.132 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.133 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.134 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.135 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.144 I llama_model_loader: - type  f32:   37 tensors
0.00.266.150 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.150 I llama_model_loader: - type q6_K:   19 tensors
0.00.459.079 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.306 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.300 I llm_load_vocab: special tokens cache size = 5
0.00.629.138 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.216 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.217 I llm_load_print_meta: arch             = gemma
0.00.629.218 I llm_load_print_meta: vocab type       = SPM
0.00.629.219 I llm_load_print_meta: n_vocab          = 256000
0.00.629.221 I llm_load_print_meta: n_merges         = 0
0.00.629.222 I llm_load_print_meta: vocab_only       = 0
0.00.629.222 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.223 I llm_load_print_meta: n_embd           = 2048
0.00.629.223 I llm_load_print_meta: n_layer          = 18
0.00.629.320 I llm_load_print_meta: n_head           = 8
0.00.629.328 I llm_load_print_meta: n_head_kv        = 1
0.00.629.329 I llm_load_print_meta: n_rot            = 256
0.00.629.330 I llm_load_print_meta: n_swa            = 0
0.00.629.331 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.331 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.345 I llm_load_print_meta: n_gqa            = 8
0.00.629.350 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.356 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.357 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.359 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.359 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.360 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.368 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.374 I llm_load_print_meta: n_ff             = 16384
0.00.629.374 I llm_load_print_meta: n_expert         = 0
0.00.629.379 I llm_load_print_meta: n_expert_used    = 0
0.00.629.380 I llm_load_print_meta: causal attn      = 1
0.00.629.380 I llm_load_print_meta: pooling type     = 0
0.00.629.380 I llm_load_print_meta: rope type        = 2
0.00.629.381 I llm_load_print_meta: rope scaling     = linear
0.00.629.390 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.391 I llm_load_print_meta: freq_scale_train = 1
0.00.629.391 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.392 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.393 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.393 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.394 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.394 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.394 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.396 I llm_load_print_meta: model type       = 2B
0.00.629.397 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.629.398 I llm_load_print_meta: model params     = 2.51 B
0.00.629.399 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.629.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.401 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.401 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.402 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.407 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.416 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.420 I llm_load_print_meta: max token length = 93
0.00.629.598 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.689.627 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.689.640 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.689.640 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.689.641 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.689.642 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.689.642 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.695.304 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.311 I llama_new_context_with_model: n_batch    = 2048
0.00.695.311 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.312 I llama_new_context_with_model: flash_attn = 0
0.00.695.315 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.316 I llama_new_context_with_model: freq_scale = 1
0.00.726.286 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.726.327 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.726.445 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.917 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.922 I llama_new_context_with_model: graph nodes  = 601
0.00.727.923 I llama_new_context_with_model: graph splits = 1
0.00.727.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.491 I main: llama threadpool init, n_threads = 4
0.01.309.505 I 
0.01.309.616 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.619 I 
0.01.309.801 I sampler seed: 1866588782
0.01.309.813 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.821 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.309.822 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.823 I 
 seconded that is not resolved. 
**Steps to resolve the issue:**

**1. Identify the cause of the unresolved issue.**
- Review system

0.12.247.889 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.48 tokens per second)
0.12.247.893 I llama_perf_context_print:        load time =    1306.65 ms
0.12.247.894 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.247.910 I llama_perf_context_print:        eval time =   10855.66 ms /    32 runs   (  339.24 ms per token,     2.95 tokens per second)
0.12.247.911 I llama_perf_context_print:       total time =   10938.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3977 (8e154c3e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198397.09 ms
main:    total time = 198397.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3977 (8e154c3e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.822 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.010 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.026 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.027 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.033 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.035 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.036 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.037 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.039 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.040 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.046 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.048 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.049 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.050 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.051 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.861 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.806 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.192 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.204 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.205 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.206 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.207 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.208 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.209 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.225 I llama_model_loader: - type  f32:   37 tensors
0.00.266.230 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.231 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.996 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.117 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.113 I llm_load_vocab: special tokens cache size = 5
0.00.617.128 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.208 I llm_load_print_meta: arch             = gemma
0.00.617.209 I llm_load_print_meta: vocab type       = SPM
0.00.617.209 I llm_load_print_meta: n_vocab          = 256000
0.00.617.212 I llm_load_print_meta: n_merges         = 0
0.00.617.212 I llm_load_print_meta: vocab_only       = 0
0.00.617.213 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.213 I llm_load_print_meta: n_embd           = 2048
0.00.617.213 I llm_load_print_meta: n_layer          = 18
0.00.617.279 I llm_load_print_meta: n_head           = 8
0.00.617.289 I llm_load_print_meta: n_head_kv        = 1
0.00.617.289 I llm_load_print_meta: n_rot            = 256
0.00.617.290 I llm_load_print_meta: n_swa            = 0
0.00.617.290 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.290 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.295 I llm_load_print_meta: n_gqa            = 8
0.00.617.300 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.305 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.306 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.308 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.308 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.308 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.309 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.315 I llm_load_print_meta: n_ff             = 16384
0.00.617.315 I llm_load_print_meta: n_expert         = 0
0.00.617.316 I llm_load_print_meta: n_expert_used    = 0
0.00.617.316 I llm_load_print_meta: causal attn      = 1
0.00.617.317 I llm_load_print_meta: pooling type     = 0
0.00.617.318 I llm_load_print_meta: rope type        = 2
0.00.617.319 I llm_load_print_meta: rope scaling     = linear
0.00.617.323 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.323 I llm_load_print_meta: freq_scale_train = 1
0.00.617.324 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.324 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.324 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.325 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.325 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.325 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.325 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.326 I llm_load_print_meta: model type       = 2B
0.00.617.327 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.327 I llm_load_print_meta: model params     = 2.51 B
0.00.617.328 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.329 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.330 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.330 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.330 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.331 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.332 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.332 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.338 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.340 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.340 I llm_load_print_meta: max token length = 93
0.00.617.509 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.906 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.680.516 I llama_new_context_with_model: n_ctx      = 8192
0.00.680.523 I llama_new_context_with_model: n_batch    = 2048
0.00.680.524 I llama_new_context_with_model: n_ubatch   = 512
0.00.680.524 I llama_new_context_with_model: flash_attn = 0
0.00.680.528 I llama_new_context_with_model: freq_base  = 10000.0
0.00.680.528 I llama_new_context_with_model: freq_scale = 1
0.00.710.699 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.744 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.859 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.215 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.219 I llama_new_context_with_model: graph nodes  = 601
0.00.712.220 I llama_new_context_with_model: graph splits = 1
0.00.712.236 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.327 I main: llama threadpool init, n_threads = 4
0.01.294.341 I 
0.01.294.448 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.452 I 
0.01.294.635 I sampler seed: 1589199597
0.01.294.647 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.654 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.294.654 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.655 I 
 seconded.  It is a common misspelling of the word "discussed".

The correct spelling is "discussed". [end of text]


0.09.877.368 I llama_perf_sampler_print:    sampling time =      41.44 ms /    26 runs   (    1.59 ms per token,   627.49 tokens per second)
0.09.877.371 I llama_perf_context_print:        load time =    1291.44 ms
0.09.877.373 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.877.374 I llama_perf_context_print:        eval time =    8515.82 ms /    25 runs   (  340.63 ms per token,     2.94 tokens per second)
0.09.877.375 I llama_perf_context_print:       total time =    8583.05 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.949s
user	49m58.629s
sys	0m6.458s
