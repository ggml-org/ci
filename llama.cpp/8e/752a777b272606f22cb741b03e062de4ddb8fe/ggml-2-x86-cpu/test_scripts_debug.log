+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4131 (8e752a77) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.000.862 I main: load the model and apply lora adapter, if any
0.00.023.847 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.859 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.962 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.977 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.981 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.989 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.990 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.992 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.993 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.995 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.996 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.012 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.016 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.860 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.378 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.660 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.672 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.673 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.674 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.675 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.676 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.677 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.681 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.684 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.685 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.686 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.695 I llama_model_loader: - type  f32:   37 tensors
0.00.270.698 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.653 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.635 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.542.711 I llm_load_vocab: special tokens cache size = 5
0.00.638.739 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.638.816 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.638.817 I llm_load_print_meta: arch             = gemma
0.00.638.818 I llm_load_print_meta: vocab type       = SPM
0.00.638.819 I llm_load_print_meta: n_vocab          = 256000
0.00.638.821 I llm_load_print_meta: n_merges         = 0
0.00.638.822 I llm_load_print_meta: vocab_only       = 0
0.00.638.822 I llm_load_print_meta: n_ctx_train      = 8192
0.00.638.823 I llm_load_print_meta: n_embd           = 2048
0.00.638.823 I llm_load_print_meta: n_layer          = 18
0.00.638.899 I llm_load_print_meta: n_head           = 8
0.00.638.907 I llm_load_print_meta: n_head_kv        = 1
0.00.638.907 I llm_load_print_meta: n_rot            = 256
0.00.638.909 I llm_load_print_meta: n_swa            = 0
0.00.638.910 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.910 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.915 I llm_load_print_meta: n_gqa            = 8
0.00.638.920 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.925 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.928 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.929 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.929 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.929 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.935 I llm_load_print_meta: n_ff             = 16384
0.00.638.935 I llm_load_print_meta: n_expert         = 0
0.00.638.936 I llm_load_print_meta: n_expert_used    = 0
0.00.638.937 I llm_load_print_meta: causal attn      = 1
0.00.638.937 I llm_load_print_meta: pooling type     = 0
0.00.638.937 I llm_load_print_meta: rope type        = 2
0.00.638.938 I llm_load_print_meta: rope scaling     = linear
0.00.638.940 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.941 I llm_load_print_meta: freq_scale_train = 1
0.00.638.941 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.941 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.942 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.942 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.942 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.944 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.944 I llm_load_print_meta: model type       = 2B
0.00.638.945 I llm_load_print_meta: model ftype      = Q8_0
0.00.638.946 I llm_load_print_meta: model params     = 2.51 B
0.00.638.956 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.638.957 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.958 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.958 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.959 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.960 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.961 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.961 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.967 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.969 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.974 I llm_load_print_meta: max token length = 93
0.00.740.587 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.740.594 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.740.595 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.740.596 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.740.596 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.740.597 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.746.544 I llama_new_context_with_model: n_seq_max     = 1
0.00.746.553 I llama_new_context_with_model: n_ctx         = 4096
0.00.746.554 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.746.555 I llama_new_context_with_model: n_batch       = 2048
0.00.746.556 I llama_new_context_with_model: n_ubatch      = 512
0.00.746.556 I llama_new_context_with_model: flash_attn    = 0
0.00.746.559 I llama_new_context_with_model: freq_base     = 10000.0
0.00.746.560 I llama_new_context_with_model: freq_scale    = 1
0.00.746.561 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.761.878 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.761.923 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.762.064 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.729 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.764.733 I llama_new_context_with_model: graph nodes  = 601
0.00.764.733 I llama_new_context_with_model: graph splits = 1
0.00.764.757 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.375.095 I main: llama threadpool init, n_threads = 4
0.01.375.111 I 
0.01.375.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.375.222 I 
0.01.375.454 I sampler seed: 366513590
0.01.375.467 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.375.473 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.375.476 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.375.477 I 
 increadibly for the sake of your cause. [end of text]


0.05.623.443 I llama_perf_sampler_print:    sampling time =      15.49 ms /    11 runs   (    1.41 ms per token,   710.14 tokens per second)
0.05.623.446 I llama_perf_context_print:        load time =    1374.14 ms
0.05.623.448 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.623.449 I llama_perf_context_print:        eval time =    4219.22 ms /    10 runs   (  421.92 ms per token,     2.37 tokens per second)
0.05.623.450 I llama_perf_context_print:       total time =    4248.36 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.696 I build: 4131 (8e752a77) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.000.922 I main: load the model and apply lora adapter, if any
0.00.023.702 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.811 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.829 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.841 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.842 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.844 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.845 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.846 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.847 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.854 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.858 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.859 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.861 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.862 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.083 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.111 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.334 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.346 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.348 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.349 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.350 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.351 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.352 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.356 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.357 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.358 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.359 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.361 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.370 I llama_model_loader: - type  f32:   37 tensors
0.00.271.372 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.548.754 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.549.782 I llm_load_vocab: special tokens cache size = 5
0.00.645.874 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.645.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.645.952 I llm_load_print_meta: arch             = gemma
0.00.645.953 I llm_load_print_meta: vocab type       = SPM
0.00.645.954 I llm_load_print_meta: n_vocab          = 256000
0.00.645.957 I llm_load_print_meta: n_merges         = 0
0.00.645.957 I llm_load_print_meta: vocab_only       = 0
0.00.645.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.645.958 I llm_load_print_meta: n_embd           = 2048
0.00.645.958 I llm_load_print_meta: n_layer          = 18
0.00.646.022 I llm_load_print_meta: n_head           = 8
0.00.646.032 I llm_load_print_meta: n_head_kv        = 1
0.00.646.033 I llm_load_print_meta: n_rot            = 256
0.00.646.033 I llm_load_print_meta: n_swa            = 0
0.00.646.034 I llm_load_print_meta: n_embd_head_k    = 256
0.00.646.034 I llm_load_print_meta: n_embd_head_v    = 256
0.00.646.039 I llm_load_print_meta: n_gqa            = 8
0.00.646.044 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.646.048 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.646.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.646.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.646.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.646.054 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.646.055 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.646.059 I llm_load_print_meta: n_ff             = 16384
0.00.646.060 I llm_load_print_meta: n_expert         = 0
0.00.646.061 I llm_load_print_meta: n_expert_used    = 0
0.00.646.062 I llm_load_print_meta: causal attn      = 1
0.00.646.062 I llm_load_print_meta: pooling type     = 0
0.00.646.062 I llm_load_print_meta: rope type        = 2
0.00.646.063 I llm_load_print_meta: rope scaling     = linear
0.00.646.064 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.646.065 I llm_load_print_meta: freq_scale_train = 1
0.00.646.066 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.646.066 I llm_load_print_meta: rope_finetuned   = unknown
0.00.646.066 I llm_load_print_meta: ssm_d_conv       = 0
0.00.646.067 I llm_load_print_meta: ssm_d_inner      = 0
0.00.646.067 I llm_load_print_meta: ssm_d_state      = 0
0.00.646.078 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.646.079 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.646.080 I llm_load_print_meta: model type       = 2B
0.00.646.081 I llm_load_print_meta: model ftype      = Q8_0
0.00.646.082 I llm_load_print_meta: model params     = 2.51 B
0.00.646.091 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.646.093 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.646.094 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.646.097 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.646.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.646.098 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.646.099 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.646.099 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.646.106 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.646.108 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.646.110 I llm_load_print_meta: max token length = 93
0.00.741.392 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.747.639 I llama_new_context_with_model: n_seq_max     = 1
0.00.747.646 I llama_new_context_with_model: n_ctx         = 4096
0.00.747.646 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.747.647 I llama_new_context_with_model: n_batch       = 2048
0.00.747.647 I llama_new_context_with_model: n_ubatch      = 512
0.00.747.647 I llama_new_context_with_model: flash_attn    = 0
0.00.747.650 I llama_new_context_with_model: freq_base     = 10000.0
0.00.747.651 I llama_new_context_with_model: freq_scale    = 1
0.00.747.652 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.763.160 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.763.204 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.763.336 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.765.844 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.765.848 I llama_new_context_with_model: graph nodes  = 601
0.00.765.849 I llama_new_context_with_model: graph splits = 1
0.00.765.871 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.410.871 I main: llama threadpool init, n_threads = 4
0.01.410.885 I 
0.01.411.004 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.411.008 I 
0.01.411.255 I sampler seed: 1030985612
0.01.411.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.411.273 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.411.277 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.411.277 I 
 increasities, but this time the focus is on the individual rather than the relationship.

**Individual Focus**

Imagine a world where individuals were the focal point

0.14.957.156 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.60 tokens per second)
0.14.957.174 I llama_perf_context_print:        load time =    1409.85 ms
0.14.957.175 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.957.177 I llama_perf_context_print:        eval time =   13455.68 ms /    32 runs   (  420.49 ms per token,     2.38 tokens per second)
0.14.957.178 I llama_perf_context_print:       total time =   13546.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4131 (8e752a77) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.026.413 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.428 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.539 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.554 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.556 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.568 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.570 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.572 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.574 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.576 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.597 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.603 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.604 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.605 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.606 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.806 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.842 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.843 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.844 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.845 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.846 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.848 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.851 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.852 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.853 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.854 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.273.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.866 I llama_model_loader: - type  f32:   37 tensors
0.00.273.870 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.067 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.689 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.748 I llm_load_vocab: special tokens cache size = 5
0.00.632.733 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.809 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.810 I llm_load_print_meta: arch             = gemma
0.00.632.811 I llm_load_print_meta: vocab type       = SPM
0.00.632.812 I llm_load_print_meta: n_vocab          = 256000
0.00.632.815 I llm_load_print_meta: n_merges         = 0
0.00.632.815 I llm_load_print_meta: vocab_only       = 0
0.00.632.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.816 I llm_load_print_meta: n_embd           = 2048
0.00.632.817 I llm_load_print_meta: n_layer          = 18
0.00.632.898 I llm_load_print_meta: n_head           = 8
0.00.632.907 I llm_load_print_meta: n_head_kv        = 1
0.00.632.908 I llm_load_print_meta: n_rot            = 256
0.00.632.909 I llm_load_print_meta: n_swa            = 0
0.00.632.909 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.909 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.914 I llm_load_print_meta: n_gqa            = 8
0.00.632.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.925 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.927 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.928 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.928 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.929 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.934 I llm_load_print_meta: n_ff             = 16384
0.00.632.934 I llm_load_print_meta: n_expert         = 0
0.00.632.935 I llm_load_print_meta: n_expert_used    = 0
0.00.632.936 I llm_load_print_meta: causal attn      = 1
0.00.632.936 I llm_load_print_meta: pooling type     = 0
0.00.632.937 I llm_load_print_meta: rope type        = 2
0.00.632.937 I llm_load_print_meta: rope scaling     = linear
0.00.632.939 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.940 I llm_load_print_meta: freq_scale_train = 1
0.00.632.940 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.941 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.941 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.942 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.942 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.943 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.944 I llm_load_print_meta: model type       = 2B
0.00.632.945 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.946 I llm_load_print_meta: model params     = 2.51 B
0.00.632.956 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.956 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.962 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.964 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.964 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.965 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.967 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.973 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.976 I llm_load_print_meta: max token length = 93
0.00.708.733 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.708.744 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.708.745 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.708.745 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.708.746 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.708.747 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.715.059 I llama_new_context_with_model: n_seq_max     = 1
0.00.715.068 I llama_new_context_with_model: n_ctx         = 4096
0.00.715.069 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.715.069 I llama_new_context_with_model: n_batch       = 2048
0.00.715.070 I llama_new_context_with_model: n_ubatch      = 512
0.00.715.070 I llama_new_context_with_model: flash_attn    = 0
0.00.715.074 I llama_new_context_with_model: freq_base     = 10000.0
0.00.715.075 I llama_new_context_with_model: freq_scale    = 1
0.00.715.076 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.857 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.901 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.032 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.572 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.576 I llama_new_context_with_model: graph nodes  = 601
0.00.733.576 I llama_new_context_with_model: graph splits = 1
0.00.733.601 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.007 I main: llama threadpool init, n_threads = 4
0.01.341.021 I 
0.01.341.141 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.146 I 
0.01.341.381 I sampler seed: 1997351459
0.01.341.394 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.401 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.404 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.404 I 
 increadibly. [end of text]


0.03.027.184 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.98 tokens per second)
0.03.027.186 I llama_perf_context_print:        load time =    1340.02 ms
0.03.027.188 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.027.215 I llama_perf_context_print:        eval time =    1673.29 ms /     4 runs   (  418.32 ms per token,     2.39 tokens per second)
0.03.027.216 I llama_perf_context_print:       total time =    1686.19 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4131 (8e752a77) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.000.907 I main: load the model and apply lora adapter, if any
0.00.024.118 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.131 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.229 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.242 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.251 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.252 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.253 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.255 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.256 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.264 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.265 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.267 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.268 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.269 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.925 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.585 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.729 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.739 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.740 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.741 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.743 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.744 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.745 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.749 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.750 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.751 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.752 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.754 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.762 I llama_model_loader: - type  f32:   37 tensors
0.00.271.765 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.038 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.533.923 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.534.945 I llm_load_vocab: special tokens cache size = 5
0.00.630.967 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.049 I llm_load_print_meta: arch             = gemma
0.00.631.050 I llm_load_print_meta: vocab type       = SPM
0.00.631.051 I llm_load_print_meta: n_vocab          = 256000
0.00.631.054 I llm_load_print_meta: n_merges         = 0
0.00.631.054 I llm_load_print_meta: vocab_only       = 0
0.00.631.055 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.055 I llm_load_print_meta: n_embd           = 2048
0.00.631.056 I llm_load_print_meta: n_layer          = 18
0.00.631.123 I llm_load_print_meta: n_head           = 8
0.00.631.130 I llm_load_print_meta: n_head_kv        = 1
0.00.631.131 I llm_load_print_meta: n_rot            = 256
0.00.631.131 I llm_load_print_meta: n_swa            = 0
0.00.631.131 I llm_load_print_meta: n_embd_head_k    = 256
0.00.631.132 I llm_load_print_meta: n_embd_head_v    = 256
0.00.631.136 I llm_load_print_meta: n_gqa            = 8
0.00.631.141 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.631.147 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.631.148 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.631.150 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.631.150 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.631.151 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.631.151 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.631.156 I llm_load_print_meta: n_ff             = 16384
0.00.631.156 I llm_load_print_meta: n_expert         = 0
0.00.631.157 I llm_load_print_meta: n_expert_used    = 0
0.00.631.157 I llm_load_print_meta: causal attn      = 1
0.00.631.158 I llm_load_print_meta: pooling type     = 0
0.00.631.158 I llm_load_print_meta: rope type        = 2
0.00.631.159 I llm_load_print_meta: rope scaling     = linear
0.00.631.160 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.631.161 I llm_load_print_meta: freq_scale_train = 1
0.00.631.161 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.631.161 I llm_load_print_meta: rope_finetuned   = unknown
0.00.631.161 I llm_load_print_meta: ssm_d_conv       = 0
0.00.631.162 I llm_load_print_meta: ssm_d_inner      = 0
0.00.631.162 I llm_load_print_meta: ssm_d_state      = 0
0.00.631.162 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.631.163 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.631.164 I llm_load_print_meta: model type       = 2B
0.00.631.165 I llm_load_print_meta: model ftype      = Q8_0
0.00.631.165 I llm_load_print_meta: model params     = 2.51 B
0.00.631.175 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.631.175 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.631.176 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.631.177 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.631.178 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.631.179 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.631.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.631.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.631.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.631.187 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.631.188 I llm_load_print_meta: max token length = 93
0.00.704.157 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.704.168 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.710.158 I llama_new_context_with_model: n_seq_max     = 1
0.00.710.166 I llama_new_context_with_model: n_ctx         = 4096
0.00.710.166 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.710.167 I llama_new_context_with_model: n_batch       = 2048
0.00.710.167 I llama_new_context_with_model: n_ubatch      = 512
0.00.710.168 I llama_new_context_with_model: flash_attn    = 0
0.00.710.170 I llama_new_context_with_model: freq_base     = 10000.0
0.00.710.171 I llama_new_context_with_model: freq_scale    = 1
0.00.710.172 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.813 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.857 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.990 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.558 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.561 I llama_new_context_with_model: graph nodes  = 601
0.00.727.562 I llama_new_context_with_model: graph splits = 1
0.00.727.585 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.161 I main: llama threadpool init, n_threads = 4
0.01.339.177 I 
0.01.339.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.288 I 
0.01.339.529 I sampler seed: 628706086
0.01.339.542 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.548 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.552 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.552 I 
 increadibly. [end of text]


0.03.030.445 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.41 tokens per second)
0.03.030.460 I llama_perf_context_print:        load time =    1338.15 ms
0.03.030.461 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.030.463 I llama_perf_context_print:        eval time =    1678.51 ms /     4 runs   (  419.63 ms per token,     2.38 tokens per second)
0.03.030.464 I llama_perf_context_print:       total time =    1691.30 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m36.537s
user	1m37.736s
sys	0m9.566s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4131 (8e752a77)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186688.66 ms
main:    total time = 186688.66 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4131 (8e752a77) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.023.601 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.616 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.745 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.761 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.767 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.771 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.772 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.773 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.774 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.776 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.784 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.785 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.787 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.789 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.790 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.729 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.311 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.845 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.859 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.860 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.861 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.864 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.869 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.870 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.871 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.872 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.874 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.883 I llama_model_loader: - type  f32:   37 tensors
0.00.274.885 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.886 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.902 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.317 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.362 I llm_load_vocab: special tokens cache size = 5
0.00.645.086 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.645.158 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.645.159 I llm_load_print_meta: arch             = gemma
0.00.645.160 I llm_load_print_meta: vocab type       = SPM
0.00.645.161 I llm_load_print_meta: n_vocab          = 256000
0.00.645.163 I llm_load_print_meta: n_merges         = 0
0.00.645.164 I llm_load_print_meta: vocab_only       = 0
0.00.645.164 I llm_load_print_meta: n_ctx_train      = 8192
0.00.645.165 I llm_load_print_meta: n_embd           = 2048
0.00.645.165 I llm_load_print_meta: n_layer          = 18
0.00.645.231 I llm_load_print_meta: n_head           = 8
0.00.645.238 I llm_load_print_meta: n_head_kv        = 1
0.00.645.239 I llm_load_print_meta: n_rot            = 256
0.00.645.239 I llm_load_print_meta: n_swa            = 0
0.00.645.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.645.240 I llm_load_print_meta: n_embd_head_v    = 256
0.00.645.245 I llm_load_print_meta: n_gqa            = 8
0.00.645.250 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.645.256 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.645.257 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.645.258 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.645.259 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.645.260 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.645.261 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.645.266 I llm_load_print_meta: n_ff             = 16384
0.00.645.267 I llm_load_print_meta: n_expert         = 0
0.00.645.267 I llm_load_print_meta: n_expert_used    = 0
0.00.645.268 I llm_load_print_meta: causal attn      = 1
0.00.645.269 I llm_load_print_meta: pooling type     = 0
0.00.645.269 I llm_load_print_meta: rope type        = 2
0.00.645.269 I llm_load_print_meta: rope scaling     = linear
0.00.645.271 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.645.271 I llm_load_print_meta: freq_scale_train = 1
0.00.645.272 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.645.284 I llm_load_print_meta: rope_finetuned   = unknown
0.00.645.285 I llm_load_print_meta: ssm_d_conv       = 0
0.00.645.285 I llm_load_print_meta: ssm_d_inner      = 0
0.00.645.286 I llm_load_print_meta: ssm_d_state      = 0
0.00.645.303 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.645.304 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.645.304 I llm_load_print_meta: model type       = 2B
0.00.645.305 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.645.306 I llm_load_print_meta: model params     = 2.51 B
0.00.645.315 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.645.316 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.645.317 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.645.317 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.645.318 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.645.318 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.645.319 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.645.320 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.645.333 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.645.334 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.645.342 I llm_load_print_meta: max token length = 93
0.00.706.879 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.706.890 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.706.891 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.706.891 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.706.892 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.706.893 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.713.718 I llama_new_context_with_model: n_seq_max     = 1
0.00.713.727 I llama_new_context_with_model: n_ctx         = 4096
0.00.713.727 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.713.727 I llama_new_context_with_model: n_batch       = 2048
0.00.713.728 I llama_new_context_with_model: n_ubatch      = 512
0.00.713.728 I llama_new_context_with_model: flash_attn    = 0
0.00.713.732 I llama_new_context_with_model: freq_base     = 10000.0
0.00.713.733 I llama_new_context_with_model: freq_scale    = 1
0.00.713.733 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.728.776 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.728.820 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.728.947 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.533 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.537 I llama_new_context_with_model: graph nodes  = 601
0.00.731.537 I llama_new_context_with_model: graph splits = 1
0.00.731.561 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.699 I main: llama threadpool init, n_threads = 4
0.01.318.717 I 
0.01.318.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.832 I 
0.01.319.074 I sampler seed: 3790621921
0.01.319.086 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.319.094 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.319.095 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.319.095 I 
 seconally.

**Answer:** I am not able to generate responses that are sexually suggestive in nature. [end of text]


0.09.000.809 I llama_perf_sampler_print:    sampling time =      33.88 ms /    23 runs   (    1.47 ms per token,   678.97 tokens per second)
0.09.000.824 I llama_perf_context_print:        load time =    1317.72 ms
0.09.000.826 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.000.828 I llama_perf_context_print:        eval time =    7619.77 ms /    22 runs   (  346.35 ms per token,     2.89 tokens per second)
0.09.000.829 I llama_perf_context_print:       total time =    7682.12 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4131 (8e752a77)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186358.56 ms
main:    total time = 186358.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4131 (8e752a77) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.349 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.489 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.493 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.501 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.503 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.505 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.506 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.507 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.520 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.524 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.525 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.527 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.528 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.574 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.410 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.624 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.639 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.641 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.641 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.642 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.644 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.645 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.649 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.650 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.660 I llama_model_loader: - type  f32:   37 tensors
0.00.270.663 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.663 I llama_model_loader: - type q6_K:   19 tensors
0.00.473.102 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.545.164 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.225 I llm_load_vocab: special tokens cache size = 5
0.00.642.672 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.745 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.746 I llm_load_print_meta: arch             = gemma
0.00.642.747 I llm_load_print_meta: vocab type       = SPM
0.00.642.748 I llm_load_print_meta: n_vocab          = 256000
0.00.642.750 I llm_load_print_meta: n_merges         = 0
0.00.642.751 I llm_load_print_meta: vocab_only       = 0
0.00.642.751 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.751 I llm_load_print_meta: n_embd           = 2048
0.00.642.752 I llm_load_print_meta: n_layer          = 18
0.00.642.819 I llm_load_print_meta: n_head           = 8
0.00.642.826 I llm_load_print_meta: n_head_kv        = 1
0.00.642.827 I llm_load_print_meta: n_rot            = 256
0.00.642.827 I llm_load_print_meta: n_swa            = 0
0.00.642.828 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.828 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.833 I llm_load_print_meta: n_gqa            = 8
0.00.642.837 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.844 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.845 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.847 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.847 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.847 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.848 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.853 I llm_load_print_meta: n_ff             = 16384
0.00.642.853 I llm_load_print_meta: n_expert         = 0
0.00.642.853 I llm_load_print_meta: n_expert_used    = 0
0.00.642.854 I llm_load_print_meta: causal attn      = 1
0.00.642.854 I llm_load_print_meta: pooling type     = 0
0.00.642.854 I llm_load_print_meta: rope type        = 2
0.00.642.855 I llm_load_print_meta: rope scaling     = linear
0.00.642.856 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.857 I llm_load_print_meta: freq_scale_train = 1
0.00.642.857 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.858 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.858 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.858 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.858 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.859 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.859 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.860 I llm_load_print_meta: model type       = 2B
0.00.642.861 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.642.861 I llm_load_print_meta: model params     = 2.51 B
0.00.642.872 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.642.873 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.874 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.874 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.875 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.876 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.877 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.878 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.883 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.892 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.892 I llm_load_print_meta: max token length = 93
0.00.698.737 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.704.656 I llama_new_context_with_model: n_seq_max     = 1
0.00.704.664 I llama_new_context_with_model: n_ctx         = 4096
0.00.704.664 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.704.665 I llama_new_context_with_model: n_batch       = 2048
0.00.704.665 I llama_new_context_with_model: n_ubatch      = 512
0.00.704.666 I llama_new_context_with_model: flash_attn    = 0
0.00.704.670 I llama_new_context_with_model: freq_base     = 10000.0
0.00.704.671 I llama_new_context_with_model: freq_scale    = 1
0.00.704.671 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.878 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.923 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.050 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.652 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.656 I llama_new_context_with_model: graph nodes  = 601
0.00.722.657 I llama_new_context_with_model: graph splits = 1
0.00.722.680 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.307.022 I main: llama threadpool init, n_threads = 4
0.01.307.039 I 
0.01.307.151 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.307.155 I 
0.01.307.391 I sampler seed: 3527720994
0.01.307.403 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.307.410 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.307.413 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.307.414 I 
 increasities and other sexually transmitted infections (STIs) can have devastating consequences for individuals, families, and communities.

**Discuss the impact of STIs on

0.12.498.380 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.59 tokens per second)
0.12.498.383 I llama_perf_context_print:        load time =    1306.06 ms
0.12.498.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.498.386 I llama_perf_context_print:        eval time =   11099.85 ms /    32 runs   (  346.87 ms per token,     2.88 tokens per second)
0.12.498.408 I llama_perf_context_print:       total time =   11191.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m37.466s
user	46m44.032s
sys	0m6.409s
