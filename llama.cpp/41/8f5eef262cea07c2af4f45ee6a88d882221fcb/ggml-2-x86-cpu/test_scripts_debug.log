+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4009 (418f5eef) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.025.666 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.677 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.768 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.780 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.781 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.785 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.789 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.790 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.791 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.792 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.793 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.800 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.801 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.802 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.805 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.059 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.507 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.879 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.887 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.888 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.889 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.890 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.892 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.894 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.898 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.899 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.900 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.901 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.910 I llama_model_loader: - type  f32:   37 tensors
0.00.265.913 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.891 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.748 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.680 I llm_load_vocab: special tokens cache size = 5
0.00.624.506 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.579 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.580 I llm_load_print_meta: arch             = gemma
0.00.624.580 I llm_load_print_meta: vocab type       = SPM
0.00.624.581 I llm_load_print_meta: n_vocab          = 256000
0.00.624.583 I llm_load_print_meta: n_merges         = 0
0.00.624.584 I llm_load_print_meta: vocab_only       = 0
0.00.624.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.593 I llm_load_print_meta: n_embd           = 2048
0.00.624.594 I llm_load_print_meta: n_layer          = 18
0.00.624.658 I llm_load_print_meta: n_head           = 8
0.00.624.665 I llm_load_print_meta: n_head_kv        = 1
0.00.624.666 I llm_load_print_meta: n_rot            = 256
0.00.624.666 I llm_load_print_meta: n_swa            = 0
0.00.624.668 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.669 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.674 I llm_load_print_meta: n_gqa            = 8
0.00.624.679 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.685 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.686 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.693 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.693 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.718 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.721 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.727 I llm_load_print_meta: n_ff             = 16384
0.00.624.728 I llm_load_print_meta: n_expert         = 0
0.00.624.728 I llm_load_print_meta: n_expert_used    = 0
0.00.624.736 I llm_load_print_meta: causal attn      = 1
0.00.624.745 I llm_load_print_meta: pooling type     = 0
0.00.624.746 I llm_load_print_meta: rope type        = 2
0.00.624.747 I llm_load_print_meta: rope scaling     = linear
0.00.624.748 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.749 I llm_load_print_meta: freq_scale_train = 1
0.00.624.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.752 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.752 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.753 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.753 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.753 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.754 I llm_load_print_meta: model type       = 2B
0.00.624.755 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.756 I llm_load_print_meta: model params     = 2.51 B
0.00.624.757 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.757 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.758 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.758 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.766 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.767 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.768 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.775 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.776 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.777 I llm_load_print_meta: max token length = 93
0.00.728.061 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.728.073 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.728.074 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.728.074 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.728.075 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.728.075 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.734.021 I llama_new_context_with_model: n_ctx      = 8192
0.00.734.029 I llama_new_context_with_model: n_batch    = 2048
0.00.734.030 I llama_new_context_with_model: n_ubatch   = 512
0.00.734.031 I llama_new_context_with_model: flash_attn = 0
0.00.734.035 I llama_new_context_with_model: freq_base  = 10000.0
0.00.734.036 I llama_new_context_with_model: freq_scale = 1
0.00.765.435 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.765.473 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.765.599 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.768.145 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.768.150 I llama_new_context_with_model: graph nodes  = 601
0.00.768.150 I llama_new_context_with_model: graph splits = 1
0.00.768.168 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.382.393 I main: llama threadpool init, n_threads = 4
0.01.382.408 I 
0.01.382.518 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.382.522 I 
0.01.382.767 I sampler seed: 767467545
0.01.382.780 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.382.786 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.382.788 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.382.788 I 
 increasities with a high degree of accuracy and efficiency. [end of text]


0.06.473.364 I llama_perf_sampler_print:    sampling time =      18.02 ms /    13 runs   (    1.39 ms per token,   721.42 tokens per second)
0.06.473.367 I llama_perf_context_print:        load time =    1379.50 ms
0.06.473.369 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.473.370 I llama_perf_context_print:        eval time =    5054.67 ms /    12 runs   (  421.22 ms per token,     2.37 tokens per second)
0.06.473.394 I llama_perf_context_print:       total time =    5090.98 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4009 (418f5eef) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.025.744 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.852 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.875 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.886 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.888 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.903 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.908 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.910 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.921 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.925 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.927 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.929 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.931 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.601 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.878 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.254 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.261 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.262 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.263 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.264 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.266 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.267 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.270 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.271 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.272 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.273 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.274 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.282 I llama_model_loader: - type  f32:   37 tensors
0.00.267.285 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.062 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.616 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.606 I llm_load_vocab: special tokens cache size = 5
0.00.596.255 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.327 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.328 I llm_load_print_meta: arch             = gemma
0.00.596.329 I llm_load_print_meta: vocab type       = SPM
0.00.596.330 I llm_load_print_meta: n_vocab          = 256000
0.00.596.332 I llm_load_print_meta: n_merges         = 0
0.00.596.333 I llm_load_print_meta: vocab_only       = 0
0.00.596.334 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.342 I llm_load_print_meta: n_embd           = 2048
0.00.596.342 I llm_load_print_meta: n_layer          = 18
0.00.596.407 I llm_load_print_meta: n_head           = 8
0.00.596.414 I llm_load_print_meta: n_head_kv        = 1
0.00.596.415 I llm_load_print_meta: n_rot            = 256
0.00.596.415 I llm_load_print_meta: n_swa            = 0
0.00.596.416 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.416 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.423 I llm_load_print_meta: n_gqa            = 8
0.00.596.431 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.440 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.442 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.444 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.445 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.458 I llm_load_print_meta: n_ff             = 16384
0.00.596.462 I llm_load_print_meta: n_expert         = 0
0.00.596.463 I llm_load_print_meta: n_expert_used    = 0
0.00.596.464 I llm_load_print_meta: causal attn      = 1
0.00.596.464 I llm_load_print_meta: pooling type     = 0
0.00.596.465 I llm_load_print_meta: rope type        = 2
0.00.596.466 I llm_load_print_meta: rope scaling     = linear
0.00.596.468 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.469 I llm_load_print_meta: freq_scale_train = 1
0.00.596.470 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.471 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.471 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.472 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.472 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.473 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.473 I llm_load_print_meta: model type       = 2B
0.00.596.475 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.476 I llm_load_print_meta: model params     = 2.51 B
0.00.596.478 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.480 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.481 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.483 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.484 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.484 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.491 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.493 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.494 I llm_load_print_meta: max token length = 93
0.00.696.427 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.702.634 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.642 I llama_new_context_with_model: n_batch    = 2048
0.00.702.643 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.643 I llama_new_context_with_model: flash_attn = 0
0.00.702.646 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.647 I llama_new_context_with_model: freq_scale = 1
0.00.733.840 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.880 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.001 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.527 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.531 I llama_new_context_with_model: graph nodes  = 601
0.00.736.532 I llama_new_context_with_model: graph splits = 1
0.00.736.549 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.255 I main: llama threadpool init, n_threads = 4
0.01.347.266 I 
0.01.347.388 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.392 I 
0.01.347.627 I sampler seed: 1988267428
0.01.347.640 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.649 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.650 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.651 I 
 increasities, but only for a limited time. [end of text]


0.05.991.295 I llama_perf_sampler_print:    sampling time =      16.63 ms /    12 runs   (    1.39 ms per token,   721.50 tokens per second)
0.05.991.298 I llama_perf_context_print:        load time =    1344.35 ms
0.05.991.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.991.313 I llama_perf_context_print:        eval time =    4610.57 ms /    11 runs   (  419.14 ms per token,     2.39 tokens per second)
0.05.991.314 I llama_perf_context_print:       total time =    4644.05 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 4009 (418f5eef) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.025.336 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.346 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.454 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.466 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.468 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.474 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.478 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.479 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.481 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.483 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.486 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.496 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.504 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.506 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.507 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.512 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.837 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.373 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.859 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.870 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.871 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.872 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.873 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.874 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.876 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.880 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.881 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.882 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.882 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.275.883 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.893 I llama_model_loader: - type  f32:   37 tensors
0.00.275.895 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.282 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.196 I llm_load_vocab: special tokens cache size = 5
0.00.626.388 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.459 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.459 I llm_load_print_meta: arch             = gemma
0.00.626.460 I llm_load_print_meta: vocab type       = SPM
0.00.626.461 I llm_load_print_meta: n_vocab          = 256000
0.00.626.463 I llm_load_print_meta: n_merges         = 0
0.00.626.464 I llm_load_print_meta: vocab_only       = 0
0.00.626.464 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.474 I llm_load_print_meta: n_embd           = 2048
0.00.626.474 I llm_load_print_meta: n_layer          = 18
0.00.626.537 I llm_load_print_meta: n_head           = 8
0.00.626.543 I llm_load_print_meta: n_head_kv        = 1
0.00.626.544 I llm_load_print_meta: n_rot            = 256
0.00.626.544 I llm_load_print_meta: n_swa            = 0
0.00.626.545 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.545 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.550 I llm_load_print_meta: n_gqa            = 8
0.00.626.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.561 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.562 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.563 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.569 I llm_load_print_meta: n_ff             = 16384
0.00.626.570 I llm_load_print_meta: n_expert         = 0
0.00.626.570 I llm_load_print_meta: n_expert_used    = 0
0.00.626.571 I llm_load_print_meta: causal attn      = 1
0.00.626.571 I llm_load_print_meta: pooling type     = 0
0.00.626.571 I llm_load_print_meta: rope type        = 2
0.00.626.572 I llm_load_print_meta: rope scaling     = linear
0.00.626.573 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.574 I llm_load_print_meta: freq_scale_train = 1
0.00.626.574 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.575 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.575 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.575 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.575 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.576 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.576 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.577 I llm_load_print_meta: model type       = 2B
0.00.626.577 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.578 I llm_load_print_meta: model params     = 2.51 B
0.00.626.579 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.579 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.580 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.580 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.581 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.581 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.582 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.582 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.588 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.589 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.590 I llm_load_print_meta: max token length = 93
0.00.723.673 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.723.684 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.723.685 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.723.686 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.723.687 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.723.687 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.729.574 I llama_new_context_with_model: n_ctx      = 8192
0.00.729.581 I llama_new_context_with_model: n_batch    = 2048
0.00.729.581 I llama_new_context_with_model: n_ubatch   = 512
0.00.729.582 I llama_new_context_with_model: flash_attn = 0
0.00.729.585 I llama_new_context_with_model: freq_base  = 10000.0
0.00.729.585 I llama_new_context_with_model: freq_scale = 1
0.00.759.540 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.759.581 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.759.709 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.762.143 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.762.148 I llama_new_context_with_model: graph nodes  = 601
0.00.762.148 I llama_new_context_with_model: graph splits = 1
0.00.762.164 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.374.105 I main: llama threadpool init, n_threads = 4
0.01.374.118 I 
0.01.374.228 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.374.228 I 
0.01.374.463 I sampler seed: 2571673386
0.01.374.476 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.374.483 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.374.484 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.374.485 I 
 increadibly, and is a testament to the resilience of the human spirit.

It's a powerful piece of writing that evokes a sense of awe and wonder

0.15.025.709 I llama_perf_sampler_print:    sampling time =      47.98 ms /    33 runs   (    1.45 ms per token,   687.82 tokens per second)
0.15.025.724 I llama_perf_context_print:        load time =    1371.18 ms
0.15.025.726 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.025.729 I llama_perf_context_print:        eval time =   13558.82 ms /    32 runs   (  423.71 ms per token,     2.36 tokens per second)
0.15.025.730 I llama_perf_context_print:       total time =   13651.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4009 (418f5eef) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.968 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.980 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.069 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.081 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.082 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.087 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.098 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.100 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.102 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.109 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.110 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.111 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.112 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.402 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.937 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.240 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.251 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.252 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.253 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.254 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.256 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.259 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.260 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.261 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.262 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.263 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.271 I llama_model_loader: - type  f32:   37 tensors
0.00.265.274 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.252 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.770 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.702 I llm_load_vocab: special tokens cache size = 5
0.00.606.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.356 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.357 I llm_load_print_meta: arch             = gemma
0.00.606.358 I llm_load_print_meta: vocab type       = SPM
0.00.606.359 I llm_load_print_meta: n_vocab          = 256000
0.00.606.361 I llm_load_print_meta: n_merges         = 0
0.00.606.362 I llm_load_print_meta: vocab_only       = 0
0.00.606.362 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.372 I llm_load_print_meta: n_embd           = 2048
0.00.606.373 I llm_load_print_meta: n_layer          = 18
0.00.606.437 I llm_load_print_meta: n_head           = 8
0.00.606.445 I llm_load_print_meta: n_head_kv        = 1
0.00.606.445 I llm_load_print_meta: n_rot            = 256
0.00.606.446 I llm_load_print_meta: n_swa            = 0
0.00.606.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.451 I llm_load_print_meta: n_gqa            = 8
0.00.606.456 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.463 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.465 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.465 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.466 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.471 I llm_load_print_meta: n_ff             = 16384
0.00.606.472 I llm_load_print_meta: n_expert         = 0
0.00.606.472 I llm_load_print_meta: n_expert_used    = 0
0.00.606.473 I llm_load_print_meta: causal attn      = 1
0.00.606.473 I llm_load_print_meta: pooling type     = 0
0.00.606.473 I llm_load_print_meta: rope type        = 2
0.00.606.475 I llm_load_print_meta: rope scaling     = linear
0.00.606.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.477 I llm_load_print_meta: freq_scale_train = 1
0.00.606.477 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.489 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.505 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.506 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.506 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.507 I llm_load_print_meta: model type       = 2B
0.00.606.509 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.510 I llm_load_print_meta: model params     = 2.51 B
0.00.606.511 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.512 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.512 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.513 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.514 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.515 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.515 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.520 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.526 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.527 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.528 I llm_load_print_meta: max token length = 93
0.00.681.759 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.681.770 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.687.565 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.573 I llama_new_context_with_model: n_batch    = 2048
0.00.687.574 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.574 I llama_new_context_with_model: flash_attn = 0
0.00.687.578 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.578 I llama_new_context_with_model: freq_scale = 1
0.00.718.188 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.228 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.354 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.939 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.943 I llama_new_context_with_model: graph nodes  = 601
0.00.720.943 I llama_new_context_with_model: graph splits = 1
0.00.720.959 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.908 I main: llama threadpool init, n_threads = 4
0.01.330.923 I 
0.01.331.039 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.043 I 
0.01.331.270 I sampler seed: 978609411
0.01.331.282 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.289 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.290 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.290 I 
 increasively.

I'm not sure what you're trying to ask. Please rephrase your question. [end of text]


0.11.465.867 I llama_perf_sampler_print:    sampling time =      36.25 ms /    25 runs   (    1.45 ms per token,   689.62 tokens per second)
0.11.465.869 I llama_perf_context_print:        load time =    1328.03 ms
0.11.465.884 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.465.886 I llama_perf_context_print:        eval time =   10063.93 ms /    24 runs   (  419.33 ms per token,     2.38 tokens per second)
0.11.465.887 I llama_perf_context_print:       total time =   10134.97 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.713s
user	2m26.702s
sys	0m9.643s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4009 (418f5eef)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198939.83 ms
main:    total time = 198939.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4009 (418f5eef) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.025.543 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.551 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.646 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.657 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.659 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.663 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.665 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.673 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.677 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.679 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.680 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.686 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.687 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.688 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.689 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.690 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.191 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.541 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.032 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.041 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.042 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.043 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.044 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.045 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.047 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.051 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.053 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.054 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.063 I llama_model_loader: - type  f32:   37 tensors
0.00.266.065 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.065 I llama_model_loader: - type q6_K:   19 tensors
0.00.435.266 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.091 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.017 I llm_load_vocab: special tokens cache size = 5
0.00.595.588 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.661 I llm_load_print_meta: arch             = gemma
0.00.595.662 I llm_load_print_meta: vocab type       = SPM
0.00.595.662 I llm_load_print_meta: n_vocab          = 256000
0.00.595.665 I llm_load_print_meta: n_merges         = 0
0.00.595.665 I llm_load_print_meta: vocab_only       = 0
0.00.595.666 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.676 I llm_load_print_meta: n_embd           = 2048
0.00.595.677 I llm_load_print_meta: n_layer          = 18
0.00.595.741 I llm_load_print_meta: n_head           = 8
0.00.595.747 I llm_load_print_meta: n_head_kv        = 1
0.00.595.748 I llm_load_print_meta: n_rot            = 256
0.00.595.748 I llm_load_print_meta: n_swa            = 0
0.00.595.749 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.749 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.753 I llm_load_print_meta: n_gqa            = 8
0.00.595.758 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.763 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.764 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.765 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.766 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.799 I llm_load_print_meta: n_ff             = 16384
0.00.595.800 I llm_load_print_meta: n_expert         = 0
0.00.595.800 I llm_load_print_meta: n_expert_used    = 0
0.00.595.800 I llm_load_print_meta: causal attn      = 1
0.00.595.801 I llm_load_print_meta: pooling type     = 0
0.00.595.801 I llm_load_print_meta: rope type        = 2
0.00.595.801 I llm_load_print_meta: rope scaling     = linear
0.00.595.811 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.813 I llm_load_print_meta: freq_scale_train = 1
0.00.595.813 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.813 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.814 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.814 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.821 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.822 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.822 I llm_load_print_meta: model type       = 2B
0.00.595.823 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.824 I llm_load_print_meta: model params     = 2.51 B
0.00.595.825 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.825 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.826 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.827 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.827 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.828 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.828 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.828 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.834 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.836 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.836 I llm_load_print_meta: max token length = 93
0.00.660.069 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.660.079 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.660.080 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.660.081 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.660.082 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.660.082 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.665.990 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.996 I llama_new_context_with_model: n_batch    = 2048
0.00.665.997 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.997 I llama_new_context_with_model: flash_attn = 0
0.00.666.000 I llama_new_context_with_model: freq_base  = 10000.0
0.00.666.000 I llama_new_context_with_model: freq_scale = 1
0.00.696.292 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.332 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.459 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.995 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.999 I llama_new_context_with_model: graph nodes  = 601
0.00.698.999 I llama_new_context_with_model: graph splits = 1
0.00.699.015 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.301 I main: llama threadpool init, n_threads = 4
0.01.277.314 I 
0.01.277.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.438 I 
0.01.277.668 I sampler seed: 2775909306
0.01.277.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.688 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.277.691 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.691 I 
 maneuvative.

**The President of the United States addressed the nation today. In his speech, he highlighted the importance of unity and cooperation among the American

0.12.113.139 I llama_perf_sampler_print:    sampling time =      48.05 ms /    33 runs   (    1.46 ms per token,   686.80 tokens per second)
0.12.113.143 I llama_perf_context_print:        load time =    1274.41 ms
0.12.113.146 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.113.148 I llama_perf_context_print:        eval time =   10741.56 ms /    32 runs   (  335.67 ms per token,     2.98 tokens per second)
0.12.113.150 I llama_perf_context_print:       total time =   10835.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4009 (418f5eef)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198837.70 ms
main:    total time = 198837.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4009 (418f5eef) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.025.370 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.489 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.490 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.495 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.496 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.497 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.498 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.500 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.501 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.516 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.518 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.519 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.528 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.101 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.864 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.371 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.385 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.386 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.387 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.388 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.389 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.390 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.394 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.395 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.405 I llama_model_loader: - type  f32:   37 tensors
0.00.266.408 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.408 I llama_model_loader: - type q6_K:   19 tensors
0.00.466.142 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.914 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.803 I llm_load_vocab: special tokens cache size = 5
0.00.623.213 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.286 I llm_load_print_meta: arch             = gemma
0.00.623.287 I llm_load_print_meta: vocab type       = SPM
0.00.623.288 I llm_load_print_meta: n_vocab          = 256000
0.00.623.290 I llm_load_print_meta: n_merges         = 0
0.00.623.291 I llm_load_print_meta: vocab_only       = 0
0.00.623.291 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.301 I llm_load_print_meta: n_embd           = 2048
0.00.623.302 I llm_load_print_meta: n_layer          = 18
0.00.623.369 I llm_load_print_meta: n_head           = 8
0.00.623.376 I llm_load_print_meta: n_head_kv        = 1
0.00.623.377 I llm_load_print_meta: n_rot            = 256
0.00.623.377 I llm_load_print_meta: n_swa            = 0
0.00.623.377 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.378 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.382 I llm_load_print_meta: n_gqa            = 8
0.00.623.387 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.392 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.393 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.395 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.396 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.396 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.396 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.401 I llm_load_print_meta: n_ff             = 16384
0.00.623.402 I llm_load_print_meta: n_expert         = 0
0.00.623.402 I llm_load_print_meta: n_expert_used    = 0
0.00.623.403 I llm_load_print_meta: causal attn      = 1
0.00.623.403 I llm_load_print_meta: pooling type     = 0
0.00.623.403 I llm_load_print_meta: rope type        = 2
0.00.623.404 I llm_load_print_meta: rope scaling     = linear
0.00.623.405 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.406 I llm_load_print_meta: freq_scale_train = 1
0.00.623.406 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.406 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.407 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.407 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.407 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.408 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.408 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.408 I llm_load_print_meta: model type       = 2B
0.00.623.410 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.623.410 I llm_load_print_meta: model params     = 2.51 B
0.00.623.411 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.623.411 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.412 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.412 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.413 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.413 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.414 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.414 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.421 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.422 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.423 I llm_load_print_meta: max token length = 93
0.00.684.412 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.690.262 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.271 I llama_new_context_with_model: n_batch    = 2048
0.00.690.271 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.272 I llama_new_context_with_model: flash_attn = 0
0.00.690.275 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.276 I llama_new_context_with_model: freq_scale = 1
0.00.721.279 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.322 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.441 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.982 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.986 I llama_new_context_with_model: graph nodes  = 601
0.00.723.986 I llama_new_context_with_model: graph splits = 1
0.00.724.002 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.187 I main: llama threadpool init, n_threads = 4
0.01.301.203 I 
0.01.301.313 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.317 I 
0.01.301.557 I sampler seed: 2439481119
0.01.301.570 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.579 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.580 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.591 I 
 seconal words are those that are:

a) Related to the grammatical structure of a sentence.
b) Related to the meaning of a sentence.


0.12.132.395 I llama_perf_sampler_print:    sampling time =      47.98 ms /    33 runs   (    1.45 ms per token,   687.77 tokens per second)
0.12.132.399 I llama_perf_context_print:        load time =    1298.30 ms
0.12.132.401 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.132.403 I llama_perf_context_print:        eval time =   10737.76 ms /    32 runs   (  335.56 ms per token,     2.98 tokens per second)
0.12.132.404 I llama_perf_context_print:       total time =   10831.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.967s
user	50m6.786s
sys	0m6.391s
