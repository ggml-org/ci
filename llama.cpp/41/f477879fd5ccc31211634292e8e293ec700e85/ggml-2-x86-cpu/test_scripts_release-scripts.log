+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.559 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.001.927 I main: load the model and apply lora adapter, if any
0.00.022.286 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.333 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.343 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.348 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.351 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.355 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.355 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.356 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.356 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.357 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.357 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.361 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.362 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.362 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.363 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.363 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.755 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.679 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.685 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.686 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.687 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.687 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.688 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.689 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.692 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.692 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.694 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.695 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.696 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.700 I llama_model_loader: - type  f32:   37 tensors
0.00.132.703 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.817 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.425 I llm_load_vocab: special tokens cache size = 5
0.00.215.851 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.864 I llm_load_print_meta: arch             = gemma
0.00.215.864 I llm_load_print_meta: vocab type       = SPM
0.00.215.865 I llm_load_print_meta: n_vocab          = 256000
0.00.215.866 I llm_load_print_meta: n_merges         = 0
0.00.215.866 I llm_load_print_meta: vocab_only       = 0
0.00.215.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.867 I llm_load_print_meta: n_embd           = 2048
0.00.215.868 I llm_load_print_meta: n_layer          = 18
0.00.215.881 I llm_load_print_meta: n_head           = 8
0.00.215.882 I llm_load_print_meta: n_head_kv        = 1
0.00.215.883 I llm_load_print_meta: n_rot            = 256
0.00.215.883 I llm_load_print_meta: n_swa            = 0
0.00.215.884 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.884 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.885 I llm_load_print_meta: n_gqa            = 8
0.00.215.887 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.888 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.888 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.890 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.890 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.891 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.891 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.892 I llm_load_print_meta: n_ff             = 16384
0.00.215.892 I llm_load_print_meta: n_expert         = 0
0.00.215.893 I llm_load_print_meta: n_expert_used    = 0
0.00.215.893 I llm_load_print_meta: causal attn      = 1
0.00.215.894 I llm_load_print_meta: pooling type     = 0
0.00.215.894 I llm_load_print_meta: rope type        = 2
0.00.215.895 I llm_load_print_meta: rope scaling     = linear
0.00.215.896 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.897 I llm_load_print_meta: freq_scale_train = 1
0.00.215.897 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.898 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.898 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.898 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.898 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.899 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.900 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.900 I llm_load_print_meta: model type       = 2B
0.00.215.901 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.902 I llm_load_print_meta: model params     = 2.51 B
0.00.215.903 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.903 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.904 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.904 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.905 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.905 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.906 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.906 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.906 I llm_load_print_meta: max token length = 93
0.00.215.922 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.316.918 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.316.926 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.316.926 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.316.927 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.316.928 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.316.928 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.322.065 I llama_new_context_with_model: n_ctx      = 8192
0.00.322.072 I llama_new_context_with_model: n_batch    = 2048
0.00.322.072 I llama_new_context_with_model: n_ubatch   = 512
0.00.322.073 I llama_new_context_with_model: flash_attn = 0
0.00.322.075 I llama_new_context_with_model: freq_base  = 10000.0
0.00.322.076 I llama_new_context_with_model: freq_scale = 1
0.00.351.704 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.351.718 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.351.817 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.735 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.352.743 I llama_new_context_with_model: graph nodes  = 601
0.00.352.744 I llama_new_context_with_model: graph splits = 1
0.00.352.746 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.607 I main: llama threadpool init, n_threads = 4
0.00.443.619 I 
0.00.443.698 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.703 I 
0.00.443.752 I sampler seed: 1841439082
0.00.443.762 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.764 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.443.765 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities:

1. Explain the concept of the "cultural turn" in sociology and its implications.
2. Discuss the role of social stratification in shaping

0.02.679.866 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6818.18 tokens per second)
0.02.679.869 I llama_perf_context_print:        load time =     441.66 ms
0.02.679.871 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.679.872 I llama_perf_context_print:        eval time =    2217.48 ms /    32 runs   (   69.30 ms per token,    14.43 tokens per second)
0.02.679.873 I llama_perf_context_print:       total time =    2236.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.577 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.021.817 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.827 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.833 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.837 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.838 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.838 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.839 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.840 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.840 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.845 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.845 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.846 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.846 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.847 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.934 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.712 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.612 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.618 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.618 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.619 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.620 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.621 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.621 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.624 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.624 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.625 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.626 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.627 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.630 I llama_model_loader: - type  f32:   37 tensors
0.00.132.633 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.347 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.040 I llm_load_vocab: special tokens cache size = 5
0.00.216.480 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.492 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.492 I llm_load_print_meta: arch             = gemma
0.00.216.493 I llm_load_print_meta: vocab type       = SPM
0.00.216.493 I llm_load_print_meta: n_vocab          = 256000
0.00.216.494 I llm_load_print_meta: n_merges         = 0
0.00.216.494 I llm_load_print_meta: vocab_only       = 0
0.00.216.494 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.495 I llm_load_print_meta: n_embd           = 2048
0.00.216.495 I llm_load_print_meta: n_layer          = 18
0.00.216.506 I llm_load_print_meta: n_head           = 8
0.00.216.507 I llm_load_print_meta: n_head_kv        = 1
0.00.216.508 I llm_load_print_meta: n_rot            = 256
0.00.216.508 I llm_load_print_meta: n_swa            = 0
0.00.216.508 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.509 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.510 I llm_load_print_meta: n_gqa            = 8
0.00.216.511 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.512 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.512 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.514 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.514 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.514 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.515 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.516 I llm_load_print_meta: n_ff             = 16384
0.00.216.516 I llm_load_print_meta: n_expert         = 0
0.00.216.516 I llm_load_print_meta: n_expert_used    = 0
0.00.216.517 I llm_load_print_meta: causal attn      = 1
0.00.216.517 I llm_load_print_meta: pooling type     = 0
0.00.216.518 I llm_load_print_meta: rope type        = 2
0.00.216.518 I llm_load_print_meta: rope scaling     = linear
0.00.216.519 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.520 I llm_load_print_meta: freq_scale_train = 1
0.00.216.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.521 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.521 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.522 I llm_load_print_meta: model type       = 2B
0.00.216.523 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.524 I llm_load_print_meta: model params     = 2.51 B
0.00.216.525 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.525 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.525 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.526 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.526 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.526 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.527 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.527 I llm_load_print_meta: max token length = 93
0.00.216.553 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.311.029 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.316.253 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.259 I llama_new_context_with_model: n_batch    = 2048
0.00.316.259 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.260 I llama_new_context_with_model: flash_attn = 0
0.00.316.263 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.264 I llama_new_context_with_model: freq_scale = 1
0.00.346.180 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.346.195 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.346.294 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.157 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.163 I llama_new_context_with_model: graph nodes  = 601
0.00.347.163 I llama_new_context_with_model: graph splits = 1
0.00.347.166 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.452 I main: llama threadpool init, n_threads = 4
0.00.434.464 I 
0.00.434.537 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.540 I 
0.00.434.569 I sampler seed: 333824756
0.00.434.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.592 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.434.595 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to answer the question as it contains potentially harmful content. [end of text]


0.01.716.999 I llama_perf_sampler_print:    sampling time =       3.00 ms /    20 runs   (    0.15 ms per token,  6675.57 tokens per second)
0.01.717.002 I llama_perf_context_print:        load time =     432.57 ms
0.01.717.004 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.717.005 I llama_perf_context_print:        eval time =    1271.58 ms /    19 runs   (   66.93 ms per token,    14.94 tokens per second)
0.01.717.006 I llama_perf_context_print:       total time =    1282.56 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.601 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.001.888 I main: load the model and apply lora adapter, if any
0.00.021.807 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.855 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.865 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.873 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.876 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.877 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.878 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.879 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.880 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.881 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.884 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.885 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.886 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.889 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.553 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.110 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.003 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.004 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.008 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.009 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.010 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.011 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.012 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.015 I llama_model_loader: - type  f32:   37 tensors
0.00.132.017 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.453 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.089 I llm_load_vocab: special tokens cache size = 5
0.00.215.500 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.513 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.514 I llm_load_print_meta: arch             = gemma
0.00.215.514 I llm_load_print_meta: vocab type       = SPM
0.00.215.515 I llm_load_print_meta: n_vocab          = 256000
0.00.215.515 I llm_load_print_meta: n_merges         = 0
0.00.215.516 I llm_load_print_meta: vocab_only       = 0
0.00.215.516 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.516 I llm_load_print_meta: n_embd           = 2048
0.00.215.517 I llm_load_print_meta: n_layer          = 18
0.00.215.528 I llm_load_print_meta: n_head           = 8
0.00.215.529 I llm_load_print_meta: n_head_kv        = 1
0.00.215.530 I llm_load_print_meta: n_rot            = 256
0.00.215.530 I llm_load_print_meta: n_swa            = 0
0.00.215.530 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.531 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.532 I llm_load_print_meta: n_gqa            = 8
0.00.215.533 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.534 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.536 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.536 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.537 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.538 I llm_load_print_meta: n_ff             = 16384
0.00.215.538 I llm_load_print_meta: n_expert         = 0
0.00.215.539 I llm_load_print_meta: n_expert_used    = 0
0.00.215.539 I llm_load_print_meta: causal attn      = 1
0.00.215.539 I llm_load_print_meta: pooling type     = 0
0.00.215.540 I llm_load_print_meta: rope type        = 2
0.00.215.540 I llm_load_print_meta: rope scaling     = linear
0.00.215.542 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.543 I llm_load_print_meta: freq_scale_train = 1
0.00.215.543 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.543 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.544 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.544 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.544 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.544 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.545 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.545 I llm_load_print_meta: model type       = 2B
0.00.215.546 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.547 I llm_load_print_meta: model params     = 2.51 B
0.00.215.548 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.548 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.549 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.549 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.549 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.549 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.550 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.550 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.550 I llm_load_print_meta: max token length = 93
0.00.215.566 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.291.461 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.291.468 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.291.469 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.291.469 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.291.470 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.291.471 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.296.529 I llama_new_context_with_model: n_ctx      = 8192
0.00.296.535 I llama_new_context_with_model: n_batch    = 2048
0.00.296.535 I llama_new_context_with_model: n_ubatch   = 512
0.00.296.536 I llama_new_context_with_model: flash_attn = 0
0.00.296.538 I llama_new_context_with_model: freq_base  = 10000.0
0.00.296.539 I llama_new_context_with_model: freq_scale = 1
0.00.325.510 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.325.524 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.325.616 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.326.503 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.326.512 I llama_new_context_with_model: graph nodes  = 601
0.00.326.512 I llama_new_context_with_model: graph splits = 1
0.00.326.514 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.909 I main: llama threadpool init, n_threads = 4
0.00.420.920 I 
0.00.420.992 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.995 I 
0.00.421.031 I sampler seed: 3530116904
0.00.421.041 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.046 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.421.047 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. [end of text]


0.00.708.725 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8090.61 tokens per second)
0.00.708.728 I llama_perf_context_print:        load time =     419.00 ms
0.00.708.729 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.708.731 I llama_perf_context_print:        eval time =     284.76 ms /     4 runs   (   71.19 ms per token,    14.05 tokens per second)
0.00.708.732 I llama_perf_context_print:       total time =     287.82 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.538 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.021.893 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.940 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.948 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.953 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.954 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.957 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.958 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.959 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.959 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.960 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.960 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.964 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.965 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.965 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.966 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.966 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.882 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.588 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.879 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.886 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.886 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.887 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.888 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.889 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.889 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.892 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.893 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.894 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.895 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.896 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.901 I llama_model_loader: - type  f32:   37 tensors
0.00.133.903 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.775 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.424 I llm_load_vocab: special tokens cache size = 5
0.00.215.806 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.819 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.820 I llm_load_print_meta: arch             = gemma
0.00.215.820 I llm_load_print_meta: vocab type       = SPM
0.00.215.821 I llm_load_print_meta: n_vocab          = 256000
0.00.215.822 I llm_load_print_meta: n_merges         = 0
0.00.215.822 I llm_load_print_meta: vocab_only       = 0
0.00.215.823 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.823 I llm_load_print_meta: n_embd           = 2048
0.00.215.824 I llm_load_print_meta: n_layer          = 18
0.00.215.835 I llm_load_print_meta: n_head           = 8
0.00.215.836 I llm_load_print_meta: n_head_kv        = 1
0.00.215.837 I llm_load_print_meta: n_rot            = 256
0.00.215.837 I llm_load_print_meta: n_swa            = 0
0.00.215.838 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.838 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.839 I llm_load_print_meta: n_gqa            = 8
0.00.215.840 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.841 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.842 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.843 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.843 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.843 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.844 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.845 I llm_load_print_meta: n_ff             = 16384
0.00.215.845 I llm_load_print_meta: n_expert         = 0
0.00.215.845 I llm_load_print_meta: n_expert_used    = 0
0.00.215.846 I llm_load_print_meta: causal attn      = 1
0.00.215.846 I llm_load_print_meta: pooling type     = 0
0.00.215.846 I llm_load_print_meta: rope type        = 2
0.00.215.847 I llm_load_print_meta: rope scaling     = linear
0.00.215.848 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.849 I llm_load_print_meta: freq_scale_train = 1
0.00.215.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.849 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.849 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.850 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.850 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.850 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.851 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.851 I llm_load_print_meta: model type       = 2B
0.00.215.852 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.852 I llm_load_print_meta: model params     = 2.51 B
0.00.215.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.855 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.856 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.856 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.856 I llm_load_print_meta: max token length = 93
0.00.215.873 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.286.762 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.286.769 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.291.779 I llama_new_context_with_model: n_ctx      = 8192
0.00.291.785 I llama_new_context_with_model: n_batch    = 2048
0.00.291.786 I llama_new_context_with_model: n_ubatch   = 512
0.00.291.786 I llama_new_context_with_model: flash_attn = 0
0.00.291.789 I llama_new_context_with_model: freq_base  = 10000.0
0.00.291.789 I llama_new_context_with_model: freq_scale = 1
0.00.321.151 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.321.168 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.321.261 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.322.116 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.322.122 I llama_new_context_with_model: graph nodes  = 601
0.00.322.123 I llama_new_context_with_model: graph splits = 1
0.00.322.124 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.911 I main: llama threadpool init, n_threads = 4
0.00.417.924 I 
0.00.417.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.998 I 
0.00.418.027 I sampler seed: 426725186
0.00.418.036 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.039 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.418.040 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels, the ones who were meant to be the heroes of the story.

I cannot answer the question as it contains religious and philosophical content that is beyond

0.02.840.827 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6948.83 tokens per second)
0.02.840.829 I llama_perf_context_print:        load time =     416.03 ms
0.02.840.830 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.840.832 I llama_perf_context_print:        eval time =    2404.08 ms /    32 runs   (   75.13 ms per token,    13.31 tokens per second)
0.02.840.832 I llama_perf_context_print:       total time =    2422.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.736s
user	0m27.581s
sys	0m9.351s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3798 (41f47787)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31979.71 ms
main:    total time = 31979.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.886 I main: load the model and apply lora adapter, if any
0.00.022.483 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.530 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.541 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.546 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.550 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.553 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.554 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.555 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.555 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.556 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.556 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.560 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.561 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.561 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.562 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.563 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.176 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.472 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.341 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.347 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.348 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.348 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.349 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.350 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.351 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.353 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.354 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.355 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.356 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.357 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.360 I llama_model_loader: - type  f32:   37 tensors
0.00.132.362 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.363 I llama_model_loader: - type q6_K:   19 tensors
0.00.194.966 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.540 I llm_load_vocab: special tokens cache size = 5
0.00.213.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.944 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.945 I llm_load_print_meta: arch             = gemma
0.00.213.945 I llm_load_print_meta: vocab type       = SPM
0.00.213.946 I llm_load_print_meta: n_vocab          = 256000
0.00.213.946 I llm_load_print_meta: n_merges         = 0
0.00.213.946 I llm_load_print_meta: vocab_only       = 0
0.00.213.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.947 I llm_load_print_meta: n_embd           = 2048
0.00.213.947 I llm_load_print_meta: n_layer          = 18
0.00.213.960 I llm_load_print_meta: n_head           = 8
0.00.213.961 I llm_load_print_meta: n_head_kv        = 1
0.00.213.961 I llm_load_print_meta: n_rot            = 256
0.00.213.962 I llm_load_print_meta: n_swa            = 0
0.00.213.962 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.962 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.963 I llm_load_print_meta: n_gqa            = 8
0.00.213.964 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.965 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.965 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.967 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.968 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.969 I llm_load_print_meta: n_ff             = 16384
0.00.213.969 I llm_load_print_meta: n_expert         = 0
0.00.213.970 I llm_load_print_meta: n_expert_used    = 0
0.00.213.970 I llm_load_print_meta: causal attn      = 1
0.00.213.970 I llm_load_print_meta: pooling type     = 0
0.00.213.971 I llm_load_print_meta: rope type        = 2
0.00.213.971 I llm_load_print_meta: rope scaling     = linear
0.00.213.972 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.973 I llm_load_print_meta: freq_scale_train = 1
0.00.213.973 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.973 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.974 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.974 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.974 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.975 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.976 I llm_load_print_meta: model type       = 2B
0.00.213.976 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.213.977 I llm_load_print_meta: model params     = 2.51 B
0.00.213.978 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.213.978 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.978 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.979 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.979 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.979 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.980 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.980 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.980 I llm_load_print_meta: max token length = 93
0.00.213.994 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.164 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.272.171 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.272.172 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.272.173 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.272.173 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.272.174 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.277.225 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.231 I llama_new_context_with_model: n_batch    = 2048
0.00.277.232 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.232 I llama_new_context_with_model: flash_attn = 0
0.00.277.234 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.235 I llama_new_context_with_model: freq_scale = 1
0.00.306.085 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.306.100 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.306.193 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.307.026 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.307.033 I llama_new_context_with_model: graph nodes  = 601
0.00.307.033 I llama_new_context_with_model: graph splits = 1
0.00.307.035 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.387.872 I main: llama threadpool init, n_threads = 4
0.00.387.885 I 
0.00.387.961 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.387.964 I 
0.00.387.993 I sampler seed: 2332046660
0.00.388.002 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.388.005 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.388.006 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the effects of stress.

**Answer:**

**Stress and its Effects on the Body**

Stress is a natural response to demanding situations that

0.02.010.094 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6880.73 tokens per second)
0.02.010.096 I llama_perf_context_print:        load time =     385.97 ms
0.02.010.097 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.098 I llama_perf_context_print:        eval time =    1604.19 ms /    32 runs   (   50.13 ms per token,    19.95 tokens per second)
0.02.010.099 I llama_perf_context_print:       total time =    1622.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3798 (41f47787)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32073.46 ms
main:    total time = 32073.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.541 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.858 I main: load the model and apply lora adapter, if any
0.00.021.806 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.821 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.828 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.828 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.833 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.837 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.838 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.838 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.839 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.839 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.843 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.843 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.844 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.844 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.845 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.056 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.956 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.963 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.963 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.964 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.964 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.965 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.966 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.968 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.969 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.972 I llama_model_loader: - type  f32:   37 tensors
0.00.131.975 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.975 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.034 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.704 I llm_load_vocab: special tokens cache size = 5
0.00.215.096 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.109 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.109 I llm_load_print_meta: arch             = gemma
0.00.215.109 I llm_load_print_meta: vocab type       = SPM
0.00.215.110 I llm_load_print_meta: n_vocab          = 256000
0.00.215.110 I llm_load_print_meta: n_merges         = 0
0.00.215.111 I llm_load_print_meta: vocab_only       = 0
0.00.215.111 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.113 I llm_load_print_meta: n_embd           = 2048
0.00.215.114 I llm_load_print_meta: n_layer          = 18
0.00.215.126 I llm_load_print_meta: n_head           = 8
0.00.215.127 I llm_load_print_meta: n_head_kv        = 1
0.00.215.127 I llm_load_print_meta: n_rot            = 256
0.00.215.128 I llm_load_print_meta: n_swa            = 0
0.00.215.128 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.131 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.132 I llm_load_print_meta: n_gqa            = 8
0.00.215.133 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.134 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.135 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.136 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.137 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.150 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.152 I llm_load_print_meta: n_ff             = 16384
0.00.215.152 I llm_load_print_meta: n_expert         = 0
0.00.215.152 I llm_load_print_meta: n_expert_used    = 0
0.00.215.153 I llm_load_print_meta: causal attn      = 1
0.00.215.153 I llm_load_print_meta: pooling type     = 0
0.00.215.153 I llm_load_print_meta: rope type        = 2
0.00.215.154 I llm_load_print_meta: rope scaling     = linear
0.00.215.155 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.156 I llm_load_print_meta: freq_scale_train = 1
0.00.215.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.157 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.158 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.160 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.161 I llm_load_print_meta: model type       = 2B
0.00.215.161 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.162 I llm_load_print_meta: model params     = 2.51 B
0.00.215.163 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.164 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.165 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.166 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.166 I llm_load_print_meta: max token length = 93
0.00.215.183 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.271.701 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.276.735 I llama_new_context_with_model: n_ctx      = 8192
0.00.276.741 I llama_new_context_with_model: n_batch    = 2048
0.00.276.741 I llama_new_context_with_model: n_ubatch   = 512
0.00.276.742 I llama_new_context_with_model: flash_attn = 0
0.00.276.745 I llama_new_context_with_model: freq_base  = 10000.0
0.00.276.745 I llama_new_context_with_model: freq_scale = 1
0.00.306.569 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.306.584 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.306.677 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.307.530 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.307.538 I llama_new_context_with_model: graph nodes  = 601
0.00.307.538 I llama_new_context_with_model: graph splits = 1
0.00.307.540 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.388.453 I main: llama threadpool init, n_threads = 4
0.00.388.465 I 
0.00.388.541 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.388.544 I 
0.00.388.582 I sampler seed: 3939048067
0.00.388.592 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.388.595 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.388.595 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufillingly with the melody of "Bohemian Rhapsody."

While singing, I'm dancing like a marionette, my body swaying in rhythm with the

0.02.019.514 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6649.20 tokens per second)
0.02.019.516 I llama_perf_context_print:        load time =     386.58 ms
0.02.019.518 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.019.519 I llama_perf_context_print:        eval time =    1612.12 ms /    32 runs   (   50.38 ms per token,    19.85 tokens per second)
0.02.019.520 I llama_perf_context_print:       total time =    1631.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.868s
user	8m14.317s
sys	0m7.066s
