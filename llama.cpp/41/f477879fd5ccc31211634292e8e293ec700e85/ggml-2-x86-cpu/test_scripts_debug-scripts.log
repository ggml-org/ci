+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.619 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.024.809 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.001 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.092 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.103 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.105 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.109 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.110 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.111 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.112 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.113 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.114 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.120 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.122 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.123 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.125 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.126 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.157 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.765 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.894 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.901 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.902 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.903 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.904 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.905 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.906 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.910 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.911 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.912 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.912 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.914 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.920 I llama_model_loader: - type  f32:   37 tensors
0.00.196.924 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.866 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.870 I llm_load_vocab: special tokens cache size = 5
0.00.521.754 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.521.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.521.815 I llm_load_print_meta: arch             = gemma
0.00.521.816 I llm_load_print_meta: vocab type       = SPM
0.00.521.817 I llm_load_print_meta: n_vocab          = 256000
0.00.521.819 I llm_load_print_meta: n_merges         = 0
0.00.521.820 I llm_load_print_meta: vocab_only       = 0
0.00.521.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.521.821 I llm_load_print_meta: n_embd           = 2048
0.00.521.821 I llm_load_print_meta: n_layer          = 18
0.00.521.854 I llm_load_print_meta: n_head           = 8
0.00.521.860 I llm_load_print_meta: n_head_kv        = 1
0.00.521.861 I llm_load_print_meta: n_rot            = 256
0.00.521.861 I llm_load_print_meta: n_swa            = 0
0.00.521.861 I llm_load_print_meta: n_embd_head_k    = 256
0.00.521.862 I llm_load_print_meta: n_embd_head_v    = 256
0.00.521.866 I llm_load_print_meta: n_gqa            = 8
0.00.521.871 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.521.876 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.521.877 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.521.878 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.521.879 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.521.879 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.521.880 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.521.884 I llm_load_print_meta: n_ff             = 16384
0.00.521.885 I llm_load_print_meta: n_expert         = 0
0.00.521.885 I llm_load_print_meta: n_expert_used    = 0
0.00.521.886 I llm_load_print_meta: causal attn      = 1
0.00.521.886 I llm_load_print_meta: pooling type     = 0
0.00.521.886 I llm_load_print_meta: rope type        = 2
0.00.521.887 I llm_load_print_meta: rope scaling     = linear
0.00.521.888 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.521.889 I llm_load_print_meta: freq_scale_train = 1
0.00.521.889 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.521.889 I llm_load_print_meta: rope_finetuned   = unknown
0.00.521.890 I llm_load_print_meta: ssm_d_conv       = 0
0.00.521.890 I llm_load_print_meta: ssm_d_inner      = 0
0.00.521.890 I llm_load_print_meta: ssm_d_state      = 0
0.00.521.891 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.521.891 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.521.892 I llm_load_print_meta: model type       = 2B
0.00.521.893 I llm_load_print_meta: model ftype      = Q8_0
0.00.521.894 I llm_load_print_meta: model params     = 2.51 B
0.00.521.895 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.521.895 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.521.896 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.521.897 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.521.897 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.521.897 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.521.898 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.521.898 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.521.898 I llm_load_print_meta: max token length = 93
0.00.522.075 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.621.536 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.621.545 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.621.547 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.621.547 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.621.548 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.621.549 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.627.245 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.253 I llama_new_context_with_model: n_batch    = 2048
0.00.627.253 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.254 I llama_new_context_with_model: flash_attn = 0
0.00.627.256 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.257 I llama_new_context_with_model: freq_scale = 1
0.00.656.631 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.673 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.656.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.658.164 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.658.170 I llama_new_context_with_model: graph nodes  = 601
0.00.658.171 I llama_new_context_with_model: graph splits = 1
0.00.658.187 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.017 I main: llama threadpool init, n_threads = 4
0.01.272.027 I 
0.01.272.116 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.119 I 
0.01.272.281 I sampler seed: 1893002454
0.01.272.290 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.295 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.296 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously.

I am unable to answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.10.584.944 I llama_perf_sampler_print:    sampling time =      33.93 ms /    23 runs   (    1.48 ms per token,   677.89 tokens per second)
0.10.584.969 I llama_perf_context_print:        load time =    1269.18 ms
0.10.584.970 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.584.972 I llama_perf_context_print:        eval time =    9256.08 ms /    22 runs   (  420.73 ms per token,     2.38 tokens per second)
0.10.584.973 I llama_perf_context_print:       total time =    9312.94 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.597 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.812 I main: llama backend init
0.00.002.733 I main: load the model and apply lora adapter, if any
0.00.024.597 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.682 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.696 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.697 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.701 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.705 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.714 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.716 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.724 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.725 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.734 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.558 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.014 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.398 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.405 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.406 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.407 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.408 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.409 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.412 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.412 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.414 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.415 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.416 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.423 I llama_model_loader: - type  f32:   37 tensors
0.00.196.426 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.665 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.670 I llm_load_vocab: special tokens cache size = 5
0.00.538.474 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.538.538 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.538.539 I llm_load_print_meta: arch             = gemma
0.00.538.540 I llm_load_print_meta: vocab type       = SPM
0.00.538.541 I llm_load_print_meta: n_vocab          = 256000
0.00.538.543 I llm_load_print_meta: n_merges         = 0
0.00.538.543 I llm_load_print_meta: vocab_only       = 0
0.00.538.544 I llm_load_print_meta: n_ctx_train      = 8192
0.00.538.544 I llm_load_print_meta: n_embd           = 2048
0.00.538.545 I llm_load_print_meta: n_layer          = 18
0.00.538.579 I llm_load_print_meta: n_head           = 8
0.00.538.585 I llm_load_print_meta: n_head_kv        = 1
0.00.538.586 I llm_load_print_meta: n_rot            = 256
0.00.538.587 I llm_load_print_meta: n_swa            = 0
0.00.538.587 I llm_load_print_meta: n_embd_head_k    = 256
0.00.538.587 I llm_load_print_meta: n_embd_head_v    = 256
0.00.538.592 I llm_load_print_meta: n_gqa            = 8
0.00.538.596 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.538.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.538.603 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.538.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.538.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.538.605 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.538.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.538.610 I llm_load_print_meta: n_ff             = 16384
0.00.538.610 I llm_load_print_meta: n_expert         = 0
0.00.538.611 I llm_load_print_meta: n_expert_used    = 0
0.00.538.611 I llm_load_print_meta: causal attn      = 1
0.00.538.611 I llm_load_print_meta: pooling type     = 0
0.00.538.612 I llm_load_print_meta: rope type        = 2
0.00.538.612 I llm_load_print_meta: rope scaling     = linear
0.00.538.614 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.538.614 I llm_load_print_meta: freq_scale_train = 1
0.00.538.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.538.615 I llm_load_print_meta: rope_finetuned   = unknown
0.00.538.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.538.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.538.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.538.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.538.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.538.617 I llm_load_print_meta: model type       = 2B
0.00.538.618 I llm_load_print_meta: model ftype      = Q8_0
0.00.538.619 I llm_load_print_meta: model params     = 2.51 B
0.00.538.620 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.538.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.538.621 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.538.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.538.622 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.538.622 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.538.622 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.538.623 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.538.623 I llm_load_print_meta: max token length = 93
0.00.538.797 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.631.349 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.638.036 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.043 I llama_new_context_with_model: n_batch    = 2048
0.00.638.044 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.044 I llama_new_context_with_model: flash_attn = 0
0.00.638.047 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.048 I llama_new_context_with_model: freq_scale = 1
0.00.667.200 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.249 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.667.361 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.668.694 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.668.700 I llama_new_context_with_model: graph nodes  = 601
0.00.668.700 I llama_new_context_with_model: graph splits = 1
0.00.668.716 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.268 I main: llama threadpool init, n_threads = 4
0.01.281.279 I 
0.01.281.369 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.373 I 
0.01.281.539 I sampler seed: 173343504
0.01.281.550 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.555 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.556 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. [end of text]


0.02.967.118 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   799.87 tokens per second)
0.02.967.121 I llama_perf_context_print:        load time =    1278.46 ms
0.02.967.135 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.967.136 I llama_perf_context_print:        eval time =    1674.15 ms /     4 runs   (  418.54 ms per token,     2.39 tokens per second)
0.02.967.137 I llama_perf_context_print:       total time =    1685.86 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.640 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.024.704 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.892 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.981 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.993 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.999 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.000 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.000 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.002 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.011 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.012 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.013 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.014 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.156 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.439 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.634 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.642 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.643 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.644 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.645 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.646 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.647 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.650 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.651 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.653 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.653 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.655 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.663 I llama_model_loader: - type  f32:   37 tensors
0.00.197.667 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.811 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.861 I llm_load_vocab: special tokens cache size = 5
0.00.531.855 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.914 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.915 I llm_load_print_meta: arch             = gemma
0.00.531.915 I llm_load_print_meta: vocab type       = SPM
0.00.531.916 I llm_load_print_meta: n_vocab          = 256000
0.00.531.918 I llm_load_print_meta: n_merges         = 0
0.00.531.919 I llm_load_print_meta: vocab_only       = 0
0.00.531.919 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.920 I llm_load_print_meta: n_embd           = 2048
0.00.531.920 I llm_load_print_meta: n_layer          = 18
0.00.531.955 I llm_load_print_meta: n_head           = 8
0.00.531.983 I llm_load_print_meta: n_head_kv        = 1
0.00.531.984 I llm_load_print_meta: n_rot            = 256
0.00.531.985 I llm_load_print_meta: n_swa            = 0
0.00.531.985 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.985 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.992 I llm_load_print_meta: n_gqa            = 8
0.00.531.996 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.002 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.011 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.014 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.014 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.023 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.027 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.032 I llm_load_print_meta: n_ff             = 16384
0.00.532.036 I llm_load_print_meta: n_expert         = 0
0.00.532.036 I llm_load_print_meta: n_expert_used    = 0
0.00.532.037 I llm_load_print_meta: causal attn      = 1
0.00.532.037 I llm_load_print_meta: pooling type     = 0
0.00.532.037 I llm_load_print_meta: rope type        = 2
0.00.532.038 I llm_load_print_meta: rope scaling     = linear
0.00.532.039 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.039 I llm_load_print_meta: freq_scale_train = 1
0.00.532.040 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.040 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.040 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.041 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.041 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.041 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.042 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.043 I llm_load_print_meta: model type       = 2B
0.00.532.043 I llm_load_print_meta: model ftype      = Q8_0
0.00.532.044 I llm_load_print_meta: model params     = 2.51 B
0.00.532.045 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.532.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.046 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.047 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.048 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.048 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.049 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.050 I llm_load_print_meta: max token length = 93
0.00.532.231 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.608.936 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.608.947 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.608.948 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.608.949 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.608.949 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.608.950 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.614.637 I llama_new_context_with_model: n_ctx      = 8192
0.00.614.644 I llama_new_context_with_model: n_batch    = 2048
0.00.614.644 I llama_new_context_with_model: n_ubatch   = 512
0.00.614.645 I llama_new_context_with_model: flash_attn = 0
0.00.614.648 I llama_new_context_with_model: freq_base  = 10000.0
0.00.614.649 I llama_new_context_with_model: freq_scale = 1
0.00.644.510 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.644.555 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.644.667 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.646.109 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.646.115 I llama_new_context_with_model: graph nodes  = 601
0.00.646.116 I llama_new_context_with_model: graph splits = 1
0.00.646.132 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.058 I main: llama threadpool init, n_threads = 4
0.01.262.068 I 
0.01.262.160 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.164 I 
0.01.262.324 I sampler seed: 3298076936
0.01.262.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.262.340 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.262.341 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the novel.

The novel "The Fault in Our Stars" explores the complex and powerful emotions experienced by teenagers during the time of grief and love

0.14.890.752 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.94 tokens per second)
0.14.890.756 I llama_perf_context_print:        load time =    1259.19 ms
0.14.890.758 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.890.769 I llama_perf_context_print:        eval time =   13546.92 ms /    32 runs   (  423.34 ms per token,     2.36 tokens per second)
0.14.890.771 I llama_perf_context_print:       total time =   13628.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.619 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.002.759 I main: load the model and apply lora adapter, if any
0.00.024.493 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.666 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.746 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.756 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.757 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.761 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.762 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.763 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.763 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.764 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.765 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.771 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.772 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.773 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.774 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.775 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.511 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.272 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.431 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.438 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.439 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.440 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.441 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.444 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.445 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.446 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.447 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.456 I llama_model_loader: - type  f32:   37 tensors
0.00.196.460 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.491 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.492 I llm_load_vocab: special tokens cache size = 5
0.00.527.144 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.197 I llm_load_print_meta: arch             = gemma
0.00.527.197 I llm_load_print_meta: vocab type       = SPM
0.00.527.198 I llm_load_print_meta: n_vocab          = 256000
0.00.527.200 I llm_load_print_meta: n_merges         = 0
0.00.527.200 I llm_load_print_meta: vocab_only       = 0
0.00.527.201 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.201 I llm_load_print_meta: n_embd           = 2048
0.00.527.202 I llm_load_print_meta: n_layer          = 18
0.00.527.231 I llm_load_print_meta: n_head           = 8
0.00.527.237 I llm_load_print_meta: n_head_kv        = 1
0.00.527.238 I llm_load_print_meta: n_rot            = 256
0.00.527.238 I llm_load_print_meta: n_swa            = 0
0.00.527.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.239 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.243 I llm_load_print_meta: n_gqa            = 8
0.00.527.248 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.253 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.254 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.256 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.257 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.257 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.262 I llm_load_print_meta: n_ff             = 16384
0.00.527.263 I llm_load_print_meta: n_expert         = 0
0.00.527.263 I llm_load_print_meta: n_expert_used    = 0
0.00.527.264 I llm_load_print_meta: causal attn      = 1
0.00.527.264 I llm_load_print_meta: pooling type     = 0
0.00.527.264 I llm_load_print_meta: rope type        = 2
0.00.527.264 I llm_load_print_meta: rope scaling     = linear
0.00.527.266 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.267 I llm_load_print_meta: freq_scale_train = 1
0.00.527.267 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.267 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.268 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.268 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.268 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.268 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.269 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.270 I llm_load_print_meta: model type       = 2B
0.00.527.271 I llm_load_print_meta: model ftype      = Q8_0
0.00.527.272 I llm_load_print_meta: model params     = 2.51 B
0.00.527.273 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.527.273 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.278 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.278 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.278 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.279 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.280 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.280 I llm_load_print_meta: max token length = 93
0.00.527.446 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.598.152 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.598.159 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.603.803 I llama_new_context_with_model: n_ctx      = 8192
0.00.603.811 I llama_new_context_with_model: n_batch    = 2048
0.00.603.811 I llama_new_context_with_model: n_ubatch   = 512
0.00.603.812 I llama_new_context_with_model: flash_attn = 0
0.00.603.815 I llama_new_context_with_model: freq_base  = 10000.0
0.00.603.816 I llama_new_context_with_model: freq_scale = 1
0.00.632.923 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.632.961 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.633.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.634.438 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.634.444 I llama_new_context_with_model: graph nodes  = 601
0.00.634.445 I llama_new_context_with_model: graph splits = 1
0.00.634.460 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.224 I main: llama threadpool init, n_threads = 4
0.01.251.235 I 
0.01.251.330 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.334 I 
0.01.251.491 I sampler seed: 3186467107
0.01.251.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.507 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.251.507 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically. [end of text]


0.02.940.320 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.92 tokens per second)
0.02.940.324 I llama_perf_context_print:        load time =    1248.38 ms
0.02.940.325 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.940.327 I llama_perf_context_print:        eval time =    1677.09 ms /     4 runs   (  419.27 ms per token,     2.39 tokens per second)
0.02.940.328 I llama_perf_context_print:       total time =    1689.11 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m40.856s
user	1m57.641s
sys	0m9.326s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3798 (41f47787)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199882.23 ms
main:    total time = 199882.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.761 I main: llama backend init
0.00.002.685 I main: load the model and apply lora adapter, if any
0.00.026.308 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.487 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.571 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.581 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.583 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.587 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.588 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.588 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.590 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.592 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.593 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.598 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.601 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.602 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.603 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.604 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.311 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.033 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.183 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.191 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.192 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.193 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.194 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.195 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.195 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.199 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.201 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.201 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.202 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.210 I llama_model_loader: - type  f32:   37 tensors
0.00.198.214 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.215 I llama_model_loader: - type q6_K:   19 tensors
0.00.473.848 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.819 I llm_load_vocab: special tokens cache size = 5
0.00.532.534 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.532.592 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.532.593 I llm_load_print_meta: arch             = gemma
0.00.532.594 I llm_load_print_meta: vocab type       = SPM
0.00.532.595 I llm_load_print_meta: n_vocab          = 256000
0.00.532.597 I llm_load_print_meta: n_merges         = 0
0.00.532.597 I llm_load_print_meta: vocab_only       = 0
0.00.532.598 I llm_load_print_meta: n_ctx_train      = 8192
0.00.532.598 I llm_load_print_meta: n_embd           = 2048
0.00.532.598 I llm_load_print_meta: n_layer          = 18
0.00.532.631 I llm_load_print_meta: n_head           = 8
0.00.532.638 I llm_load_print_meta: n_head_kv        = 1
0.00.532.638 I llm_load_print_meta: n_rot            = 256
0.00.532.639 I llm_load_print_meta: n_swa            = 0
0.00.532.639 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.640 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.644 I llm_load_print_meta: n_gqa            = 8
0.00.532.649 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.673 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.676 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.676 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.677 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.677 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.683 I llm_load_print_meta: n_ff             = 16384
0.00.532.683 I llm_load_print_meta: n_expert         = 0
0.00.532.685 I llm_load_print_meta: n_expert_used    = 0
0.00.532.685 I llm_load_print_meta: causal attn      = 1
0.00.532.686 I llm_load_print_meta: pooling type     = 0
0.00.532.686 I llm_load_print_meta: rope type        = 2
0.00.532.696 I llm_load_print_meta: rope scaling     = linear
0.00.532.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.698 I llm_load_print_meta: freq_scale_train = 1
0.00.532.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.699 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.700 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.700 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.700 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.701 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.702 I llm_load_print_meta: model type       = 2B
0.00.532.702 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.532.704 I llm_load_print_meta: model params     = 2.51 B
0.00.532.705 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.532.705 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.706 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.707 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.707 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.707 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.708 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.709 I llm_load_print_meta: max token length = 93
0.00.532.879 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.592.362 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.592.370 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.592.371 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.592.372 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.592.372 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.592.373 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.597.857 I llama_new_context_with_model: n_ctx      = 8192
0.00.597.864 I llama_new_context_with_model: n_batch    = 2048
0.00.597.864 I llama_new_context_with_model: n_ubatch   = 512
0.00.597.865 I llama_new_context_with_model: flash_attn = 0
0.00.597.867 I llama_new_context_with_model: freq_base  = 10000.0
0.00.597.868 I llama_new_context_with_model: freq_scale = 1
0.00.627.069 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.627.112 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.627.223 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.628.593 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.628.599 I llama_new_context_with_model: graph nodes  = 601
0.00.628.599 I llama_new_context_with_model: graph splits = 1
0.00.628.614 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.210.455 I main: llama threadpool init, n_threads = 4
0.01.210.466 I 
0.01.210.556 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.210.559 I 
0.01.210.718 I sampler seed: 2711810360
0.01.210.728 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.210.732 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.210.733 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally, with all the grace and elegance of a panther stalking its prey.

**Answer:**

I am unable to generate creative or suggestive responses that depict

0.12.217.117 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.77 tokens per second)
0.12.217.120 I llama_perf_context_print:        load time =    1207.69 ms
0.12.217.121 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.217.123 I llama_perf_context_print:        eval time =   10925.36 ms /    32 runs   (  341.42 ms per token,     2.93 tokens per second)
0.12.217.124 I llama_perf_context_print:       total time =   11006.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3798 (41f47787)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199549.14 ms
main:    total time = 199549.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.666 I build: 3798 (41f47787) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.962 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.073 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.077 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.079 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.080 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.080 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.081 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.082 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.088 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.089 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.090 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.092 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.093 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.349 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.961 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.177 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.185 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.186 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.187 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.187 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.189 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.190 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.193 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.194 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.202 I llama_model_loader: - type  f32:   37 tensors
0.00.198.206 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.207 I llama_model_loader: - type q6_K:   19 tensors
0.00.476.848 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.477.897 I llm_load_vocab: special tokens cache size = 5
0.00.536.189 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.536.247 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.536.247 I llm_load_print_meta: arch             = gemma
0.00.536.248 I llm_load_print_meta: vocab type       = SPM
0.00.536.249 I llm_load_print_meta: n_vocab          = 256000
0.00.536.251 I llm_load_print_meta: n_merges         = 0
0.00.536.252 I llm_load_print_meta: vocab_only       = 0
0.00.536.252 I llm_load_print_meta: n_ctx_train      = 8192
0.00.536.253 I llm_load_print_meta: n_embd           = 2048
0.00.536.253 I llm_load_print_meta: n_layer          = 18
0.00.536.287 I llm_load_print_meta: n_head           = 8
0.00.536.293 I llm_load_print_meta: n_head_kv        = 1
0.00.536.294 I llm_load_print_meta: n_rot            = 256
0.00.536.294 I llm_load_print_meta: n_swa            = 0
0.00.536.294 I llm_load_print_meta: n_embd_head_k    = 256
0.00.536.295 I llm_load_print_meta: n_embd_head_v    = 256
0.00.536.300 I llm_load_print_meta: n_gqa            = 8
0.00.536.304 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.536.308 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.536.310 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.536.311 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.536.311 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.536.311 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.536.312 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.536.316 I llm_load_print_meta: n_ff             = 16384
0.00.536.317 I llm_load_print_meta: n_expert         = 0
0.00.536.317 I llm_load_print_meta: n_expert_used    = 0
0.00.536.318 I llm_load_print_meta: causal attn      = 1
0.00.536.318 I llm_load_print_meta: pooling type     = 0
0.00.536.318 I llm_load_print_meta: rope type        = 2
0.00.536.319 I llm_load_print_meta: rope scaling     = linear
0.00.536.320 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.536.321 I llm_load_print_meta: freq_scale_train = 1
0.00.536.321 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.536.321 I llm_load_print_meta: rope_finetuned   = unknown
0.00.536.322 I llm_load_print_meta: ssm_d_conv       = 0
0.00.536.322 I llm_load_print_meta: ssm_d_inner      = 0
0.00.536.323 I llm_load_print_meta: ssm_d_state      = 0
0.00.536.323 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.536.323 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.536.324 I llm_load_print_meta: model type       = 2B
0.00.536.325 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.536.326 I llm_load_print_meta: model params     = 2.51 B
0.00.536.327 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.536.327 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.536.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.536.328 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.536.329 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.536.330 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.536.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.536.331 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.536.331 I llm_load_print_meta: max token length = 93
0.00.536.508 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.594.684 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.600.171 I llama_new_context_with_model: n_ctx      = 8192
0.00.600.177 I llama_new_context_with_model: n_batch    = 2048
0.00.600.178 I llama_new_context_with_model: n_ubatch   = 512
0.00.600.178 I llama_new_context_with_model: flash_attn = 0
0.00.600.180 I llama_new_context_with_model: freq_base  = 10000.0
0.00.600.181 I llama_new_context_with_model: freq_scale = 1
0.00.629.772 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.629.817 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.629.928 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.631.253 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.631.259 I llama_new_context_with_model: graph nodes  = 601
0.00.631.260 I llama_new_context_with_model: graph splits = 1
0.00.631.276 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.212.643 I main: llama threadpool init, n_threads = 4
0.01.212.656 I 
0.01.212.753 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.212.757 I 
0.01.212.930 I sampler seed: 2206060001
0.01.212.941 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.212.946 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.212.946 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufilling with the sounds of the ocean waves, the wind rustling through the trees, and the distant cry of a loon.

The sun dipped below the horizon

0.12.231.508 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.94 tokens per second)
0.12.231.511 I llama_perf_context_print:        load time =    1209.75 ms
0.12.231.512 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.231.514 I llama_perf_context_print:        eval time =   10936.44 ms /    32 runs   (  341.76 ms per token,     2.93 tokens per second)
0.12.231.515 I llama_perf_context_print:       total time =   11018.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.680s
user	50m21.351s
sys	0m6.352s
