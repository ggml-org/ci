+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4324 (c27ac678) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.023.493 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.503 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.596 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.609 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.610 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.616 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.619 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.620 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.621 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.622 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.624 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.631 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.632 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.633 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.635 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.531 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.339.280 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.826 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.838 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.845 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.849 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.851 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.852 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.854 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.362.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.865 I llama_model_loader: - type  f32:   37 tensors
0.00.362.867 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.669.175 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.670.205 I llm_load_vocab: special tokens cache size = 5
0.00.857.481 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.857.552 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.857.553 I llm_load_print_meta: arch             = gemma
0.00.857.554 I llm_load_print_meta: vocab type       = SPM
0.00.857.555 I llm_load_print_meta: n_vocab          = 256000
0.00.857.557 I llm_load_print_meta: n_merges         = 0
0.00.857.558 I llm_load_print_meta: vocab_only       = 0
0.00.857.558 I llm_load_print_meta: n_ctx_train      = 8192
0.00.857.559 I llm_load_print_meta: n_embd           = 2048
0.00.857.559 I llm_load_print_meta: n_layer          = 18
0.00.857.627 I llm_load_print_meta: n_head           = 8
0.00.857.634 I llm_load_print_meta: n_head_kv        = 1
0.00.857.635 I llm_load_print_meta: n_rot            = 256
0.00.857.636 I llm_load_print_meta: n_swa            = 0
0.00.857.636 I llm_load_print_meta: n_embd_head_k    = 256
0.00.857.636 I llm_load_print_meta: n_embd_head_v    = 256
0.00.857.641 I llm_load_print_meta: n_gqa            = 8
0.00.857.646 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.857.651 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.857.652 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.857.654 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.857.654 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.857.655 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.857.655 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.857.660 I llm_load_print_meta: n_ff             = 16384
0.00.857.661 I llm_load_print_meta: n_expert         = 0
0.00.857.662 I llm_load_print_meta: n_expert_used    = 0
0.00.857.662 I llm_load_print_meta: causal attn      = 1
0.00.857.663 I llm_load_print_meta: pooling type     = 0
0.00.857.664 I llm_load_print_meta: rope type        = 2
0.00.857.664 I llm_load_print_meta: rope scaling     = linear
0.00.857.666 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.857.667 I llm_load_print_meta: freq_scale_train = 1
0.00.857.667 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.857.668 I llm_load_print_meta: rope_finetuned   = unknown
0.00.857.668 I llm_load_print_meta: ssm_d_conv       = 0
0.00.857.668 I llm_load_print_meta: ssm_d_inner      = 0
0.00.857.669 I llm_load_print_meta: ssm_d_state      = 0
0.00.857.669 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.857.670 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.857.671 I llm_load_print_meta: model type       = 2B
0.00.857.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.857.673 I llm_load_print_meta: model params     = 2.51 B
0.00.857.674 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.857.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.857.675 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.857.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.857.681 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.857.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.857.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.857.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.857.688 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.857.689 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.857.690 I llm_load_print_meta: max token length = 93
0.00.958.277 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.958.290 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.958.291 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.958.292 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.958.292 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.958.293 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.964.670 I llama_new_context_with_model: n_seq_max     = 1
0.00.964.679 I llama_new_context_with_model: n_ctx         = 4096
0.00.964.679 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.964.680 I llama_new_context_with_model: n_batch       = 2048
0.00.964.680 I llama_new_context_with_model: n_ubatch      = 512
0.00.964.681 I llama_new_context_with_model: flash_attn    = 0
0.00.964.684 I llama_new_context_with_model: freq_base     = 10000.0
0.00.964.686 I llama_new_context_with_model: freq_scale    = 1
0.00.964.686 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.979.765 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.979.809 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.979.928 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.982.550 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.982.554 I llama_new_context_with_model: graph nodes  = 601
0.00.982.554 I llama_new_context_with_model: graph splits = 1
0.00.982.578 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.592.922 I main: llama threadpool init, n_threads = 4
0.01.592.937 I 
0.01.593.060 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.593.061 I 
0.01.593.308 I sampler seed: 1421299011
0.01.593.323 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.593.334 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.593.335 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.593.336 I 
 increasities, and the limitations of traditional accounting practices.

**1. The Role of Information in Decision-Making**

- The increasing complexity of business decisions

0.15.140.662 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.36 tokens per second)
0.15.140.666 I llama_perf_context_print:        load time =    1591.97 ms
0.15.140.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.140.681 I llama_perf_context_print:        eval time =   13458.17 ms /    32 runs   (  420.57 ms per token,     2.38 tokens per second)
0.15.140.683 I llama_perf_context_print:       total time =   13547.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.741 I build: 4324 (c27ac678) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.935 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.023.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.671 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.686 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.690 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.698 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.702 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.703 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.705 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.717 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.718 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.720 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.831 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.104 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.729 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.731 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.732 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.734 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.735 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.736 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.741 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.743 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.744 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.745 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.361.747 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.757 I llama_model_loader: - type  f32:   37 tensors
0.00.361.759 I llama_model_loader: - type q8_0:  127 tensors
0.00.614.493 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.684.757 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.685.784 I llm_load_vocab: special tokens cache size = 5
0.00.887.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.887.402 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.887.403 I llm_load_print_meta: arch             = gemma
0.00.887.404 I llm_load_print_meta: vocab type       = SPM
0.00.887.405 I llm_load_print_meta: n_vocab          = 256000
0.00.887.407 I llm_load_print_meta: n_merges         = 0
0.00.887.408 I llm_load_print_meta: vocab_only       = 0
0.00.887.408 I llm_load_print_meta: n_ctx_train      = 8192
0.00.887.409 I llm_load_print_meta: n_embd           = 2048
0.00.887.409 I llm_load_print_meta: n_layer          = 18
0.00.887.474 I llm_load_print_meta: n_head           = 8
0.00.887.481 I llm_load_print_meta: n_head_kv        = 1
0.00.887.482 I llm_load_print_meta: n_rot            = 256
0.00.887.482 I llm_load_print_meta: n_swa            = 0
0.00.887.483 I llm_load_print_meta: n_embd_head_k    = 256
0.00.887.483 I llm_load_print_meta: n_embd_head_v    = 256
0.00.887.487 I llm_load_print_meta: n_gqa            = 8
0.00.887.492 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.887.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.887.498 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.887.500 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.887.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.887.500 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.887.501 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.887.505 I llm_load_print_meta: n_ff             = 16384
0.00.887.506 I llm_load_print_meta: n_expert         = 0
0.00.887.506 I llm_load_print_meta: n_expert_used    = 0
0.00.887.507 I llm_load_print_meta: causal attn      = 1
0.00.887.507 I llm_load_print_meta: pooling type     = 0
0.00.887.507 I llm_load_print_meta: rope type        = 2
0.00.887.508 I llm_load_print_meta: rope scaling     = linear
0.00.887.509 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.887.510 I llm_load_print_meta: freq_scale_train = 1
0.00.887.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.887.511 I llm_load_print_meta: rope_finetuned   = unknown
0.00.887.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.887.511 I llm_load_print_meta: ssm_d_inner      = 0
0.00.887.511 I llm_load_print_meta: ssm_d_state      = 0
0.00.887.512 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.887.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.887.513 I llm_load_print_meta: model type       = 2B
0.00.887.514 I llm_load_print_meta: model ftype      = Q8_0
0.00.887.514 I llm_load_print_meta: model params     = 2.51 B
0.00.887.515 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.887.515 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.887.516 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.887.516 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.887.517 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.887.517 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.887.518 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.887.518 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.887.523 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.887.525 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.887.525 I llm_load_print_meta: max token length = 93
0.00.983.674 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.989.758 I llama_new_context_with_model: n_seq_max     = 1
0.00.989.767 I llama_new_context_with_model: n_ctx         = 4096
0.00.989.768 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.989.768 I llama_new_context_with_model: n_batch       = 2048
0.00.989.768 I llama_new_context_with_model: n_ubatch      = 512
0.00.989.769 I llama_new_context_with_model: flash_attn    = 0
0.00.989.773 I llama_new_context_with_model: freq_base     = 10000.0
0.00.989.774 I llama_new_context_with_model: freq_scale    = 1
0.00.989.774 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.005.587 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.005.633 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.005.750 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.008.404 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.008.409 I llama_new_context_with_model: graph nodes  = 601
0.01.008.409 I llama_new_context_with_model: graph splits = 1
0.01.008.431 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.617.219 I main: llama threadpool init, n_threads = 4
0.01.617.235 I 
0.01.617.362 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.617.365 I 
0.01.617.614 I sampler seed: 2369818060
0.01.617.628 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.617.638 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.617.641 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.617.641 I 
 increasities on social media and express skepticism towards their authenticity.

**Argument:**

Social media platforms are rife with instances of inappropriate and misleading content that masquerades

0.15.337.682 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.15 tokens per second)
0.15.337.685 I llama_perf_context_print:        load time =    1616.16 ms
0.15.337.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.337.688 I llama_perf_context_print:        eval time =   13630.17 ms /    32 runs   (  425.94 ms per token,     2.35 tokens per second)
0.15.337.689 I llama_perf_context_print:       total time =   13720.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4324 (c27ac678) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.751 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.764 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.893 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.899 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.912 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.915 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.917 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.919 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.921 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.931 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.942 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.944 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.135 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.339.339 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.875 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.888 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.889 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.891 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.892 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.893 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.895 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.900 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.901 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.902 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.362.905 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.914 I llama_model_loader: - type  f32:   37 tensors
0.00.362.917 I llama_model_loader: - type q8_0:  127 tensors
0.00.610.656 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.678.487 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.679.462 I llm_load_vocab: special tokens cache size = 5
0.00.869.352 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.869.428 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.869.428 I llm_load_print_meta: arch             = gemma
0.00.869.429 I llm_load_print_meta: vocab type       = SPM
0.00.869.430 I llm_load_print_meta: n_vocab          = 256000
0.00.869.433 I llm_load_print_meta: n_merges         = 0
0.00.869.433 I llm_load_print_meta: vocab_only       = 0
0.00.869.434 I llm_load_print_meta: n_ctx_train      = 8192
0.00.869.434 I llm_load_print_meta: n_embd           = 2048
0.00.869.435 I llm_load_print_meta: n_layer          = 18
0.00.869.523 I llm_load_print_meta: n_head           = 8
0.00.869.533 I llm_load_print_meta: n_head_kv        = 1
0.00.869.534 I llm_load_print_meta: n_rot            = 256
0.00.869.535 I llm_load_print_meta: n_swa            = 0
0.00.869.545 I llm_load_print_meta: n_embd_head_k    = 256
0.00.869.546 I llm_load_print_meta: n_embd_head_v    = 256
0.00.869.554 I llm_load_print_meta: n_gqa            = 8
0.00.869.560 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.869.567 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.869.570 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.869.572 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.869.574 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.869.574 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.869.575 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.869.596 I llm_load_print_meta: n_ff             = 16384
0.00.869.598 I llm_load_print_meta: n_expert         = 0
0.00.869.599 I llm_load_print_meta: n_expert_used    = 0
0.00.869.600 I llm_load_print_meta: causal attn      = 1
0.00.869.601 I llm_load_print_meta: pooling type     = 0
0.00.869.601 I llm_load_print_meta: rope type        = 2
0.00.869.602 I llm_load_print_meta: rope scaling     = linear
0.00.869.614 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.869.615 I llm_load_print_meta: freq_scale_train = 1
0.00.869.616 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.869.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.869.618 I llm_load_print_meta: ssm_d_conv       = 0
0.00.869.619 I llm_load_print_meta: ssm_d_inner      = 0
0.00.869.620 I llm_load_print_meta: ssm_d_state      = 0
0.00.869.620 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.869.621 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.869.622 I llm_load_print_meta: model type       = 2B
0.00.869.624 I llm_load_print_meta: model ftype      = Q8_0
0.00.869.626 I llm_load_print_meta: model params     = 2.51 B
0.00.869.627 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.869.628 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.869.629 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.869.629 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.869.630 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.869.631 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.869.632 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.869.633 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.869.641 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.869.643 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.869.644 I llm_load_print_meta: max token length = 93
0.00.948.943 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.948.956 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.948.957 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.948.958 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.948.958 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.948.959 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.955.237 I llama_new_context_with_model: n_seq_max     = 1
0.00.955.247 I llama_new_context_with_model: n_ctx         = 4096
0.00.955.247 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.955.247 I llama_new_context_with_model: n_batch       = 2048
0.00.955.248 I llama_new_context_with_model: n_ubatch      = 512
0.00.955.248 I llama_new_context_with_model: flash_attn    = 0
0.00.955.253 I llama_new_context_with_model: freq_base     = 10000.0
0.00.955.254 I llama_new_context_with_model: freq_scale    = 1
0.00.955.255 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.970.357 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.970.404 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.538 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.973.241 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.973.245 I llama_new_context_with_model: graph nodes  = 601
0.00.973.246 I llama_new_context_with_model: graph splits = 1
0.00.973.272 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.519 I main: llama threadpool init, n_threads = 4
0.01.580.537 I 
0.01.580.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.580.678 I 
0.01.580.929 I sampler seed: 3278993122
0.01.580.942 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.580.955 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.580.959 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.580.959 I 
 increasities are the result of:
a) Genetic variation
b) Environmental factors
c) Developmental errors
d) Haploidisation

Correct answer is

0.15.140.698 I llama_perf_sampler_print:    sampling time =      49.02 ms /    33 runs   (    1.49 ms per token,   673.18 tokens per second)
0.15.140.702 I llama_perf_context_print:        load time =    1579.51 ms
0.15.140.703 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.140.705 I llama_perf_context_print:        eval time =   13470.76 ms /    32 runs   (  420.96 ms per token,     2.38 tokens per second)
0.15.140.706 I llama_perf_context_print:       total time =   13560.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4324 (c27ac678) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.635 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.648 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.743 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.757 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.759 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.767 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.771 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.772 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.774 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.775 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.776 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.783 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.785 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.787 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.788 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.789 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.153 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.311 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.944 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.956 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.958 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.959 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.960 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.962 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.963 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.967 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.969 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.970 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.971 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.364.973 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.983 I llama_model_loader: - type  f32:   37 tensors
0.00.364.985 I llama_model_loader: - type q8_0:  127 tensors
0.00.597.439 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.664.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.665.539 I llm_load_vocab: special tokens cache size = 5
0.00.865.058 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.865.132 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.865.135 I llm_load_print_meta: arch             = gemma
0.00.865.136 I llm_load_print_meta: vocab type       = SPM
0.00.865.137 I llm_load_print_meta: n_vocab          = 256000
0.00.865.139 I llm_load_print_meta: n_merges         = 0
0.00.865.140 I llm_load_print_meta: vocab_only       = 0
0.00.865.140 I llm_load_print_meta: n_ctx_train      = 8192
0.00.865.141 I llm_load_print_meta: n_embd           = 2048
0.00.865.142 I llm_load_print_meta: n_layer          = 18
0.00.865.207 I llm_load_print_meta: n_head           = 8
0.00.865.218 I llm_load_print_meta: n_head_kv        = 1
0.00.865.219 I llm_load_print_meta: n_rot            = 256
0.00.865.219 I llm_load_print_meta: n_swa            = 0
0.00.865.220 I llm_load_print_meta: n_embd_head_k    = 256
0.00.865.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.865.226 I llm_load_print_meta: n_gqa            = 8
0.00.865.231 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.865.236 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.865.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.865.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.865.242 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.865.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.865.243 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.865.248 I llm_load_print_meta: n_ff             = 16384
0.00.865.249 I llm_load_print_meta: n_expert         = 0
0.00.865.249 I llm_load_print_meta: n_expert_used    = 0
0.00.865.249 I llm_load_print_meta: causal attn      = 1
0.00.865.250 I llm_load_print_meta: pooling type     = 0
0.00.865.250 I llm_load_print_meta: rope type        = 2
0.00.865.251 I llm_load_print_meta: rope scaling     = linear
0.00.865.252 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.865.253 I llm_load_print_meta: freq_scale_train = 1
0.00.865.253 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.865.253 I llm_load_print_meta: rope_finetuned   = unknown
0.00.865.263 I llm_load_print_meta: ssm_d_conv       = 0
0.00.865.264 I llm_load_print_meta: ssm_d_inner      = 0
0.00.865.278 I llm_load_print_meta: ssm_d_state      = 0
0.00.865.279 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.865.279 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.865.280 I llm_load_print_meta: model type       = 2B
0.00.865.282 I llm_load_print_meta: model ftype      = Q8_0
0.00.865.283 I llm_load_print_meta: model params     = 2.51 B
0.00.865.284 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.865.284 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.865.285 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.865.286 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.865.286 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.865.287 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.865.290 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.865.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.865.298 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.865.299 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.865.301 I llm_load_print_meta: max token length = 93
0.00.938.379 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.938.389 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.944.318 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.323 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.324 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.324 I llama_new_context_with_model: n_batch       = 2048
0.00.944.324 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.325 I llama_new_context_with_model: flash_attn    = 0
0.00.944.328 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.329 I llama_new_context_with_model: freq_scale    = 1
0.00.944.329 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.365 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.407 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.180 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.184 I llama_new_context_with_model: graph nodes  = 601
0.00.962.184 I llama_new_context_with_model: graph splits = 1
0.00.962.209 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.911 I main: llama threadpool init, n_threads = 4
0.01.571.928 I 
0.01.572.056 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.572.060 I 
0.01.572.336 I sampler seed: 9651271
0.01.572.350 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.360 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.361 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.362 I 
 increasities and controversies surrounding the portrayal of LGBTQ+ characters in television and film. [end of text]


0.08.791.499 I llama_perf_sampler_print:    sampling time =      26.11 ms /    18 runs   (    1.45 ms per token,   689.44 tokens per second)
0.08.791.502 I llama_perf_context_print:        load time =    1570.93 ms
0.08.791.503 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.791.504 I llama_perf_context_print:        eval time =    7170.71 ms /    17 runs   (  421.81 ms per token,     2.37 tokens per second)
0.08.791.506 I llama_perf_context_print:       total time =    7219.60 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.293s
user	3m25.936s
sys	0m9.597s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4324 (c27ac678)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186688.70 ms
main:    total time = 186688.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4324 (c27ac678) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.513 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.523 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.621 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.634 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.636 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.643 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.646 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.647 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.648 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.650 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.651 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.657 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.659 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.660 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.786 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.222 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.224 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.225 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.226 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.228 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.229 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.233 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.234 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.236 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.237 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.362.239 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.248 I llama_model_loader: - type  f32:   37 tensors
0.00.362.250 I llama_model_loader: - type q4_K:  108 tensors
0.00.362.250 I llama_model_loader: - type q6_K:   19 tensors
0.00.599.970 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.459 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.441 I llm_load_vocab: special tokens cache size = 5
0.00.861.470 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.546 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.550 I llm_load_print_meta: arch             = gemma
0.00.861.551 I llm_load_print_meta: vocab type       = SPM
0.00.861.552 I llm_load_print_meta: n_vocab          = 256000
0.00.861.554 I llm_load_print_meta: n_merges         = 0
0.00.861.555 I llm_load_print_meta: vocab_only       = 0
0.00.861.555 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.555 I llm_load_print_meta: n_embd           = 2048
0.00.861.556 I llm_load_print_meta: n_layer          = 18
0.00.861.619 I llm_load_print_meta: n_head           = 8
0.00.861.629 I llm_load_print_meta: n_head_kv        = 1
0.00.861.630 I llm_load_print_meta: n_rot            = 256
0.00.861.631 I llm_load_print_meta: n_swa            = 0
0.00.861.632 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.632 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.637 I llm_load_print_meta: n_gqa            = 8
0.00.861.642 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.648 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.653 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.653 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.654 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.660 I llm_load_print_meta: n_ff             = 16384
0.00.861.661 I llm_load_print_meta: n_expert         = 0
0.00.861.662 I llm_load_print_meta: n_expert_used    = 0
0.00.861.662 I llm_load_print_meta: causal attn      = 1
0.00.861.662 I llm_load_print_meta: pooling type     = 0
0.00.861.663 I llm_load_print_meta: rope type        = 2
0.00.861.663 I llm_load_print_meta: rope scaling     = linear
0.00.861.665 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.665 I llm_load_print_meta: freq_scale_train = 1
0.00.861.666 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.667 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.667 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.667 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.668 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.668 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.672 I llm_load_print_meta: model type       = 2B
0.00.861.673 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.861.674 I llm_load_print_meta: model params     = 2.51 B
0.00.861.675 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.861.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.676 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.678 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.685 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.687 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.687 I llm_load_print_meta: max token length = 93
0.00.923.881 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.923.890 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.923.891 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.923.891 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.923.892 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.923.893 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.929.820 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.827 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.828 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.828 I llama_new_context_with_model: n_batch       = 2048
0.00.929.829 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.829 I llama_new_context_with_model: flash_attn    = 0
0.00.929.832 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.833 I llama_new_context_with_model: freq_scale    = 1
0.00.929.834 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.798 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.841 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.522 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.527 I llama_new_context_with_model: graph nodes  = 601
0.00.947.527 I llama_new_context_with_model: graph splits = 1
0.00.947.550 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.528.473 I main: llama threadpool init, n_threads = 4
0.01.528.490 I 
0.01.528.610 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.528.614 I 
0.01.528.860 I sampler seed: 1694174069
0.01.528.873 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.528.883 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.528.886 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.528.886 I 
 seconded with the following sentence: "I think it is important to remember that the past is not indicative of the future."

This sentence presents a counterpoint

0.12.636.057 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.46 tokens per second)
0.12.636.061 I llama_perf_context_print:        load time =    1527.50 ms
0.12.636.093 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.636.095 I llama_perf_context_print:        eval time =   11018.23 ms /    32 runs   (  344.32 ms per token,     2.90 tokens per second)
0.12.636.096 I llama_perf_context_print:       total time =   11107.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4324 (c27ac678)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186897.64 ms
main:    total time = 186897.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4324 (c27ac678) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.209 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.320 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.336 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.340 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.349 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.352 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.354 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.362 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.364 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.368 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.369 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.425 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.339.128 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.572 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.582 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.584 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.585 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.586 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.588 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.589 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.593 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.595 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.604 I llama_model_loader: - type  f32:   37 tensors
0.00.362.606 I llama_model_loader: - type q4_K:  108 tensors
0.00.362.606 I llama_model_loader: - type q6_K:   19 tensors
0.00.612.702 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.680.214 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.681.209 I llm_load_vocab: special tokens cache size = 5
0.00.871.779 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.871.852 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.871.853 I llm_load_print_meta: arch             = gemma
0.00.871.853 I llm_load_print_meta: vocab type       = SPM
0.00.871.854 I llm_load_print_meta: n_vocab          = 256000
0.00.871.857 I llm_load_print_meta: n_merges         = 0
0.00.871.857 I llm_load_print_meta: vocab_only       = 0
0.00.871.857 I llm_load_print_meta: n_ctx_train      = 8192
0.00.871.858 I llm_load_print_meta: n_embd           = 2048
0.00.871.858 I llm_load_print_meta: n_layer          = 18
0.00.871.924 I llm_load_print_meta: n_head           = 8
0.00.871.932 I llm_load_print_meta: n_head_kv        = 1
0.00.871.932 I llm_load_print_meta: n_rot            = 256
0.00.871.933 I llm_load_print_meta: n_swa            = 0
0.00.871.933 I llm_load_print_meta: n_embd_head_k    = 256
0.00.871.933 I llm_load_print_meta: n_embd_head_v    = 256
0.00.871.938 I llm_load_print_meta: n_gqa            = 8
0.00.871.942 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.871.948 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.871.949 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.871.951 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.871.952 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.871.952 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.871.953 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.871.959 I llm_load_print_meta: n_ff             = 16384
0.00.871.959 I llm_load_print_meta: n_expert         = 0
0.00.871.960 I llm_load_print_meta: n_expert_used    = 0
0.00.871.961 I llm_load_print_meta: causal attn      = 1
0.00.871.983 I llm_load_print_meta: pooling type     = 0
0.00.871.983 I llm_load_print_meta: rope type        = 2
0.00.871.984 I llm_load_print_meta: rope scaling     = linear
0.00.871.986 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.871.987 I llm_load_print_meta: freq_scale_train = 1
0.00.871.988 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.871.989 I llm_load_print_meta: rope_finetuned   = unknown
0.00.871.995 I llm_load_print_meta: ssm_d_conv       = 0
0.00.871.996 I llm_load_print_meta: ssm_d_inner      = 0
0.00.871.996 I llm_load_print_meta: ssm_d_state      = 0
0.00.871.997 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.871.998 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.871.998 I llm_load_print_meta: model type       = 2B
0.00.871.999 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.872.000 I llm_load_print_meta: model params     = 2.51 B
0.00.872.001 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.872.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.003 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.003 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.003 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.004 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.010 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.012 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.012 I llm_load_print_meta: max token length = 93
0.00.930.584 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.936.538 I llama_new_context_with_model: n_seq_max     = 1
0.00.936.546 I llama_new_context_with_model: n_ctx         = 4096
0.00.936.547 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.936.547 I llama_new_context_with_model: n_batch       = 2048
0.00.936.548 I llama_new_context_with_model: n_ubatch      = 512
0.00.936.548 I llama_new_context_with_model: flash_attn    = 0
0.00.936.552 I llama_new_context_with_model: freq_base     = 10000.0
0.00.936.553 I llama_new_context_with_model: freq_scale    = 1
0.00.936.554 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.200 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.952.244 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.952.363 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.954.936 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.954.940 I llama_new_context_with_model: graph nodes  = 601
0.00.954.941 I llama_new_context_with_model: graph splits = 1
0.00.954.964 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.538.082 I main: llama threadpool init, n_threads = 4
0.01.538.099 I 
0.01.538.230 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.538.235 I 
0.01.538.491 I sampler seed: 127830167
0.01.538.505 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.538.515 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.538.517 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.538.517 I 
 seconally.

**Assistant**
I'm sorry, but I'm unable to provide assistance with tasks that involve potentially harmful or sensitive content. [end of text]


0.12.638.318 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.99 tokens per second)
0.12.638.346 I llama_perf_context_print:        load time =    1537.13 ms
0.12.638.347 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.638.349 I llama_perf_context_print:        eval time =   11010.78 ms /    32 runs   (  344.09 ms per token,     2.91 tokens per second)
0.12.638.350 I llama_perf_context_print:       total time =   11100.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.829s
user	46m48.802s
sys	0m6.462s
