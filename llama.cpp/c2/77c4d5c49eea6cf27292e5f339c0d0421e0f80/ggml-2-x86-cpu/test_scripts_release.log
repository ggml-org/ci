+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4172 (c277c4d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.505 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.518 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.525 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.534 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.536 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.540 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.540 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.541 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.541 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.542 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.543 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.549 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.549 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.550 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.551 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.552 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.329 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.126 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.136 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.137 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.138 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.139 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.140 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.141 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.144 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.145 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.146 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.147 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.149 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.153 I llama_model_loader: - type  f32:   37 tensors
0.00.131.155 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.868 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.711 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.217 I llm_load_vocab: special tokens cache size = 5
0.00.261.920 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.937 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.937 I llm_load_print_meta: arch             = gemma
0.00.261.938 I llm_load_print_meta: vocab type       = SPM
0.00.261.939 I llm_load_print_meta: n_vocab          = 256000
0.00.261.940 I llm_load_print_meta: n_merges         = 0
0.00.261.940 I llm_load_print_meta: vocab_only       = 0
0.00.261.940 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.940 I llm_load_print_meta: n_embd           = 2048
0.00.261.941 I llm_load_print_meta: n_layer          = 18
0.00.261.953 I llm_load_print_meta: n_head           = 8
0.00.261.954 I llm_load_print_meta: n_head_kv        = 1
0.00.261.955 I llm_load_print_meta: n_rot            = 256
0.00.261.956 I llm_load_print_meta: n_swa            = 0
0.00.261.957 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.957 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.959 I llm_load_print_meta: n_gqa            = 8
0.00.261.960 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.961 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.962 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.963 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.963 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.963 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.964 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.965 I llm_load_print_meta: n_ff             = 16384
0.00.261.966 I llm_load_print_meta: n_expert         = 0
0.00.261.967 I llm_load_print_meta: n_expert_used    = 0
0.00.261.967 I llm_load_print_meta: causal attn      = 1
0.00.261.967 I llm_load_print_meta: pooling type     = 0
0.00.261.968 I llm_load_print_meta: rope type        = 2
0.00.261.968 I llm_load_print_meta: rope scaling     = linear
0.00.261.970 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.970 I llm_load_print_meta: freq_scale_train = 1
0.00.261.971 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.971 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.972 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.972 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.972 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.973 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.973 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.974 I llm_load_print_meta: model type       = 2B
0.00.261.974 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.975 I llm_load_print_meta: model params     = 2.51 B
0.00.261.977 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.977 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.977 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.978 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.982 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.983 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.983 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.984 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.984 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.986 I llm_load_print_meta: max token length = 93
0.00.366.207 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.366.213 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.366.214 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.366.215 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.366.215 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.366.216 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.513 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.519 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.519 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.520 I llama_new_context_with_model: n_batch       = 2048
0.00.371.520 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.521 I llama_new_context_with_model: flash_attn    = 0
0.00.371.523 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.524 I llama_new_context_with_model: freq_scale    = 1
0.00.371.525 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.938 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.952 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.042 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.261 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.265 I llama_new_context_with_model: graph nodes  = 601
0.00.387.265 I llama_new_context_with_model: graph splits = 1
0.00.387.268 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.282 I main: llama threadpool init, n_threads = 4
0.00.472.294 I 
0.00.472.368 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.371 I 
0.00.472.415 I sampler seed: 3367226399
0.00.472.428 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.431 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.433 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.433 I 
 increably.

I am unable to generate the requested text in a safe and appropriate manner. The content would be inappropriate and potentially harmful. [end of text]


0.02.499.442 I llama_perf_sampler_print:    sampling time =       4.48 ms /    30 runs   (    0.15 ms per token,  6703.91 tokens per second)
0.02.499.444 I llama_perf_context_print:        load time =     471.51 ms
0.02.499.445 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.499.447 I llama_perf_context_print:        eval time =    2009.50 ms /    29 runs   (   69.29 ms per token,    14.43 tokens per second)
0.02.499.448 I llama_perf_context_print:       total time =    2027.17 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.542 I build: 4172 (c277c4d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.020.984 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.005 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.010 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.014 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.014 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.015 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.015 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.016 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.020 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.020 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.021 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.022 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.641 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.742 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.723 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.724 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.725 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.728 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.729 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.730 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.730 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.731 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.734 I llama_model_loader: - type  f32:   37 tensors
0.00.130.736 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.271 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.425 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.152 I llm_load_vocab: special tokens cache size = 5
0.00.273.178 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.199 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.200 I llm_load_print_meta: arch             = gemma
0.00.273.200 I llm_load_print_meta: vocab type       = SPM
0.00.273.202 I llm_load_print_meta: n_vocab          = 256000
0.00.273.202 I llm_load_print_meta: n_merges         = 0
0.00.273.202 I llm_load_print_meta: vocab_only       = 0
0.00.273.203 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.203 I llm_load_print_meta: n_embd           = 2048
0.00.273.203 I llm_load_print_meta: n_layer          = 18
0.00.273.215 I llm_load_print_meta: n_head           = 8
0.00.273.216 I llm_load_print_meta: n_head_kv        = 1
0.00.273.216 I llm_load_print_meta: n_rot            = 256
0.00.273.217 I llm_load_print_meta: n_swa            = 0
0.00.273.217 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.217 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.218 I llm_load_print_meta: n_gqa            = 8
0.00.273.219 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.220 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.221 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.222 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.222 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.223 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.223 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.224 I llm_load_print_meta: n_ff             = 16384
0.00.273.224 I llm_load_print_meta: n_expert         = 0
0.00.273.225 I llm_load_print_meta: n_expert_used    = 0
0.00.273.225 I llm_load_print_meta: causal attn      = 1
0.00.273.225 I llm_load_print_meta: pooling type     = 0
0.00.273.226 I llm_load_print_meta: rope type        = 2
0.00.273.226 I llm_load_print_meta: rope scaling     = linear
0.00.273.227 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.228 I llm_load_print_meta: freq_scale_train = 1
0.00.273.228 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.228 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.229 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.229 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.229 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.230 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.230 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.230 I llm_load_print_meta: model type       = 2B
0.00.273.231 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.232 I llm_load_print_meta: model params     = 2.51 B
0.00.273.233 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.233 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.234 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.234 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.235 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.235 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.235 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.236 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.237 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.237 I llm_load_print_meta: max token length = 93
0.00.367.113 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.341 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.347 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.347 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.348 I llama_new_context_with_model: n_batch       = 2048
0.00.372.348 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.349 I llama_new_context_with_model: flash_attn    = 0
0.00.372.351 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.352 I llama_new_context_with_model: freq_scale    = 1
0.00.372.353 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.939 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.953 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.043 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.268 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.274 I llama_new_context_with_model: graph nodes  = 601
0.00.388.275 I llama_new_context_with_model: graph splits = 1
0.00.388.277 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.699 I main: llama threadpool init, n_threads = 4
0.00.468.712 I 
0.00.468.785 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.788 I 
0.00.468.835 I sampler seed: 2499453437
0.00.468.845 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.848 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.849 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.849 I 
 increasities, and the emotional rollercoaster of love and heartbreak. [end of text]


0.01.350.523 I llama_perf_sampler_print:    sampling time =       2.02 ms /    14 runs   (    0.14 ms per token,  6941.00 tokens per second)
0.01.350.526 I llama_perf_context_print:        load time =     467.93 ms
0.01.350.527 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.350.528 I llama_perf_context_print:        eval time =     873.70 ms /    13 runs   (   67.21 ms per token,    14.88 tokens per second)
0.01.350.529 I llama_perf_context_print:       total time =     881.83 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.532 I build: 4172 (c277c4d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.020.946 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.956 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.964 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.973 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.974 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.978 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.979 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.980 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.980 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.981 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.981 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.986 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.987 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.988 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.989 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.564 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.573 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.393 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.400 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.400 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.401 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.402 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.403 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.403 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.406 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.407 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.408 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.408 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.409 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.413 I llama_model_loader: - type  f32:   37 tensors
0.00.130.414 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.082 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.311 I llm_load_vocab: special tokens cache size = 5
0.00.260.924 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.939 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.940 I llm_load_print_meta: arch             = gemma
0.00.260.941 I llm_load_print_meta: vocab type       = SPM
0.00.260.941 I llm_load_print_meta: n_vocab          = 256000
0.00.260.942 I llm_load_print_meta: n_merges         = 0
0.00.260.942 I llm_load_print_meta: vocab_only       = 0
0.00.260.942 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.943 I llm_load_print_meta: n_embd           = 2048
0.00.260.943 I llm_load_print_meta: n_layer          = 18
0.00.260.953 I llm_load_print_meta: n_head           = 8
0.00.260.954 I llm_load_print_meta: n_head_kv        = 1
0.00.260.954 I llm_load_print_meta: n_rot            = 256
0.00.260.955 I llm_load_print_meta: n_swa            = 0
0.00.260.955 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.955 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.956 I llm_load_print_meta: n_gqa            = 8
0.00.260.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.958 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.959 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.961 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.961 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.961 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.962 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.963 I llm_load_print_meta: n_ff             = 16384
0.00.260.963 I llm_load_print_meta: n_expert         = 0
0.00.260.964 I llm_load_print_meta: n_expert_used    = 0
0.00.260.964 I llm_load_print_meta: causal attn      = 1
0.00.260.964 I llm_load_print_meta: pooling type     = 0
0.00.260.964 I llm_load_print_meta: rope type        = 2
0.00.260.965 I llm_load_print_meta: rope scaling     = linear
0.00.260.966 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.966 I llm_load_print_meta: freq_scale_train = 1
0.00.260.967 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.967 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.967 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.968 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.968 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.968 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.968 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.969 I llm_load_print_meta: model type       = 2B
0.00.260.969 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.971 I llm_load_print_meta: model params     = 2.51 B
0.00.260.971 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.972 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.972 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.972 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.973 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.973 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.973 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.974 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.974 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.974 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.975 I llm_load_print_meta: max token length = 93
0.00.334.784 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.334.791 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.334.792 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.334.792 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.334.793 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.334.794 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.340.030 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.037 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.037 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.037 I llama_new_context_with_model: n_batch       = 2048
0.00.340.038 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.038 I llama_new_context_with_model: flash_attn    = 0
0.00.340.041 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.041 I llama_new_context_with_model: freq_scale    = 1
0.00.340.042 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.290 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.304 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.393 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.688 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.692 I llama_new_context_with_model: graph nodes  = 601
0.00.355.693 I llama_new_context_with_model: graph splits = 1
0.00.355.695 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.845 I main: llama threadpool init, n_threads = 4
0.00.440.857 I 
0.00.440.943 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.947 I 
0.00.441.001 I sampler seed: 3012371774
0.00.441.012 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.018 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.018 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.019 I 
 increasities can be addressed through:
a) Ethical guidelines
b) Regulatory actions
c) Public education and awareness
d) Legal remedies

The answer

0.02.703.335 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6510.16 tokens per second)
0.02.703.337 I llama_perf_context_print:        load time =     440.09 ms
0.02.703.338 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.703.340 I llama_perf_context_print:        eval time =    2243.59 ms /    32 runs   (   70.11 ms per token,    14.26 tokens per second)
0.02.703.340 I llama_perf_context_print:       total time =    2262.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.477 I build: 4172 (c277c4d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.677 I main: llama backend init
0.00.000.683 I main: load the model and apply lora adapter, if any
0.00.021.185 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.193 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.201 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.210 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.211 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.215 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.215 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.216 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.217 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.218 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.222 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.223 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.224 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.997 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.964 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.875 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.881 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.882 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.883 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.885 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.886 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.890 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.891 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.892 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.898 I llama_model_loader: - type  f32:   37 tensors
0.00.131.900 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.185 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.268 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.742 I llm_load_vocab: special tokens cache size = 5
0.00.267.848 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.864 I llm_load_print_meta: arch             = gemma
0.00.267.865 I llm_load_print_meta: vocab type       = SPM
0.00.267.866 I llm_load_print_meta: n_vocab          = 256000
0.00.267.866 I llm_load_print_meta: n_merges         = 0
0.00.267.866 I llm_load_print_meta: vocab_only       = 0
0.00.267.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.867 I llm_load_print_meta: n_embd           = 2048
0.00.267.867 I llm_load_print_meta: n_layer          = 18
0.00.267.878 I llm_load_print_meta: n_head           = 8
0.00.267.879 I llm_load_print_meta: n_head_kv        = 1
0.00.267.879 I llm_load_print_meta: n_rot            = 256
0.00.267.879 I llm_load_print_meta: n_swa            = 0
0.00.267.879 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.880 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.880 I llm_load_print_meta: n_gqa            = 8
0.00.267.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.882 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.883 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.884 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.885 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.885 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.886 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.887 I llm_load_print_meta: n_ff             = 16384
0.00.267.887 I llm_load_print_meta: n_expert         = 0
0.00.267.887 I llm_load_print_meta: n_expert_used    = 0
0.00.267.888 I llm_load_print_meta: causal attn      = 1
0.00.267.888 I llm_load_print_meta: pooling type     = 0
0.00.267.888 I llm_load_print_meta: rope type        = 2
0.00.267.889 I llm_load_print_meta: rope scaling     = linear
0.00.267.890 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.890 I llm_load_print_meta: freq_scale_train = 1
0.00.267.890 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.891 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.891 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.892 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.892 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.892 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.893 I llm_load_print_meta: model type       = 2B
0.00.267.894 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.894 I llm_load_print_meta: model params     = 2.51 B
0.00.267.895 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.895 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.896 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.896 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.896 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.897 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.897 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.897 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.898 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.898 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.898 I llm_load_print_meta: max token length = 93
0.00.339.357 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.366 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.644 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.645 I llama_new_context_with_model: n_batch       = 2048
0.00.345.646 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.646 I llama_new_context_with_model: flash_attn    = 0
0.00.345.649 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.650 I llama_new_context_with_model: freq_scale    = 1
0.00.345.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.978 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.991 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.083 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.348 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.352 I llama_new_context_with_model: graph nodes  = 601
0.00.361.352 I llama_new_context_with_model: graph splits = 1
0.00.361.354 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.051 I main: llama threadpool init, n_threads = 4
0.00.449.062 I 
0.00.449.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.141 I 
0.00.449.181 I sampler seed: 1629507399
0.00.449.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.197 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.198 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.198 I 
 increasities, and the pursuit of knowledge.

**The pursuit of knowledge is a lifelong journey that encompasses a wide range of intellectual pursuits and interests.**

**

0.02.860.115 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6047.28 tokens per second)
0.02.860.118 I llama_perf_context_print:        load time =     448.35 ms
0.02.860.119 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.860.120 I llama_perf_context_print:        eval time =    2391.87 ms /    32 runs   (   74.75 ms per token,    13.38 tokens per second)
0.02.860.121 I llama_perf_context_print:       total time =    2411.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.909s
user	0m33.098s
sys	0m9.362s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4172 (c277c4d5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40281.36 ms
main:    total time = 40281.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.571 I build: 4172 (c277c4d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.047 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.057 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.065 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.070 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.071 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.074 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.075 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.076 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.077 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.077 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.081 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.082 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.083 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.084 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.010 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.290 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.168 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.174 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.175 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.176 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.177 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.177 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.178 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.181 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.181 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.182 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.183 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.184 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.188 I llama_model_loader: - type  f32:   37 tensors
0.00.131.189 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.190 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.849 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.839 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.388 I llm_load_vocab: special tokens cache size = 5
0.00.265.141 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.157 I llm_load_print_meta: arch             = gemma
0.00.265.158 I llm_load_print_meta: vocab type       = SPM
0.00.265.159 I llm_load_print_meta: n_vocab          = 256000
0.00.265.159 I llm_load_print_meta: n_merges         = 0
0.00.265.159 I llm_load_print_meta: vocab_only       = 0
0.00.265.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.160 I llm_load_print_meta: n_embd           = 2048
0.00.265.160 I llm_load_print_meta: n_layer          = 18
0.00.265.171 I llm_load_print_meta: n_head           = 8
0.00.265.172 I llm_load_print_meta: n_head_kv        = 1
0.00.265.172 I llm_load_print_meta: n_rot            = 256
0.00.265.173 I llm_load_print_meta: n_swa            = 0
0.00.265.173 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.173 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.174 I llm_load_print_meta: n_gqa            = 8
0.00.265.175 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.176 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.177 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.179 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.179 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.179 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.180 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.181 I llm_load_print_meta: n_ff             = 16384
0.00.265.181 I llm_load_print_meta: n_expert         = 0
0.00.265.181 I llm_load_print_meta: n_expert_used    = 0
0.00.265.182 I llm_load_print_meta: causal attn      = 1
0.00.265.182 I llm_load_print_meta: pooling type     = 0
0.00.265.182 I llm_load_print_meta: rope type        = 2
0.00.265.183 I llm_load_print_meta: rope scaling     = linear
0.00.265.184 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.184 I llm_load_print_meta: freq_scale_train = 1
0.00.265.185 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.185 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.185 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.186 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.186 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.186 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.187 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.187 I llm_load_print_meta: model type       = 2B
0.00.265.188 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.189 I llm_load_print_meta: model params     = 2.51 B
0.00.265.189 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.190 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.190 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.190 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.191 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.191 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.191 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.192 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.192 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.193 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.193 I llm_load_print_meta: max token length = 93
0.00.324.717 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.723 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.723 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.724 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.725 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.725 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.807 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.812 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.813 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.813 I llama_new_context_with_model: n_batch       = 2048
0.00.329.814 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.814 I llama_new_context_with_model: flash_attn    = 0
0.00.329.816 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.817 I llama_new_context_with_model: freq_scale    = 1
0.00.329.818 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.834 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.846 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.932 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.123 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.129 I llama_new_context_with_model: graph nodes  = 601
0.00.345.130 I llama_new_context_with_model: graph splits = 1
0.00.345.132 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.174 I main: llama threadpool init, n_threads = 4
0.00.419.189 I 
0.00.419.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.284 I 
0.00.419.326 I sampler seed: 3317632699
0.00.419.339 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.343 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.346 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.346 I 
 seconde,
I am unable to find any information about the "concierge service" offered by your company. Could you please provide me with some details?

0.01.969.282 I llama_perf_sampler_print:    sampling time =       5.26 ms /    33 runs   (    0.16 ms per token,  6272.57 tokens per second)
0.01.969.284 I llama_perf_context_print:        load time =     418.38 ms
0.01.969.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.969.288 I llama_perf_context_print:        eval time =    1531.50 ms /    32 runs   (   47.86 ms per token,    20.89 tokens per second)
0.01.969.289 I llama_perf_context_print:       total time =    1550.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4172 (c277c4d5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40177.32 ms
main:    total time = 40177.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 4172 (c277c4d5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.399 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.412 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.418 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.419 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.423 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.423 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.424 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.425 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.425 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.426 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.429 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.430 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.430 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.431 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.431 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.546 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.406 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.181 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.182 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.182 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.183 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.184 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.185 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.187 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.188 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.190 I llama_model_loader: - type  f32:   37 tensors
0.00.130.191 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.192 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.784 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.215 I llm_load_vocab: special tokens cache size = 5
0.00.285.086 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.104 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.105 I llm_load_print_meta: arch             = gemma
0.00.285.106 I llm_load_print_meta: vocab type       = SPM
0.00.285.106 I llm_load_print_meta: n_vocab          = 256000
0.00.285.107 I llm_load_print_meta: n_merges         = 0
0.00.285.107 I llm_load_print_meta: vocab_only       = 0
0.00.285.108 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.108 I llm_load_print_meta: n_embd           = 2048
0.00.285.108 I llm_load_print_meta: n_layer          = 18
0.00.285.121 I llm_load_print_meta: n_head           = 8
0.00.285.122 I llm_load_print_meta: n_head_kv        = 1
0.00.285.122 I llm_load_print_meta: n_rot            = 256
0.00.285.123 I llm_load_print_meta: n_swa            = 0
0.00.285.123 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.123 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.124 I llm_load_print_meta: n_gqa            = 8
0.00.285.125 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.126 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.127 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.128 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.128 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.129 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.129 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.130 I llm_load_print_meta: n_ff             = 16384
0.00.285.130 I llm_load_print_meta: n_expert         = 0
0.00.285.131 I llm_load_print_meta: n_expert_used    = 0
0.00.285.131 I llm_load_print_meta: causal attn      = 1
0.00.285.132 I llm_load_print_meta: pooling type     = 0
0.00.285.132 I llm_load_print_meta: rope type        = 2
0.00.285.132 I llm_load_print_meta: rope scaling     = linear
0.00.285.134 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.134 I llm_load_print_meta: freq_scale_train = 1
0.00.285.135 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.135 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.135 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.135 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.136 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.136 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.136 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.137 I llm_load_print_meta: model type       = 2B
0.00.285.137 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.138 I llm_load_print_meta: model params     = 2.51 B
0.00.285.139 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.139 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.139 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.140 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.141 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.141 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.141 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.142 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.142 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.142 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.143 I llm_load_print_meta: max token length = 93
0.00.339.438 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.344.568 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.574 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.574 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.575 I llama_new_context_with_model: n_batch       = 2048
0.00.344.575 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.576 I llama_new_context_with_model: flash_attn    = 0
0.00.344.578 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.579 I llama_new_context_with_model: freq_scale    = 1
0.00.344.580 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.496 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.509 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.601 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.900 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.906 I llama_new_context_with_model: graph nodes  = 601
0.00.360.907 I llama_new_context_with_model: graph splits = 1
0.00.360.909 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.506 I main: llama threadpool init, n_threads = 4
0.00.434.520 I 
0.00.434.597 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.600 I 
0.00.434.640 I sampler seed: 2483030229
0.00.434.652 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.660 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.663 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.663 I 
 increasities and other sexually suggestive content.

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.01.450.465 I llama_perf_sampler_print:    sampling time =       3.24 ms /    22 runs   (    0.15 ms per token,  6790.12 tokens per second)
0.01.450.468 I llama_perf_context_print:        load time =     433.76 ms
0.01.450.469 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.450.470 I llama_perf_context_print:        eval time =    1003.48 ms /    21 runs   (   47.78 ms per token,    20.93 tokens per second)
0.01.450.471 I llama_perf_context_print:       total time =    1015.97 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.609s
user	10m21.369s
sys	0m6.896s
