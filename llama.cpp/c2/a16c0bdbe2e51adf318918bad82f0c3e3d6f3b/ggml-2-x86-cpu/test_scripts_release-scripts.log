+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.178 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.551 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.559 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.566 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.570 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.571 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.574 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.575 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.575 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.576 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.576 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.577 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.581 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.581 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.582 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.873 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.880 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.723 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.724 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.725 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.727 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.727 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.728 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.729 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.730 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.732 I llama_model_loader: - type  f32:   37 tensors
0.00.129.733 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.682 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.014 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.557 I llm_load_vocab: special tokens cache size = 5
0.00.259.440 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.454 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.455 I llm_load_print_meta: arch             = gemma
0.00.259.455 I llm_load_print_meta: vocab type       = SPM
0.00.259.456 I llm_load_print_meta: n_vocab          = 256000
0.00.259.456 I llm_load_print_meta: n_merges         = 0
0.00.259.457 I llm_load_print_meta: vocab_only       = 0
0.00.259.457 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.457 I llm_load_print_meta: n_embd           = 2048
0.00.259.457 I llm_load_print_meta: n_layer          = 18
0.00.259.469 I llm_load_print_meta: n_head           = 8
0.00.259.470 I llm_load_print_meta: n_head_kv        = 1
0.00.259.470 I llm_load_print_meta: n_rot            = 256
0.00.259.470 I llm_load_print_meta: n_swa            = 0
0.00.259.471 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.471 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.472 I llm_load_print_meta: n_gqa            = 8
0.00.259.473 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.474 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.474 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.476 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.478 I llm_load_print_meta: n_ff             = 16384
0.00.259.478 I llm_load_print_meta: n_expert         = 0
0.00.259.478 I llm_load_print_meta: n_expert_used    = 0
0.00.259.479 I llm_load_print_meta: causal attn      = 1
0.00.259.479 I llm_load_print_meta: pooling type     = 0
0.00.259.479 I llm_load_print_meta: rope type        = 2
0.00.259.480 I llm_load_print_meta: rope scaling     = linear
0.00.259.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.482 I llm_load_print_meta: freq_scale_train = 1
0.00.259.482 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.482 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.483 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.483 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.483 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.483 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.484 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.484 I llm_load_print_meta: model type       = 2B
0.00.259.485 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.486 I llm_load_print_meta: model params     = 2.51 B
0.00.259.487 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.487 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.488 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.488 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.488 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.489 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.489 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.489 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.489 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.490 I llm_load_print_meta: max token length = 93
0.00.360.622 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.360.628 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.360.629 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.360.629 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.360.630 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.360.631 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.365.763 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.769 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.770 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.770 I llama_new_context_with_model: n_batch       = 2048
0.00.365.771 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.771 I llama_new_context_with_model: flash_attn    = 0
0.00.365.773 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.774 I llama_new_context_with_model: freq_scale    = 1
0.00.365.775 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.984 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.000 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.098 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.408 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.414 I llama_new_context_with_model: graph nodes  = 601
0.00.381.415 I llama_new_context_with_model: graph splits = 1
0.00.381.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.285 I main: llama threadpool init, n_threads = 4
0.00.468.302 I 
0.00.468.376 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.379 I 
0.00.468.426 I sampler seed: 2763995427
0.00.468.437 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.449 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.453 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.453 I 
 increably. I'm just a small fry, but I'm learning fast.

I'm excited to see what the future holds, and I

0.02.710.470 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6582.88 tokens per second)
0.02.710.473 I llama_perf_context_print:        load time =     467.90 ms
0.02.710.475 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.476 I llama_perf_context_print:        eval time =    2222.54 ms /    32 runs   (   69.45 ms per token,    14.40 tokens per second)
0.02.710.477 I llama_perf_context_print:       total time =    2242.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.020.972 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.986 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.992 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.993 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.997 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.998 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.998 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.999 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.003 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.004 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.005 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.005 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.006 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.062 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.197 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.118 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.124 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.124 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.125 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.125 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.126 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.127 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.129 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.130 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.131 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.131 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.135 I llama_model_loader: - type  f32:   37 tensors
0.00.131.136 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.005 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.924 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.515 I llm_load_vocab: special tokens cache size = 5
0.00.263.628 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.645 I llm_load_print_meta: arch             = gemma
0.00.263.645 I llm_load_print_meta: vocab type       = SPM
0.00.263.646 I llm_load_print_meta: n_vocab          = 256000
0.00.263.646 I llm_load_print_meta: n_merges         = 0
0.00.263.646 I llm_load_print_meta: vocab_only       = 0
0.00.263.647 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.647 I llm_load_print_meta: n_embd           = 2048
0.00.263.647 I llm_load_print_meta: n_layer          = 18
0.00.263.659 I llm_load_print_meta: n_head           = 8
0.00.263.661 I llm_load_print_meta: n_head_kv        = 1
0.00.263.661 I llm_load_print_meta: n_rot            = 256
0.00.263.661 I llm_load_print_meta: n_swa            = 0
0.00.263.662 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.662 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.663 I llm_load_print_meta: n_gqa            = 8
0.00.263.664 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.665 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.666 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.667 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.668 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.668 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.669 I llm_load_print_meta: n_ff             = 16384
0.00.263.669 I llm_load_print_meta: n_expert         = 0
0.00.263.670 I llm_load_print_meta: n_expert_used    = 0
0.00.263.670 I llm_load_print_meta: causal attn      = 1
0.00.263.670 I llm_load_print_meta: pooling type     = 0
0.00.263.670 I llm_load_print_meta: rope type        = 2
0.00.263.671 I llm_load_print_meta: rope scaling     = linear
0.00.263.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.673 I llm_load_print_meta: freq_scale_train = 1
0.00.263.673 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.674 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.676 I llm_load_print_meta: model type       = 2B
0.00.263.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.677 I llm_load_print_meta: model params     = 2.51 B
0.00.263.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.678 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.679 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.679 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.680 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.680 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.681 I llm_load_print_meta: max token length = 93
0.00.360.768 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.852 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.859 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.859 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.859 I llama_new_context_with_model: n_batch       = 2048
0.00.365.860 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.861 I llama_new_context_with_model: flash_attn    = 0
0.00.365.863 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.864 I llama_new_context_with_model: freq_scale    = 1
0.00.365.865 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.282 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.297 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.388 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.626 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.632 I llama_new_context_with_model: graph nodes  = 601
0.00.381.633 I llama_new_context_with_model: graph splits = 1
0.00.381.635 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.115 I main: llama threadpool init, n_threads = 4
0.00.462.130 I 
0.00.462.204 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.208 I 
0.00.462.249 I sampler seed: 2510617601
0.00.462.260 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.268 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.269 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.269 I 
 increasities on the internet, but they often fail to be sustained. Explain the reasons for the failure of these online interactions.

**Possible reasons for the failure

0.02.630.559 I llama_perf_sampler_print:    sampling time =       4.62 ms /    33 runs   (    0.14 ms per token,  7139.77 tokens per second)
0.02.630.562 I llama_perf_context_print:        load time =     461.37 ms
0.02.630.563 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.630.564 I llama_perf_context_print:        eval time =    2150.54 ms /    32 runs   (   67.20 ms per token,    14.88 tokens per second)
0.02.630.565 I llama_perf_context_print:       total time =    2168.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.571 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.236 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.248 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.256 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.269 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.270 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.271 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.272 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.279 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.282 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.390 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.265 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.272 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.272 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.273 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.274 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.276 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.277 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.278 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.279 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.282 I llama_model_loader: - type  f32:   37 tensors
0.00.131.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.505 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.064 I llm_load_vocab: special tokens cache size = 5
0.00.262.980 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.994 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.995 I llm_load_print_meta: arch             = gemma
0.00.262.995 I llm_load_print_meta: vocab type       = SPM
0.00.262.996 I llm_load_print_meta: n_vocab          = 256000
0.00.262.997 I llm_load_print_meta: n_merges         = 0
0.00.262.997 I llm_load_print_meta: vocab_only       = 0
0.00.262.997 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.997 I llm_load_print_meta: n_embd           = 2048
0.00.262.998 I llm_load_print_meta: n_layer          = 18
0.00.263.011 I llm_load_print_meta: n_head           = 8
0.00.263.011 I llm_load_print_meta: n_head_kv        = 1
0.00.263.012 I llm_load_print_meta: n_rot            = 256
0.00.263.012 I llm_load_print_meta: n_swa            = 0
0.00.263.012 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.012 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.013 I llm_load_print_meta: n_gqa            = 8
0.00.263.014 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.015 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.016 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.019 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.020 I llm_load_print_meta: n_ff             = 16384
0.00.263.020 I llm_load_print_meta: n_expert         = 0
0.00.263.020 I llm_load_print_meta: n_expert_used    = 0
0.00.263.020 I llm_load_print_meta: causal attn      = 1
0.00.263.021 I llm_load_print_meta: pooling type     = 0
0.00.263.021 I llm_load_print_meta: rope type        = 2
0.00.263.021 I llm_load_print_meta: rope scaling     = linear
0.00.263.023 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.023 I llm_load_print_meta: freq_scale_train = 1
0.00.263.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.024 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.025 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.026 I llm_load_print_meta: model type       = 2B
0.00.263.026 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.027 I llm_load_print_meta: model params     = 2.51 B
0.00.263.028 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.028 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.029 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.029 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.029 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.030 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.030 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.030 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.031 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.031 I llm_load_print_meta: max token length = 93
0.00.340.001 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.007 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.008 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.009 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.009 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.010 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.117 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.123 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.124 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.124 I llama_new_context_with_model: n_batch       = 2048
0.00.345.124 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.125 I llama_new_context_with_model: flash_attn    = 0
0.00.345.127 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.128 I llama_new_context_with_model: freq_scale    = 1
0.00.345.129 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.627 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.641 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.733 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.016 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.024 I llama_new_context_with_model: graph nodes  = 601
0.00.361.024 I llama_new_context_with_model: graph splits = 1
0.00.361.027 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.068 I main: llama threadpool init, n_threads = 4
0.00.447.085 I 
0.00.447.155 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.447.158 I 
0.00.447.203 I sampler seed: 1496857144
0.00.447.214 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.233 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.237 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.237 I 
 maneuvously.

The passage is about an ancient ritual.

**An Ancient Ritual**

In the depths of a forgotten forest, shrouded in mystery and

0.02.715.620 I llama_perf_sampler_print:    sampling time =       5.35 ms /    33 runs   (    0.16 ms per token,  6164.77 tokens per second)
0.02.715.622 I llama_perf_context_print:        load time =     446.28 ms
0.02.715.623 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.625 I llama_perf_context_print:        eval time =    2248.53 ms /    32 runs   (   70.27 ms per token,    14.23 tokens per second)
0.02.715.625 I llama_perf_context_print:       total time =    2268.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.491 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.690 I main: llama backend init
0.00.000.696 I main: load the model and apply lora adapter, if any
0.00.021.223 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.235 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.249 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.250 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.256 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.256 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.257 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.257 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.258 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.265 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.266 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.301 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.001 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.876 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.883 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.884 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.885 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.885 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.886 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.887 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.890 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.891 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.892 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.896 I llama_model_loader: - type  f32:   37 tensors
0.00.131.897 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.633 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.159 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.744 I llm_load_vocab: special tokens cache size = 5
0.00.270.904 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.922 I llm_load_print_meta: arch             = gemma
0.00.270.923 I llm_load_print_meta: vocab type       = SPM
0.00.270.923 I llm_load_print_meta: n_vocab          = 256000
0.00.270.924 I llm_load_print_meta: n_merges         = 0
0.00.270.924 I llm_load_print_meta: vocab_only       = 0
0.00.270.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.925 I llm_load_print_meta: n_embd           = 2048
0.00.270.925 I llm_load_print_meta: n_layer          = 18
0.00.270.936 I llm_load_print_meta: n_head           = 8
0.00.270.937 I llm_load_print_meta: n_head_kv        = 1
0.00.270.937 I llm_load_print_meta: n_rot            = 256
0.00.270.938 I llm_load_print_meta: n_swa            = 0
0.00.270.938 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.938 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.939 I llm_load_print_meta: n_gqa            = 8
0.00.270.940 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.941 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.942 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.944 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.944 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.944 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.945 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.946 I llm_load_print_meta: n_ff             = 16384
0.00.270.946 I llm_load_print_meta: n_expert         = 0
0.00.270.947 I llm_load_print_meta: n_expert_used    = 0
0.00.270.947 I llm_load_print_meta: causal attn      = 1
0.00.270.947 I llm_load_print_meta: pooling type     = 0
0.00.270.947 I llm_load_print_meta: rope type        = 2
0.00.270.955 I llm_load_print_meta: rope scaling     = linear
0.00.270.957 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.957 I llm_load_print_meta: freq_scale_train = 1
0.00.270.958 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.958 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.958 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.959 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.959 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.960 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.960 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.961 I llm_load_print_meta: model type       = 2B
0.00.270.961 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.962 I llm_load_print_meta: model params     = 2.51 B
0.00.270.963 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.963 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.964 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.964 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.964 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.965 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.965 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.965 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.966 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.966 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.966 I llm_load_print_meta: max token length = 93
0.00.346.871 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.879 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.351.977 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.983 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.984 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.984 I llama_new_context_with_model: n_batch       = 2048
0.00.351.985 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.985 I llama_new_context_with_model: flash_attn    = 0
0.00.351.988 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.989 I llama_new_context_with_model: freq_scale    = 1
0.00.351.990 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.401 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.416 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.508 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.782 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.788 I llama_new_context_with_model: graph nodes  = 601
0.00.367.789 I llama_new_context_with_model: graph splits = 1
0.00.367.791 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.818 I main: llama threadpool init, n_threads = 4
0.00.454.835 I 
0.00.454.908 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.911 I 
0.00.454.969 I sampler seed: 3934563366
0.00.454.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.991 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.995 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.995 I 
 increasities in the story. [end of text]


0.00.985.150 I llama_perf_sampler_print:    sampling time =       1.08 ms /     8 runs   (    0.14 ms per token,  7373.27 tokens per second)
0.00.985.153 I llama_perf_context_print:        load time =     454.11 ms
0.00.985.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.985.155 I llama_perf_context_print:        eval time =     525.58 ms /     7 runs   (   75.08 ms per token,    13.32 tokens per second)
0.00.985.156 I llama_perf_context_print:       total time =     530.34 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.255s
user	0m31.675s
sys	0m9.386s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4281 (c2a16c0b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40199.07 ms
main:    total time = 40199.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.021.197 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.207 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.216 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.220 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.222 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.227 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.231 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.232 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.232 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.233 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.927 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.317 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.132 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.140 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.141 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.141 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.142 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.144 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.144 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.145 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.146 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.147 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.150 I llama_model_loader: - type  f32:   37 tensors
0.00.131.151 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.151 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.421 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.135 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.618 I llm_load_vocab: special tokens cache size = 5
0.00.261.595 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.611 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.612 I llm_load_print_meta: arch             = gemma
0.00.261.612 I llm_load_print_meta: vocab type       = SPM
0.00.261.613 I llm_load_print_meta: n_vocab          = 256000
0.00.261.613 I llm_load_print_meta: n_merges         = 0
0.00.261.613 I llm_load_print_meta: vocab_only       = 0
0.00.261.614 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.614 I llm_load_print_meta: n_embd           = 2048
0.00.261.614 I llm_load_print_meta: n_layer          = 18
0.00.261.626 I llm_load_print_meta: n_head           = 8
0.00.261.627 I llm_load_print_meta: n_head_kv        = 1
0.00.261.627 I llm_load_print_meta: n_rot            = 256
0.00.261.628 I llm_load_print_meta: n_swa            = 0
0.00.261.628 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.628 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.629 I llm_load_print_meta: n_gqa            = 8
0.00.261.630 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.631 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.632 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.633 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.634 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.634 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.635 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.636 I llm_load_print_meta: n_ff             = 16384
0.00.261.636 I llm_load_print_meta: n_expert         = 0
0.00.261.636 I llm_load_print_meta: n_expert_used    = 0
0.00.261.636 I llm_load_print_meta: causal attn      = 1
0.00.261.637 I llm_load_print_meta: pooling type     = 0
0.00.261.637 I llm_load_print_meta: rope type        = 2
0.00.261.637 I llm_load_print_meta: rope scaling     = linear
0.00.261.639 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.639 I llm_load_print_meta: freq_scale_train = 1
0.00.261.640 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.640 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.641 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.641 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.641 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.641 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.642 I llm_load_print_meta: model type       = 2B
0.00.261.643 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.643 I llm_load_print_meta: model params     = 2.51 B
0.00.261.644 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.644 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.645 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.645 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.646 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.646 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.646 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.647 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.647 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.647 I llm_load_print_meta: max token length = 93
0.00.321.991 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.997 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.997 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.998 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.999 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.999 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.128 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.134 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.134 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.135 I llama_new_context_with_model: n_batch       = 2048
0.00.327.135 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.136 I llama_new_context_with_model: flash_attn    = 0
0.00.327.138 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.139 I llama_new_context_with_model: freq_scale    = 1
0.00.327.140 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.753 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.767 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.859 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.117 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.124 I llama_new_context_with_model: graph nodes  = 601
0.00.343.124 I llama_new_context_with_model: graph splits = 1
0.00.343.127 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.023 I main: llama threadpool init, n_threads = 4
0.00.418.038 I 
0.00.418.113 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.116 I 
0.00.418.164 I sampler seed: 3269365488
0.00.418.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.187 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.190 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.191 I 
 encompate an array of numbers, and identify the element that is divisible by 3 and 5.

```
int arr[] = {1, 

0.01.996.075 I llama_perf_sampler_print:    sampling time =       5.22 ms /    33 runs   (    0.16 ms per token,  6323.05 tokens per second)
0.01.996.078 I llama_perf_context_print:        load time =     417.27 ms
0.01.996.080 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.081 I llama_perf_context_print:        eval time =    1559.18 ms /    32 runs   (   48.72 ms per token,    20.52 tokens per second)
0.01.996.082 I llama_perf_context_print:       total time =    1578.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4281 (c2a16c0b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40167.07 ms
main:    total time = 40167.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.020.982 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.997 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.005 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.013 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.014 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.015 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.015 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.020 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.020 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.021 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.022 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.236 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.635 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.637 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.640 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.640 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.643 I llama_model_loader: - type  f32:   37 tensors
0.00.129.644 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.645 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.054 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.750 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.257 I llm_load_vocab: special tokens cache size = 5
0.00.260.502 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.518 I llm_load_print_meta: arch             = gemma
0.00.260.518 I llm_load_print_meta: vocab type       = SPM
0.00.260.519 I llm_load_print_meta: n_vocab          = 256000
0.00.260.520 I llm_load_print_meta: n_merges         = 0
0.00.260.520 I llm_load_print_meta: vocab_only       = 0
0.00.260.520 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.520 I llm_load_print_meta: n_embd           = 2048
0.00.260.521 I llm_load_print_meta: n_layer          = 18
0.00.260.533 I llm_load_print_meta: n_head           = 8
0.00.260.534 I llm_load_print_meta: n_head_kv        = 1
0.00.260.534 I llm_load_print_meta: n_rot            = 256
0.00.260.534 I llm_load_print_meta: n_swa            = 0
0.00.260.534 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.534 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.535 I llm_load_print_meta: n_gqa            = 8
0.00.260.536 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.537 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.538 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.540 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.540 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.541 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.541 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.542 I llm_load_print_meta: n_ff             = 16384
0.00.260.543 I llm_load_print_meta: n_expert         = 0
0.00.260.543 I llm_load_print_meta: n_expert_used    = 0
0.00.260.543 I llm_load_print_meta: causal attn      = 1
0.00.260.543 I llm_load_print_meta: pooling type     = 0
0.00.260.543 I llm_load_print_meta: rope type        = 2
0.00.260.544 I llm_load_print_meta: rope scaling     = linear
0.00.260.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.546 I llm_load_print_meta: freq_scale_train = 1
0.00.260.546 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.547 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.547 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.548 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.549 I llm_load_print_meta: model type       = 2B
0.00.260.549 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.550 I llm_load_print_meta: model params     = 2.51 B
0.00.260.551 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.551 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.552 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.552 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.552 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.552 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.553 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.553 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.554 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.554 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.554 I llm_load_print_meta: max token length = 93
0.00.318.091 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.108 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.114 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.115 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.115 I llama_new_context_with_model: n_batch       = 2048
0.00.323.116 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.116 I llama_new_context_with_model: flash_attn    = 0
0.00.323.118 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.119 I llama_new_context_with_model: freq_scale    = 1
0.00.323.120 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.558 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.571 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.843 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.338.848 I llama_new_context_with_model: graph nodes  = 601
0.00.338.849 I llama_new_context_with_model: graph splits = 1
0.00.338.851 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.000 I main: llama threadpool init, n_threads = 4
0.00.413.017 I 
0.00.413.091 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.413.094 I 
0.00.413.142 I sampler seed: 2710401435
0.00.413.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.155 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.156 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.156 I 
 seconary.

**Answer the following questions about the given text:**

1. What is the main idea of the passage?
2. What is the

0.01.975.387 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6790.12 tokens per second)
0.01.975.389 I llama_perf_context_print:        load time =     412.25 ms
0.01.975.391 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.975.392 I llama_perf_context_print:        eval time =    1543.71 ms /    32 runs   (   48.24 ms per token,    20.73 tokens per second)
0.01.975.393 I llama_perf_context_print:       total time =    1562.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.152s
user	10m23.705s
sys	0m6.983s
