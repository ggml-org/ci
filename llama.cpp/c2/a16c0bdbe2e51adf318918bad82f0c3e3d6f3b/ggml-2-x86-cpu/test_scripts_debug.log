+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.023.374 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.383 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.481 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.483 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.488 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.496 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.497 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.499 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.500 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.519 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.521 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.528 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.530 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.298 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.520 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.966 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.978 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.982 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.983 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.985 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.989 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.990 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.991 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.993 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.995 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.004 I llama_model_loader: - type  f32:   37 tensors
0.00.350.008 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.064 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.497 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.421 I llm_load_vocab: special tokens cache size = 5
0.00.855.868 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.943 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.944 I llm_load_print_meta: arch             = gemma
0.00.855.944 I llm_load_print_meta: vocab type       = SPM
0.00.855.946 I llm_load_print_meta: n_vocab          = 256000
0.00.855.948 I llm_load_print_meta: n_merges         = 0
0.00.855.949 I llm_load_print_meta: vocab_only       = 0
0.00.855.950 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.950 I llm_load_print_meta: n_embd           = 2048
0.00.855.950 I llm_load_print_meta: n_layer          = 18
0.00.856.015 I llm_load_print_meta: n_head           = 8
0.00.856.022 I llm_load_print_meta: n_head_kv        = 1
0.00.856.026 I llm_load_print_meta: n_rot            = 256
0.00.856.027 I llm_load_print_meta: n_swa            = 0
0.00.856.027 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.028 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.032 I llm_load_print_meta: n_gqa            = 8
0.00.856.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.042 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.043 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.045 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.046 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.047 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.048 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.053 I llm_load_print_meta: n_ff             = 16384
0.00.856.054 I llm_load_print_meta: n_expert         = 0
0.00.856.055 I llm_load_print_meta: n_expert_used    = 0
0.00.856.055 I llm_load_print_meta: causal attn      = 1
0.00.856.055 I llm_load_print_meta: pooling type     = 0
0.00.856.056 I llm_load_print_meta: rope type        = 2
0.00.856.057 I llm_load_print_meta: rope scaling     = linear
0.00.856.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.059 I llm_load_print_meta: freq_scale_train = 1
0.00.856.060 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.060 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.061 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.062 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.062 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.062 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.063 I llm_load_print_meta: model type       = 2B
0.00.856.064 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.065 I llm_load_print_meta: model params     = 2.51 B
0.00.856.066 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.089 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.092 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.093 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.093 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.094 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.094 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.100 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.102 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.102 I llm_load_print_meta: max token length = 93
0.00.960.266 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.960.278 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.960.279 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.960.279 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.960.280 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.960.281 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.966.261 I llama_new_context_with_model: n_seq_max     = 1
0.00.966.268 I llama_new_context_with_model: n_ctx         = 4096
0.00.966.268 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.966.269 I llama_new_context_with_model: n_batch       = 2048
0.00.966.269 I llama_new_context_with_model: n_ubatch      = 512
0.00.966.269 I llama_new_context_with_model: flash_attn    = 0
0.00.966.272 I llama_new_context_with_model: freq_base     = 10000.0
0.00.966.273 I llama_new_context_with_model: freq_scale    = 1
0.00.966.274 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.980.760 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.980.799 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.980.914 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.983.468 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.983.471 I llama_new_context_with_model: graph nodes  = 601
0.00.983.472 I llama_new_context_with_model: graph splits = 1
0.00.983.495 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.594.181 I main: llama threadpool init, n_threads = 4
0.01.594.198 I 
0.01.594.321 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.594.325 I 
0.01.594.585 I sampler seed: 1452596425
0.01.594.601 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.594.610 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.594.614 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.594.614 I 
 increably.

I'm not sure how to interpret this statement.

Could you please provide me with some context or further explanation to help me understand?

0.15.224.498 I llama_perf_sampler_print:    sampling time =      48.14 ms /    33 runs   (    1.46 ms per token,   685.47 tokens per second)
0.15.224.501 I llama_perf_context_print:        load time =    1593.25 ms
0.15.224.503 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.224.504 I llama_perf_context_print:        eval time =   13542.59 ms /    32 runs   (  423.21 ms per token,     2.36 tokens per second)
0.15.224.528 I llama_perf_context_print:       total time =   13630.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.023.549 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.644 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.657 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.659 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.664 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.666 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.668 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.671 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.678 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.679 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.681 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.682 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.683 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.605 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.991 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.329 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.342 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.344 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.345 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.352 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.353 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.355 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.364 I llama_model_loader: - type  f32:   37 tensors
0.00.350.367 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.541 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.632.819 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.633.713 I llm_load_vocab: special tokens cache size = 5
0.00.831.932 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.008 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.009 I llm_load_print_meta: arch             = gemma
0.00.832.009 I llm_load_print_meta: vocab type       = SPM
0.00.832.010 I llm_load_print_meta: n_vocab          = 256000
0.00.832.012 I llm_load_print_meta: n_merges         = 0
0.00.832.013 I llm_load_print_meta: vocab_only       = 0
0.00.832.013 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.013 I llm_load_print_meta: n_embd           = 2048
0.00.832.014 I llm_load_print_meta: n_layer          = 18
0.00.832.079 I llm_load_print_meta: n_head           = 8
0.00.832.086 I llm_load_print_meta: n_head_kv        = 1
0.00.832.087 I llm_load_print_meta: n_rot            = 256
0.00.832.088 I llm_load_print_meta: n_swa            = 0
0.00.832.089 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.094 I llm_load_print_meta: n_gqa            = 8
0.00.832.099 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.104 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.105 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.106 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.108 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.108 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.108 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.114 I llm_load_print_meta: n_ff             = 16384
0.00.832.114 I llm_load_print_meta: n_expert         = 0
0.00.832.115 I llm_load_print_meta: n_expert_used    = 0
0.00.832.116 I llm_load_print_meta: causal attn      = 1
0.00.832.116 I llm_load_print_meta: pooling type     = 0
0.00.832.117 I llm_load_print_meta: rope type        = 2
0.00.832.117 I llm_load_print_meta: rope scaling     = linear
0.00.832.118 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.119 I llm_load_print_meta: freq_scale_train = 1
0.00.832.119 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.120 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.120 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.134 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.134 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.135 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.148 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.149 I llm_load_print_meta: model type       = 2B
0.00.832.158 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.159 I llm_load_print_meta: model params     = 2.51 B
0.00.832.160 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.160 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.161 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.162 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.168 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.169 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.170 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.176 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.177 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.178 I llm_load_print_meta: max token length = 93
0.00.930.526 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.936.383 I llama_new_context_with_model: n_seq_max     = 1
0.00.936.390 I llama_new_context_with_model: n_ctx         = 4096
0.00.936.390 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.936.391 I llama_new_context_with_model: n_batch       = 2048
0.00.936.391 I llama_new_context_with_model: n_ubatch      = 512
0.00.936.392 I llama_new_context_with_model: flash_attn    = 0
0.00.936.394 I llama_new_context_with_model: freq_base     = 10000.0
0.00.936.395 I llama_new_context_with_model: freq_scale    = 1
0.00.936.396 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.193 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.951.234 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.951.346 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.953.911 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.953.915 I llama_new_context_with_model: graph nodes  = 601
0.00.953.916 I llama_new_context_with_model: graph splits = 1
0.00.953.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.564.060 I main: llama threadpool init, n_threads = 4
0.01.564.077 I 
0.01.564.203 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.564.207 I 
0.01.564.456 I sampler seed: 3580917530
0.01.564.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.564.482 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.564.485 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.564.485 I 
 seconded parentheses.

I am unable to find any evidence of this question on this platform.

**Please provide the following information:**

* The question you

0.15.221.615 I llama_perf_sampler_print:    sampling time =      48.41 ms /    33 runs   (    1.47 ms per token,   681.68 tokens per second)
0.15.221.632 I llama_perf_context_print:        load time =    1563.10 ms
0.15.221.634 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.221.635 I llama_perf_context_print:        eval time =   13569.31 ms /    32 runs   (  424.04 ms per token,     2.36 tokens per second)
0.15.221.636 I llama_perf_context_print:       total time =   13657.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.889 I main: load the model and apply lora adapter, if any
0.00.023.294 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.305 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.389 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.401 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.403 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.409 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.413 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.414 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.415 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.417 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.426 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.428 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.429 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.233 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.397 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.742 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.750 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.752 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.754 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.755 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.756 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.758 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.762 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.766 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.768 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.777 I llama_model_loader: - type  f32:   37 tensors
0.00.349.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.335 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.178 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.232 I llm_load_vocab: special tokens cache size = 5
0.00.831.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.365 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.366 I llm_load_print_meta: arch             = gemma
0.00.831.366 I llm_load_print_meta: vocab type       = SPM
0.00.831.367 I llm_load_print_meta: n_vocab          = 256000
0.00.831.369 I llm_load_print_meta: n_merges         = 0
0.00.831.370 I llm_load_print_meta: vocab_only       = 0
0.00.831.371 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.371 I llm_load_print_meta: n_embd           = 2048
0.00.831.371 I llm_load_print_meta: n_layer          = 18
0.00.831.438 I llm_load_print_meta: n_head           = 8
0.00.831.445 I llm_load_print_meta: n_head_kv        = 1
0.00.831.446 I llm_load_print_meta: n_rot            = 256
0.00.831.446 I llm_load_print_meta: n_swa            = 0
0.00.831.447 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.448 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.453 I llm_load_print_meta: n_gqa            = 8
0.00.831.458 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.463 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.464 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.467 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.480 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.486 I llm_load_print_meta: n_ff             = 16384
0.00.831.490 I llm_load_print_meta: n_expert         = 0
0.00.831.490 I llm_load_print_meta: n_expert_used    = 0
0.00.831.491 I llm_load_print_meta: causal attn      = 1
0.00.831.491 I llm_load_print_meta: pooling type     = 0
0.00.831.491 I llm_load_print_meta: rope type        = 2
0.00.831.492 I llm_load_print_meta: rope scaling     = linear
0.00.831.494 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.494 I llm_load_print_meta: freq_scale_train = 1
0.00.831.495 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.496 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.496 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.496 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.497 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.498 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.498 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.499 I llm_load_print_meta: model type       = 2B
0.00.831.500 I llm_load_print_meta: model ftype      = Q8_0
0.00.831.501 I llm_load_print_meta: model params     = 2.51 B
0.00.831.502 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.831.502 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.515 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.516 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.517 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.518 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.518 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.532 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.532 I llm_load_print_meta: max token length = 93
0.00.909.011 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.909.020 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.909.021 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.909.022 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.909.023 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.909.023 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.914.879 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.886 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.886 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.887 I llama_new_context_with_model: n_batch       = 2048
0.00.914.887 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.887 I llama_new_context_with_model: flash_attn    = 0
0.00.914.890 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.891 I llama_new_context_with_model: freq_scale    = 1
0.00.914.891 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.678 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.796 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.445 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.449 I llama_new_context_with_model: graph nodes  = 601
0.00.932.449 I llama_new_context_with_model: graph splits = 1
0.00.932.473 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.543.266 I main: llama threadpool init, n_threads = 4
0.01.543.283 I 
0.01.543.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.543.409 I 
0.01.543.650 I sampler seed: 3171508834
0.01.543.664 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.543.673 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.543.676 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.543.677 I 
 increasities. It is a recurring issue that plagues many of us.

**What are the root causes of this recurring issue?**

**Possible root causes

0.15.189.415 I llama_perf_sampler_print:    sampling time =      48.34 ms /    33 runs   (    1.46 ms per token,   682.68 tokens per second)
0.15.189.417 I llama_perf_context_print:        load time =    1542.28 ms
0.15.189.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.189.433 I llama_perf_context_print:        eval time =   13558.82 ms /    32 runs   (  423.71 ms per token,     2.36 tokens per second)
0.15.189.435 I llama_perf_context_print:       total time =   13646.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.024.693 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.705 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.792 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.804 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.807 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.813 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.817 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.819 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.820 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.821 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.822 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.828 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.830 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.832 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.833 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.841 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.774 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.370 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.380 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.381 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.382 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.383 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.385 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.386 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.390 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.391 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.393 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.394 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.395 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.405 I llama_model_loader: - type  f32:   37 tensors
0.00.351.407 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.029 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.352 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.274 I llm_load_vocab: special tokens cache size = 5
0.00.833.258 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.333 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.334 I llm_load_print_meta: arch             = gemma
0.00.833.335 I llm_load_print_meta: vocab type       = SPM
0.00.833.336 I llm_load_print_meta: n_vocab          = 256000
0.00.833.338 I llm_load_print_meta: n_merges         = 0
0.00.833.339 I llm_load_print_meta: vocab_only       = 0
0.00.833.339 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.340 I llm_load_print_meta: n_embd           = 2048
0.00.833.340 I llm_load_print_meta: n_layer          = 18
0.00.833.405 I llm_load_print_meta: n_head           = 8
0.00.833.413 I llm_load_print_meta: n_head_kv        = 1
0.00.833.417 I llm_load_print_meta: n_rot            = 256
0.00.833.417 I llm_load_print_meta: n_swa            = 0
0.00.833.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.418 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.422 I llm_load_print_meta: n_gqa            = 8
0.00.833.427 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.434 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.437 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.439 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.448 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.449 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.454 I llm_load_print_meta: n_ff             = 16384
0.00.833.455 I llm_load_print_meta: n_expert         = 0
0.00.833.456 I llm_load_print_meta: n_expert_used    = 0
0.00.833.456 I llm_load_print_meta: causal attn      = 1
0.00.833.457 I llm_load_print_meta: pooling type     = 0
0.00.833.457 I llm_load_print_meta: rope type        = 2
0.00.833.458 I llm_load_print_meta: rope scaling     = linear
0.00.833.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.471 I llm_load_print_meta: freq_scale_train = 1
0.00.833.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.481 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.482 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.482 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.482 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.483 I llm_load_print_meta: model type       = 2B
0.00.833.484 I llm_load_print_meta: model ftype      = Q8_0
0.00.833.485 I llm_load_print_meta: model params     = 2.51 B
0.00.833.486 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.833.487 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.488 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.489 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.489 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.490 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.491 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.497 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.498 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.499 I llm_load_print_meta: max token length = 93
0.00.906.139 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.906.150 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.912.151 I llama_new_context_with_model: n_seq_max     = 1
0.00.912.158 I llama_new_context_with_model: n_ctx         = 4096
0.00.912.158 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.912.159 I llama_new_context_with_model: n_batch       = 2048
0.00.912.159 I llama_new_context_with_model: n_ubatch      = 512
0.00.912.160 I llama_new_context_with_model: flash_attn    = 0
0.00.912.162 I llama_new_context_with_model: freq_base     = 10000.0
0.00.912.163 I llama_new_context_with_model: freq_scale    = 1
0.00.912.163 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.332 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.372 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.486 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.086 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.090 I llama_new_context_with_model: graph nodes  = 601
0.00.929.090 I llama_new_context_with_model: graph splits = 1
0.00.929.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.540.630 I main: llama threadpool init, n_threads = 4
0.01.540.648 I 
0.01.540.772 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.540.776 I 
0.01.541.024 I sampler seed: 2541836801
0.01.541.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.541.049 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.541.050 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.541.050 I 
 increasively, and then burst into laughter. 

What happened?

The answer is: He ate too much cake.

The person was describing how he

0.15.170.423 I llama_perf_sampler_print:    sampling time =      48.15 ms /    33 runs   (    1.46 ms per token,   685.39 tokens per second)
0.15.170.437 I llama_perf_context_print:        load time =    1539.70 ms
0.15.170.439 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.170.440 I llama_perf_context_print:        eval time =   13541.89 ms /    32 runs   (  423.18 ms per token,     2.36 tokens per second)
0.15.170.441 I llama_perf_context_print:       total time =   13629.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.578s
user	3m51.920s
sys	0m9.256s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4281 (c2a16c0b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185056.60 ms
main:    total time = 185056.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.450 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.458 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.549 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.561 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.568 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.571 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.573 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.574 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.576 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.578 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.587 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.591 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.593 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.714 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.613 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.627 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.628 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.630 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.631 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.632 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.638 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.640 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.642 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.355.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.653 I llama_model_loader: - type  f32:   37 tensors
0.00.355.655 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.656 I llama_model_loader: - type q6_K:   19 tensors
0.00.588.826 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.646.617 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.647.474 I llm_load_vocab: special tokens cache size = 5
0.00.848.771 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.845 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.847 I llm_load_print_meta: arch             = gemma
0.00.848.847 I llm_load_print_meta: vocab type       = SPM
0.00.848.848 I llm_load_print_meta: n_vocab          = 256000
0.00.848.850 I llm_load_print_meta: n_merges         = 0
0.00.848.851 I llm_load_print_meta: vocab_only       = 0
0.00.848.852 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.852 I llm_load_print_meta: n_embd           = 2048
0.00.848.853 I llm_load_print_meta: n_layer          = 18
0.00.848.919 I llm_load_print_meta: n_head           = 8
0.00.848.926 I llm_load_print_meta: n_head_kv        = 1
0.00.848.928 I llm_load_print_meta: n_rot            = 256
0.00.848.929 I llm_load_print_meta: n_swa            = 0
0.00.848.937 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.938 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.943 I llm_load_print_meta: n_gqa            = 8
0.00.848.956 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.965 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.980 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.981 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.981 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.986 I llm_load_print_meta: n_ff             = 16384
0.00.848.995 I llm_load_print_meta: n_expert         = 0
0.00.848.996 I llm_load_print_meta: n_expert_used    = 0
0.00.848.996 I llm_load_print_meta: causal attn      = 1
0.00.848.996 I llm_load_print_meta: pooling type     = 0
0.00.848.997 I llm_load_print_meta: rope type        = 2
0.00.848.998 I llm_load_print_meta: rope scaling     = linear
0.00.848.999 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.002 I llm_load_print_meta: freq_scale_train = 1
0.00.849.003 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.003 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.003 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.004 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.004 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.004 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.005 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.006 I llm_load_print_meta: model type       = 2B
0.00.849.007 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.849.007 I llm_load_print_meta: model params     = 2.51 B
0.00.849.008 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.849.009 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.010 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.010 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.011 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.015 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.021 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.022 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.022 I llm_load_print_meta: max token length = 93
0.00.912.407 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.912.415 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.912.416 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.912.416 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.912.417 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.912.418 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.918.340 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.348 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.348 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.348 I llama_new_context_with_model: n_batch       = 2048
0.00.918.349 I llama_new_context_with_model: n_ubatch      = 512
0.00.918.349 I llama_new_context_with_model: flash_attn    = 0
0.00.918.352 I llama_new_context_with_model: freq_base     = 10000.0
0.00.918.352 I llama_new_context_with_model: freq_scale    = 1
0.00.918.353 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.247 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.402 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.979 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.983 I llama_new_context_with_model: graph nodes  = 601
0.00.935.984 I llama_new_context_with_model: graph splits = 1
0.00.936.007 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.525.058 I main: llama threadpool init, n_threads = 4
0.01.525.076 I 
0.01.525.194 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.525.198 I 
0.01.525.436 I sampler seed: 1054565886
0.01.525.451 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.525.460 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.525.463 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.525.464 I 
 squaRED, a young woman with boundless curiosity and a yearning for knowledge. She possesses a sharp mind, insatiable thirst for learning, and a spirit that thrives in

0.12.656.053 I llama_perf_sampler_print:    sampling time =      48.30 ms /    33 runs   (    1.46 ms per token,   683.20 tokens per second)
0.12.656.059 I llama_perf_context_print:        load time =    1524.12 ms
0.12.656.060 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.656.062 I llama_perf_context_print:        eval time =   11043.61 ms /    32 runs   (  345.11 ms per token,     2.90 tokens per second)
0.12.656.063 I llama_perf_context_print:       total time =   11131.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4281 (c2a16c0b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185050.33 ms
main:    total time = 185050.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4281 (c2a16c0b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.023.121 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.218 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.232 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.234 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.239 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.243 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.244 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.246 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.247 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.248 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.257 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.259 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.260 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.264 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.260 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.377 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.778 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.787 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.789 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.790 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.791 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.793 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.794 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.798 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.800 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.809 I llama_model_loader: - type  f32:   37 tensors
0.00.349.811 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.813 I llama_model_loader: - type q6_K:   19 tensors
0.00.572.036 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.974 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.920 I llm_load_vocab: special tokens cache size = 5
0.00.830.304 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.378 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.379 I llm_load_print_meta: arch             = gemma
0.00.830.380 I llm_load_print_meta: vocab type       = SPM
0.00.830.380 I llm_load_print_meta: n_vocab          = 256000
0.00.830.383 I llm_load_print_meta: n_merges         = 0
0.00.830.384 I llm_load_print_meta: vocab_only       = 0
0.00.830.384 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.385 I llm_load_print_meta: n_embd           = 2048
0.00.830.385 I llm_load_print_meta: n_layer          = 18
0.00.830.449 I llm_load_print_meta: n_head           = 8
0.00.830.457 I llm_load_print_meta: n_head_kv        = 1
0.00.830.457 I llm_load_print_meta: n_rot            = 256
0.00.830.457 I llm_load_print_meta: n_swa            = 0
0.00.830.460 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.465 I llm_load_print_meta: n_gqa            = 8
0.00.830.471 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.476 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.477 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.501 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.505 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.506 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.506 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.512 I llm_load_print_meta: n_ff             = 16384
0.00.830.512 I llm_load_print_meta: n_expert         = 0
0.00.830.513 I llm_load_print_meta: n_expert_used    = 0
0.00.830.513 I llm_load_print_meta: causal attn      = 1
0.00.830.513 I llm_load_print_meta: pooling type     = 0
0.00.830.514 I llm_load_print_meta: rope type        = 2
0.00.830.514 I llm_load_print_meta: rope scaling     = linear
0.00.830.516 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.516 I llm_load_print_meta: freq_scale_train = 1
0.00.830.517 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.524 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.527 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.527 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.528 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.528 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.529 I llm_load_print_meta: model type       = 2B
0.00.830.530 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.830.531 I llm_load_print_meta: model params     = 2.51 B
0.00.830.532 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.830.532 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.533 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.541 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.542 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.542 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.542 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.543 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.550 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.551 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.551 I llm_load_print_meta: max token length = 93
0.00.888.204 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.893.969 I llama_new_context_with_model: n_seq_max     = 1
0.00.893.976 I llama_new_context_with_model: n_ctx         = 4096
0.00.893.976 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.893.977 I llama_new_context_with_model: n_batch       = 2048
0.00.893.977 I llama_new_context_with_model: n_ubatch      = 512
0.00.893.978 I llama_new_context_with_model: flash_attn    = 0
0.00.893.981 I llama_new_context_with_model: freq_base     = 10000.0
0.00.893.981 I llama_new_context_with_model: freq_scale    = 1
0.00.893.982 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.020 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.061 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.175 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.911.647 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.911.651 I llama_new_context_with_model: graph nodes  = 601
0.00.911.652 I llama_new_context_with_model: graph splits = 1
0.00.911.673 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.498.784 I main: llama threadpool init, n_threads = 4
0.01.498.800 I 
0.01.498.924 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.498.928 I 
0.01.499.164 I sampler seed: 2830194236
0.01.499.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.499.191 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.499.192 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.499.192 I 
 squaRE - The Guardian of the Stars

The Guardian of the Stars, a powerful cosmic entity, watches over the vast expanse of the universe, guarding the balance

0.12.635.360 I llama_perf_sampler_print:    sampling time =      48.43 ms /    33 runs   (    1.47 ms per token,   681.45 tokens per second)
0.12.635.363 I llama_perf_context_print:        load time =    1497.86 ms
0.12.635.365 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.635.367 I llama_perf_context_print:        eval time =   11049.24 ms /    32 runs   (  345.29 ms per token,     2.90 tokens per second)
0.12.635.368 I llama_perf_context_print:       total time =   11136.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m38.286s
user	46m39.852s
sys	0m6.312s
