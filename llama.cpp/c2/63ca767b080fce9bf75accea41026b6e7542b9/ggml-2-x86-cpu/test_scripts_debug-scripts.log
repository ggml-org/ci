+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 3975 (c263ca76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
0.00.025.117 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.341 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.450 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.456 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.460 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.461 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.463 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.464 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.472 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.473 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.474 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.588 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.821 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.070 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.080 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.081 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.082 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.083 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.084 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.085 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.089 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.090 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.091 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.092 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.093 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.101 I llama_model_loader: - type  f32:   37 tensors
0.00.272.105 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.980 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.315 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.238 I llm_load_vocab: special tokens cache size = 5
0.00.605.007 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.084 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.085 I llm_load_print_meta: arch             = gemma
0.00.605.085 I llm_load_print_meta: vocab type       = SPM
0.00.605.086 I llm_load_print_meta: n_vocab          = 256000
0.00.605.088 I llm_load_print_meta: n_merges         = 0
0.00.605.088 I llm_load_print_meta: vocab_only       = 0
0.00.605.089 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.089 I llm_load_print_meta: n_embd           = 2048
0.00.605.089 I llm_load_print_meta: n_layer          = 18
0.00.605.153 I llm_load_print_meta: n_head           = 8
0.00.605.160 I llm_load_print_meta: n_head_kv        = 1
0.00.605.160 I llm_load_print_meta: n_rot            = 256
0.00.605.160 I llm_load_print_meta: n_swa            = 0
0.00.605.161 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.161 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.166 I llm_load_print_meta: n_gqa            = 8
0.00.605.171 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.177 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.178 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.180 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.180 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.181 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.181 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.186 I llm_load_print_meta: n_ff             = 16384
0.00.605.186 I llm_load_print_meta: n_expert         = 0
0.00.605.187 I llm_load_print_meta: n_expert_used    = 0
0.00.605.187 I llm_load_print_meta: causal attn      = 1
0.00.605.188 I llm_load_print_meta: pooling type     = 0
0.00.605.188 I llm_load_print_meta: rope type        = 2
0.00.605.188 I llm_load_print_meta: rope scaling     = linear
0.00.605.190 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.190 I llm_load_print_meta: freq_scale_train = 1
0.00.605.191 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.191 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.191 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.192 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.192 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.192 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.192 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.193 I llm_load_print_meta: model type       = 2B
0.00.605.194 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.194 I llm_load_print_meta: model params     = 2.51 B
0.00.605.195 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.197 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.207 I llm_load_print_meta: max token length = 93
0.00.605.370 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.152 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.705.165 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.705.166 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.705.167 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.705.168 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.705.169 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.710.946 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.952 I llama_new_context_with_model: n_batch    = 2048
0.00.710.953 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.953 I llama_new_context_with_model: flash_attn = 0
0.00.710.957 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.958 I llama_new_context_with_model: freq_scale = 1
0.00.740.175 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.217 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.719 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.741.724 I llama_new_context_with_model: graph nodes  = 601
0.00.741.724 I llama_new_context_with_model: graph splits = 1
0.00.741.740 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.211 I main: llama threadpool init, n_threads = 4
0.01.352.223 I 
0.01.352.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.330 I 
0.01.352.510 I sampler seed: 270400367
0.01.352.521 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.528 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.528 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.529 I 
 increasities from the 19th and early 20th centuries. [end of text]


0.08.468.122 I llama_perf_sampler_print:    sampling time =      26.05 ms /    18 runs   (    1.45 ms per token,   690.93 tokens per second)
0.08.468.127 I llama_perf_context_print:        load time =    1349.31 ms
0.08.468.128 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.468.130 I llama_perf_context_print:        eval time =    7065.25 ms /    17 runs   (  415.60 ms per token,     2.41 tokens per second)
0.08.468.130 I llama_perf_context_print:       total time =    7115.92 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3975 (c263ca76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
0.00.025.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.125 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.139 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.141 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.144 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.148 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.149 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.150 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.151 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.152 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.158 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.160 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.161 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.162 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.154 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.266.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.284.828 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.284.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.284.837 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.284.838 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.284.839 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.284.841 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.284.842 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.284.845 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.284.846 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.284.847 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.284.848 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.284.849 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.284.858 I llama_model_loader: - type  f32:   37 tensors
0.00.284.863 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.242 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.754 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.587 I llm_load_vocab: special tokens cache size = 5
0.00.624.151 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.223 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.224 I llm_load_print_meta: arch             = gemma
0.00.624.225 I llm_load_print_meta: vocab type       = SPM
0.00.624.226 I llm_load_print_meta: n_vocab          = 256000
0.00.624.228 I llm_load_print_meta: n_merges         = 0
0.00.624.229 I llm_load_print_meta: vocab_only       = 0
0.00.624.229 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.230 I llm_load_print_meta: n_embd           = 2048
0.00.624.230 I llm_load_print_meta: n_layer          = 18
0.00.624.297 I llm_load_print_meta: n_head           = 8
0.00.624.303 I llm_load_print_meta: n_head_kv        = 1
0.00.624.304 I llm_load_print_meta: n_rot            = 256
0.00.624.304 I llm_load_print_meta: n_swa            = 0
0.00.624.305 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.306 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.311 I llm_load_print_meta: n_gqa            = 8
0.00.624.315 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.322 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.327 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.328 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.328 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.329 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.334 I llm_load_print_meta: n_ff             = 16384
0.00.624.335 I llm_load_print_meta: n_expert         = 0
0.00.624.336 I llm_load_print_meta: n_expert_used    = 0
0.00.624.336 I llm_load_print_meta: causal attn      = 1
0.00.624.337 I llm_load_print_meta: pooling type     = 0
0.00.624.340 I llm_load_print_meta: rope type        = 2
0.00.624.341 I llm_load_print_meta: rope scaling     = linear
0.00.624.342 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.343 I llm_load_print_meta: freq_scale_train = 1
0.00.624.343 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.344 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.344 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.344 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.344 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.345 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.345 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.346 I llm_load_print_meta: model type       = 2B
0.00.624.347 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.347 I llm_load_print_meta: model params     = 2.51 B
0.00.624.349 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.349 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.349 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.350 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.351 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.352 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.352 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.353 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.358 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.360 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.361 I llm_load_print_meta: max token length = 93
0.00.624.527 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.720.062 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.725.727 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.734 I llama_new_context_with_model: n_batch    = 2048
0.00.725.735 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.735 I llama_new_context_with_model: flash_attn = 0
0.00.725.739 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.739 I llama_new_context_with_model: freq_scale = 1
0.00.755.311 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.755.357 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.755.476 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.756.845 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.850 I llama_new_context_with_model: graph nodes  = 601
0.00.756.850 I llama_new_context_with_model: graph splits = 1
0.00.756.866 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.368.616 I main: llama threadpool init, n_threads = 4
0.01.368.629 I 
0.01.368.739 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.743 I 
0.01.368.931 I sampler seed: 1624276178
0.01.368.945 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.952 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.368.955 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.955 I 
 increasels.

I cannot answer this question as it contains inappropriate and potentially harmful content. [end of text]


0.09.386.044 I llama_perf_sampler_print:    sampling time =      30.54 ms /    20 runs   (    1.53 ms per token,   654.88 tokens per second)
0.09.386.047 I llama_perf_context_print:        load time =    1365.72 ms
0.09.386.061 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.386.063 I llama_perf_context_print:        eval time =    7958.91 ms /    19 runs   (  418.89 ms per token,     2.39 tokens per second)
0.09.386.064 I llama_perf_context_print:       total time =    8017.44 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 3975 (c263ca76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.835 I main: load the model and apply lora adapter, if any
0.00.024.982 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.196 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.292 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.304 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.305 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.311 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.312 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.313 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.314 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.315 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.316 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.324 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.328 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.645 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.019 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.297 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.305 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.306 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.307 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.308 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.310 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.311 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.314 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.315 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.316 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.317 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.318 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.327 I llama_model_loader: - type  f32:   37 tensors
0.00.271.330 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.819 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.047 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.930 I llm_load_vocab: special tokens cache size = 5
0.00.605.292 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.362 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.363 I llm_load_print_meta: arch             = gemma
0.00.605.363 I llm_load_print_meta: vocab type       = SPM
0.00.605.364 I llm_load_print_meta: n_vocab          = 256000
0.00.605.367 I llm_load_print_meta: n_merges         = 0
0.00.605.367 I llm_load_print_meta: vocab_only       = 0
0.00.605.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.368 I llm_load_print_meta: n_embd           = 2048
0.00.605.368 I llm_load_print_meta: n_layer          = 18
0.00.605.429 I llm_load_print_meta: n_head           = 8
0.00.605.437 I llm_load_print_meta: n_head_kv        = 1
0.00.605.437 I llm_load_print_meta: n_rot            = 256
0.00.605.438 I llm_load_print_meta: n_swa            = 0
0.00.605.438 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.438 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.443 I llm_load_print_meta: n_gqa            = 8
0.00.605.448 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.453 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.455 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.456 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.457 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.457 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.457 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.470 I llm_load_print_meta: n_ff             = 16384
0.00.605.472 I llm_load_print_meta: n_expert         = 0
0.00.605.472 I llm_load_print_meta: n_expert_used    = 0
0.00.605.472 I llm_load_print_meta: causal attn      = 1
0.00.605.473 I llm_load_print_meta: pooling type     = 0
0.00.605.473 I llm_load_print_meta: rope type        = 2
0.00.605.474 I llm_load_print_meta: rope scaling     = linear
0.00.605.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.477 I llm_load_print_meta: freq_scale_train = 1
0.00.605.477 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.477 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.478 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.479 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.480 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.480 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.481 I llm_load_print_meta: model type       = 2B
0.00.605.482 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.483 I llm_load_print_meta: model params     = 2.51 B
0.00.605.487 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.488 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.488 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.489 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.501 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.519 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.521 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.521 I llm_load_print_meta: max token length = 93
0.00.605.700 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.175 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.684.185 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.186 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.684.187 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.684.187 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.188 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.689.777 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.783 I llama_new_context_with_model: n_batch    = 2048
0.00.689.784 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.784 I llama_new_context_with_model: flash_attn = 0
0.00.689.786 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.787 I llama_new_context_with_model: freq_scale = 1
0.00.719.989 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.720.035 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.720.154 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.567 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.721.572 I llama_new_context_with_model: graph nodes  = 601
0.00.721.573 I llama_new_context_with_model: graph splits = 1
0.00.721.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.383.213 I main: llama threadpool init, n_threads = 4
0.01.383.228 I 
0.01.383.337 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.383.341 I 
0.01.383.523 I sampler seed: 2451273050
0.01.383.535 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.383.541 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.383.542 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.383.542 I 
 increasities. [end of text]


0.03.081.347 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   805.54 tokens per second)
0.03.081.350 I llama_perf_context_print:        load time =    1380.28 ms
0.03.081.352 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.081.353 I llama_perf_context_print:        eval time =    1684.59 ms /     4 runs   (  421.15 ms per token,     2.37 tokens per second)
0.03.081.355 I llama_perf_context_print:       total time =    1698.14 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 3975 (c263ca76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.024.528 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.743 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.836 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.848 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.850 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.859 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.861 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.863 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.865 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.867 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.869 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.884 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.889 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.890 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.891 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.892 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.161 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.241 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.249 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.250 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.252 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.253 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.254 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.255 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.258 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.260 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.261 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.262 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.263 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.272 I llama_model_loader: - type  f32:   37 tensors
0.00.271.276 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.437 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.047 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.934 I llm_load_vocab: special tokens cache size = 5
0.00.593.733 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.818 I llm_load_print_meta: arch             = gemma
0.00.593.819 I llm_load_print_meta: vocab type       = SPM
0.00.593.827 I llm_load_print_meta: n_vocab          = 256000
0.00.593.830 I llm_load_print_meta: n_merges         = 0
0.00.593.830 I llm_load_print_meta: vocab_only       = 0
0.00.593.832 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.834 I llm_load_print_meta: n_embd           = 2048
0.00.593.834 I llm_load_print_meta: n_layer          = 18
0.00.593.904 I llm_load_print_meta: n_head           = 8
0.00.593.914 I llm_load_print_meta: n_head_kv        = 1
0.00.593.915 I llm_load_print_meta: n_rot            = 256
0.00.593.915 I llm_load_print_meta: n_swa            = 0
0.00.593.915 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.916 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.922 I llm_load_print_meta: n_gqa            = 8
0.00.593.929 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.947 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.952 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.954 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.955 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.956 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.975 I llm_load_print_meta: n_ff             = 16384
0.00.593.979 I llm_load_print_meta: n_expert         = 0
0.00.593.980 I llm_load_print_meta: n_expert_used    = 0
0.00.593.981 I llm_load_print_meta: causal attn      = 1
0.00.593.981 I llm_load_print_meta: pooling type     = 0
0.00.593.982 I llm_load_print_meta: rope type        = 2
0.00.593.983 I llm_load_print_meta: rope scaling     = linear
0.00.593.984 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.988 I llm_load_print_meta: freq_scale_train = 1
0.00.593.989 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.989 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.990 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.990 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.990 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.991 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.992 I llm_load_print_meta: model type       = 2B
0.00.593.993 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.994 I llm_load_print_meta: model params     = 2.51 B
0.00.593.995 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.995 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.996 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.996 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.998 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.999 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.003 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.009 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.011 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.014 I llm_load_print_meta: max token length = 93
0.00.594.202 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.172 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.665.184 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.671.179 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.185 I llama_new_context_with_model: n_batch    = 2048
0.00.671.186 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.186 I llama_new_context_with_model: flash_attn = 0
0.00.671.190 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.191 I llama_new_context_with_model: freq_scale = 1
0.00.701.618 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.662 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.777 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.176 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.182 I llama_new_context_with_model: graph nodes  = 601
0.00.703.183 I llama_new_context_with_model: graph splits = 1
0.00.703.200 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.347 I main: llama threadpool init, n_threads = 4
0.01.317.361 I 
0.01.317.479 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.483 I 
0.01.317.668 I sampler seed: 2662052747
0.01.317.679 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.687 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.317.688 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.688 I 
 increasities in the context of the novel.

**Explanation:**

The novel explores the complex relationship between desire, social structures, and the human experience. Through

0.14.707.482 I llama_perf_sampler_print:    sampling time =      51.72 ms /    33 runs   (    1.57 ms per token,   638.11 tokens per second)
0.14.707.497 I llama_perf_context_print:        load time =    1314.43 ms
0.14.707.499 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.707.501 I llama_perf_context_print:        eval time =   13293.35 ms /    32 runs   (  415.42 ms per token,     2.41 tokens per second)
0.14.707.507 I llama_perf_context_print:       total time =   13390.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.232s
user	2m13.690s
sys	0m9.406s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3975 (c263ca76)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199273.85 ms
main:    total time = 199273.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3975 (c263ca76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.670 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.883 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.990 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.009 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.010 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.011 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.012 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.018 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.022 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.024 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.025 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.027 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.917 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.787 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.154 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.162 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.163 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.164 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.165 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.166 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.167 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.171 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.172 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.173 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.174 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.175 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.184 I llama_model_loader: - type  f32:   37 tensors
0.00.270.188 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.188 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.766 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.568 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.508 I llm_load_vocab: special tokens cache size = 5
0.00.601.430 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.502 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.503 I llm_load_print_meta: arch             = gemma
0.00.601.505 I llm_load_print_meta: vocab type       = SPM
0.00.601.505 I llm_load_print_meta: n_vocab          = 256000
0.00.601.507 I llm_load_print_meta: n_merges         = 0
0.00.601.508 I llm_load_print_meta: vocab_only       = 0
0.00.601.508 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.509 I llm_load_print_meta: n_embd           = 2048
0.00.601.509 I llm_load_print_meta: n_layer          = 18
0.00.601.573 I llm_load_print_meta: n_head           = 8
0.00.601.580 I llm_load_print_meta: n_head_kv        = 1
0.00.601.581 I llm_load_print_meta: n_rot            = 256
0.00.601.581 I llm_load_print_meta: n_swa            = 0
0.00.601.582 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.582 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.586 I llm_load_print_meta: n_gqa            = 8
0.00.601.591 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.596 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.599 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.600 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.600 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.601 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.601 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.610 I llm_load_print_meta: n_ff             = 16384
0.00.601.611 I llm_load_print_meta: n_expert         = 0
0.00.601.611 I llm_load_print_meta: n_expert_used    = 0
0.00.601.611 I llm_load_print_meta: causal attn      = 1
0.00.601.613 I llm_load_print_meta: pooling type     = 0
0.00.601.613 I llm_load_print_meta: rope type        = 2
0.00.601.614 I llm_load_print_meta: rope scaling     = linear
0.00.601.615 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.616 I llm_load_print_meta: freq_scale_train = 1
0.00.601.616 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.617 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.617 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.618 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.618 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.618 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.619 I llm_load_print_meta: model type       = 2B
0.00.601.620 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.601.621 I llm_load_print_meta: model params     = 2.51 B
0.00.601.622 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.601.622 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.623 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.624 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.624 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.625 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.625 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.631 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.632 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.633 I llm_load_print_meta: max token length = 93
0.00.601.809 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.871 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.662.879 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.662.880 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.662.880 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.662.881 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.662.882 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.668.683 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.690 I llama_new_context_with_model: n_batch    = 2048
0.00.668.691 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.691 I llama_new_context_with_model: flash_attn = 0
0.00.668.693 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.694 I llama_new_context_with_model: freq_scale = 1
0.00.698.134 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.177 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.698.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.699.704 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.699.709 I llama_new_context_with_model: graph nodes  = 601
0.00.699.709 I llama_new_context_with_model: graph splits = 1
0.00.699.724 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.040 I main: llama threadpool init, n_threads = 4
0.01.282.052 I 
0.01.282.159 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.163 I 
0.01.282.339 I sampler seed: 927915374
0.01.282.351 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.373 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.282.374 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.375 I 
 increasities is a complex and nuanced topic that deserves careful consideration. It is important to approach this topic with respect and sensitivity, and to avoid making generalizations or stereotypes

0.12.182.477 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.28 tokens per second)
0.12.182.482 I llama_perf_context_print:        load time =    1279.13 ms
0.12.182.484 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.182.486 I llama_perf_context_print:        eval time =   10805.95 ms /    32 runs   (  337.69 ms per token,     2.96 tokens per second)
0.12.182.490 I llama_perf_context_print:       total time =   10900.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3975 (c263ca76)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199110.02 ms
main:    total time = 199110.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3975 (c263ca76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.024.753 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.853 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.868 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.872 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.878 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.879 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.880 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.881 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.882 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.883 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.889 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.890 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.891 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.892 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.894 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.402 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.262 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.551 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.560 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.561 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.562 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.563 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.565 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.567 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.571 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.572 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.580 I llama_model_loader: - type  f32:   37 tensors
0.00.270.584 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.585 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.055 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.349 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.311 I llm_load_vocab: special tokens cache size = 5
0.00.608.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.529 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.533 I llm_load_print_meta: arch             = gemma
0.00.608.534 I llm_load_print_meta: vocab type       = SPM
0.00.608.535 I llm_load_print_meta: n_vocab          = 256000
0.00.608.537 I llm_load_print_meta: n_merges         = 0
0.00.608.538 I llm_load_print_meta: vocab_only       = 0
0.00.608.538 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.539 I llm_load_print_meta: n_embd           = 2048
0.00.608.539 I llm_load_print_meta: n_layer          = 18
0.00.608.602 I llm_load_print_meta: n_head           = 8
0.00.608.612 I llm_load_print_meta: n_head_kv        = 1
0.00.608.613 I llm_load_print_meta: n_rot            = 256
0.00.608.613 I llm_load_print_meta: n_swa            = 0
0.00.608.614 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.614 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.619 I llm_load_print_meta: n_gqa            = 8
0.00.608.624 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.631 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.632 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.634 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.634 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.635 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.636 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.641 I llm_load_print_meta: n_ff             = 16384
0.00.608.642 I llm_load_print_meta: n_expert         = 0
0.00.608.642 I llm_load_print_meta: n_expert_used    = 0
0.00.608.644 I llm_load_print_meta: causal attn      = 1
0.00.608.644 I llm_load_print_meta: pooling type     = 0
0.00.608.644 I llm_load_print_meta: rope type        = 2
0.00.608.653 I llm_load_print_meta: rope scaling     = linear
0.00.608.654 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.655 I llm_load_print_meta: freq_scale_train = 1
0.00.608.656 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.656 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.656 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.657 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.657 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.658 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.658 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.659 I llm_load_print_meta: model type       = 2B
0.00.608.661 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.662 I llm_load_print_meta: model params     = 2.51 B
0.00.608.663 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.663 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.664 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.666 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.667 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.667 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.668 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.674 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.676 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.676 I llm_load_print_meta: max token length = 93
0.00.608.836 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.669 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.672.235 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.242 I llama_new_context_with_model: n_batch    = 2048
0.00.672.242 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.243 I llama_new_context_with_model: flash_attn = 0
0.00.672.245 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.246 I llama_new_context_with_model: freq_scale = 1
0.00.702.631 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.675 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.792 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.174 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.180 I llama_new_context_with_model: graph nodes  = 601
0.00.704.180 I llama_new_context_with_model: graph splits = 1
0.00.704.197 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.886 I main: llama threadpool init, n_threads = 4
0.01.286.900 I 
0.01.287.007 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.011 I 
0.01.287.189 I sampler seed: 1327856983
0.01.287.201 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.207 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.287.208 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.208 I 
 maneuvously, for he knew he was in for a wild ride.

This statement is about:

a) A funny anecdote
b) A serious

0.12.215.508 I llama_perf_sampler_print:    sampling time =      51.20 ms /    33 runs   (    1.55 ms per token,   644.48 tokens per second)
0.12.215.535 I llama_perf_context_print:        load time =    1284.04 ms
0.12.215.537 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.215.539 I llama_perf_context_print:        eval time =   10832.17 ms /    32 runs   (  338.51 ms per token,     2.95 tokens per second)
0.12.215.540 I llama_perf_context_print:       total time =   10928.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.644s
user	50m10.745s
sys	0m6.326s
