+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.519 I build: 3777 (8344ef58) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.001.799 I main: load the model and apply lora adapter, if any
0.00.022.115 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.163 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.173 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.178 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.179 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.183 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.186 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.187 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.187 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.188 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.188 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.192 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.193 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.194 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.194 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.195 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.070 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.149 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.032 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.038 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.039 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.040 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.041 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.043 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.046 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.046 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.047 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.048 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.051 I llama_model_loader: - type  f32:   37 tensors
0.00.133.054 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.523 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.232 I llm_load_vocab: special tokens cache size = 5
0.00.216.586 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.601 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.601 I llm_load_print_meta: arch             = gemma
0.00.216.602 I llm_load_print_meta: vocab type       = SPM
0.00.216.603 I llm_load_print_meta: n_vocab          = 256000
0.00.216.603 I llm_load_print_meta: n_merges         = 0
0.00.216.603 I llm_load_print_meta: vocab_only       = 0
0.00.216.604 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.604 I llm_load_print_meta: n_embd           = 2048
0.00.216.604 I llm_load_print_meta: n_layer          = 18
0.00.216.616 I llm_load_print_meta: n_head           = 8
0.00.216.617 I llm_load_print_meta: n_head_kv        = 1
0.00.216.617 I llm_load_print_meta: n_rot            = 256
0.00.216.617 I llm_load_print_meta: n_swa            = 0
0.00.216.618 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.618 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.619 I llm_load_print_meta: n_gqa            = 8
0.00.216.620 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.621 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.622 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.623 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.624 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.624 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.624 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.625 I llm_load_print_meta: n_ff             = 16384
0.00.216.625 I llm_load_print_meta: n_expert         = 0
0.00.216.626 I llm_load_print_meta: n_expert_used    = 0
0.00.216.626 I llm_load_print_meta: causal attn      = 1
0.00.216.626 I llm_load_print_meta: pooling type     = 0
0.00.216.627 I llm_load_print_meta: rope type        = 2
0.00.216.627 I llm_load_print_meta: rope scaling     = linear
0.00.216.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.629 I llm_load_print_meta: freq_scale_train = 1
0.00.216.629 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.630 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.630 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.630 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.630 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.631 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.631 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.632 I llm_load_print_meta: model type       = 2B
0.00.216.632 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.633 I llm_load_print_meta: model params     = 2.51 B
0.00.216.634 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.634 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.634 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.635 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.635 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.636 I llm_load_print_meta: max token length = 93
0.00.216.653 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.312.877 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.312.886 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.312.887 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.312.888 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.312.888 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.312.889 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.317.965 I llama_new_context_with_model: n_ctx      = 8192
0.00.317.970 I llama_new_context_with_model: n_batch    = 2048
0.00.317.971 I llama_new_context_with_model: n_ubatch   = 512
0.00.317.971 I llama_new_context_with_model: flash_attn = 0
0.00.317.974 I llama_new_context_with_model: freq_base  = 10000.0
0.00.317.975 I llama_new_context_with_model: freq_scale = 1
0.00.347.032 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.347.047 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.347.135 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.992 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.999 I llama_new_context_with_model: graph nodes  = 601
0.00.347.999 I llama_new_context_with_model: graph splits = 1
0.00.348.001 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.268 I main: llama threadpool init, n_threads = 4
0.00.439.280 I 
0.00.439.352 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.439.355 I 
0.00.439.391 I sampler seed: 2956721163
0.00.439.400 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.403 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.439.403 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary lymphoid hyperplasia (SILH) is a rare, indolent inflammatory disease of the skin and mucous membranes that is characterized by the accumulation of atypical lymphoid follicles

0.02.660.481 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7102.88 tokens per second)
0.02.660.484 I llama_perf_context_print:        load time =     437.45 ms
0.02.660.485 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.660.486 I llama_perf_context_print:        eval time =    2203.40 ms /    32 runs   (   68.86 ms per token,    14.52 tokens per second)
0.02.660.487 I llama_perf_context_print:       total time =    2221.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 3777 (8344ef58) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.810 I main: load the model and apply lora adapter, if any
0.00.021.922 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.940 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.946 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.947 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.951 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.952 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.953 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.957 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.958 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.958 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.959 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.960 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.791 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.730 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.741 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.742 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.745 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.746 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.747 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.748 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.749 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.753 I llama_model_loader: - type  f32:   37 tensors
0.00.131.755 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.535 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.202 I llm_load_vocab: special tokens cache size = 5
0.00.213.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.944 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.945 I llm_load_print_meta: arch             = gemma
0.00.213.946 I llm_load_print_meta: vocab type       = SPM
0.00.213.946 I llm_load_print_meta: n_vocab          = 256000
0.00.213.947 I llm_load_print_meta: n_merges         = 0
0.00.213.947 I llm_load_print_meta: vocab_only       = 0
0.00.213.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.948 I llm_load_print_meta: n_embd           = 2048
0.00.213.948 I llm_load_print_meta: n_layer          = 18
0.00.213.960 I llm_load_print_meta: n_head           = 8
0.00.213.961 I llm_load_print_meta: n_head_kv        = 1
0.00.213.962 I llm_load_print_meta: n_rot            = 256
0.00.213.962 I llm_load_print_meta: n_swa            = 0
0.00.213.962 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.962 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.963 I llm_load_print_meta: n_gqa            = 8
0.00.213.964 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.965 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.968 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.969 I llm_load_print_meta: n_ff             = 16384
0.00.213.970 I llm_load_print_meta: n_expert         = 0
0.00.213.970 I llm_load_print_meta: n_expert_used    = 0
0.00.213.970 I llm_load_print_meta: causal attn      = 1
0.00.213.971 I llm_load_print_meta: pooling type     = 0
0.00.213.971 I llm_load_print_meta: rope type        = 2
0.00.213.972 I llm_load_print_meta: rope scaling     = linear
0.00.213.973 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.973 I llm_load_print_meta: freq_scale_train = 1
0.00.213.974 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.974 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.974 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.975 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.975 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.975 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.976 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.976 I llm_load_print_meta: model type       = 2B
0.00.213.977 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.978 I llm_load_print_meta: model params     = 2.51 B
0.00.213.979 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.979 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.979 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.980 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.980 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.980 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.981 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.981 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.981 I llm_load_print_meta: max token length = 93
0.00.213.998 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.387 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.313.491 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.497 I llama_new_context_with_model: n_batch    = 2048
0.00.313.497 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.498 I llama_new_context_with_model: flash_attn = 0
0.00.313.500 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.501 I llama_new_context_with_model: freq_scale = 1
0.00.343.360 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.376 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.314 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.322 I llama_new_context_with_model: graph nodes  = 601
0.00.344.323 I llama_new_context_with_model: graph splits = 1
0.00.344.325 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.249 I main: llama threadpool init, n_threads = 4
0.00.431.262 I 
0.00.431.336 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.339 I 
0.00.431.377 I sampler seed: 66279594
0.00.431.386 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.389 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.390 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the comments section of a news article about a controversial bill that aims to restrict access to abortion.

The bill, dubbed the "Pain and Gain

0.02.594.738 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6797.12 tokens per second)
0.02.594.742 I llama_perf_context_print:        load time =     429.42 ms
0.02.594.744 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.594.746 I llama_perf_context_print:        eval time =    2145.08 ms /    32 runs   (   67.03 ms per token,    14.92 tokens per second)
0.02.594.747 I llama_perf_context_print:       total time =    2163.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.538 I build: 3777 (8344ef58) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.001.814 I main: load the model and apply lora adapter, if any
0.00.021.854 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.905 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.926 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.927 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.928 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.929 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.929 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.934 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.935 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.935 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.936 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.936 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.833 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.875 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.727 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.733 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.733 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.734 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.735 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.737 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.738 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.741 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.742 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.743 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.744 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.745 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.748 I llama_model_loader: - type  f32:   37 tensors
0.00.132.751 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.563 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.228 I llm_load_vocab: special tokens cache size = 5
0.00.216.471 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.484 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.484 I llm_load_print_meta: arch             = gemma
0.00.216.485 I llm_load_print_meta: vocab type       = SPM
0.00.216.486 I llm_load_print_meta: n_vocab          = 256000
0.00.216.486 I llm_load_print_meta: n_merges         = 0
0.00.216.486 I llm_load_print_meta: vocab_only       = 0
0.00.216.487 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.487 I llm_load_print_meta: n_embd           = 2048
0.00.216.487 I llm_load_print_meta: n_layer          = 18
0.00.216.499 I llm_load_print_meta: n_head           = 8
0.00.216.500 I llm_load_print_meta: n_head_kv        = 1
0.00.216.501 I llm_load_print_meta: n_rot            = 256
0.00.216.501 I llm_load_print_meta: n_swa            = 0
0.00.216.501 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.502 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.503 I llm_load_print_meta: n_gqa            = 8
0.00.216.504 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.504 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.505 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.506 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.507 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.507 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.507 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.508 I llm_load_print_meta: n_ff             = 16384
0.00.216.509 I llm_load_print_meta: n_expert         = 0
0.00.216.509 I llm_load_print_meta: n_expert_used    = 0
0.00.216.510 I llm_load_print_meta: causal attn      = 1
0.00.216.510 I llm_load_print_meta: pooling type     = 0
0.00.216.510 I llm_load_print_meta: rope type        = 2
0.00.216.510 I llm_load_print_meta: rope scaling     = linear
0.00.216.512 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.512 I llm_load_print_meta: freq_scale_train = 1
0.00.216.512 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.513 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.513 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.513 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.514 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.514 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.514 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.515 I llm_load_print_meta: model type       = 2B
0.00.216.515 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.516 I llm_load_print_meta: model params     = 2.51 B
0.00.216.517 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.517 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.518 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.518 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.518 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.518 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.519 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.519 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.519 I llm_load_print_meta: max token length = 93
0.00.216.535 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.290.247 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.290.255 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.256 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.290.256 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.290.257 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.258 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.295.508 I llama_new_context_with_model: n_ctx      = 8192
0.00.295.515 I llama_new_context_with_model: n_batch    = 2048
0.00.295.515 I llama_new_context_with_model: n_ubatch   = 512
0.00.295.515 I llama_new_context_with_model: flash_attn = 0
0.00.295.518 I llama_new_context_with_model: freq_base  = 10000.0
0.00.295.519 I llama_new_context_with_model: freq_scale = 1
0.00.325.177 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.325.192 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.325.287 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.326.162 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.326.169 I llama_new_context_with_model: graph nodes  = 601
0.00.326.170 I llama_new_context_with_model: graph splits = 1
0.00.326.172 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.240 I main: llama threadpool init, n_threads = 4
0.00.428.255 I 
0.00.428.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.428.348 I 
0.00.428.394 I sampler seed: 1400969478
0.00.428.407 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.411 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.428.412 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.718.946 I llama_perf_sampler_print:    sampling time =       0.74 ms /     5 runs   (    0.15 ms per token,  6720.43 tokens per second)
0.00.718.949 I llama_perf_context_print:        load time =     426.41 ms
0.00.718.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.718.955 I llama_perf_context_print:        eval time =     287.40 ms /     4 runs   (   71.85 ms per token,    13.92 tokens per second)
0.00.718.957 I llama_perf_context_print:       total time =     290.72 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.588 I build: 3777 (8344ef58) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.001.894 I main: load the model and apply lora adapter, if any
0.00.022.238 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.284 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.291 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.296 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.300 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.301 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.302 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.302 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.303 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.307 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.307 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.308 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.309 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.309 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.575 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.087 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.997 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.003 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.004 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.005 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.006 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.007 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.008 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.011 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.012 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.013 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.014 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.015 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.018 I llama_model_loader: - type  f32:   37 tensors
0.00.133.021 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.209 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.911 I llm_load_vocab: special tokens cache size = 5
0.00.217.085 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.098 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.099 I llm_load_print_meta: arch             = gemma
0.00.217.099 I llm_load_print_meta: vocab type       = SPM
0.00.217.100 I llm_load_print_meta: n_vocab          = 256000
0.00.217.100 I llm_load_print_meta: n_merges         = 0
0.00.217.101 I llm_load_print_meta: vocab_only       = 0
0.00.217.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.101 I llm_load_print_meta: n_embd           = 2048
0.00.217.102 I llm_load_print_meta: n_layer          = 18
0.00.217.112 I llm_load_print_meta: n_head           = 8
0.00.217.113 I llm_load_print_meta: n_head_kv        = 1
0.00.217.113 I llm_load_print_meta: n_rot            = 256
0.00.217.114 I llm_load_print_meta: n_swa            = 0
0.00.217.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.115 I llm_load_print_meta: n_gqa            = 8
0.00.217.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.117 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.118 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.120 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.120 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.121 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.121 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.122 I llm_load_print_meta: n_ff             = 16384
0.00.217.122 I llm_load_print_meta: n_expert         = 0
0.00.217.123 I llm_load_print_meta: n_expert_used    = 0
0.00.217.123 I llm_load_print_meta: causal attn      = 1
0.00.217.123 I llm_load_print_meta: pooling type     = 0
0.00.217.123 I llm_load_print_meta: rope type        = 2
0.00.217.124 I llm_load_print_meta: rope scaling     = linear
0.00.217.125 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.125 I llm_load_print_meta: freq_scale_train = 1
0.00.217.126 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.127 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.127 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.127 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.127 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.128 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.128 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.128 I llm_load_print_meta: model type       = 2B
0.00.217.129 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.130 I llm_load_print_meta: model params     = 2.51 B
0.00.217.131 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.131 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.132 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.132 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.132 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.133 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.133 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.133 I llm_load_print_meta: max token length = 93
0.00.217.153 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.287.607 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.287.614 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.292.641 I llama_new_context_with_model: n_ctx      = 8192
0.00.292.647 I llama_new_context_with_model: n_batch    = 2048
0.00.292.648 I llama_new_context_with_model: n_ubatch   = 512
0.00.292.648 I llama_new_context_with_model: flash_attn = 0
0.00.292.650 I llama_new_context_with_model: freq_base  = 10000.0
0.00.292.651 I llama_new_context_with_model: freq_scale = 1
0.00.321.951 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.321.968 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.322.059 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.322.907 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.322.915 I llama_new_context_with_model: graph nodes  = 601
0.00.322.915 I llama_new_context_with_model: graph splits = 1
0.00.322.917 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.003 I main: llama threadpool init, n_threads = 4
0.00.418.014 I 
0.00.418.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.087 I 
0.00.418.113 I sampler seed: 1495075676
0.00.418.123 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.127 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.418.127 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly well.
I was thinking of trying to find a way to utilize this skill to benefit myself financially.

**Here are some ideas I have:**

0.02.846.413 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6973.80 tokens per second)
0.02.846.415 I llama_perf_context_print:        load time =     416.09 ms
0.02.846.416 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.846.418 I llama_perf_context_print:        eval time =    2410.20 ms /    32 runs   (   75.32 ms per token,    13.28 tokens per second)
0.02.846.418 I llama_perf_context_print:       total time =    2428.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.223s
user	0m31.098s
sys	0m9.367s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3777 (8344ef58)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32005.64 ms
main:    total time = 32005.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 3777 (8344ef58) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.848 I main: load the model and apply lora adapter, if any
0.00.022.689 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.736 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.748 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.756 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.757 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.760 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.761 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.762 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.763 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.764 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.764 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.768 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.769 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.770 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.771 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.771 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.951 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.790 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.642 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.649 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.650 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.650 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.651 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.652 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.653 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.656 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.656 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.657 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.658 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.659 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.663 I llama_model_loader: - type  f32:   37 tensors
0.00.132.665 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.665 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.488 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.296 I llm_load_vocab: special tokens cache size = 5
0.00.221.622 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.634 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.635 I llm_load_print_meta: arch             = gemma
0.00.221.635 I llm_load_print_meta: vocab type       = SPM
0.00.221.636 I llm_load_print_meta: n_vocab          = 256000
0.00.221.636 I llm_load_print_meta: n_merges         = 0
0.00.221.636 I llm_load_print_meta: vocab_only       = 0
0.00.221.637 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.637 I llm_load_print_meta: n_embd           = 2048
0.00.221.637 I llm_load_print_meta: n_layer          = 18
0.00.221.648 I llm_load_print_meta: n_head           = 8
0.00.221.649 I llm_load_print_meta: n_head_kv        = 1
0.00.221.650 I llm_load_print_meta: n_rot            = 256
0.00.221.650 I llm_load_print_meta: n_swa            = 0
0.00.221.650 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.650 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.651 I llm_load_print_meta: n_gqa            = 8
0.00.221.652 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.654 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.655 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.656 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.656 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.656 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.658 I llm_load_print_meta: n_ff             = 16384
0.00.221.658 I llm_load_print_meta: n_expert         = 0
0.00.221.658 I llm_load_print_meta: n_expert_used    = 0
0.00.221.659 I llm_load_print_meta: causal attn      = 1
0.00.221.659 I llm_load_print_meta: pooling type     = 0
0.00.221.659 I llm_load_print_meta: rope type        = 2
0.00.221.659 I llm_load_print_meta: rope scaling     = linear
0.00.221.660 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.661 I llm_load_print_meta: freq_scale_train = 1
0.00.221.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.662 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.662 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.662 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.662 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.663 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.663 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.664 I llm_load_print_meta: model type       = 2B
0.00.221.665 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.221.666 I llm_load_print_meta: model params     = 2.51 B
0.00.221.666 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.221.667 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.667 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.668 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.668 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.669 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.669 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.671 I llm_load_print_meta: max token length = 93
0.00.221.686 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.280.403 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.280.410 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.280.410 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.280.411 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.280.412 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.280.412 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.285.882 I llama_new_context_with_model: n_ctx      = 8192
0.00.285.887 I llama_new_context_with_model: n_batch    = 2048
0.00.285.887 I llama_new_context_with_model: n_ubatch   = 512
0.00.285.888 I llama_new_context_with_model: flash_attn = 0
0.00.285.891 I llama_new_context_with_model: freq_base  = 10000.0
0.00.285.891 I llama_new_context_with_model: freq_scale = 1
0.00.315.304 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.315.319 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.315.410 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.316.283 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.316.290 I llama_new_context_with_model: graph nodes  = 601
0.00.316.291 I llama_new_context_with_model: graph splits = 1
0.00.316.293 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.397.470 I main: llama threadpool init, n_threads = 4
0.00.397.481 I 
0.00.397.556 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.397.559 I 
0.00.397.587 I sampler seed: 2632595269
0.00.397.596 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.397.601 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.397.602 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneupherially. I apologize for the inconvenience. [end of text]


0.00.941.015 I llama_perf_sampler_print:    sampling time =       1.66 ms /    12 runs   (    0.14 ms per token,  7220.22 tokens per second)
0.00.941.017 I llama_perf_context_print:        load time =     395.61 ms
0.00.941.018 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.941.020 I llama_perf_context_print:        eval time =     536.98 ms /    11 runs   (   48.82 ms per token,    20.49 tokens per second)
0.00.941.020 I llama_perf_context_print:       total time =     543.55 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3777 (8344ef58)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32152.88 ms
main:    total time = 32152.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.537 I build: 3777 (8344ef58) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.021.992 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.014 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.016 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.022 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.023 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.023 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.039 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.040 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.041 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.042 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.048 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.301 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.154 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.156 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.157 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.157 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.160 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.165 I llama_model_loader: - type  f32:   37 tensors
0.00.132.167 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.168 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.262 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.926 I llm_load_vocab: special tokens cache size = 5
0.00.214.181 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.194 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.194 I llm_load_print_meta: arch             = gemma
0.00.214.195 I llm_load_print_meta: vocab type       = SPM
0.00.214.195 I llm_load_print_meta: n_vocab          = 256000
0.00.214.196 I llm_load_print_meta: n_merges         = 0
0.00.214.196 I llm_load_print_meta: vocab_only       = 0
0.00.214.196 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.197 I llm_load_print_meta: n_embd           = 2048
0.00.214.197 I llm_load_print_meta: n_layer          = 18
0.00.214.209 I llm_load_print_meta: n_head           = 8
0.00.214.210 I llm_load_print_meta: n_head_kv        = 1
0.00.214.211 I llm_load_print_meta: n_rot            = 256
0.00.214.211 I llm_load_print_meta: n_swa            = 0
0.00.214.211 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.212 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.213 I llm_load_print_meta: n_gqa            = 8
0.00.214.214 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.215 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.216 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.217 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.217 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.217 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.218 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.219 I llm_load_print_meta: n_ff             = 16384
0.00.214.219 I llm_load_print_meta: n_expert         = 0
0.00.214.219 I llm_load_print_meta: n_expert_used    = 0
0.00.214.219 I llm_load_print_meta: causal attn      = 1
0.00.214.220 I llm_load_print_meta: pooling type     = 0
0.00.214.220 I llm_load_print_meta: rope type        = 2
0.00.214.221 I llm_load_print_meta: rope scaling     = linear
0.00.214.222 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.223 I llm_load_print_meta: freq_scale_train = 1
0.00.214.223 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.224 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.224 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.224 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.224 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.225 I llm_load_print_meta: model type       = 2B
0.00.214.226 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.226 I llm_load_print_meta: model params     = 2.51 B
0.00.214.227 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.227 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.229 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.230 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.230 I llm_load_print_meta: max token length = 93
0.00.214.246 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.269.564 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.274.473 I llama_new_context_with_model: n_ctx      = 8192
0.00.274.479 I llama_new_context_with_model: n_batch    = 2048
0.00.274.479 I llama_new_context_with_model: n_ubatch   = 512
0.00.274.480 I llama_new_context_with_model: flash_attn = 0
0.00.274.482 I llama_new_context_with_model: freq_base  = 10000.0
0.00.274.483 I llama_new_context_with_model: freq_scale = 1
0.00.305.143 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.305.159 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.305.252 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.306.114 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.306.120 I llama_new_context_with_model: graph nodes  = 601
0.00.306.120 I llama_new_context_with_model: graph splits = 1
0.00.306.122 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.386.514 I main: llama threadpool init, n_threads = 4
0.00.386.526 I 
0.00.386.602 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.386.606 I 
0.00.386.645 I sampler seed: 1897084658
0.00.386.655 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.386.657 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.386.658 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

I am unable to generate a response because the provided context does not contain any information regarding the requested action. [end of text]


0.01.672.307 I llama_perf_sampler_print:    sampling time =       3.85 ms /    27 runs   (    0.14 ms per token,  7005.71 tokens per second)
0.01.672.309 I llama_perf_context_print:        load time =     384.64 ms
0.01.672.311 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.672.313 I llama_perf_context_print:        eval time =    1270.94 ms /    26 runs   (   48.88 ms per token,    20.46 tokens per second)
0.01.672.314 I llama_perf_context_print:       total time =    1285.80 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m9.793s
user	8m8.159s
sys	0m7.203s
