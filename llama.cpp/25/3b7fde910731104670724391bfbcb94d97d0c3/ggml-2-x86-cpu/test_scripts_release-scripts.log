+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.513 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.523 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.530 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.535 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.536 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.539 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.540 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.541 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.541 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.542 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.542 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.546 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.546 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.547 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.548 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.548 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.815 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.903 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.608 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.614 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.615 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.615 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.616 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.617 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.618 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.619 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.620 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.621 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.622 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.623 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.625 I llama_model_loader: - type  f32:   37 tensors
0.00.130.627 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.137 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.323 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.787 I llm_load_vocab: special tokens cache size = 5
0.00.259.543 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.560 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.560 I llm_load_print_meta: arch             = gemma
0.00.259.561 I llm_load_print_meta: vocab type       = SPM
0.00.259.561 I llm_load_print_meta: n_vocab          = 256000
0.00.259.562 I llm_load_print_meta: n_merges         = 0
0.00.259.562 I llm_load_print_meta: vocab_only       = 0
0.00.259.562 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.563 I llm_load_print_meta: n_embd           = 2048
0.00.259.563 I llm_load_print_meta: n_layer          = 18
0.00.259.574 I llm_load_print_meta: n_head           = 8
0.00.259.575 I llm_load_print_meta: n_head_kv        = 1
0.00.259.576 I llm_load_print_meta: n_rot            = 256
0.00.259.576 I llm_load_print_meta: n_swa            = 0
0.00.259.576 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.576 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.577 I llm_load_print_meta: n_gqa            = 8
0.00.259.578 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.579 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.580 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.582 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.582 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.583 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.583 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.584 I llm_load_print_meta: n_ff             = 16384
0.00.259.584 I llm_load_print_meta: n_expert         = 0
0.00.259.584 I llm_load_print_meta: n_expert_used    = 0
0.00.259.585 I llm_load_print_meta: causal attn      = 1
0.00.259.585 I llm_load_print_meta: pooling type     = 0
0.00.259.585 I llm_load_print_meta: rope type        = 2
0.00.259.585 I llm_load_print_meta: rope scaling     = linear
0.00.259.587 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.588 I llm_load_print_meta: freq_scale_train = 1
0.00.259.588 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.589 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.589 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.590 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.590 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.590 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.590 I llm_load_print_meta: model type       = 2B
0.00.259.591 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.592 I llm_load_print_meta: model params     = 2.51 B
0.00.259.592 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.592 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.593 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.595 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.595 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.596 I llm_load_print_meta: max token length = 93
0.00.361.820 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.361.826 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.361.827 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.361.828 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.361.828 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.361.829 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.367.086 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.091 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.092 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.092 I llama_new_context_with_model: n_batch       = 2048
0.00.367.092 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.093 I llama_new_context_with_model: flash_attn    = 0
0.00.367.095 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.095 I llama_new_context_with_model: freq_scale    = 1
0.00.367.096 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.301 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.314 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.402 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.639 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.644 I llama_new_context_with_model: graph nodes  = 601
0.00.382.645 I llama_new_context_with_model: graph splits = 1
0.00.382.647 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.569 I main: llama threadpool init, n_threads = 4
0.00.468.585 I 
0.00.468.655 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.468.658 I 
0.00.468.701 I sampler seed: 2930470831
0.00.468.712 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.723 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.727 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.727 I 
 maneuvously. 

I am unable to generate a response as requested because it would involve potentially harmful or inappropriate content. [end of text]


0.02.300.249 I llama_perf_sampler_print:    sampling time =       4.17 ms /    27 runs   (    0.15 ms per token,  6470.17 tokens per second)
0.02.300.252 I llama_perf_context_print:        load time =     467.83 ms
0.02.300.253 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.300.255 I llama_perf_context_print:        eval time =    1815.45 ms /    26 runs   (   69.82 ms per token,    14.32 tokens per second)
0.02.300.256 I llama_perf_context_print:       total time =    1831.69 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.527 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.199 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.224 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.225 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.230 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.231 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.231 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.232 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.659 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.865 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.721 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.729 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.730 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.730 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.731 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.732 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.733 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.735 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.736 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.737 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.738 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.743 I llama_model_loader: - type  f32:   37 tensors
0.00.131.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.941 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.545 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.140 I llm_load_vocab: special tokens cache size = 5
0.00.268.219 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.236 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.237 I llm_load_print_meta: arch             = gemma
0.00.268.237 I llm_load_print_meta: vocab type       = SPM
0.00.268.238 I llm_load_print_meta: n_vocab          = 256000
0.00.268.238 I llm_load_print_meta: n_merges         = 0
0.00.268.238 I llm_load_print_meta: vocab_only       = 0
0.00.268.239 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.239 I llm_load_print_meta: n_embd           = 2048
0.00.268.239 I llm_load_print_meta: n_layer          = 18
0.00.268.251 I llm_load_print_meta: n_head           = 8
0.00.268.252 I llm_load_print_meta: n_head_kv        = 1
0.00.268.253 I llm_load_print_meta: n_rot            = 256
0.00.268.253 I llm_load_print_meta: n_swa            = 0
0.00.268.253 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.253 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.254 I llm_load_print_meta: n_gqa            = 8
0.00.268.255 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.256 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.257 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.259 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.259 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.260 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.260 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.261 I llm_load_print_meta: n_ff             = 16384
0.00.268.261 I llm_load_print_meta: n_expert         = 0
0.00.268.261 I llm_load_print_meta: n_expert_used    = 0
0.00.268.261 I llm_load_print_meta: causal attn      = 1
0.00.268.262 I llm_load_print_meta: pooling type     = 0
0.00.268.262 I llm_load_print_meta: rope type        = 2
0.00.268.262 I llm_load_print_meta: rope scaling     = linear
0.00.268.264 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.265 I llm_load_print_meta: freq_scale_train = 1
0.00.268.265 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.266 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.266 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.266 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.267 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.267 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.267 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.268 I llm_load_print_meta: model type       = 2B
0.00.268.268 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.269 I llm_load_print_meta: model params     = 2.51 B
0.00.268.270 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.270 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.271 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.272 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.272 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.273 I llm_load_print_meta: max token length = 93
0.00.364.599 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.846 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.853 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.853 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.853 I llama_new_context_with_model: n_batch       = 2048
0.00.369.854 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.854 I llama_new_context_with_model: flash_attn    = 0
0.00.369.856 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.857 I llama_new_context_with_model: freq_scale    = 1
0.00.369.858 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.547 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.560 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.654 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.974 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.979 I llama_new_context_with_model: graph nodes  = 601
0.00.385.979 I llama_new_context_with_model: graph splits = 1
0.00.385.982 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.249 I main: llama threadpool init, n_threads = 4
0.00.466.264 I 
0.00.466.338 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.466.341 I 
0.00.466.384 I sampler seed: 2383451994
0.00.466.396 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.399 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.399 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.400 I 
 increasities, and sexual harassment.

Sexual harassment is a form of sex discrimination that violates an individual's dignity and autonomy. It can have significant psychological,

0.02.630.772 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7037.75 tokens per second)
0.02.630.774 I llama_perf_context_print:        load time =     465.50 ms
0.02.630.776 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.630.777 I llama_perf_context_print:        eval time =    2145.48 ms /    32 runs   (   67.05 ms per token,    14.92 tokens per second)
0.02.630.778 I llama_perf_context_print:       total time =    2164.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.170 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.020.592 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.609 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.614 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.615 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.618 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.619 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.620 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.620 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.621 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.621 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.625 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.626 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.312 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.472 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.473 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.474 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.474 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.475 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.476 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.478 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.478 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.479 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.480 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.481 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.484 I llama_model_loader: - type  f32:   37 tensors
0.00.132.485 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.638 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.130 I llm_load_vocab: special tokens cache size = 5
0.00.260.970 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.988 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.989 I llm_load_print_meta: arch             = gemma
0.00.260.989 I llm_load_print_meta: vocab type       = SPM
0.00.260.990 I llm_load_print_meta: n_vocab          = 256000
0.00.260.991 I llm_load_print_meta: n_merges         = 0
0.00.260.991 I llm_load_print_meta: vocab_only       = 0
0.00.260.991 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.992 I llm_load_print_meta: n_embd           = 2048
0.00.260.992 I llm_load_print_meta: n_layer          = 18
0.00.261.005 I llm_load_print_meta: n_head           = 8
0.00.261.006 I llm_load_print_meta: n_head_kv        = 1
0.00.261.006 I llm_load_print_meta: n_rot            = 256
0.00.261.007 I llm_load_print_meta: n_swa            = 0
0.00.261.007 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.007 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.008 I llm_load_print_meta: n_gqa            = 8
0.00.261.009 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.010 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.011 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.012 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.013 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.013 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.013 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.014 I llm_load_print_meta: n_ff             = 16384
0.00.261.014 I llm_load_print_meta: n_expert         = 0
0.00.261.015 I llm_load_print_meta: n_expert_used    = 0
0.00.261.015 I llm_load_print_meta: causal attn      = 1
0.00.261.015 I llm_load_print_meta: pooling type     = 0
0.00.261.015 I llm_load_print_meta: rope type        = 2
0.00.261.016 I llm_load_print_meta: rope scaling     = linear
0.00.261.017 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.018 I llm_load_print_meta: freq_scale_train = 1
0.00.261.018 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.018 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.019 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.019 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.019 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.019 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.020 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.020 I llm_load_print_meta: model type       = 2B
0.00.261.021 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.021 I llm_load_print_meta: model params     = 2.51 B
0.00.261.022 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.022 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.023 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.023 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.024 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.024 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.024 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.025 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.025 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.026 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.026 I llm_load_print_meta: max token length = 93
0.00.336.418 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.336.424 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.425 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.336.426 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.336.426 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.427 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.341.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.644 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.645 I llama_new_context_with_model: n_batch       = 2048
0.00.341.645 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.646 I llama_new_context_with_model: flash_attn    = 0
0.00.341.649 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.650 I llama_new_context_with_model: freq_scale    = 1
0.00.341.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.080 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.093 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.192 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.492 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.499 I llama_new_context_with_model: graph nodes  = 601
0.00.357.499 I llama_new_context_with_model: graph splits = 1
0.00.357.501 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.763 I main: llama threadpool init, n_threads = 4
0.00.443.780 I 
0.00.443.856 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.860 I 
0.00.443.904 I sampler seed: 1649832672
0.00.443.915 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.923 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.925 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.925 I 
 increasities to enhance the natural defenses of a plant.

**A. Tissue Culture**

- Tissue culture is a method of producing new plant plants from a

0.02.750.252 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6590.77 tokens per second)
0.02.750.255 I llama_perf_context_print:        load time =     443.38 ms
0.02.750.257 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.750.259 I llama_perf_context_print:        eval time =    2286.75 ms /    32 runs   (   71.46 ms per token,    13.99 tokens per second)
0.02.750.259 I llama_perf_context_print:       total time =    2306.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.524 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.021.625 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.634 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.640 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.646 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.647 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.651 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.653 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.653 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.654 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.655 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.658 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.659 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.659 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.660 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.660 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.244 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.138 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.144 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.145 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.146 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.147 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.148 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.150 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.152 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.153 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.153 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.154 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.155 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.159 I llama_model_loader: - type  f32:   37 tensors
0.00.132.160 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.832 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.045 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.558 I llm_load_vocab: special tokens cache size = 5
0.00.263.452 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.466 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.467 I llm_load_print_meta: arch             = gemma
0.00.263.467 I llm_load_print_meta: vocab type       = SPM
0.00.263.468 I llm_load_print_meta: n_vocab          = 256000
0.00.263.468 I llm_load_print_meta: n_merges         = 0
0.00.263.469 I llm_load_print_meta: vocab_only       = 0
0.00.263.469 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.469 I llm_load_print_meta: n_embd           = 2048
0.00.263.469 I llm_load_print_meta: n_layer          = 18
0.00.263.481 I llm_load_print_meta: n_head           = 8
0.00.263.482 I llm_load_print_meta: n_head_kv        = 1
0.00.263.482 I llm_load_print_meta: n_rot            = 256
0.00.263.482 I llm_load_print_meta: n_swa            = 0
0.00.263.482 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.483 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.484 I llm_load_print_meta: n_gqa            = 8
0.00.263.485 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.485 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.486 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.488 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.488 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.488 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.489 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.490 I llm_load_print_meta: n_ff             = 16384
0.00.263.490 I llm_load_print_meta: n_expert         = 0
0.00.263.490 I llm_load_print_meta: n_expert_used    = 0
0.00.263.490 I llm_load_print_meta: causal attn      = 1
0.00.263.491 I llm_load_print_meta: pooling type     = 0
0.00.263.491 I llm_load_print_meta: rope type        = 2
0.00.263.491 I llm_load_print_meta: rope scaling     = linear
0.00.263.493 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.493 I llm_load_print_meta: freq_scale_train = 1
0.00.263.494 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.494 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.494 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.495 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.495 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.495 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.495 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.496 I llm_load_print_meta: model type       = 2B
0.00.263.496 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.498 I llm_load_print_meta: model params     = 2.51 B
0.00.263.498 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.499 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.499 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.499 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.500 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.500 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.500 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.501 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.502 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.502 I llm_load_print_meta: max token length = 93
0.00.334.244 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.334.251 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.339.344 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.349 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.350 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.350 I llama_new_context_with_model: n_batch       = 2048
0.00.339.351 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.351 I llama_new_context_with_model: flash_attn    = 0
0.00.339.353 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.355 I llama_new_context_with_model: freq_scale    = 1
0.00.339.355 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.372 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.386 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.473 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.696 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.702 I llama_new_context_with_model: graph nodes  = 601
0.00.354.703 I llama_new_context_with_model: graph splits = 1
0.00.354.705 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.898 I main: llama threadpool init, n_threads = 4
0.00.442.913 I 
0.00.442.981 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.442.985 I 
0.00.443.027 I sampler seed: 2532150132
0.00.443.039 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.044 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.044 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.044 I 
 increably.

I'm not sure what you're talking about. Can you please provide more context? [end of text]


0.02.245.458 I llama_perf_sampler_print:    sampling time =       3.50 ms /    25 runs   (    0.14 ms per token,  7146.94 tokens per second)
0.02.245.460 I llama_perf_context_print:        load time =     442.15 ms
0.02.245.461 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.245.463 I llama_perf_context_print:        eval time =    1788.44 ms /    24 runs   (   74.52 ms per token,    13.42 tokens per second)
0.02.245.463 I llama_perf_context_print:       total time =    1802.57 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.354s
user	0m35.228s
sys	0m9.348s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4263 (253b7fde)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40264.63 ms
main:    total time = 40264.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.447 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.456 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.463 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.471 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.472 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.476 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.478 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.478 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.479 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.480 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.480 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.484 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.485 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.486 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.487 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.955 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.523 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.334 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.341 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.342 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.343 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.344 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.345 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.351 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.352 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.353 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.356 I llama_model_loader: - type  f32:   37 tensors
0.00.131.358 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.359 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.952 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.223 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.791 I llm_load_vocab: special tokens cache size = 5
0.00.262.795 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.814 I llm_load_print_meta: arch             = gemma
0.00.262.815 I llm_load_print_meta: vocab type       = SPM
0.00.262.815 I llm_load_print_meta: n_vocab          = 256000
0.00.262.816 I llm_load_print_meta: n_merges         = 0
0.00.262.816 I llm_load_print_meta: vocab_only       = 0
0.00.262.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.817 I llm_load_print_meta: n_embd           = 2048
0.00.262.817 I llm_load_print_meta: n_layer          = 18
0.00.262.829 I llm_load_print_meta: n_head           = 8
0.00.262.830 I llm_load_print_meta: n_head_kv        = 1
0.00.262.830 I llm_load_print_meta: n_rot            = 256
0.00.262.830 I llm_load_print_meta: n_swa            = 0
0.00.262.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.832 I llm_load_print_meta: n_gqa            = 8
0.00.262.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.835 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.839 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.840 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.842 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.843 I llm_load_print_meta: n_ff             = 16384
0.00.262.843 I llm_load_print_meta: n_expert         = 0
0.00.262.843 I llm_load_print_meta: n_expert_used    = 0
0.00.262.843 I llm_load_print_meta: causal attn      = 1
0.00.262.844 I llm_load_print_meta: pooling type     = 0
0.00.262.844 I llm_load_print_meta: rope type        = 2
0.00.262.844 I llm_load_print_meta: rope scaling     = linear
0.00.262.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.846 I llm_load_print_meta: freq_scale_train = 1
0.00.262.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.847 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.847 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.847 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.848 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.848 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.849 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.849 I llm_load_print_meta: model type       = 2B
0.00.262.850 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.851 I llm_load_print_meta: model params     = 2.51 B
0.00.262.852 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.852 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.853 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.854 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.855 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.855 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.855 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.856 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.856 I llm_load_print_meta: max token length = 93
0.00.322.199 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.207 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.208 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.208 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.209 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.210 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.508 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.515 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.515 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.516 I llama_new_context_with_model: n_batch       = 2048
0.00.327.516 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.517 I llama_new_context_with_model: flash_attn    = 0
0.00.327.520 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.521 I llama_new_context_with_model: freq_scale    = 1
0.00.327.522 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.816 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.829 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.926 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.207 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.214 I llama_new_context_with_model: graph nodes  = 601
0.00.344.214 I llama_new_context_with_model: graph splits = 1
0.00.344.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.794 I main: llama threadpool init, n_threads = 4
0.00.419.810 I 
0.00.419.885 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.889 I 
0.00.419.932 I sampler seed: 2158883091
0.00.419.945 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.950 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.951 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.951 I 
 seconally with the following observations:

**Observations:**

- The average travel time from city A to city B is 5 hours.
- The average

0.01.985.550 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6406.52 tokens per second)
0.01.985.552 I llama_perf_context_print:        load time =     419.04 ms
0.01.985.553 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.985.555 I llama_perf_context_print:        eval time =    1546.71 ms /    32 runs   (   48.33 ms per token,    20.69 tokens per second)
0.01.985.555 I llama_perf_context_print:       total time =    1565.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4263 (253b7fde)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40185.70 ms
main:    total time = 40185.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.529 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.724 I main: load the model and apply lora adapter, if any
0.00.021.002 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.022 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.036 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.352 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.073 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.882 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.888 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.889 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.891 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.892 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.895 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.896 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.899 I llama_model_loader: - type  f32:   37 tensors
0.00.130.900 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.900 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.667 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.016 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.691 I llm_load_vocab: special tokens cache size = 5
0.00.275.934 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.951 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.951 I llm_load_print_meta: arch             = gemma
0.00.275.952 I llm_load_print_meta: vocab type       = SPM
0.00.275.953 I llm_load_print_meta: n_vocab          = 256000
0.00.275.953 I llm_load_print_meta: n_merges         = 0
0.00.275.954 I llm_load_print_meta: vocab_only       = 0
0.00.275.954 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.954 I llm_load_print_meta: n_embd           = 2048
0.00.275.955 I llm_load_print_meta: n_layer          = 18
0.00.275.967 I llm_load_print_meta: n_head           = 8
0.00.275.968 I llm_load_print_meta: n_head_kv        = 1
0.00.275.969 I llm_load_print_meta: n_rot            = 256
0.00.275.969 I llm_load_print_meta: n_swa            = 0
0.00.275.969 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.969 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.970 I llm_load_print_meta: n_gqa            = 8
0.00.275.971 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.972 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.973 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.974 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.975 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.975 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.978 I llm_load_print_meta: n_ff             = 16384
0.00.275.979 I llm_load_print_meta: n_expert         = 0
0.00.275.979 I llm_load_print_meta: n_expert_used    = 0
0.00.275.980 I llm_load_print_meta: causal attn      = 1
0.00.275.980 I llm_load_print_meta: pooling type     = 0
0.00.275.980 I llm_load_print_meta: rope type        = 2
0.00.275.980 I llm_load_print_meta: rope scaling     = linear
0.00.275.982 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.983 I llm_load_print_meta: freq_scale_train = 1
0.00.275.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.984 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.985 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.987 I llm_load_print_meta: model type       = 2B
0.00.275.987 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.988 I llm_load_print_meta: model params     = 2.51 B
0.00.275.989 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.989 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.990 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.990 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.991 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.991 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.991 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.992 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.992 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.993 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.993 I llm_load_print_meta: max token length = 93
0.00.332.291 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.383 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.389 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.390 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.390 I llama_new_context_with_model: n_batch       = 2048
0.00.337.391 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.391 I llama_new_context_with_model: flash_attn    = 0
0.00.337.394 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.395 I llama_new_context_with_model: freq_scale    = 1
0.00.337.396 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.554 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.569 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.670 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.915 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.922 I llama_new_context_with_model: graph nodes  = 601
0.00.353.923 I llama_new_context_with_model: graph splits = 1
0.00.353.925 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.394 I main: llama threadpool init, n_threads = 4
0.00.430.409 I 
0.00.430.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.430.490 I 
0.00.430.537 I sampler seed: 2028764944
0.00.430.548 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.555 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.555 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.556 I 
 squaRED:

I am unable to process your request as I am unable to access external websites or specific data sources. [end of text]


0.01.643.836 I llama_perf_sampler_print:    sampling time =       3.95 ms /    26 runs   (    0.15 ms per token,  6588.95 tokens per second)
0.01.643.840 I llama_perf_context_print:        load time =     429.65 ms
0.01.643.841 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.643.843 I llama_perf_context_print:        eval time =    1198.64 ms /    25 runs   (   47.95 ms per token,    20.86 tokens per second)
0.01.643.844 I llama_perf_context_print:       total time =    1213.45 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.864s
user	10m22.317s
sys	0m7.160s
