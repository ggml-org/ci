+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.671 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.681 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.768 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.780 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.781 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.787 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.789 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.790 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.792 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.793 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.794 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.799 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.801 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.802 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.805 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.955 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.485 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.851 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.872 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.873 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.874 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.876 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.877 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.879 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.883 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.886 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.887 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.889 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.898 I llama_model_loader: - type  f32:   37 tensors
0.00.349.901 I llama_model_loader: - type q8_0:  127 tensors
0.00.620.305 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.746.288 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.747.256 I llm_load_vocab: special tokens cache size = 5
0.00.941.626 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.941.699 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.941.703 I llm_load_print_meta: arch             = gemma
0.00.941.704 I llm_load_print_meta: vocab type       = SPM
0.00.941.705 I llm_load_print_meta: n_vocab          = 256000
0.00.941.708 I llm_load_print_meta: n_merges         = 0
0.00.941.708 I llm_load_print_meta: vocab_only       = 0
0.00.941.708 I llm_load_print_meta: n_ctx_train      = 8192
0.00.941.709 I llm_load_print_meta: n_embd           = 2048
0.00.941.709 I llm_load_print_meta: n_layer          = 18
0.00.941.776 I llm_load_print_meta: n_head           = 8
0.00.941.786 I llm_load_print_meta: n_head_kv        = 1
0.00.941.787 I llm_load_print_meta: n_rot            = 256
0.00.941.788 I llm_load_print_meta: n_swa            = 0
0.00.941.788 I llm_load_print_meta: n_embd_head_k    = 256
0.00.941.789 I llm_load_print_meta: n_embd_head_v    = 256
0.00.941.795 I llm_load_print_meta: n_gqa            = 8
0.00.941.811 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.941.820 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.941.822 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.941.824 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.941.824 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.941.825 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.941.833 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.941.838 I llm_load_print_meta: n_ff             = 16384
0.00.941.842 I llm_load_print_meta: n_expert         = 0
0.00.941.842 I llm_load_print_meta: n_expert_used    = 0
0.00.941.842 I llm_load_print_meta: causal attn      = 1
0.00.941.843 I llm_load_print_meta: pooling type     = 0
0.00.941.843 I llm_load_print_meta: rope type        = 2
0.00.941.843 I llm_load_print_meta: rope scaling     = linear
0.00.941.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.941.845 I llm_load_print_meta: freq_scale_train = 1
0.00.941.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.941.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.941.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.941.847 I llm_load_print_meta: ssm_d_inner      = 0
0.00.941.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.941.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.941.848 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.941.848 I llm_load_print_meta: model type       = 2B
0.00.941.849 I llm_load_print_meta: model ftype      = Q8_0
0.00.941.850 I llm_load_print_meta: model params     = 2.51 B
0.00.941.851 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.941.851 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.941.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.941.853 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.941.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.941.854 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.941.855 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.941.855 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.941.862 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.941.874 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.941.875 I llm_load_print_meta: max token length = 93
0.01.048.710 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.048.720 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.048.721 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.048.721 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.048.722 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.048.723 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.054.733 I llama_new_context_with_model: n_seq_max     = 1
0.01.054.740 I llama_new_context_with_model: n_ctx         = 4096
0.01.054.740 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.054.741 I llama_new_context_with_model: n_batch       = 2048
0.01.054.741 I llama_new_context_with_model: n_ubatch      = 512
0.01.054.742 I llama_new_context_with_model: flash_attn    = 0
0.01.054.744 I llama_new_context_with_model: freq_base     = 10000.0
0.01.054.745 I llama_new_context_with_model: freq_scale    = 1
0.01.054.745 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.069.093 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.069.131 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.069.250 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.071.808 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.071.813 I llama_new_context_with_model: graph nodes  = 601
0.01.071.813 I llama_new_context_with_model: graph splits = 1
0.01.071.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.681.767 I main: llama threadpool init, n_threads = 4
0.01.681.785 I 
0.01.681.922 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.681.927 I 
0.01.682.173 I sampler seed: 1229529862
0.01.682.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.682.196 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.682.198 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.682.198 I 
 increasities, which are a natural and essential part of life for many organisms.

**Answer the question with a clear and concise response.**

The provided text

0.15.236.525 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.91 tokens per second)
0.15.236.541 I llama_perf_context_print:        load time =    1680.83 ms
0.15.236.542 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.236.544 I llama_perf_context_print:        eval time =   13465.50 ms /    32 runs   (  420.80 ms per token,     2.38 tokens per second)
0.15.236.545 I llama_perf_context_print:       total time =   13554.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.023.732 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.839 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.854 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.859 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.866 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.868 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.869 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.871 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.872 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.874 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.885 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.889 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.891 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.892 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.893 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.876 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.000 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.155 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.162 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.164 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.165 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.166 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.168 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.169 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.173 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.175 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.176 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.177 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.360.179 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.187 I llama_model_loader: - type  f32:   37 tensors
0.00.360.190 I llama_model_loader: - type q8_0:  127 tensors
0.00.640.991 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.764.721 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.765.687 I llm_load_vocab: special tokens cache size = 5
0.00.965.276 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.965.354 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.965.355 I llm_load_print_meta: arch             = gemma
0.00.965.355 I llm_load_print_meta: vocab type       = SPM
0.00.965.356 I llm_load_print_meta: n_vocab          = 256000
0.00.965.359 I llm_load_print_meta: n_merges         = 0
0.00.965.359 I llm_load_print_meta: vocab_only       = 0
0.00.965.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.965.360 I llm_load_print_meta: n_embd           = 2048
0.00.965.360 I llm_load_print_meta: n_layer          = 18
0.00.965.424 I llm_load_print_meta: n_head           = 8
0.00.965.432 I llm_load_print_meta: n_head_kv        = 1
0.00.965.433 I llm_load_print_meta: n_rot            = 256
0.00.965.433 I llm_load_print_meta: n_swa            = 0
0.00.965.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.965.434 I llm_load_print_meta: n_embd_head_v    = 256
0.00.965.439 I llm_load_print_meta: n_gqa            = 8
0.00.965.444 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.965.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.965.451 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.965.452 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.965.453 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.965.453 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.965.453 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.965.459 I llm_load_print_meta: n_ff             = 16384
0.00.965.460 I llm_load_print_meta: n_expert         = 0
0.00.965.461 I llm_load_print_meta: n_expert_used    = 0
0.00.965.461 I llm_load_print_meta: causal attn      = 1
0.00.965.461 I llm_load_print_meta: pooling type     = 0
0.00.965.461 I llm_load_print_meta: rope type        = 2
0.00.965.462 I llm_load_print_meta: rope scaling     = linear
0.00.965.472 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.965.473 I llm_load_print_meta: freq_scale_train = 1
0.00.965.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.965.475 I llm_load_print_meta: rope_finetuned   = unknown
0.00.965.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.965.476 I llm_load_print_meta: ssm_d_inner      = 0
0.00.965.476 I llm_load_print_meta: ssm_d_state      = 0
0.00.965.477 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.965.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.965.478 I llm_load_print_meta: model type       = 2B
0.00.965.480 I llm_load_print_meta: model ftype      = Q8_0
0.00.965.480 I llm_load_print_meta: model params     = 2.51 B
0.00.965.482 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.965.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.965.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.965.483 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.965.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.965.484 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.965.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.965.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.965.492 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.965.493 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.965.494 I llm_load_print_meta: max token length = 93
0.01.060.013 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.066.406 I llama_new_context_with_model: n_seq_max     = 1
0.01.066.413 I llama_new_context_with_model: n_ctx         = 4096
0.01.066.413 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.066.414 I llama_new_context_with_model: n_batch       = 2048
0.01.066.414 I llama_new_context_with_model: n_ubatch      = 512
0.01.066.415 I llama_new_context_with_model: flash_attn    = 0
0.01.066.418 I llama_new_context_with_model: freq_base     = 10000.0
0.01.066.419 I llama_new_context_with_model: freq_scale    = 1
0.01.066.419 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.081.891 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.081.934 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.082.058 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.084.694 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.084.699 I llama_new_context_with_model: graph nodes  = 601
0.01.084.699 I llama_new_context_with_model: graph splits = 1
0.01.084.721 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.694.971 I main: llama threadpool init, n_threads = 4
0.01.694.987 I 
0.01.695.127 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.695.131 I 
0.01.695.381 I sampler seed: 3250987762
0.01.695.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.695.406 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.695.411 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.695.411 I 
 increasities to the true nature of reality.

This statement suggests that:

a) Reality is subjective and influenced by perception.
b) Reality is determined

0.15.529.857 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.29 tokens per second)
0.15.529.869 I llama_perf_context_print:        load time =    1693.95 ms
0.15.529.871 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.529.873 I llama_perf_context_print:        eval time =   13745.46 ms /    32 runs   (  429.55 ms per token,     2.33 tokens per second)
0.15.529.875 I llama_perf_context_print:       total time =   13834.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.027 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.038 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.123 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.135 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.137 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.142 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.145 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.146 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.147 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.148 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.158 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.161 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.163 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.557 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.114 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.339 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.351 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.352 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.354 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.355 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.357 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.358 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.362 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.363 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.364 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.366 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.367 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.375 I llama_model_loader: - type  f32:   37 tensors
0.00.351.377 I llama_model_loader: - type q8_0:  127 tensors
0.00.622.936 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.746.330 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.747.267 I llm_load_vocab: special tokens cache size = 5
0.00.952.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.952.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.952.433 I llm_load_print_meta: arch             = gemma
0.00.952.434 I llm_load_print_meta: vocab type       = SPM
0.00.952.435 I llm_load_print_meta: n_vocab          = 256000
0.00.952.437 I llm_load_print_meta: n_merges         = 0
0.00.952.438 I llm_load_print_meta: vocab_only       = 0
0.00.952.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.952.439 I llm_load_print_meta: n_embd           = 2048
0.00.952.439 I llm_load_print_meta: n_layer          = 18
0.00.952.506 I llm_load_print_meta: n_head           = 8
0.00.952.513 I llm_load_print_meta: n_head_kv        = 1
0.00.952.513 I llm_load_print_meta: n_rot            = 256
0.00.952.515 I llm_load_print_meta: n_swa            = 0
0.00.952.516 I llm_load_print_meta: n_embd_head_k    = 256
0.00.952.516 I llm_load_print_meta: n_embd_head_v    = 256
0.00.952.520 I llm_load_print_meta: n_gqa            = 8
0.00.952.525 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.952.530 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.952.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.952.534 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.952.535 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.952.535 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.952.536 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.952.541 I llm_load_print_meta: n_ff             = 16384
0.00.952.542 I llm_load_print_meta: n_expert         = 0
0.00.952.542 I llm_load_print_meta: n_expert_used    = 0
0.00.952.542 I llm_load_print_meta: causal attn      = 1
0.00.952.542 I llm_load_print_meta: pooling type     = 0
0.00.952.543 I llm_load_print_meta: rope type        = 2
0.00.952.544 I llm_load_print_meta: rope scaling     = linear
0.00.952.546 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.952.546 I llm_load_print_meta: freq_scale_train = 1
0.00.952.547 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.952.547 I llm_load_print_meta: rope_finetuned   = unknown
0.00.952.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.952.548 I llm_load_print_meta: ssm_d_inner      = 0
0.00.952.548 I llm_load_print_meta: ssm_d_state      = 0
0.00.952.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.952.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.952.550 I llm_load_print_meta: model type       = 2B
0.00.952.551 I llm_load_print_meta: model ftype      = Q8_0
0.00.952.552 I llm_load_print_meta: model params     = 2.51 B
0.00.952.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.952.566 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.952.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.952.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.952.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.952.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.952.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.952.576 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.952.583 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.952.584 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.952.585 I llm_load_print_meta: max token length = 93
0.01.029.633 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.029.642 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.029.643 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.029.643 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.029.644 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.029.645 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.035.342 I llama_new_context_with_model: n_seq_max     = 1
0.01.035.349 I llama_new_context_with_model: n_ctx         = 4096
0.01.035.349 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.035.350 I llama_new_context_with_model: n_batch       = 2048
0.01.035.350 I llama_new_context_with_model: n_ubatch      = 512
0.01.035.351 I llama_new_context_with_model: flash_attn    = 0
0.01.035.353 I llama_new_context_with_model: freq_base     = 10000.0
0.01.035.354 I llama_new_context_with_model: freq_scale    = 1
0.01.035.354 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.050.175 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.050.215 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.050.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.052.952 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.052.957 I llama_new_context_with_model: graph nodes  = 601
0.01.052.957 I llama_new_context_with_model: graph splits = 1
0.01.052.980 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.662.315 I main: llama threadpool init, n_threads = 4
0.01.662.332 I 
0.01.662.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.662.461 I 
0.01.662.700 I sampler seed: 3217314610
0.01.662.714 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.662.725 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.662.726 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.662.726 I 
 increasities. [end of text]


0.03.361.229 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.83 tokens per second)
0.03.361.233 I llama_perf_context_print:        load time =    1661.37 ms
0.03.361.235 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.361.237 I llama_perf_context_print:        eval time =    1685.91 ms /     4 runs   (  421.48 ms per token,     2.37 tokens per second)
0.03.361.238 I llama_perf_context_print:       total time =    1698.92 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.283 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.293 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.380 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.392 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.396 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.401 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.405 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.407 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.408 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.409 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.410 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.424 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.425 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.427 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.429 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.382 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.952 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.252 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.260 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.262 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.263 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.265 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.267 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.269 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.273 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.274 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.276 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.290 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.297 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.305 I llama_model_loader: - type  f32:   37 tensors
0.00.352.307 I llama_model_loader: - type q8_0:  127 tensors
0.00.608.089 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.726.928 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.727.860 I llm_load_vocab: special tokens cache size = 5
0.00.935.056 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.935.132 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.935.133 I llm_load_print_meta: arch             = gemma
0.00.935.134 I llm_load_print_meta: vocab type       = SPM
0.00.935.135 I llm_load_print_meta: n_vocab          = 256000
0.00.935.137 I llm_load_print_meta: n_merges         = 0
0.00.935.138 I llm_load_print_meta: vocab_only       = 0
0.00.935.138 I llm_load_print_meta: n_ctx_train      = 8192
0.00.935.138 I llm_load_print_meta: n_embd           = 2048
0.00.935.139 I llm_load_print_meta: n_layer          = 18
0.00.935.203 I llm_load_print_meta: n_head           = 8
0.00.935.211 I llm_load_print_meta: n_head_kv        = 1
0.00.935.215 I llm_load_print_meta: n_rot            = 256
0.00.935.216 I llm_load_print_meta: n_swa            = 0
0.00.935.216 I llm_load_print_meta: n_embd_head_k    = 256
0.00.935.216 I llm_load_print_meta: n_embd_head_v    = 256
0.00.935.221 I llm_load_print_meta: n_gqa            = 8
0.00.935.225 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.935.230 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.935.232 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.935.233 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.935.234 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.935.234 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.935.235 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.935.240 I llm_load_print_meta: n_ff             = 16384
0.00.935.240 I llm_load_print_meta: n_expert         = 0
0.00.935.241 I llm_load_print_meta: n_expert_used    = 0
0.00.935.242 I llm_load_print_meta: causal attn      = 1
0.00.935.251 I llm_load_print_meta: pooling type     = 0
0.00.935.251 I llm_load_print_meta: rope type        = 2
0.00.935.252 I llm_load_print_meta: rope scaling     = linear
0.00.935.254 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.935.255 I llm_load_print_meta: freq_scale_train = 1
0.00.935.271 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.935.274 I llm_load_print_meta: rope_finetuned   = unknown
0.00.935.275 I llm_load_print_meta: ssm_d_conv       = 0
0.00.935.275 I llm_load_print_meta: ssm_d_inner      = 0
0.00.935.275 I llm_load_print_meta: ssm_d_state      = 0
0.00.935.276 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.935.276 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.935.277 I llm_load_print_meta: model type       = 2B
0.00.935.278 I llm_load_print_meta: model ftype      = Q8_0
0.00.935.279 I llm_load_print_meta: model params     = 2.51 B
0.00.935.280 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.935.280 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.935.281 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.935.281 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.935.282 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.935.283 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.935.283 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.935.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.935.299 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.935.300 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.935.301 I llm_load_print_meta: max token length = 93
0.01.007.579 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.007.589 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.013.486 I llama_new_context_with_model: n_seq_max     = 1
0.01.013.492 I llama_new_context_with_model: n_ctx         = 4096
0.01.013.493 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.013.493 I llama_new_context_with_model: n_batch       = 2048
0.01.013.493 I llama_new_context_with_model: n_ubatch      = 512
0.01.013.494 I llama_new_context_with_model: flash_attn    = 0
0.01.013.496 I llama_new_context_with_model: freq_base     = 10000.0
0.01.013.496 I llama_new_context_with_model: freq_scale    = 1
0.01.013.497 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.028.492 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.028.532 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.028.651 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.031.247 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.031.251 I llama_new_context_with_model: graph nodes  = 601
0.01.031.251 I llama_new_context_with_model: graph splits = 1
0.01.031.273 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.648.261 I main: llama threadpool init, n_threads = 4
0.01.648.276 I 
0.01.648.395 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.648.399 I 
0.01.648.639 I sampler seed: 379187584
0.01.648.653 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.648.663 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.648.665 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.648.665 I 
 maneuvring, is a technique that involves using a combination of mental imagery and physical action to create a vivid mental experience.

**True or False?**

0.15.221.002 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   669.00 tokens per second)
0.15.221.005 I llama_perf_context_print:        load time =    1647.29 ms
0.15.221.016 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.221.018 I llama_perf_context_print:        eval time =   13482.77 ms /    32 runs   (  421.34 ms per token,     2.37 tokens per second)
0.15.221.020 I llama_perf_context_print:       total time =   13572.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.885s
user	3m4.798s
sys	0m9.275s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4263 (253b7fde)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185700.62 ms
main:    total time = 185700.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.023.617 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.626 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.730 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.739 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.745 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.751 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.753 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.754 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.756 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.757 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.243.794 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.353.948 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.377.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.377.165 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.377.167 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.377.168 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.377.169 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.377.171 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.377.172 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.377.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.377.178 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.377.179 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.377.180 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.377.182 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.377.190 I llama_model_loader: - type  f32:   37 tensors
0.00.377.192 I llama_model_loader: - type q4_K:  108 tensors
0.00.377.193 I llama_model_loader: - type q6_K:   19 tensors
0.00.654.828 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.772.565 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.773.498 I llm_load_vocab: special tokens cache size = 5
0.00.965.510 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.965.583 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.965.584 I llm_load_print_meta: arch             = gemma
0.00.965.584 I llm_load_print_meta: vocab type       = SPM
0.00.965.586 I llm_load_print_meta: n_vocab          = 256000
0.00.965.588 I llm_load_print_meta: n_merges         = 0
0.00.965.588 I llm_load_print_meta: vocab_only       = 0
0.00.965.589 I llm_load_print_meta: n_ctx_train      = 8192
0.00.965.589 I llm_load_print_meta: n_embd           = 2048
0.00.965.590 I llm_load_print_meta: n_layer          = 18
0.00.965.652 I llm_load_print_meta: n_head           = 8
0.00.965.660 I llm_load_print_meta: n_head_kv        = 1
0.00.965.661 I llm_load_print_meta: n_rot            = 256
0.00.965.662 I llm_load_print_meta: n_swa            = 0
0.00.965.662 I llm_load_print_meta: n_embd_head_k    = 256
0.00.965.662 I llm_load_print_meta: n_embd_head_v    = 256
0.00.965.667 I llm_load_print_meta: n_gqa            = 8
0.00.965.672 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.965.677 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.965.679 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.965.681 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.965.681 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.965.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.965.683 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.965.688 I llm_load_print_meta: n_ff             = 16384
0.00.965.689 I llm_load_print_meta: n_expert         = 0
0.00.965.689 I llm_load_print_meta: n_expert_used    = 0
0.00.965.699 I llm_load_print_meta: causal attn      = 1
0.00.965.700 I llm_load_print_meta: pooling type     = 0
0.00.965.701 I llm_load_print_meta: rope type        = 2
0.00.965.702 I llm_load_print_meta: rope scaling     = linear
0.00.965.703 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.965.704 I llm_load_print_meta: freq_scale_train = 1
0.00.965.705 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.965.705 I llm_load_print_meta: rope_finetuned   = unknown
0.00.965.706 I llm_load_print_meta: ssm_d_conv       = 0
0.00.965.706 I llm_load_print_meta: ssm_d_inner      = 0
0.00.965.707 I llm_load_print_meta: ssm_d_state      = 0
0.00.965.708 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.965.708 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.965.709 I llm_load_print_meta: model type       = 2B
0.00.965.710 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.965.711 I llm_load_print_meta: model params     = 2.51 B
0.00.965.711 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.965.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.965.712 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.965.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.965.716 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.965.717 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.965.717 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.965.718 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.965.724 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.965.725 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.965.726 I llm_load_print_meta: max token length = 93
0.01.028.823 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.028.831 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.028.832 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.028.833 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.028.834 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.028.834 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.034.693 I llama_new_context_with_model: n_seq_max     = 1
0.01.034.701 I llama_new_context_with_model: n_ctx         = 4096
0.01.034.701 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.034.702 I llama_new_context_with_model: n_batch       = 2048
0.01.034.702 I llama_new_context_with_model: n_ubatch      = 512
0.01.034.702 I llama_new_context_with_model: flash_attn    = 0
0.01.034.705 I llama_new_context_with_model: freq_base     = 10000.0
0.01.034.705 I llama_new_context_with_model: freq_scale    = 1
0.01.034.706 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.049.789 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.049.828 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.049.940 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.052.491 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.052.496 I llama_new_context_with_model: graph nodes  = 601
0.01.052.496 I llama_new_context_with_model: graph splits = 1
0.01.052.519 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.639.502 I main: llama threadpool init, n_threads = 4
0.01.639.518 I 
0.01.639.637 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.639.641 I 
0.01.639.878 I sampler seed: 2561100692
0.01.639.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.639.902 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.639.905 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.639.905 I 
 seconal, a man who lived in the 18th century, discovered a peculiar fossil while exploring the Amazon rainforest. This fossil was unlike any he had

0.12.840.549 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.88 tokens per second)
0.12.840.563 I llama_perf_context_print:        load time =    1638.57 ms
0.12.840.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.840.566 I llama_perf_context_print:        eval time =   11111.64 ms /    32 runs   (  347.24 ms per token,     2.88 tokens per second)
0.12.840.567 I llama_perf_context_print:       total time =   11201.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4263 (253b7fde)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185615.27 ms
main:    total time = 185615.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4263 (253b7fde) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.026.449 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.545 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.564 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.571 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.572 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.573 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.575 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.576 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.585 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.589 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.593 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.667 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.832 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.841 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.842 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.844 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.845 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.847 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.849 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.853 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.863 I llama_model_loader: - type  f32:   37 tensors
0.00.353.866 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.867 I llama_model_loader: - type q6_K:   19 tensors
0.00.615.548 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.741.391 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.742.372 I llm_load_vocab: special tokens cache size = 5
0.00.934.668 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.934.743 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.934.744 I llm_load_print_meta: arch             = gemma
0.00.934.744 I llm_load_print_meta: vocab type       = SPM
0.00.934.745 I llm_load_print_meta: n_vocab          = 256000
0.00.934.748 I llm_load_print_meta: n_merges         = 0
0.00.934.748 I llm_load_print_meta: vocab_only       = 0
0.00.934.749 I llm_load_print_meta: n_ctx_train      = 8192
0.00.934.749 I llm_load_print_meta: n_embd           = 2048
0.00.934.749 I llm_load_print_meta: n_layer          = 18
0.00.934.815 I llm_load_print_meta: n_head           = 8
0.00.934.822 I llm_load_print_meta: n_head_kv        = 1
0.00.934.826 I llm_load_print_meta: n_rot            = 256
0.00.934.826 I llm_load_print_meta: n_swa            = 0
0.00.934.826 I llm_load_print_meta: n_embd_head_k    = 256
0.00.934.827 I llm_load_print_meta: n_embd_head_v    = 256
0.00.934.831 I llm_load_print_meta: n_gqa            = 8
0.00.934.836 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.934.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.934.843 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.934.845 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.934.846 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.934.846 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.934.856 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.934.864 I llm_load_print_meta: n_ff             = 16384
0.00.934.864 I llm_load_print_meta: n_expert         = 0
0.00.934.865 I llm_load_print_meta: n_expert_used    = 0
0.00.934.865 I llm_load_print_meta: causal attn      = 1
0.00.934.865 I llm_load_print_meta: pooling type     = 0
0.00.934.866 I llm_load_print_meta: rope type        = 2
0.00.934.867 I llm_load_print_meta: rope scaling     = linear
0.00.934.868 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.934.869 I llm_load_print_meta: freq_scale_train = 1
0.00.934.870 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.934.870 I llm_load_print_meta: rope_finetuned   = unknown
0.00.934.871 I llm_load_print_meta: ssm_d_conv       = 0
0.00.934.871 I llm_load_print_meta: ssm_d_inner      = 0
0.00.934.872 I llm_load_print_meta: ssm_d_state      = 0
0.00.934.872 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.934.873 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.934.874 I llm_load_print_meta: model type       = 2B
0.00.934.875 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.934.878 I llm_load_print_meta: model params     = 2.51 B
0.00.934.879 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.934.879 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.934.879 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.934.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.934.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.934.881 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.934.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.934.882 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.934.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.934.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.934.914 I llm_load_print_meta: max token length = 93
0.00.992.718 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.998.459 I llama_new_context_with_model: n_seq_max     = 1
0.00.998.466 I llama_new_context_with_model: n_ctx         = 4096
0.00.998.467 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.998.467 I llama_new_context_with_model: n_batch       = 2048
0.00.998.467 I llama_new_context_with_model: n_ubatch      = 512
0.00.998.468 I llama_new_context_with_model: flash_attn    = 0
0.00.998.471 I llama_new_context_with_model: freq_base     = 10000.0
0.00.998.471 I llama_new_context_with_model: freq_scale    = 1
0.00.998.472 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.013.183 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.013.223 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.013.342 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.015.798 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.015.802 I llama_new_context_with_model: graph nodes  = 601
0.01.015.803 I llama_new_context_with_model: graph splits = 1
0.01.015.826 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.602.356 I main: llama threadpool init, n_threads = 4
0.01.602.374 I 
0.01.602.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.602.498 I 
0.01.602.738 I sampler seed: 865351642
0.01.602.753 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.602.762 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.602.766 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.602.766 I 
 maneuvously. 

**Assistant**

I understand your request, but I am unable to provide assistance with inappropriate or sexually suggestive content. [end of text]


0.12.045.228 I llama_perf_sampler_print:    sampling time =      46.19 ms /    31 runs   (    1.49 ms per token,   671.17 tokens per second)
0.12.045.232 I llama_perf_context_print:        load time =    1601.43 ms
0.12.045.233 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.045.235 I llama_perf_context_print:        eval time =   10359.42 ms /    30 runs   (  345.31 ms per token,     2.90 tokens per second)
0.12.045.236 I llama_perf_context_print:       total time =   10442.88 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.038s
user	46m41.279s
sys	0m6.434s
