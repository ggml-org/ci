+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.679 I build: 3899 (7b921560) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.910 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.340 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.547 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.644 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.656 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.658 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.663 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.670 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.671 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.672 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.673 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.674 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.686 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.688 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.689 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.690 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.691 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.959 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.839 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.848 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.849 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.850 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.851 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.852 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.854 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.858 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.859 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.860 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.861 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.862 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.872 I llama_model_loader: - type  f32:   37 tensors
0.00.274.876 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.962 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.545.237 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.270 I llm_load_vocab: special tokens cache size = 5
0.00.660.186 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.660.255 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.660.257 I llm_load_print_meta: arch             = gemma
0.00.660.257 I llm_load_print_meta: vocab type       = SPM
0.00.660.258 I llm_load_print_meta: n_vocab          = 256000
0.00.660.260 I llm_load_print_meta: n_merges         = 0
0.00.660.261 I llm_load_print_meta: vocab_only       = 0
0.00.660.261 I llm_load_print_meta: n_ctx_train      = 8192
0.00.660.261 I llm_load_print_meta: n_embd           = 2048
0.00.660.262 I llm_load_print_meta: n_layer          = 18
0.00.660.326 I llm_load_print_meta: n_head           = 8
0.00.660.332 I llm_load_print_meta: n_head_kv        = 1
0.00.660.333 I llm_load_print_meta: n_rot            = 256
0.00.660.333 I llm_load_print_meta: n_swa            = 0
0.00.660.334 I llm_load_print_meta: n_embd_head_k    = 256
0.00.660.334 I llm_load_print_meta: n_embd_head_v    = 256
0.00.660.339 I llm_load_print_meta: n_gqa            = 8
0.00.660.344 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.660.349 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.660.350 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.660.351 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.660.352 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.660.352 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.660.353 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.660.358 I llm_load_print_meta: n_ff             = 16384
0.00.660.358 I llm_load_print_meta: n_expert         = 0
0.00.660.359 I llm_load_print_meta: n_expert_used    = 0
0.00.660.359 I llm_load_print_meta: causal attn      = 1
0.00.660.359 I llm_load_print_meta: pooling type     = 0
0.00.660.359 I llm_load_print_meta: rope type        = 2
0.00.660.360 I llm_load_print_meta: rope scaling     = linear
0.00.660.361 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.660.362 I llm_load_print_meta: freq_scale_train = 1
0.00.660.362 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.660.362 I llm_load_print_meta: rope_finetuned   = unknown
0.00.660.363 I llm_load_print_meta: ssm_d_conv       = 0
0.00.660.363 I llm_load_print_meta: ssm_d_inner      = 0
0.00.660.363 I llm_load_print_meta: ssm_d_state      = 0
0.00.660.364 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.660.364 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.660.365 I llm_load_print_meta: model type       = 2B
0.00.660.366 I llm_load_print_meta: model ftype      = Q8_0
0.00.660.366 I llm_load_print_meta: model params     = 2.51 B
0.00.660.367 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.660.368 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.660.368 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.660.369 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.660.370 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.660.371 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.660.371 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.660.372 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.660.378 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.660.380 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.660.380 I llm_load_print_meta: max token length = 93
0.00.660.547 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.759.141 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.759.151 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.759.152 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.759.152 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.759.153 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.759.153 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.765.040 I llama_new_context_with_model: n_ctx      = 8192
0.00.765.046 I llama_new_context_with_model: n_batch    = 2048
0.00.765.047 I llama_new_context_with_model: n_ubatch   = 512
0.00.765.048 I llama_new_context_with_model: flash_attn = 0
0.00.765.052 I llama_new_context_with_model: freq_base  = 10000.0
0.00.765.053 I llama_new_context_with_model: freq_scale = 1
0.00.795.058 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.795.103 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.795.224 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.796.635 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.796.641 I llama_new_context_with_model: graph nodes  = 601
0.00.796.641 I llama_new_context_with_model: graph splits = 1
0.00.796.658 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.416.960 I main: llama threadpool init, n_threads = 4
0.01.416.972 I 
0.01.417.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.417.082 I 
0.01.417.253 I sampler seed: 66874361
0.01.417.264 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.417.272 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.417.273 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.417.273 I 
 increasities and other offensive or discriminatory behaviors. [end of text]


0.05.634.119 I llama_perf_sampler_print:    sampling time =      15.47 ms /    11 runs   (    1.41 ms per token,   710.96 tokens per second)
0.05.634.122 I llama_perf_context_print:        load time =    1413.91 ms
0.05.634.123 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.634.124 I llama_perf_context_print:        eval time =    4190.29 ms /    10 runs   (  419.03 ms per token,     2.39 tokens per second)
0.05.634.125 I llama_perf_context_print:       total time =    4217.17 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.641 I build: 3899 (7b921560) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.837 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.332 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.436 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.452 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.457 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.472 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.473 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.484 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.485 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.495 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.500 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.501 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.810 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.104 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.310 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.321 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.322 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.323 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.324 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.325 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.326 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.331 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.332 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.333 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.334 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.335 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.344 I llama_model_loader: - type  f32:   37 tensors
0.00.270.348 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.940 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.646 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.707 I llm_load_vocab: special tokens cache size = 5
0.00.607.789 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.854 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.855 I llm_load_print_meta: arch             = gemma
0.00.607.855 I llm_load_print_meta: vocab type       = SPM
0.00.607.856 I llm_load_print_meta: n_vocab          = 256000
0.00.607.859 I llm_load_print_meta: n_merges         = 0
0.00.607.859 I llm_load_print_meta: vocab_only       = 0
0.00.607.860 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.860 I llm_load_print_meta: n_embd           = 2048
0.00.607.860 I llm_load_print_meta: n_layer          = 18
0.00.607.942 I llm_load_print_meta: n_head           = 8
0.00.607.951 I llm_load_print_meta: n_head_kv        = 1
0.00.607.952 I llm_load_print_meta: n_rot            = 256
0.00.607.952 I llm_load_print_meta: n_swa            = 0
0.00.607.953 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.953 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.960 I llm_load_print_meta: n_gqa            = 8
0.00.607.967 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.974 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.975 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.978 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.984 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.986 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.993 I llm_load_print_meta: n_ff             = 16384
0.00.607.994 I llm_load_print_meta: n_expert         = 0
0.00.607.995 I llm_load_print_meta: n_expert_used    = 0
0.00.608.000 I llm_load_print_meta: causal attn      = 1
0.00.608.000 I llm_load_print_meta: pooling type     = 0
0.00.608.001 I llm_load_print_meta: rope type        = 2
0.00.608.001 I llm_load_print_meta: rope scaling     = linear
0.00.608.004 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.008 I llm_load_print_meta: freq_scale_train = 1
0.00.608.009 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.010 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.010 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.011 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.011 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.012 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.012 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.013 I llm_load_print_meta: model type       = 2B
0.00.608.015 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.016 I llm_load_print_meta: model params     = 2.51 B
0.00.608.017 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.018 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.020 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.020 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.021 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.022 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.023 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.024 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.033 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.035 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.036 I llm_load_print_meta: max token length = 93
0.00.608.219 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.701.593 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.707.641 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.651 I llama_new_context_with_model: n_batch    = 2048
0.00.707.651 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.652 I llama_new_context_with_model: flash_attn = 0
0.00.707.656 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.656 I llama_new_context_with_model: freq_scale = 1
0.00.739.195 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.242 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.355 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.740.763 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.770 I llama_new_context_with_model: graph nodes  = 601
0.00.740.771 I llama_new_context_with_model: graph splits = 1
0.00.740.790 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.418 I main: llama threadpool init, n_threads = 4
0.01.349.429 I 
0.01.349.559 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.565 I 
0.01.349.747 I sampler seed: 741120901
0.01.349.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.770 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.349.779 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.782 I 
 increasels from the ancient world. [end of text]


0.04.711.048 I llama_perf_sampler_print:    sampling time =      12.43 ms /     9 runs   (    1.38 ms per token,   723.82 tokens per second)
0.04.711.051 I llama_perf_context_print:        load time =    1346.38 ms
0.04.711.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.711.054 I llama_perf_context_print:        eval time =    3339.69 ms /     8 runs   (  417.46 ms per token,     2.40 tokens per second)
0.04.711.054 I llama_perf_context_print:       total time =    3361.64 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.652 I build: 3899 (7b921560) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.078 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.316 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.433 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.439 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.451 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.453 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.467 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.474 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.484 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.489 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.492 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.494 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.044 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.692 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.070 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.084 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.085 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.086 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.087 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.091 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.092 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.093 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.094 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.277.095 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.107 I llama_model_loader: - type  f32:   37 tensors
0.00.277.112 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.071 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.013 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.043 I llm_load_vocab: special tokens cache size = 5
0.00.642.027 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.092 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.093 I llm_load_print_meta: arch             = gemma
0.00.642.094 I llm_load_print_meta: vocab type       = SPM
0.00.642.095 I llm_load_print_meta: n_vocab          = 256000
0.00.642.097 I llm_load_print_meta: n_merges         = 0
0.00.642.098 I llm_load_print_meta: vocab_only       = 0
0.00.642.098 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.098 I llm_load_print_meta: n_embd           = 2048
0.00.642.099 I llm_load_print_meta: n_layer          = 18
0.00.642.162 I llm_load_print_meta: n_head           = 8
0.00.642.168 I llm_load_print_meta: n_head_kv        = 1
0.00.642.169 I llm_load_print_meta: n_rot            = 256
0.00.642.170 I llm_load_print_meta: n_swa            = 0
0.00.642.170 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.170 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.175 I llm_load_print_meta: n_gqa            = 8
0.00.642.180 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.185 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.186 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.187 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.188 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.189 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.189 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.194 I llm_load_print_meta: n_ff             = 16384
0.00.642.195 I llm_load_print_meta: n_expert         = 0
0.00.642.195 I llm_load_print_meta: n_expert_used    = 0
0.00.642.195 I llm_load_print_meta: causal attn      = 1
0.00.642.196 I llm_load_print_meta: pooling type     = 0
0.00.642.196 I llm_load_print_meta: rope type        = 2
0.00.642.196 I llm_load_print_meta: rope scaling     = linear
0.00.642.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.198 I llm_load_print_meta: freq_scale_train = 1
0.00.642.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.200 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.200 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.201 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.202 I llm_load_print_meta: model type       = 2B
0.00.642.203 I llm_load_print_meta: model ftype      = Q8_0
0.00.642.203 I llm_load_print_meta: model params     = 2.51 B
0.00.642.204 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.642.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.205 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.206 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.207 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.207 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.215 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.215 I llm_load_print_meta: max token length = 93
0.00.642.406 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.719.595 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.719.603 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.719.604 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.719.604 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.719.605 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.719.605 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.725.533 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.541 I llama_new_context_with_model: n_batch    = 2048
0.00.725.542 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.542 I llama_new_context_with_model: flash_attn = 0
0.00.725.545 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.546 I llama_new_context_with_model: freq_scale = 1
0.00.754.518 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.563 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.754.687 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.756.130 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.137 I llama_new_context_with_model: graph nodes  = 601
0.00.756.137 I llama_new_context_with_model: graph splits = 1
0.00.756.157 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.368.001 I main: llama threadpool init, n_threads = 4
0.01.368.014 I 
0.01.368.144 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.148 I 
0.01.368.331 I sampler seed: 4257787523
0.01.368.343 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.351 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.368.353 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.354 I 
 increasities.

I'm not sure what you're trying to say. Could you please rephrase your question? [end of text]


0.12.462.902 I llama_perf_sampler_print:    sampling time =      39.83 ms /    27 runs   (    1.48 ms per token,   677.97 tokens per second)
0.12.462.905 I llama_perf_context_print:        load time =    1364.96 ms
0.12.462.906 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.462.908 I llama_perf_context_print:        eval time =   11027.73 ms /    26 runs   (  424.14 ms per token,     2.36 tokens per second)
0.12.462.909 I llama_perf_context_print:       total time =   11094.91 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.686 I build: 3899 (7b921560) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.906 I main: llama backend init
0.00.002.923 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.281 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.540 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.650 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.663 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.665 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.675 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.679 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.682 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.698 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.699 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.712 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.717 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.718 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.723 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.346 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.649 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.661 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.662 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.663 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.664 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.665 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.667 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.671 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.672 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.673 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.674 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.675 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.685 I llama_model_loader: - type  f32:   37 tensors
0.00.272.689 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.702 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.930 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.996 I llm_load_vocab: special tokens cache size = 5
0.00.640.156 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.640.224 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.640.226 I llm_load_print_meta: arch             = gemma
0.00.640.226 I llm_load_print_meta: vocab type       = SPM
0.00.640.227 I llm_load_print_meta: n_vocab          = 256000
0.00.640.229 I llm_load_print_meta: n_merges         = 0
0.00.640.230 I llm_load_print_meta: vocab_only       = 0
0.00.640.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.640.231 I llm_load_print_meta: n_embd           = 2048
0.00.640.231 I llm_load_print_meta: n_layer          = 18
0.00.640.298 I llm_load_print_meta: n_head           = 8
0.00.640.304 I llm_load_print_meta: n_head_kv        = 1
0.00.640.305 I llm_load_print_meta: n_rot            = 256
0.00.640.305 I llm_load_print_meta: n_swa            = 0
0.00.640.306 I llm_load_print_meta: n_embd_head_k    = 256
0.00.640.306 I llm_load_print_meta: n_embd_head_v    = 256
0.00.640.311 I llm_load_print_meta: n_gqa            = 8
0.00.640.316 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.640.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.640.322 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.640.323 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.640.324 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.640.324 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.640.325 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.640.330 I llm_load_print_meta: n_ff             = 16384
0.00.640.330 I llm_load_print_meta: n_expert         = 0
0.00.640.331 I llm_load_print_meta: n_expert_used    = 0
0.00.640.331 I llm_load_print_meta: causal attn      = 1
0.00.640.331 I llm_load_print_meta: pooling type     = 0
0.00.640.331 I llm_load_print_meta: rope type        = 2
0.00.640.332 I llm_load_print_meta: rope scaling     = linear
0.00.640.333 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.640.334 I llm_load_print_meta: freq_scale_train = 1
0.00.640.334 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.640.334 I llm_load_print_meta: rope_finetuned   = unknown
0.00.640.360 I llm_load_print_meta: ssm_d_conv       = 0
0.00.640.362 I llm_load_print_meta: ssm_d_inner      = 0
0.00.640.362 I llm_load_print_meta: ssm_d_state      = 0
0.00.640.363 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.640.363 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.640.364 I llm_load_print_meta: model type       = 2B
0.00.640.366 I llm_load_print_meta: model ftype      = Q8_0
0.00.640.368 I llm_load_print_meta: model params     = 2.51 B
0.00.640.370 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.640.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.640.373 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.640.373 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.640.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.640.376 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.640.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.640.377 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.640.386 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.640.388 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.640.389 I llm_load_print_meta: max token length = 93
0.00.640.579 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.860 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.711.872 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.717.811 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.819 I llama_new_context_with_model: n_batch    = 2048
0.00.717.820 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.820 I llama_new_context_with_model: flash_attn = 0
0.00.717.824 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.825 I llama_new_context_with_model: freq_scale = 1
0.00.747.881 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.749.449 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.457 I llama_new_context_with_model: graph nodes  = 601
0.00.749.457 I llama_new_context_with_model: graph splits = 1
0.00.749.482 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.596 I main: llama threadpool init, n_threads = 4
0.01.363.608 I 
0.01.363.738 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.743 I 
0.01.363.921 I sampler seed: 1928179209
0.01.363.932 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.939 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.363.942 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.942 I 
 maneuvously.
I'm unable to generate a response that is safe, appropriate, and aligns with ethical guidelines. My purpose is to assist users with

0.14.890.551 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.62 tokens per second)
0.14.890.567 I llama_perf_context_print:        load time =    1360.45 ms
0.14.890.569 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.890.571 I llama_perf_context_print:        eval time =   13444.88 ms /    32 runs   (  420.15 ms per token,     2.38 tokens per second)
0.14.890.572 I llama_perf_context_print:       total time =   13526.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.497s
user	2m21.622s
sys	0m9.588s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3899 (7b921560)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199301.87 ms
main:    total time = 199301.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.671 I build: 3899 (7b921560) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.595 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.816 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.913 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.926 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.928 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.933 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.937 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.938 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.940 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.941 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.943 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.952 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.953 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.954 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.956 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.834 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.673 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.868 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.878 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.879 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.880 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.881 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.884 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.894 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.895 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.896 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.905 I llama_model_loader: - type  f32:   37 tensors
0.00.270.910 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.911 I llama_model_loader: - type q6_K:   19 tensors
0.00.469.035 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.769 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.778 I llm_load_vocab: special tokens cache size = 5
0.00.635.946 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.010 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.011 I llm_load_print_meta: arch             = gemma
0.00.636.011 I llm_load_print_meta: vocab type       = SPM
0.00.636.013 I llm_load_print_meta: n_vocab          = 256000
0.00.636.015 I llm_load_print_meta: n_merges         = 0
0.00.636.016 I llm_load_print_meta: vocab_only       = 0
0.00.636.017 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.017 I llm_load_print_meta: n_embd           = 2048
0.00.636.017 I llm_load_print_meta: n_layer          = 18
0.00.636.081 I llm_load_print_meta: n_head           = 8
0.00.636.088 I llm_load_print_meta: n_head_kv        = 1
0.00.636.089 I llm_load_print_meta: n_rot            = 256
0.00.636.089 I llm_load_print_meta: n_swa            = 0
0.00.636.090 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.095 I llm_load_print_meta: n_gqa            = 8
0.00.636.099 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.104 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.105 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.107 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.107 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.107 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.108 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.112 I llm_load_print_meta: n_ff             = 16384
0.00.636.113 I llm_load_print_meta: n_expert         = 0
0.00.636.113 I llm_load_print_meta: n_expert_used    = 0
0.00.636.113 I llm_load_print_meta: causal attn      = 1
0.00.636.114 I llm_load_print_meta: pooling type     = 0
0.00.636.114 I llm_load_print_meta: rope type        = 2
0.00.636.114 I llm_load_print_meta: rope scaling     = linear
0.00.636.116 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.116 I llm_load_print_meta: freq_scale_train = 1
0.00.636.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.117 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.140 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.141 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.141 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.141 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.142 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.143 I llm_load_print_meta: model type       = 2B
0.00.636.144 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.636.145 I llm_load_print_meta: model params     = 2.51 B
0.00.636.145 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.636.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.147 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.148 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.149 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.149 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.158 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.162 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.168 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.170 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.170 I llm_load_print_meta: max token length = 93
0.00.636.341 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.434 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.694.445 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.694.446 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.694.447 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.694.448 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.694.449 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.700.118 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.127 I llama_new_context_with_model: n_batch    = 2048
0.00.700.128 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.128 I llama_new_context_with_model: flash_attn = 0
0.00.700.133 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.134 I llama_new_context_with_model: freq_scale = 1
0.00.731.774 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.819 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.933 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.733.344 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.351 I llama_new_context_with_model: graph nodes  = 601
0.00.733.351 I llama_new_context_with_model: graph splits = 1
0.00.733.367 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.907 I main: llama threadpool init, n_threads = 4
0.01.314.920 I 
0.01.315.035 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.039 I 
0.01.315.209 I sampler seed: 1491875672
0.01.315.219 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.225 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.315.226 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.226 I 
 increasively and asks the same question again in a more polite way.

I apologize for the inconvenience, but I was hoping to discuss the matter of [insert

0.12.374.607 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.94 tokens per second)
0.12.374.610 I llama_perf_context_print:        load time =    1311.88 ms
0.12.374.611 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.374.613 I llama_perf_context_print:        eval time =   10975.58 ms /    32 runs   (  342.99 ms per token,     2.92 tokens per second)
0.12.374.627 I llama_perf_context_print:       total time =   11059.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3899 (7b921560)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199230.30 ms
main:    total time = 199230.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.642 I build: 3899 (7b921560) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.951 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.076 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.081 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.083 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.084 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.085 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.086 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.100 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.103 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.170 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.636 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.985 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.000 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.001 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.007 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.009 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.018 I llama_model_loader: - type  f32:   37 tensors
0.00.271.023 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.023 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.672 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.542.661 I llm_load_vocab: special tokens cache size = 5
0.00.641.697 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.763 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.765 I llm_load_print_meta: arch             = gemma
0.00.641.765 I llm_load_print_meta: vocab type       = SPM
0.00.641.766 I llm_load_print_meta: n_vocab          = 256000
0.00.641.768 I llm_load_print_meta: n_merges         = 0
0.00.641.769 I llm_load_print_meta: vocab_only       = 0
0.00.641.769 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.770 I llm_load_print_meta: n_embd           = 2048
0.00.641.770 I llm_load_print_meta: n_layer          = 18
0.00.641.838 I llm_load_print_meta: n_head           = 8
0.00.641.846 I llm_load_print_meta: n_head_kv        = 1
0.00.641.847 I llm_load_print_meta: n_rot            = 256
0.00.641.847 I llm_load_print_meta: n_swa            = 0
0.00.641.848 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.852 I llm_load_print_meta: n_gqa            = 8
0.00.641.857 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.862 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.863 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.865 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.866 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.886 I llm_load_print_meta: n_ff             = 16384
0.00.641.887 I llm_load_print_meta: n_expert         = 0
0.00.641.887 I llm_load_print_meta: n_expert_used    = 0
0.00.641.888 I llm_load_print_meta: causal attn      = 1
0.00.641.888 I llm_load_print_meta: pooling type     = 0
0.00.641.888 I llm_load_print_meta: rope type        = 2
0.00.641.889 I llm_load_print_meta: rope scaling     = linear
0.00.641.890 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.891 I llm_load_print_meta: freq_scale_train = 1
0.00.641.891 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.892 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.892 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.892 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.893 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.893 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.894 I llm_load_print_meta: model type       = 2B
0.00.641.895 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.641.895 I llm_load_print_meta: model params     = 2.51 B
0.00.641.896 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.641.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.897 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.899 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.900 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.906 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.907 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.908 I llm_load_print_meta: max token length = 93
0.00.642.088 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.699.677 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.705.424 I llama_new_context_with_model: n_ctx      = 8192
0.00.705.432 I llama_new_context_with_model: n_batch    = 2048
0.00.705.433 I llama_new_context_with_model: n_ubatch   = 512
0.00.705.434 I llama_new_context_with_model: flash_attn = 0
0.00.705.438 I llama_new_context_with_model: freq_base  = 10000.0
0.00.705.441 I llama_new_context_with_model: freq_scale = 1
0.00.736.293 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.337 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.452 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.737.820 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.737.827 I llama_new_context_with_model: graph nodes  = 601
0.00.737.827 I llama_new_context_with_model: graph splits = 1
0.00.737.844 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.357 I main: llama threadpool init, n_threads = 4
0.01.316.370 I 
0.01.316.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.484 I 
0.01.316.655 I sampler seed: 100070215
0.01.316.666 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.672 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.673 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.674 I 
 strick by Ulf Hoeg.

**Summary:**

The book "Striks by Ulf Hoeg" is a comprehensive guide to understanding and using the power of

0.12.297.877 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.61 tokens per second)
0.12.297.881 I llama_perf_context_print:        load time =    1313.34 ms
0.12.297.894 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.297.897 I llama_perf_context_print:        eval time =   10896.90 ms /    32 runs   (  340.53 ms per token,     2.94 tokens per second)
0.12.297.898 I llama_perf_context_print:       total time =   10981.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.115s
user	50m15.697s
sys	0m6.527s
