+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.738 I build: 3779 (7be099fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.951 I main: llama backend init
0.00.002.895 I main: load the model and apply lora adapter, if any
0.00.025.280 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.479 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.572 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.585 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.587 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.591 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.593 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.594 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.595 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.596 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.596 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.603 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.604 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.605 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.607 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.608 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.720 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.719 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.865 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.873 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.874 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.875 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.876 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.877 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.878 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.881 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.882 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.884 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.885 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.886 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.895 I llama_model_loader: - type  f32:   37 tensors
0.00.196.898 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.742 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.788 I llm_load_vocab: special tokens cache size = 5
0.00.542.934 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.542.994 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.542.995 I llm_load_print_meta: arch             = gemma
0.00.542.996 I llm_load_print_meta: vocab type       = SPM
0.00.542.997 I llm_load_print_meta: n_vocab          = 256000
0.00.543.000 I llm_load_print_meta: n_merges         = 0
0.00.543.000 I llm_load_print_meta: vocab_only       = 0
0.00.543.001 I llm_load_print_meta: n_ctx_train      = 8192
0.00.543.001 I llm_load_print_meta: n_embd           = 2048
0.00.543.001 I llm_load_print_meta: n_layer          = 18
0.00.543.035 I llm_load_print_meta: n_head           = 8
0.00.543.041 I llm_load_print_meta: n_head_kv        = 1
0.00.543.042 I llm_load_print_meta: n_rot            = 256
0.00.543.042 I llm_load_print_meta: n_swa            = 0
0.00.543.043 I llm_load_print_meta: n_embd_head_k    = 256
0.00.543.043 I llm_load_print_meta: n_embd_head_v    = 256
0.00.543.048 I llm_load_print_meta: n_gqa            = 8
0.00.543.052 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.543.056 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.543.057 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.543.059 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.543.060 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.543.060 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.543.061 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.543.066 I llm_load_print_meta: n_ff             = 16384
0.00.543.067 I llm_load_print_meta: n_expert         = 0
0.00.543.067 I llm_load_print_meta: n_expert_used    = 0
0.00.543.068 I llm_load_print_meta: causal attn      = 1
0.00.543.068 I llm_load_print_meta: pooling type     = 0
0.00.543.068 I llm_load_print_meta: rope type        = 2
0.00.543.069 I llm_load_print_meta: rope scaling     = linear
0.00.543.070 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.543.071 I llm_load_print_meta: freq_scale_train = 1
0.00.543.071 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.543.071 I llm_load_print_meta: rope_finetuned   = unknown
0.00.543.071 I llm_load_print_meta: ssm_d_conv       = 0
0.00.543.072 I llm_load_print_meta: ssm_d_inner      = 0
0.00.543.072 I llm_load_print_meta: ssm_d_state      = 0
0.00.543.072 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.543.073 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.543.074 I llm_load_print_meta: model type       = 2B
0.00.543.075 I llm_load_print_meta: model ftype      = Q8_0
0.00.543.075 I llm_load_print_meta: model params     = 2.51 B
0.00.543.076 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.543.077 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.543.077 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.543.078 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.543.078 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.543.078 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.543.079 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.543.079 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.543.080 I llm_load_print_meta: max token length = 93
0.00.543.259 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.641.082 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.641.094 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.641.094 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.641.095 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.641.096 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.641.096 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.646.874 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.884 I llama_new_context_with_model: n_batch    = 2048
0.00.646.884 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.885 I llama_new_context_with_model: flash_attn = 0
0.00.646.888 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.889 I llama_new_context_with_model: freq_scale = 1
0.00.677.934 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.975 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.678.091 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.679.497 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.679.503 I llama_new_context_with_model: graph nodes  = 601
0.00.679.504 I llama_new_context_with_model: graph splits = 1
0.00.679.520 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.472 I main: llama threadpool init, n_threads = 4
0.01.295.483 I 
0.01.295.575 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.295.579 I 
0.01.295.743 I sampler seed: 1182677215
0.01.295.753 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.758 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.295.759 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions that are within the boundaries of ethical and legal

0.14.947.938 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.74 tokens per second)
0.14.947.941 I llama_perf_context_print:        load time =    1292.49 ms
0.14.947.953 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.947.955 I llama_perf_context_print:        eval time =   13571.10 ms /    32 runs   (  424.10 ms per token,     2.36 tokens per second)
0.14.947.957 I llama_perf_context_print:       total time =   13652.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.646 I build: 3779 (7be099fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.025.026 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.122 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.140 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.144 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.146 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.147 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.147 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.148 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.149 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.156 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.157 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.158 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.159 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.029 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.258 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.288 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.289 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.289 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.290 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.291 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.292 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.296 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.297 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.298 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.299 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.300 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.308 I llama_model_loader: - type  f32:   37 tensors
0.00.196.312 I llama_model_loader: - type q8_0:  127 tensors
0.00.487.293 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.334 I llm_load_vocab: special tokens cache size = 5
0.00.546.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.546.470 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.546.471 I llm_load_print_meta: arch             = gemma
0.00.546.472 I llm_load_print_meta: vocab type       = SPM
0.00.546.473 I llm_load_print_meta: n_vocab          = 256000
0.00.546.475 I llm_load_print_meta: n_merges         = 0
0.00.546.476 I llm_load_print_meta: vocab_only       = 0
0.00.546.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.546.476 I llm_load_print_meta: n_embd           = 2048
0.00.546.477 I llm_load_print_meta: n_layer          = 18
0.00.546.510 I llm_load_print_meta: n_head           = 8
0.00.546.517 I llm_load_print_meta: n_head_kv        = 1
0.00.546.517 I llm_load_print_meta: n_rot            = 256
0.00.546.518 I llm_load_print_meta: n_swa            = 0
0.00.546.518 I llm_load_print_meta: n_embd_head_k    = 256
0.00.546.518 I llm_load_print_meta: n_embd_head_v    = 256
0.00.546.523 I llm_load_print_meta: n_gqa            = 8
0.00.546.527 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.546.532 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.546.533 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.546.534 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.546.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.546.535 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.546.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.546.540 I llm_load_print_meta: n_ff             = 16384
0.00.546.540 I llm_load_print_meta: n_expert         = 0
0.00.546.541 I llm_load_print_meta: n_expert_used    = 0
0.00.546.541 I llm_load_print_meta: causal attn      = 1
0.00.546.541 I llm_load_print_meta: pooling type     = 0
0.00.546.541 I llm_load_print_meta: rope type        = 2
0.00.546.542 I llm_load_print_meta: rope scaling     = linear
0.00.546.543 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.546.544 I llm_load_print_meta: freq_scale_train = 1
0.00.546.544 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.546.544 I llm_load_print_meta: rope_finetuned   = unknown
0.00.546.545 I llm_load_print_meta: ssm_d_conv       = 0
0.00.546.545 I llm_load_print_meta: ssm_d_inner      = 0
0.00.546.545 I llm_load_print_meta: ssm_d_state      = 0
0.00.546.545 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.546.546 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.546.547 I llm_load_print_meta: model type       = 2B
0.00.546.547 I llm_load_print_meta: model ftype      = Q8_0
0.00.546.548 I llm_load_print_meta: model params     = 2.51 B
0.00.546.549 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.546.549 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.546.550 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.546.550 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.546.551 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.546.551 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.546.552 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.546.553 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.546.553 I llm_load_print_meta: max token length = 93
0.00.546.735 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.640.622 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.646.339 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.349 I llama_new_context_with_model: n_batch    = 2048
0.00.646.349 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.350 I llama_new_context_with_model: flash_attn = 0
0.00.646.354 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.355 I llama_new_context_with_model: freq_scale = 1
0.00.677.177 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.219 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.678.671 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.677 I llama_new_context_with_model: graph nodes  = 601
0.00.678.678 I llama_new_context_with_model: graph splits = 1
0.00.678.693 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.401 I main: llama threadpool init, n_threads = 4
0.01.290.413 I 
0.01.290.503 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.507 I 
0.01.290.665 I sampler seed: 3010618915
0.01.290.676 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.290.680 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.290.681 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously. I apologize for the inappropriate humor.

I am unable to provide a response that is inappropriate or disrespectful in nature. My purpose is to assist

0.15.006.058 I llama_perf_sampler_print:    sampling time =      48.54 ms /    33 runs   (    1.47 ms per token,   679.84 tokens per second)
0.15.006.062 I llama_perf_context_print:        load time =    1287.53 ms
0.15.006.063 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.006.079 I llama_perf_context_print:        eval time =   13633.77 ms /    32 runs   (  426.06 ms per token,     2.35 tokens per second)
0.15.006.080 I llama_perf_context_print:       total time =   13715.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.518 I build: 3779 (7be099fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.711 I main: llama backend init
0.00.002.658 I main: load the model and apply lora adapter, if any
0.00.025.255 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.453 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.547 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.560 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.561 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.566 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.570 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.571 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.572 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.580 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.581 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.583 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.584 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.909 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.760 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.754 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.762 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.763 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.764 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.764 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.766 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.770 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.771 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.772 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.773 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.781 I llama_model_loader: - type  f32:   37 tensors
0.00.195.786 I llama_model_loader: - type q8_0:  127 tensors
0.00.495.155 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.177 I llm_load_vocab: special tokens cache size = 5
0.00.567.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.856 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.856 I llm_load_print_meta: arch             = gemma
0.00.567.857 I llm_load_print_meta: vocab type       = SPM
0.00.567.858 I llm_load_print_meta: n_vocab          = 256000
0.00.567.861 I llm_load_print_meta: n_merges         = 0
0.00.567.862 I llm_load_print_meta: vocab_only       = 0
0.00.567.862 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.862 I llm_load_print_meta: n_embd           = 2048
0.00.567.863 I llm_load_print_meta: n_layer          = 18
0.00.567.897 I llm_load_print_meta: n_head           = 8
0.00.567.903 I llm_load_print_meta: n_head_kv        = 1
0.00.567.904 I llm_load_print_meta: n_rot            = 256
0.00.567.904 I llm_load_print_meta: n_swa            = 0
0.00.567.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.905 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.909 I llm_load_print_meta: n_gqa            = 8
0.00.567.913 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.918 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.919 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.921 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.921 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.922 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.922 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.928 I llm_load_print_meta: n_ff             = 16384
0.00.567.928 I llm_load_print_meta: n_expert         = 0
0.00.567.929 I llm_load_print_meta: n_expert_used    = 0
0.00.567.929 I llm_load_print_meta: causal attn      = 1
0.00.567.930 I llm_load_print_meta: pooling type     = 0
0.00.567.930 I llm_load_print_meta: rope type        = 2
0.00.567.931 I llm_load_print_meta: rope scaling     = linear
0.00.567.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.932 I llm_load_print_meta: freq_scale_train = 1
0.00.567.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.934 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.934 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.935 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.936 I llm_load_print_meta: model type       = 2B
0.00.567.936 I llm_load_print_meta: model ftype      = Q8_0
0.00.567.937 I llm_load_print_meta: model params     = 2.51 B
0.00.567.938 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.567.938 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.939 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.940 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.940 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.941 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.941 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.941 I llm_load_print_meta: max token length = 93
0.00.568.115 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.643.221 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.643.233 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.643.234 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.643.235 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.643.235 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.643.236 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.649.026 I llama_new_context_with_model: n_ctx      = 8192
0.00.649.035 I llama_new_context_with_model: n_batch    = 2048
0.00.649.035 I llama_new_context_with_model: n_ubatch   = 512
0.00.649.036 I llama_new_context_with_model: flash_attn = 0
0.00.649.040 I llama_new_context_with_model: freq_base  = 10000.0
0.00.649.040 I llama_new_context_with_model: freq_scale = 1
0.00.679.295 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.679.337 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.679.461 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.680.880 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.680.886 I llama_new_context_with_model: graph nodes  = 601
0.00.680.887 I llama_new_context_with_model: graph splits = 1
0.00.680.904 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.346 I main: llama threadpool init, n_threads = 4
0.01.295.367 I 
0.01.295.460 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.295.464 I 
0.01.295.628 I sampler seed: 2130123874
0.01.295.639 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.645 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.295.646 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded
**Assistant**

I am unable to provide assistance with tasks that involve potentially harmful or illegal activities. [end of text]


0.11.528.986 I llama_perf_sampler_print:    sampling time =      36.33 ms /    25 runs   (    1.45 ms per token,   688.21 tokens per second)
0.11.528.990 I llama_perf_context_print:        load time =    1292.61 ms
0.11.528.992 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.528.994 I llama_perf_context_print:        eval time =   10172.01 ms /    24 runs   (  423.83 ms per token,     2.36 tokens per second)
0.11.529.007 I llama_perf_context_print:       total time =   10233.65 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.633 I build: 3779 (7be099fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.768 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.970 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.079 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.081 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.086 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.090 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.091 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.092 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.102 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.103 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.104 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.105 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.197 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.388 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.480 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.489 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.490 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.491 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.491 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.493 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.494 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.498 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.499 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.500 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.500 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.501 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.509 I llama_model_loader: - type  f32:   37 tensors
0.00.196.513 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.821 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.872 I llm_load_vocab: special tokens cache size = 5
0.00.539.087 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.539.148 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.539.149 I llm_load_print_meta: arch             = gemma
0.00.539.149 I llm_load_print_meta: vocab type       = SPM
0.00.539.150 I llm_load_print_meta: n_vocab          = 256000
0.00.539.153 I llm_load_print_meta: n_merges         = 0
0.00.539.153 I llm_load_print_meta: vocab_only       = 0
0.00.539.153 I llm_load_print_meta: n_ctx_train      = 8192
0.00.539.154 I llm_load_print_meta: n_embd           = 2048
0.00.539.154 I llm_load_print_meta: n_layer          = 18
0.00.539.189 I llm_load_print_meta: n_head           = 8
0.00.539.196 I llm_load_print_meta: n_head_kv        = 1
0.00.539.197 I llm_load_print_meta: n_rot            = 256
0.00.539.198 I llm_load_print_meta: n_swa            = 0
0.00.539.198 I llm_load_print_meta: n_embd_head_k    = 256
0.00.539.198 I llm_load_print_meta: n_embd_head_v    = 256
0.00.539.203 I llm_load_print_meta: n_gqa            = 8
0.00.539.207 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.539.212 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.539.212 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.539.214 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.539.214 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.539.215 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.539.215 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.539.220 I llm_load_print_meta: n_ff             = 16384
0.00.539.221 I llm_load_print_meta: n_expert         = 0
0.00.539.221 I llm_load_print_meta: n_expert_used    = 0
0.00.539.221 I llm_load_print_meta: causal attn      = 1
0.00.539.222 I llm_load_print_meta: pooling type     = 0
0.00.539.222 I llm_load_print_meta: rope type        = 2
0.00.539.222 I llm_load_print_meta: rope scaling     = linear
0.00.539.224 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.539.225 I llm_load_print_meta: freq_scale_train = 1
0.00.539.225 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.539.225 I llm_load_print_meta: rope_finetuned   = unknown
0.00.539.226 I llm_load_print_meta: ssm_d_conv       = 0
0.00.539.226 I llm_load_print_meta: ssm_d_inner      = 0
0.00.539.226 I llm_load_print_meta: ssm_d_state      = 0
0.00.539.226 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.539.227 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.539.228 I llm_load_print_meta: model type       = 2B
0.00.539.229 I llm_load_print_meta: model ftype      = Q8_0
0.00.539.230 I llm_load_print_meta: model params     = 2.51 B
0.00.539.231 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.539.231 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.539.232 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.539.232 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.539.233 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.539.233 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.539.233 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.539.234 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.539.234 I llm_load_print_meta: max token length = 93
0.00.539.406 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.611.117 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.611.126 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.616.703 I llama_new_context_with_model: n_ctx      = 8192
0.00.616.712 I llama_new_context_with_model: n_batch    = 2048
0.00.616.712 I llama_new_context_with_model: n_ubatch   = 512
0.00.616.713 I llama_new_context_with_model: flash_attn = 0
0.00.616.715 I llama_new_context_with_model: freq_base  = 10000.0
0.00.616.716 I llama_new_context_with_model: freq_scale = 1
0.00.646.325 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.646.368 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.646.476 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.647.839 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.647.845 I llama_new_context_with_model: graph nodes  = 601
0.00.647.846 I llama_new_context_with_model: graph splits = 1
0.00.647.861 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.723 I main: llama threadpool init, n_threads = 4
0.01.262.733 I 
0.01.262.830 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.834 I 
0.01.262.998 I sampler seed: 544382862
0.01.263.009 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.263.014 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.263.015 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically, blurring the lines between fact and fiction.

The world is not what it seems. Everything is connected, and the lines between cause and effect are

0.14.888.874 I llama_perf_sampler_print:    sampling time =      47.99 ms /    33 runs   (    1.45 ms per token,   687.63 tokens per second)
0.14.888.880 I llama_perf_context_print:        load time =    1259.86 ms
0.14.888.881 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.888.884 I llama_perf_context_print:        eval time =   13545.76 ms /    32 runs   (  423.30 ms per token,     2.36 tokens per second)
0.14.888.885 I llama_perf_context_print:       total time =   13626.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.311s
user	3m37.275s
sys	0m9.629s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3779 (7be099fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199163.87 ms
main:    total time = 199163.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.644 I build: 3779 (7be099fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.025.015 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.213 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.312 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.326 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.327 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.331 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.332 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.333 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.334 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.336 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.345 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.353 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.356 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.357 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.358 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.359 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.994 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.685 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.373 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.385 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.386 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.387 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.388 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.389 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.390 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.393 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.394 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.395 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.396 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.397 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.406 I llama_model_loader: - type  f32:   37 tensors
0.00.197.411 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.411 I llama_model_loader: - type q6_K:   19 tensors
0.00.500.550 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.690 I llm_load_vocab: special tokens cache size = 5
0.00.560.111 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.175 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.176 I llm_load_print_meta: arch             = gemma
0.00.560.177 I llm_load_print_meta: vocab type       = SPM
0.00.560.177 I llm_load_print_meta: n_vocab          = 256000
0.00.560.179 I llm_load_print_meta: n_merges         = 0
0.00.560.180 I llm_load_print_meta: vocab_only       = 0
0.00.560.180 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.181 I llm_load_print_meta: n_embd           = 2048
0.00.560.181 I llm_load_print_meta: n_layer          = 18
0.00.560.217 I llm_load_print_meta: n_head           = 8
0.00.560.224 I llm_load_print_meta: n_head_kv        = 1
0.00.560.225 I llm_load_print_meta: n_rot            = 256
0.00.560.225 I llm_load_print_meta: n_swa            = 0
0.00.560.225 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.226 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.230 I llm_load_print_meta: n_gqa            = 8
0.00.560.235 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.239 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.265 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.266 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.266 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.267 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.272 I llm_load_print_meta: n_ff             = 16384
0.00.560.272 I llm_load_print_meta: n_expert         = 0
0.00.560.273 I llm_load_print_meta: n_expert_used    = 0
0.00.560.273 I llm_load_print_meta: causal attn      = 1
0.00.560.273 I llm_load_print_meta: pooling type     = 0
0.00.560.274 I llm_load_print_meta: rope type        = 2
0.00.560.275 I llm_load_print_meta: rope scaling     = linear
0.00.560.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.277 I llm_load_print_meta: freq_scale_train = 1
0.00.560.278 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.278 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.278 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.279 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.279 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.280 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.280 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.281 I llm_load_print_meta: model type       = 2B
0.00.560.282 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.560.283 I llm_load_print_meta: model params     = 2.51 B
0.00.560.292 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.560.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.294 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.294 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.295 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.296 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.296 I llm_load_print_meta: max token length = 93
0.00.560.474 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.823 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.619.836 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.619.837 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.619.837 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.619.838 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.619.839 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.626.826 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.837 I llama_new_context_with_model: n_batch    = 2048
0.00.626.837 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.838 I llama_new_context_with_model: flash_attn = 0
0.00.626.842 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.842 I llama_new_context_with_model: freq_scale = 1
0.00.658.542 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.586 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.695 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.056 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.062 I llama_new_context_with_model: graph nodes  = 601
0.00.660.063 I llama_new_context_with_model: graph splits = 1
0.00.660.080 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.238.754 I main: llama threadpool init, n_threads = 4
0.01.238.767 I 
0.01.238.862 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.238.866 I 
0.01.239.037 I sampler seed: 4061773667
0.01.239.048 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.239.055 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.239.055 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRE, the leading provider of cloud-based asset management software, has a mission to revolutionize how businesses manage their intellectual property. 

**a)

0.12.239.445 I llama_perf_sampler_print:    sampling time =      48.30 ms /    33 runs   (    1.46 ms per token,   683.23 tokens per second)
0.12.239.457 I llama_perf_context_print:        load time =    1235.88 ms
0.12.239.460 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.239.462 I llama_perf_context_print:        eval time =   10919.50 ms /    32 runs   (  341.23 ms per token,     2.93 tokens per second)
0.12.239.463 I llama_perf_context_print:       total time =   11000.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3779 (7be099fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198957.33 ms
main:    total time = 198957.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.708 I build: 3779 (7be099fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.945 I main: llama backend init
0.00.002.918 I main: load the model and apply lora adapter, if any
0.00.026.488 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.590 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.607 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.611 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.616 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.618 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.618 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.619 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.620 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.627 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.628 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.629 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.630 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.631 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.099.160 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.187.977 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.131 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.132 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.134 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.135 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.136 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.140 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.140 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.149 I llama_model_loader: - type  f32:   37 tensors
0.00.200.152 I llama_model_loader: - type q4_K:  108 tensors
0.00.200.153 I llama_model_loader: - type q6_K:   19 tensors
0.00.495.870 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.880 I llm_load_vocab: special tokens cache size = 5
0.00.554.956 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.555.014 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.555.015 I llm_load_print_meta: arch             = gemma
0.00.555.016 I llm_load_print_meta: vocab type       = SPM
0.00.555.017 I llm_load_print_meta: n_vocab          = 256000
0.00.555.020 I llm_load_print_meta: n_merges         = 0
0.00.555.020 I llm_load_print_meta: vocab_only       = 0
0.00.555.021 I llm_load_print_meta: n_ctx_train      = 8192
0.00.555.021 I llm_load_print_meta: n_embd           = 2048
0.00.555.021 I llm_load_print_meta: n_layer          = 18
0.00.555.055 I llm_load_print_meta: n_head           = 8
0.00.555.062 I llm_load_print_meta: n_head_kv        = 1
0.00.555.063 I llm_load_print_meta: n_rot            = 256
0.00.555.063 I llm_load_print_meta: n_swa            = 0
0.00.555.063 I llm_load_print_meta: n_embd_head_k    = 256
0.00.555.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.555.068 I llm_load_print_meta: n_gqa            = 8
0.00.555.072 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.555.077 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.555.078 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.555.079 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.555.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.555.080 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.555.080 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.555.085 I llm_load_print_meta: n_ff             = 16384
0.00.555.085 I llm_load_print_meta: n_expert         = 0
0.00.555.086 I llm_load_print_meta: n_expert_used    = 0
0.00.555.086 I llm_load_print_meta: causal attn      = 1
0.00.555.086 I llm_load_print_meta: pooling type     = 0
0.00.555.086 I llm_load_print_meta: rope type        = 2
0.00.555.087 I llm_load_print_meta: rope scaling     = linear
0.00.555.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.555.089 I llm_load_print_meta: freq_scale_train = 1
0.00.555.089 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.555.090 I llm_load_print_meta: rope_finetuned   = unknown
0.00.555.091 I llm_load_print_meta: ssm_d_conv       = 0
0.00.555.091 I llm_load_print_meta: ssm_d_inner      = 0
0.00.555.091 I llm_load_print_meta: ssm_d_state      = 0
0.00.555.091 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.555.092 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.555.093 I llm_load_print_meta: model type       = 2B
0.00.555.093 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.555.094 I llm_load_print_meta: model params     = 2.51 B
0.00.555.095 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.555.095 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.555.096 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.555.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.555.096 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.555.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.555.097 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.555.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.555.098 I llm_load_print_meta: max token length = 93
0.00.555.274 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.611.772 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.617.439 I llama_new_context_with_model: n_ctx      = 8192
0.00.617.449 I llama_new_context_with_model: n_batch    = 2048
0.00.617.449 I llama_new_context_with_model: n_ubatch   = 512
0.00.617.450 I llama_new_context_with_model: flash_attn = 0
0.00.617.453 I llama_new_context_with_model: freq_base  = 10000.0
0.00.617.454 I llama_new_context_with_model: freq_scale = 1
0.00.648.442 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.648.486 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.648.595 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.649.942 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.649.949 I llama_new_context_with_model: graph nodes  = 601
0.00.649.949 I llama_new_context_with_model: graph splits = 1
0.00.649.965 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.225.728 I main: llama threadpool init, n_threads = 4
0.01.225.741 I 
0.01.225.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.225.836 I 
0.01.226.011 I sampler seed: 973859414
0.01.226.022 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.226.028 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.226.028 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally with the first person that said his name. 

The man's name is John.

John, who is an amiable fellow, greeted me

0.12.219.591 I llama_perf_sampler_print:    sampling time =      48.55 ms /    33 runs   (    1.47 ms per token,   679.67 tokens per second)
0.12.219.593 I llama_perf_context_print:        load time =    1222.71 ms
0.12.219.595 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.219.596 I llama_perf_context_print:        eval time =   10912.22 ms /    32 runs   (  341.01 ms per token,     2.93 tokens per second)
0.12.219.597 I llama_perf_context_print:       total time =   10993.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.520s
user	50m16.461s
sys	0m6.390s
