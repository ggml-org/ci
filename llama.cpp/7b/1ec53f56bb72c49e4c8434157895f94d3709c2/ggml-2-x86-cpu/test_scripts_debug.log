+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.287 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.299 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.383 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.394 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.396 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.402 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.406 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.407 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.409 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.411 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.413 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.418 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.419 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.421 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.422 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.424 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.037 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.484 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.471 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.480 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.481 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.482 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.483 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.485 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.486 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.492 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.494 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.495 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.497 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.504 I llama_model_loader: - type  f32:   37 tensors
0.00.350.507 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.443 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.207 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.247 I llm_load_vocab: special tokens cache size = 5
0.00.843.587 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.658 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.660 I llm_load_print_meta: arch             = gemma
0.00.843.661 I llm_load_print_meta: vocab type       = SPM
0.00.843.662 I llm_load_print_meta: n_vocab          = 256000
0.00.843.664 I llm_load_print_meta: n_merges         = 0
0.00.843.664 I llm_load_print_meta: vocab_only       = 0
0.00.843.665 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.665 I llm_load_print_meta: n_embd           = 2048
0.00.843.666 I llm_load_print_meta: n_layer          = 18
0.00.843.732 I llm_load_print_meta: n_head           = 8
0.00.843.739 I llm_load_print_meta: n_head_kv        = 1
0.00.843.740 I llm_load_print_meta: n_rot            = 256
0.00.843.740 I llm_load_print_meta: n_swa            = 0
0.00.843.742 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.742 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.747 I llm_load_print_meta: n_gqa            = 8
0.00.843.751 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.757 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.759 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.761 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.762 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.762 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.772 I llm_load_print_meta: n_ff             = 16384
0.00.843.773 I llm_load_print_meta: n_expert         = 0
0.00.843.774 I llm_load_print_meta: n_expert_used    = 0
0.00.843.774 I llm_load_print_meta: causal attn      = 1
0.00.843.775 I llm_load_print_meta: pooling type     = 0
0.00.843.775 I llm_load_print_meta: rope type        = 2
0.00.843.776 I llm_load_print_meta: rope scaling     = linear
0.00.843.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.779 I llm_load_print_meta: freq_scale_train = 1
0.00.843.779 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.781 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.781 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.782 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.791 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.792 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.792 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.793 I llm_load_print_meta: model type       = 2B
0.00.843.795 I llm_load_print_meta: model ftype      = Q8_0
0.00.843.796 I llm_load_print_meta: model params     = 2.51 B
0.00.843.797 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.843.797 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.798 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.798 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.799 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.799 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.800 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.800 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.807 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.809 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.809 I llm_load_print_meta: max token length = 93
0.00.946.937 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.946.946 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.946.947 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.946.948 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.946.949 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.946.949 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.952.793 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.800 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.800 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.801 I llama_new_context_with_model: n_batch       = 2048
0.00.952.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.802 I llama_new_context_with_model: flash_attn    = 0
0.00.952.804 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.805 I llama_new_context_with_model: freq_scale    = 1
0.00.952.806 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.323 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.366 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.481 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.270 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.970.274 I llama_new_context_with_model: graph nodes  = 601
0.00.970.274 I llama_new_context_with_model: graph splits = 1
0.00.970.296 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.970.299 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.152 I main: llama threadpool init, n_threads = 4
0.01.579.169 I 
0.01.579.288 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.579.292 I 
0.01.579.527 I sampler seed: 955727641
0.01.579.541 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.550 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.553 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.553 I 
 increasels are a type of parasite that can infest the digestive tract and bloodstream of animals. They are caused by bacteria that produce a toxin that destroys red blood cells

0.15.074.805 I llama_perf_sampler_print:    sampling time =      48.98 ms /    33 runs   (    1.48 ms per token,   673.81 tokens per second)
0.15.074.818 I llama_perf_context_print:        load time =    1578.21 ms
0.15.074.820 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.074.822 I llama_perf_context_print:        eval time =   13406.46 ms /    32 runs   (  418.95 ms per token,     2.39 tokens per second)
0.15.074.823 I llama_perf_context_print:       total time =   13495.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.818 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.928 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.930 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.936 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.941 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.942 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.943 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.945 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.946 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.952 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.953 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.955 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.956 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.958 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.180 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.480 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.446 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.454 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.456 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.457 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.458 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.461 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.462 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.467 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.468 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.470 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.472 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.474 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.483 I llama_model_loader: - type  f32:   37 tensors
0.00.350.486 I llama_model_loader: - type q8_0:  127 tensors
0.00.594.829 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.600 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.566 I llm_load_vocab: special tokens cache size = 5
0.00.862.819 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.862.895 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.862.896 I llm_load_print_meta: arch             = gemma
0.00.862.896 I llm_load_print_meta: vocab type       = SPM
0.00.862.897 I llm_load_print_meta: n_vocab          = 256000
0.00.862.900 I llm_load_print_meta: n_merges         = 0
0.00.862.900 I llm_load_print_meta: vocab_only       = 0
0.00.862.900 I llm_load_print_meta: n_ctx_train      = 8192
0.00.862.901 I llm_load_print_meta: n_embd           = 2048
0.00.862.901 I llm_load_print_meta: n_layer          = 18
0.00.862.967 I llm_load_print_meta: n_head           = 8
0.00.862.973 I llm_load_print_meta: n_head_kv        = 1
0.00.862.974 I llm_load_print_meta: n_rot            = 256
0.00.862.975 I llm_load_print_meta: n_swa            = 0
0.00.862.976 I llm_load_print_meta: n_embd_head_k    = 256
0.00.862.977 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.009 I llm_load_print_meta: n_gqa            = 8
0.00.863.019 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.024 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.030 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.031 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.032 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.037 I llm_load_print_meta: n_ff             = 16384
0.00.863.038 I llm_load_print_meta: n_expert         = 0
0.00.863.039 I llm_load_print_meta: n_expert_used    = 0
0.00.863.040 I llm_load_print_meta: causal attn      = 1
0.00.863.040 I llm_load_print_meta: pooling type     = 0
0.00.863.041 I llm_load_print_meta: rope type        = 2
0.00.863.041 I llm_load_print_meta: rope scaling     = linear
0.00.863.043 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.044 I llm_load_print_meta: freq_scale_train = 1
0.00.863.044 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.045 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.045 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.048 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.048 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.048 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.049 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.049 I llm_load_print_meta: model type       = 2B
0.00.863.050 I llm_load_print_meta: model ftype      = Q8_0
0.00.863.051 I llm_load_print_meta: model params     = 2.51 B
0.00.863.052 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.863.052 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.053 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.053 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.054 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.054 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.054 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.055 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.061 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.062 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.063 I llm_load_print_meta: max token length = 93
0.00.957.628 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.963.486 I llama_new_context_with_model: n_seq_max     = 1
0.00.963.493 I llama_new_context_with_model: n_ctx         = 4096
0.00.963.494 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.963.494 I llama_new_context_with_model: n_batch       = 2048
0.00.963.495 I llama_new_context_with_model: n_ubatch      = 512
0.00.963.495 I llama_new_context_with_model: flash_attn    = 0
0.00.963.497 I llama_new_context_with_model: freq_base     = 10000.0
0.00.963.498 I llama_new_context_with_model: freq_scale    = 1
0.00.963.499 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.978.614 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.978.657 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.978.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.981.506 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.981.510 I llama_new_context_with_model: graph nodes  = 601
0.00.981.510 I llama_new_context_with_model: graph splits = 1
0.00.981.533 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.981.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.589.879 I main: llama threadpool init, n_threads = 4
0.01.589.895 I 
0.01.590.030 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.590.035 I 
0.01.590.272 I sampler seed: 3306396644
0.01.590.286 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.590.312 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.590.317 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.590.317 I 
 increasities and all the other forms of sexual misconduct are unacceptable and should not be tolerated. [end of text]


0.09.672.630 I llama_perf_sampler_print:    sampling time =      29.64 ms /    20 runs   (    1.48 ms per token,   674.76 tokens per second)
0.09.672.635 I llama_perf_context_print:        load time =    1588.94 ms
0.09.672.637 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.672.639 I llama_perf_context_print:        eval time =    8028.89 ms /    19 runs   (  422.57 ms per token,     2.37 tokens per second)
0.09.672.640 I llama_perf_context_print:       total time =    8082.76 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.000.866 I main: load the model and apply lora adapter, if any
0.00.023.206 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.216 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.306 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.318 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.321 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.327 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.331 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.333 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.334 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.335 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.336 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.342 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.344 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.346 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.349 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.514 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.948 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.028 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.039 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.040 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.043 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.045 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.048 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.050 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.051 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.053 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.355.054 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.063 I llama_model_loader: - type  f32:   37 tensors
0.00.355.065 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.865 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.665 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.599 I llm_load_vocab: special tokens cache size = 5
0.00.832.769 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.844 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.845 I llm_load_print_meta: arch             = gemma
0.00.832.846 I llm_load_print_meta: vocab type       = SPM
0.00.832.847 I llm_load_print_meta: n_vocab          = 256000
0.00.832.849 I llm_load_print_meta: n_merges         = 0
0.00.832.849 I llm_load_print_meta: vocab_only       = 0
0.00.832.850 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.850 I llm_load_print_meta: n_embd           = 2048
0.00.832.851 I llm_load_print_meta: n_layer          = 18
0.00.832.915 I llm_load_print_meta: n_head           = 8
0.00.832.922 I llm_load_print_meta: n_head_kv        = 1
0.00.832.923 I llm_load_print_meta: n_rot            = 256
0.00.832.923 I llm_load_print_meta: n_swa            = 0
0.00.832.924 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.924 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.929 I llm_load_print_meta: n_gqa            = 8
0.00.832.933 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.940 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.942 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.943 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.944 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.944 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.945 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.949 I llm_load_print_meta: n_ff             = 16384
0.00.832.950 I llm_load_print_meta: n_expert         = 0
0.00.832.950 I llm_load_print_meta: n_expert_used    = 0
0.00.832.950 I llm_load_print_meta: causal attn      = 1
0.00.832.951 I llm_load_print_meta: pooling type     = 0
0.00.832.951 I llm_load_print_meta: rope type        = 2
0.00.832.951 I llm_load_print_meta: rope scaling     = linear
0.00.832.953 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.954 I llm_load_print_meta: freq_scale_train = 1
0.00.832.954 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.954 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.955 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.955 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.955 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.955 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.956 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.956 I llm_load_print_meta: model type       = 2B
0.00.832.958 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.958 I llm_load_print_meta: model params     = 2.51 B
0.00.832.959 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.959 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.960 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.960 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.961 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.962 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.962 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.962 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.968 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.970 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.970 I llm_load_print_meta: max token length = 93
0.00.910.678 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.910.688 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.910.689 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.910.689 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.910.690 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.910.691 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.916.516 I llama_new_context_with_model: n_seq_max     = 1
0.00.916.523 I llama_new_context_with_model: n_ctx         = 4096
0.00.916.523 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.916.524 I llama_new_context_with_model: n_batch       = 2048
0.00.916.524 I llama_new_context_with_model: n_ubatch      = 512
0.00.916.524 I llama_new_context_with_model: flash_attn    = 0
0.00.916.526 I llama_new_context_with_model: freq_base     = 10000.0
0.00.916.527 I llama_new_context_with_model: freq_scale    = 1
0.00.916.528 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.995 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.931.033 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.931.145 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.933.714 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.933.718 I llama_new_context_with_model: graph nodes  = 601
0.00.933.719 I llama_new_context_with_model: graph splits = 1
0.00.933.742 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.933.745 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.573.435 I main: llama threadpool init, n_threads = 4
0.01.573.452 I 
0.01.573.588 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.573.594 I 
0.01.573.836 I sampler seed: 3956036810
0.01.573.851 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.573.871 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.573.874 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.573.874 I 
 increasities can be resolved through dialogue and negotiation.

This is false.

It is important to note that the resolution of narcissistic disputes often requires professional intervention.

0.15.123.598 I llama_perf_sampler_print:    sampling time =      48.37 ms /    33 runs   (    1.47 ms per token,   682.18 tokens per second)
0.15.123.601 I llama_perf_context_print:        load time =    1572.47 ms
0.15.123.603 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.123.604 I llama_perf_context_print:        eval time =   13461.77 ms /    32 runs   (  420.68 ms per token,     2.38 tokens per second)
0.15.123.605 I llama_perf_context_print:       total time =   13550.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.023.138 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.150 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.236 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.247 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.249 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.254 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.258 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.261 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.262 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.263 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.269 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.271 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.274 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.221.428 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.978 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.933 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.942 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.944 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.946 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.947 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.951 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.952 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.953 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.955 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.956 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.965 I llama_model_loader: - type  f32:   37 tensors
0.00.349.967 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.359 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.265 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.201 I llm_load_vocab: special tokens cache size = 5
0.00.832.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.671 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.672 I llm_load_print_meta: arch             = gemma
0.00.832.673 I llm_load_print_meta: vocab type       = SPM
0.00.832.674 I llm_load_print_meta: n_vocab          = 256000
0.00.832.676 I llm_load_print_meta: n_merges         = 0
0.00.832.677 I llm_load_print_meta: vocab_only       = 0
0.00.832.677 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.677 I llm_load_print_meta: n_embd           = 2048
0.00.832.678 I llm_load_print_meta: n_layer          = 18
0.00.832.741 I llm_load_print_meta: n_head           = 8
0.00.832.748 I llm_load_print_meta: n_head_kv        = 1
0.00.832.749 I llm_load_print_meta: n_rot            = 256
0.00.832.749 I llm_load_print_meta: n_swa            = 0
0.00.832.749 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.750 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.754 I llm_load_print_meta: n_gqa            = 8
0.00.832.759 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.764 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.765 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.767 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.767 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.768 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.768 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.773 I llm_load_print_meta: n_ff             = 16384
0.00.832.774 I llm_load_print_meta: n_expert         = 0
0.00.832.774 I llm_load_print_meta: n_expert_used    = 0
0.00.832.775 I llm_load_print_meta: causal attn      = 1
0.00.832.775 I llm_load_print_meta: pooling type     = 0
0.00.832.775 I llm_load_print_meta: rope type        = 2
0.00.832.777 I llm_load_print_meta: rope scaling     = linear
0.00.832.779 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.779 I llm_load_print_meta: freq_scale_train = 1
0.00.832.780 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.781 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.781 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.781 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.782 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.783 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.784 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.784 I llm_load_print_meta: model type       = 2B
0.00.832.785 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.786 I llm_load_print_meta: model params     = 2.51 B
0.00.832.787 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.787 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.788 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.789 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.790 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.790 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.791 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.792 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.799 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.800 I llm_load_print_meta: max token length = 93
0.00.905.287 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.905.297 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.911.066 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.073 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.073 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.074 I llama_new_context_with_model: n_batch       = 2048
0.00.911.074 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.075 I llama_new_context_with_model: flash_attn    = 0
0.00.911.077 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.078 I llama_new_context_with_model: freq_scale    = 1
0.00.911.079 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.925.907 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.925.948 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.064 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.928.708 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.928.712 I llama_new_context_with_model: graph nodes  = 601
0.00.928.712 I llama_new_context_with_model: graph splits = 1
0.00.928.736 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.928.739 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.538.286 I main: llama threadpool init, n_threads = 4
0.01.538.302 I 
0.01.538.419 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.538.423 I 
0.01.538.657 I sampler seed: 101301315
0.01.538.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.538.682 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.538.685 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.538.685 I 
 increasively.

I'm sorry, but I cannot generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.11.256.970 I llama_perf_sampler_print:    sampling time =      34.84 ms /    24 runs   (    1.45 ms per token,   688.76 tokens per second)
0.11.256.973 I llama_perf_context_print:        load time =    1537.36 ms
0.11.256.975 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.256.987 I llama_perf_context_print:        eval time =    9654.56 ms /    23 runs   (  419.76 ms per token,     2.38 tokens per second)
0.11.256.988 I llama_perf_context_print:       total time =    9718.69 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.433s
user	3m13.180s
sys	0m9.374s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4338 (7b1ec53f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186217.33 ms
main:    total time = 186217.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.000.829 I main: load the model and apply lora adapter, if any
0.00.023.207 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.217 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.310 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.322 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.334 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.335 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.336 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.337 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.338 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.347 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.348 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.350 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.035 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.965 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.947 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.956 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.958 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.959 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.960 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.961 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.963 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.967 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.968 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.969 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.970 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.972 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.981 I llama_model_loader: - type  f32:   37 tensors
0.00.350.984 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.984 I llama_model_loader: - type q6_K:   19 tensors
0.00.571.045 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.894 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.845 I llm_load_vocab: special tokens cache size = 5
0.00.828.625 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.701 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.702 I llm_load_print_meta: arch             = gemma
0.00.828.703 I llm_load_print_meta: vocab type       = SPM
0.00.828.704 I llm_load_print_meta: n_vocab          = 256000
0.00.828.706 I llm_load_print_meta: n_merges         = 0
0.00.828.707 I llm_load_print_meta: vocab_only       = 0
0.00.828.707 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.707 I llm_load_print_meta: n_embd           = 2048
0.00.828.708 I llm_load_print_meta: n_layer          = 18
0.00.828.774 I llm_load_print_meta: n_head           = 8
0.00.828.781 I llm_load_print_meta: n_head_kv        = 1
0.00.828.781 I llm_load_print_meta: n_rot            = 256
0.00.828.782 I llm_load_print_meta: n_swa            = 0
0.00.828.782 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.782 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.787 I llm_load_print_meta: n_gqa            = 8
0.00.828.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.797 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.799 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.800 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.801 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.806 I llm_load_print_meta: n_ff             = 16384
0.00.828.806 I llm_load_print_meta: n_expert         = 0
0.00.828.806 I llm_load_print_meta: n_expert_used    = 0
0.00.828.807 I llm_load_print_meta: causal attn      = 1
0.00.828.807 I llm_load_print_meta: pooling type     = 0
0.00.828.807 I llm_load_print_meta: rope type        = 2
0.00.828.808 I llm_load_print_meta: rope scaling     = linear
0.00.828.809 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.810 I llm_load_print_meta: freq_scale_train = 1
0.00.828.810 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.810 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.811 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.811 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.812 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.812 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.813 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.813 I llm_load_print_meta: model type       = 2B
0.00.828.814 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.828.815 I llm_load_print_meta: model params     = 2.51 B
0.00.828.817 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.828.821 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.822 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.823 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.823 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.844 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.845 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.851 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.853 I llm_load_print_meta: max token length = 93
0.00.890.853 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.890.865 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.890.865 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.890.866 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.890.867 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.890.867 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.896.760 I llama_new_context_with_model: n_seq_max     = 1
0.00.896.769 I llama_new_context_with_model: n_ctx         = 4096
0.00.896.769 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.896.770 I llama_new_context_with_model: n_batch       = 2048
0.00.896.770 I llama_new_context_with_model: n_ubatch      = 512
0.00.896.771 I llama_new_context_with_model: flash_attn    = 0
0.00.896.775 I llama_new_context_with_model: freq_base     = 10000.0
0.00.896.776 I llama_new_context_with_model: freq_scale    = 1
0.00.896.777 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.819 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.911.861 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.911.981 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.914.737 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.914.741 I llama_new_context_with_model: graph nodes  = 601
0.00.914.742 I llama_new_context_with_model: graph splits = 1
0.00.914.764 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.914.767 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.494.572 I main: llama threadpool init, n_threads = 4
0.01.494.588 I 
0.01.494.704 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.494.708 I 
0.01.494.943 I sampler seed: 30874011
0.01.494.958 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.494.967 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.494.970 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.494.971 I 
 maneutruing, but I was hoping to get a more nuanced understanding of the concept.

**Concept of Financial Inclusion:**

Financial inclusion encompasses the provision of

0.12.649.402 I llama_perf_sampler_print:    sampling time =      48.27 ms /    33 runs   (    1.46 ms per token,   683.65 tokens per second)
0.12.649.405 I llama_perf_context_print:        load time =    1493.65 ms
0.12.649.407 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.649.409 I llama_perf_context_print:        eval time =   11066.84 ms /    32 runs   (  345.84 ms per token,     2.89 tokens per second)
0.12.649.421 I llama_perf_context_print:       total time =   11154.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4338 (7b1ec53f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186401.64 ms
main:    total time = 186401.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.280 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.387 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.403 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.408 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.417 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.418 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.420 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.421 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.423 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.426 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.434 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.436 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.437 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.439 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.440 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.142 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.983 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.023 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.031 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.032 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.034 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.035 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.036 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.038 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.042 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.043 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.050 I llama_model_loader: - type  f32:   37 tensors
0.00.351.052 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.053 I llama_model_loader: - type q6_K:   19 tensors
0.00.578.791 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.507 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.458 I llm_load_vocab: special tokens cache size = 5
0.00.827.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.827.718 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.827.723 I llm_load_print_meta: arch             = gemma
0.00.827.724 I llm_load_print_meta: vocab type       = SPM
0.00.827.724 I llm_load_print_meta: n_vocab          = 256000
0.00.827.727 I llm_load_print_meta: n_merges         = 0
0.00.827.727 I llm_load_print_meta: vocab_only       = 0
0.00.827.728 I llm_load_print_meta: n_ctx_train      = 8192
0.00.827.729 I llm_load_print_meta: n_embd           = 2048
0.00.827.730 I llm_load_print_meta: n_layer          = 18
0.00.827.796 I llm_load_print_meta: n_head           = 8
0.00.827.807 I llm_load_print_meta: n_head_kv        = 1
0.00.827.808 I llm_load_print_meta: n_rot            = 256
0.00.827.808 I llm_load_print_meta: n_swa            = 0
0.00.827.808 I llm_load_print_meta: n_embd_head_k    = 256
0.00.827.809 I llm_load_print_meta: n_embd_head_v    = 256
0.00.827.814 I llm_load_print_meta: n_gqa            = 8
0.00.827.819 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.827.824 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.827.828 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.827.829 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.827.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.827.830 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.827.831 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.827.836 I llm_load_print_meta: n_ff             = 16384
0.00.827.836 I llm_load_print_meta: n_expert         = 0
0.00.827.837 I llm_load_print_meta: n_expert_used    = 0
0.00.827.837 I llm_load_print_meta: causal attn      = 1
0.00.827.837 I llm_load_print_meta: pooling type     = 0
0.00.827.838 I llm_load_print_meta: rope type        = 2
0.00.827.838 I llm_load_print_meta: rope scaling     = linear
0.00.827.840 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.827.842 I llm_load_print_meta: freq_scale_train = 1
0.00.827.842 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.827.842 I llm_load_print_meta: rope_finetuned   = unknown
0.00.827.842 I llm_load_print_meta: ssm_d_conv       = 0
0.00.827.843 I llm_load_print_meta: ssm_d_inner      = 0
0.00.827.843 I llm_load_print_meta: ssm_d_state      = 0
0.00.827.843 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.827.844 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.827.844 I llm_load_print_meta: model type       = 2B
0.00.827.846 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.827.847 I llm_load_print_meta: model params     = 2.51 B
0.00.827.847 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.827.848 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.827.848 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.827.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.827.850 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.827.850 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.827.850 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.827.851 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.827.857 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.827.859 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.827.859 I llm_load_print_meta: max token length = 93
0.00.887.595 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.893.384 I llama_new_context_with_model: n_seq_max     = 1
0.00.893.391 I llama_new_context_with_model: n_ctx         = 4096
0.00.893.391 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.893.392 I llama_new_context_with_model: n_batch       = 2048
0.00.893.392 I llama_new_context_with_model: n_ubatch      = 512
0.00.893.393 I llama_new_context_with_model: flash_attn    = 0
0.00.893.395 I llama_new_context_with_model: freq_base     = 10000.0
0.00.893.396 I llama_new_context_with_model: freq_scale    = 1
0.00.893.397 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.908.368 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.908.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.908.530 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.911.163 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.911.167 I llama_new_context_with_model: graph nodes  = 601
0.00.911.168 I llama_new_context_with_model: graph splits = 1
0.00.911.192 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.911.195 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.489.578 I main: llama threadpool init, n_threads = 4
0.01.489.593 I 
0.01.489.719 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.489.723 I 
0.01.489.960 I sampler seed: 41531992
0.01.489.974 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.489.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.489.986 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.489.986 I 
 seconded the question and provided the following response:

**Response:**

"I understand your request. I will be happy to assist you with your inquiry.

0.12.619.576 I llama_perf_sampler_print:    sampling time =      49.72 ms /    33 runs   (    1.51 ms per token,   663.74 tokens per second)
0.12.619.579 I llama_perf_context_print:        load time =    1488.58 ms
0.12.619.581 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.619.606 I llama_perf_context_print:        eval time =   11040.97 ms /    32 runs   (  345.03 ms per token,     2.90 tokens per second)
0.12.619.607 I llama_perf_context_print:       total time =   11130.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.773s
user	46m44.730s
sys	0m6.446s
