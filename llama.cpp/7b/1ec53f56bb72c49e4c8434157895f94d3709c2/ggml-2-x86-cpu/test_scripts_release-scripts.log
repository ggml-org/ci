+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.581 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.021.570 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.581 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.592 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.600 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.604 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.608 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.610 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.611 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.612 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.616 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.618 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.619 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.971 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.191 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.018 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.024 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.025 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.026 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.027 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.028 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.030 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.031 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.031 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.032 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.033 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.037 I llama_model_loader: - type  f32:   37 tensors
0.00.132.038 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.600 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.388 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.935 I llm_load_vocab: special tokens cache size = 5
0.00.265.790 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.805 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.806 I llm_load_print_meta: arch             = gemma
0.00.265.806 I llm_load_print_meta: vocab type       = SPM
0.00.265.807 I llm_load_print_meta: n_vocab          = 256000
0.00.265.807 I llm_load_print_meta: n_merges         = 0
0.00.265.807 I llm_load_print_meta: vocab_only       = 0
0.00.265.808 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.808 I llm_load_print_meta: n_embd           = 2048
0.00.265.808 I llm_load_print_meta: n_layer          = 18
0.00.265.819 I llm_load_print_meta: n_head           = 8
0.00.265.820 I llm_load_print_meta: n_head_kv        = 1
0.00.265.820 I llm_load_print_meta: n_rot            = 256
0.00.265.820 I llm_load_print_meta: n_swa            = 0
0.00.265.820 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.821 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.821 I llm_load_print_meta: n_gqa            = 8
0.00.265.822 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.823 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.824 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.826 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.826 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.827 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.827 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.828 I llm_load_print_meta: n_ff             = 16384
0.00.265.829 I llm_load_print_meta: n_expert         = 0
0.00.265.829 I llm_load_print_meta: n_expert_used    = 0
0.00.265.829 I llm_load_print_meta: causal attn      = 1
0.00.265.829 I llm_load_print_meta: pooling type     = 0
0.00.265.830 I llm_load_print_meta: rope type        = 2
0.00.265.830 I llm_load_print_meta: rope scaling     = linear
0.00.265.831 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.832 I llm_load_print_meta: freq_scale_train = 1
0.00.265.832 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.833 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.833 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.833 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.834 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.834 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.834 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.835 I llm_load_print_meta: model type       = 2B
0.00.265.835 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.836 I llm_load_print_meta: model params     = 2.51 B
0.00.265.837 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.837 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.838 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.838 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.838 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.838 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.839 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.839 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.839 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.840 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.840 I llm_load_print_meta: max token length = 93
0.00.366.509 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.366.516 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.366.517 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.366.518 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.366.518 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.366.519 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.688 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.694 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.695 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.695 I llama_new_context_with_model: n_batch       = 2048
0.00.371.696 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.696 I llama_new_context_with_model: flash_attn    = 0
0.00.371.698 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.699 I llama_new_context_with_model: freq_scale    = 1
0.00.371.700 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.841 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.853 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.941 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.230 I llama_new_context_with_model: graph nodes  = 601
0.00.387.230 I llama_new_context_with_model: graph splits = 1
0.00.387.233 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.233 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.124 I main: llama threadpool init, n_threads = 4
0.00.472.140 I 
0.00.472.210 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.213 I 
0.00.472.253 I sampler seed: 1835175859
0.00.472.264 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.274 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.278 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.278 I 
 increasities, but I'm unable to decipher them. I'm hoping someone can explain them to me in layman's terms.

**Example:**

0.02.712.780 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6896.55 tokens per second)
0.02.712.783 I llama_perf_context_print:        load time =     471.32 ms
0.02.712.784 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.712.785 I llama_perf_context_print:        eval time =    2222.18 ms /    32 runs   (   69.44 ms per token,    14.40 tokens per second)
0.02.712.786 I llama_perf_context_print:       total time =    2240.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.020.930 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.949 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.957 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.968 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.969 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.969 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.970 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.971 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.042 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.137 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.998 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.004 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.005 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.005 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.006 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.007 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.008 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.010 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.012 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.013 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.014 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.017 I llama_model_loader: - type  f32:   37 tensors
0.00.132.017 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.683 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.166 I llm_load_vocab: special tokens cache size = 5
0.00.263.743 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.759 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.759 I llm_load_print_meta: arch             = gemma
0.00.263.760 I llm_load_print_meta: vocab type       = SPM
0.00.263.760 I llm_load_print_meta: n_vocab          = 256000
0.00.263.761 I llm_load_print_meta: n_merges         = 0
0.00.263.761 I llm_load_print_meta: vocab_only       = 0
0.00.263.761 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.762 I llm_load_print_meta: n_embd           = 2048
0.00.263.762 I llm_load_print_meta: n_layer          = 18
0.00.263.774 I llm_load_print_meta: n_head           = 8
0.00.263.775 I llm_load_print_meta: n_head_kv        = 1
0.00.263.775 I llm_load_print_meta: n_rot            = 256
0.00.263.775 I llm_load_print_meta: n_swa            = 0
0.00.263.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.777 I llm_load_print_meta: n_gqa            = 8
0.00.263.778 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.781 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.781 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.782 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.783 I llm_load_print_meta: n_ff             = 16384
0.00.263.783 I llm_load_print_meta: n_expert         = 0
0.00.263.784 I llm_load_print_meta: n_expert_used    = 0
0.00.263.784 I llm_load_print_meta: causal attn      = 1
0.00.263.784 I llm_load_print_meta: pooling type     = 0
0.00.263.784 I llm_load_print_meta: rope type        = 2
0.00.263.785 I llm_load_print_meta: rope scaling     = linear
0.00.263.786 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.786 I llm_load_print_meta: freq_scale_train = 1
0.00.263.787 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.787 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.787 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.787 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.788 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.788 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.788 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.789 I llm_load_print_meta: model type       = 2B
0.00.263.789 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.790 I llm_load_print_meta: model params     = 2.51 B
0.00.263.791 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.791 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.792 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.792 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.792 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.793 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.793 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.793 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.793 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.794 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.794 I llm_load_print_meta: max token length = 93
0.00.359.502 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.558 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.565 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.566 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.566 I llama_new_context_with_model: n_batch       = 2048
0.00.364.566 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.567 I llama_new_context_with_model: flash_attn    = 0
0.00.364.569 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.570 I llama_new_context_with_model: freq_scale    = 1
0.00.364.571 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.215 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.230 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.321 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.617 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.623 I llama_new_context_with_model: graph nodes  = 601
0.00.380.623 I llama_new_context_with_model: graph splits = 1
0.00.380.626 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.626 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.429 I main: llama threadpool init, n_threads = 4
0.00.461.444 I 
0.00.461.518 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.522 I 
0.00.461.564 I sampler seed: 2026353477
0.00.461.574 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.578 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.578 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.578 I 
 increasities and pronouncements, and pronouncements of divine revelation.

The text you provided contains examples of:

- Religious revelation
- Spiritual knowledge
-

0.02.629.503 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6913.89 tokens per second)
0.02.629.505 I llama_perf_context_print:        load time =     460.67 ms
0.02.629.507 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.629.509 I llama_perf_context_print:        eval time =    2148.82 ms /    32 runs   (   67.15 ms per token,    14.89 tokens per second)
0.02.629.510 I llama_perf_context_print:       total time =    2168.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.588 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.022.832 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.842 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.853 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.858 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.859 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.863 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.863 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.864 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.865 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.870 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.871 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.872 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.873 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.874 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.774 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.451 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.312 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.317 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.318 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.319 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.320 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.320 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.321 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.323 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.324 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.325 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.325 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.326 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.330 I llama_model_loader: - type  f32:   37 tensors
0.00.138.331 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.922 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.275.478 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.276.203 I llm_load_vocab: special tokens cache size = 5
0.00.297.260 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.297.278 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.297.278 I llm_load_print_meta: arch             = gemma
0.00.297.279 I llm_load_print_meta: vocab type       = SPM
0.00.297.279 I llm_load_print_meta: n_vocab          = 256000
0.00.297.280 I llm_load_print_meta: n_merges         = 0
0.00.297.280 I llm_load_print_meta: vocab_only       = 0
0.00.297.280 I llm_load_print_meta: n_ctx_train      = 8192
0.00.297.281 I llm_load_print_meta: n_embd           = 2048
0.00.297.281 I llm_load_print_meta: n_layer          = 18
0.00.297.293 I llm_load_print_meta: n_head           = 8
0.00.297.294 I llm_load_print_meta: n_head_kv        = 1
0.00.297.294 I llm_load_print_meta: n_rot            = 256
0.00.297.294 I llm_load_print_meta: n_swa            = 0
0.00.297.295 I llm_load_print_meta: n_embd_head_k    = 256
0.00.297.295 I llm_load_print_meta: n_embd_head_v    = 256
0.00.297.296 I llm_load_print_meta: n_gqa            = 8
0.00.297.297 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.297.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.297.298 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.297.299 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.297.300 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.297.300 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.297.300 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.297.301 I llm_load_print_meta: n_ff             = 16384
0.00.297.302 I llm_load_print_meta: n_expert         = 0
0.00.297.302 I llm_load_print_meta: n_expert_used    = 0
0.00.297.303 I llm_load_print_meta: causal attn      = 1
0.00.297.303 I llm_load_print_meta: pooling type     = 0
0.00.297.303 I llm_load_print_meta: rope type        = 2
0.00.297.303 I llm_load_print_meta: rope scaling     = linear
0.00.297.304 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.297.305 I llm_load_print_meta: freq_scale_train = 1
0.00.297.305 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.297.305 I llm_load_print_meta: rope_finetuned   = unknown
0.00.297.306 I llm_load_print_meta: ssm_d_conv       = 0
0.00.297.306 I llm_load_print_meta: ssm_d_inner      = 0
0.00.297.306 I llm_load_print_meta: ssm_d_state      = 0
0.00.297.307 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.297.307 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.297.307 I llm_load_print_meta: model type       = 2B
0.00.297.308 I llm_load_print_meta: model ftype      = Q8_0
0.00.297.309 I llm_load_print_meta: model params     = 2.51 B
0.00.297.309 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.297.310 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.297.310 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.297.311 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.297.311 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.297.311 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.297.312 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.297.312 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.297.312 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.297.313 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.297.313 I llm_load_print_meta: max token length = 93
0.00.374.498 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.374.505 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.506 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.374.506 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.374.507 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.508 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.379.978 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.985 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.985 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.986 I llama_new_context_with_model: n_batch       = 2048
0.00.379.987 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.987 I llama_new_context_with_model: flash_attn    = 0
0.00.379.990 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.991 I llama_new_context_with_model: freq_scale    = 1
0.00.379.992 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.397 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.788 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.795 I llama_new_context_with_model: graph nodes  = 601
0.00.395.796 I llama_new_context_with_model: graph splits = 1
0.00.395.798 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.395.798 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.084 I main: llama threadpool init, n_threads = 4
0.00.481.100 I 
0.00.481.188 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.191 I 
0.00.481.237 I sampler seed: 1531834401
0.00.481.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.257 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.261 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.261 I 
 increasities with a dash of humor.

I am unable to provide the requested information as it contains sexually suggestive content. [end of text]


0.02.266.281 I llama_perf_sampler_print:    sampling time =       3.63 ms /    26 runs   (    0.14 ms per token,  7160.56 tokens per second)
0.02.266.284 I llama_perf_context_print:        load time =     480.28 ms
0.02.266.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.266.289 I llama_perf_context_print:        eval time =    1770.01 ms /    25 runs   (   70.80 ms per token,    14.12 tokens per second)
0.02.266.290 I llama_perf_context_print:       total time =    1785.20 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.591 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.795 I main: load the model and apply lora adapter, if any
0.00.021.171 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.182 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.194 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.200 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.201 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.209 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.215 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.216 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.217 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.218 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.218 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.593 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.138 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.152 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.159 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.160 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.161 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.161 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.163 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.164 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.167 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.168 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.169 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.170 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.171 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.175 I llama_model_loader: - type  f32:   37 tensors
0.00.133.176 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.021 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.230 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.774 I llm_load_vocab: special tokens cache size = 5
0.00.272.484 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.499 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.499 I llm_load_print_meta: arch             = gemma
0.00.272.500 I llm_load_print_meta: vocab type       = SPM
0.00.272.500 I llm_load_print_meta: n_vocab          = 256000
0.00.272.501 I llm_load_print_meta: n_merges         = 0
0.00.272.501 I llm_load_print_meta: vocab_only       = 0
0.00.272.501 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.502 I llm_load_print_meta: n_embd           = 2048
0.00.272.502 I llm_load_print_meta: n_layer          = 18
0.00.272.513 I llm_load_print_meta: n_head           = 8
0.00.272.514 I llm_load_print_meta: n_head_kv        = 1
0.00.272.515 I llm_load_print_meta: n_rot            = 256
0.00.272.515 I llm_load_print_meta: n_swa            = 0
0.00.272.515 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.516 I llm_load_print_meta: n_gqa            = 8
0.00.272.517 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.518 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.519 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.521 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.522 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.522 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.522 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.523 I llm_load_print_meta: n_ff             = 16384
0.00.272.523 I llm_load_print_meta: n_expert         = 0
0.00.272.524 I llm_load_print_meta: n_expert_used    = 0
0.00.272.524 I llm_load_print_meta: causal attn      = 1
0.00.272.524 I llm_load_print_meta: pooling type     = 0
0.00.272.525 I llm_load_print_meta: rope type        = 2
0.00.272.525 I llm_load_print_meta: rope scaling     = linear
0.00.272.526 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.527 I llm_load_print_meta: freq_scale_train = 1
0.00.272.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.527 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.528 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.528 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.529 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.529 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.529 I llm_load_print_meta: model type       = 2B
0.00.272.530 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.531 I llm_load_print_meta: model params     = 2.51 B
0.00.272.531 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.532 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.532 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.532 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.533 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.533 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.533 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.534 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.534 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.534 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.535 I llm_load_print_meta: max token length = 93
0.00.344.054 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.344.061 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.349.003 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.009 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.009 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.010 I llama_new_context_with_model: n_batch       = 2048
0.00.349.010 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.011 I llama_new_context_with_model: flash_attn    = 0
0.00.349.013 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.014 I llama_new_context_with_model: freq_scale    = 1
0.00.349.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.226 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.239 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.587 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.591 I llama_new_context_with_model: graph nodes  = 601
0.00.364.591 I llama_new_context_with_model: graph splits = 1
0.00.364.593 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.593 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.266 I main: llama threadpool init, n_threads = 4
0.00.453.280 I 
0.00.453.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.359 I 
0.00.453.402 I sampler seed: 827100071
0.00.453.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.420 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.421 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.421 I 
 increamically, in a manner that exaggerates the absurdity of the situation.

The absurdity of the situation was palpable from the outset. The fact that a group

0.02.874.703 I llama_perf_sampler_print:    sampling time =       5.21 ms /    33 runs   (    0.16 ms per token,  6337.62 tokens per second)
0.02.874.705 I llama_perf_context_print:        load time =     452.45 ms
0.02.874.706 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.874.707 I llama_perf_context_print:        eval time =    2401.89 ms /    32 runs   (   75.06 ms per token,    13.32 tokens per second)
0.02.874.708 I llama_perf_context_print:       total time =    2421.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.948s
user	0m37.274s
sys	0m9.380s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4338 (7b1ec53f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40215.13 ms
main:    total time = 40215.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.723 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.733 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.745 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.754 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.759 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.760 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.760 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.761 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.762 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.763 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.767 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.768 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.769 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.770 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.771 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.303 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.170 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.064 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.070 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.071 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.072 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.073 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.074 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.075 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.078 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.079 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.080 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.081 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.082 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.086 I llama_model_loader: - type  f32:   37 tensors
0.00.131.087 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.088 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.725 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.096 I llm_load_vocab: special tokens cache size = 5
0.00.266.961 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.975 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.976 I llm_load_print_meta: arch             = gemma
0.00.266.976 I llm_load_print_meta: vocab type       = SPM
0.00.266.977 I llm_load_print_meta: n_vocab          = 256000
0.00.266.977 I llm_load_print_meta: n_merges         = 0
0.00.266.977 I llm_load_print_meta: vocab_only       = 0
0.00.266.978 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.978 I llm_load_print_meta: n_embd           = 2048
0.00.266.978 I llm_load_print_meta: n_layer          = 18
0.00.266.988 I llm_load_print_meta: n_head           = 8
0.00.266.989 I llm_load_print_meta: n_head_kv        = 1
0.00.266.990 I llm_load_print_meta: n_rot            = 256
0.00.266.990 I llm_load_print_meta: n_swa            = 0
0.00.266.990 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.990 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.991 I llm_load_print_meta: n_gqa            = 8
0.00.266.992 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.995 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.996 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.997 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.998 I llm_load_print_meta: n_ff             = 16384
0.00.266.998 I llm_load_print_meta: n_expert         = 0
0.00.266.998 I llm_load_print_meta: n_expert_used    = 0
0.00.266.998 I llm_load_print_meta: causal attn      = 1
0.00.266.999 I llm_load_print_meta: pooling type     = 0
0.00.266.999 I llm_load_print_meta: rope type        = 2
0.00.266.999 I llm_load_print_meta: rope scaling     = linear
0.00.267.000 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.001 I llm_load_print_meta: freq_scale_train = 1
0.00.267.001 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.001 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.002 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.002 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.002 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.003 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.003 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.004 I llm_load_print_meta: model type       = 2B
0.00.267.004 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.005 I llm_load_print_meta: model params     = 2.51 B
0.00.267.006 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.006 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.006 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.007 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.007 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.008 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.009 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.009 I llm_load_print_meta: max token length = 93
0.00.328.169 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.175 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.176 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.177 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.177 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.178 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.195 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.201 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.202 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.202 I llama_new_context_with_model: n_batch       = 2048
0.00.333.203 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.203 I llama_new_context_with_model: flash_attn    = 0
0.00.333.205 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.206 I llama_new_context_with_model: freq_scale    = 1
0.00.333.207 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.512 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.525 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.615 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.899 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.905 I llama_new_context_with_model: graph nodes  = 601
0.00.348.906 I llama_new_context_with_model: graph splits = 1
0.00.348.908 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.908 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.768 I main: llama threadpool init, n_threads = 4
0.00.425.783 I 
0.00.425.855 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.858 I 
0.00.425.899 I sampler seed: 1933001390
0.00.425.909 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.917 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.920 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.920 I 
 increasities and the challenges they pose to the field of gerontology

**Introduction**

Geriontology is a rapidly evolving field that seeks to understand and preserve the

0.02.011.688 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6449.09 tokens per second)
0.02.011.691 I llama_perf_context_print:        load time =     425.38 ms
0.02.011.692 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.011.693 I llama_perf_context_print:        eval time =    1567.48 ms /    32 runs   (   48.98 ms per token,    20.41 tokens per second)
0.02.011.694 I llama_perf_context_print:       total time =    1585.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4338 (7b1ec53f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40196.67 ms
main:    total time = 40196.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.171 I build: 4338 (7b1ec53f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.365 I main: load the model and apply lora adapter, if any
0.00.020.382 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.412 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.419 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.420 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.427 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.430 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.431 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.431 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.432 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.432 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.435 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.436 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.436 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.438 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.353 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.697 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.625 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.631 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.632 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.632 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.633 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.634 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.635 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.637 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.640 I llama_model_loader: - type  f32:   37 tensors
0.00.131.641 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.642 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.589 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.913 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.462 I llm_load_vocab: special tokens cache size = 5
0.00.266.141 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.158 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.159 I llm_load_print_meta: arch             = gemma
0.00.266.160 I llm_load_print_meta: vocab type       = SPM
0.00.266.161 I llm_load_print_meta: n_vocab          = 256000
0.00.266.161 I llm_load_print_meta: n_merges         = 0
0.00.266.161 I llm_load_print_meta: vocab_only       = 0
0.00.266.162 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.162 I llm_load_print_meta: n_embd           = 2048
0.00.266.162 I llm_load_print_meta: n_layer          = 18
0.00.266.173 I llm_load_print_meta: n_head           = 8
0.00.266.174 I llm_load_print_meta: n_head_kv        = 1
0.00.266.174 I llm_load_print_meta: n_rot            = 256
0.00.266.175 I llm_load_print_meta: n_swa            = 0
0.00.266.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.175 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.176 I llm_load_print_meta: n_gqa            = 8
0.00.266.177 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.179 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.180 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.180 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.181 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.181 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.182 I llm_load_print_meta: n_ff             = 16384
0.00.266.183 I llm_load_print_meta: n_expert         = 0
0.00.266.183 I llm_load_print_meta: n_expert_used    = 0
0.00.266.183 I llm_load_print_meta: causal attn      = 1
0.00.266.184 I llm_load_print_meta: pooling type     = 0
0.00.266.184 I llm_load_print_meta: rope type        = 2
0.00.266.184 I llm_load_print_meta: rope scaling     = linear
0.00.266.186 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.186 I llm_load_print_meta: freq_scale_train = 1
0.00.266.187 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.187 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.187 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.187 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.187 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.188 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.188 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.189 I llm_load_print_meta: model type       = 2B
0.00.266.189 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.190 I llm_load_print_meta: model params     = 2.51 B
0.00.266.190 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.191 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.191 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.191 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.192 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.192 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.192 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.192 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.193 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.193 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.193 I llm_load_print_meta: max token length = 93
0.00.323.218 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.240 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.246 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.247 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.247 I llama_new_context_with_model: n_batch       = 2048
0.00.328.247 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.248 I llama_new_context_with_model: flash_attn    = 0
0.00.328.250 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.251 I llama_new_context_with_model: freq_scale    = 1
0.00.328.252 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.073 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.086 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.177 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.421 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.427 I llama_new_context_with_model: graph nodes  = 601
0.00.344.428 I llama_new_context_with_model: graph splits = 1
0.00.344.430 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.430 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.745 I main: llama threadpool init, n_threads = 4
0.00.418.760 I 
0.00.418.835 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.838 I 
0.00.418.883 I sampler seed: 1962230259
0.00.418.894 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.905 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.925 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.925 I 
 seconally.

I am unable to access the requested information. Please check your internet connection or try again later. [end of text]


0.01.585.184 I llama_perf_sampler_print:    sampling time =       3.76 ms /    25 runs   (    0.15 ms per token,  6645.40 tokens per second)
0.01.585.187 I llama_perf_context_print:        load time =     418.36 ms
0.01.585.188 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.585.189 I llama_perf_context_print:        eval time =    1151.75 ms /    24 runs   (   47.99 ms per token,    20.84 tokens per second)
0.01.585.190 I llama_perf_context_print:       total time =    1166.45 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.827s
user	10m22.651s
sys	0m6.823s
