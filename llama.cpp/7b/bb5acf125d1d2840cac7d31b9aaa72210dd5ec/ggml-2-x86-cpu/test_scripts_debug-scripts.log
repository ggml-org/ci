+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.698 I build: 4356 (7bbb5acf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.000.914 I main: load the model and apply lora adapter, if any
0.00.023.776 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.790 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.886 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.900 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.902 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.910 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.915 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.916 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.917 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.920 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.921 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.929 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.931 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.932 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.934 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.935 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.596 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.450 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.461 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.462 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.464 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.465 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.466 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.468 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.472 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.474 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.475 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.476 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.478 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.487 I llama_model_loader: - type  f32:   37 tensors
0.00.349.489 I llama_model_loader: - type q8_0:  127 tensors
0.00.599.015 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.669.170 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.670.206 I llm_load_vocab: special tokens cache size = 5
0.00.856.457 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.534 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.535 I llm_load_print_meta: arch             = gemma
0.00.856.535 I llm_load_print_meta: vocab type       = SPM
0.00.856.537 I llm_load_print_meta: n_vocab          = 256000
0.00.856.539 I llm_load_print_meta: n_merges         = 0
0.00.856.540 I llm_load_print_meta: vocab_only       = 0
0.00.856.540 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.540 I llm_load_print_meta: n_embd           = 2048
0.00.856.541 I llm_load_print_meta: n_layer          = 18
0.00.856.603 I llm_load_print_meta: n_head           = 8
0.00.856.610 I llm_load_print_meta: n_head_kv        = 1
0.00.856.611 I llm_load_print_meta: n_rot            = 256
0.00.856.611 I llm_load_print_meta: n_swa            = 0
0.00.856.612 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.612 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.617 I llm_load_print_meta: n_gqa            = 8
0.00.856.622 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.629 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.630 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.631 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.631 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.632 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.637 I llm_load_print_meta: n_ff             = 16384
0.00.856.638 I llm_load_print_meta: n_expert         = 0
0.00.856.638 I llm_load_print_meta: n_expert_used    = 0
0.00.856.638 I llm_load_print_meta: causal attn      = 1
0.00.856.639 I llm_load_print_meta: pooling type     = 0
0.00.856.639 I llm_load_print_meta: rope type        = 2
0.00.856.639 I llm_load_print_meta: rope scaling     = linear
0.00.856.662 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.664 I llm_load_print_meta: freq_scale_train = 1
0.00.856.664 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.665 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.665 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.665 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.666 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.666 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.667 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.667 I llm_load_print_meta: model type       = 2B
0.00.856.668 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.669 I llm_load_print_meta: model params     = 2.51 B
0.00.856.670 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.677 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.678 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.679 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.684 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.684 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.685 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.691 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.693 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.693 I llm_load_print_meta: max token length = 93
0.00.958.126 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.958.139 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.958.140 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.958.141 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.958.141 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.958.142 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.964.229 I llama_new_context_with_model: n_seq_max     = 1
0.00.964.239 I llama_new_context_with_model: n_ctx         = 4096
0.00.964.239 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.964.239 I llama_new_context_with_model: n_batch       = 2048
0.00.964.240 I llama_new_context_with_model: n_ubatch      = 512
0.00.964.240 I llama_new_context_with_model: flash_attn    = 0
0.00.964.244 I llama_new_context_with_model: freq_base     = 10000.0
0.00.964.245 I llama_new_context_with_model: freq_scale    = 1
0.00.964.245 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.980.271 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.980.315 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.980.443 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.983.289 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.983.293 I llama_new_context_with_model: graph nodes  = 601
0.00.983.294 I llama_new_context_with_model: graph splits = 1
0.00.983.318 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.983.321 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.588.148 I main: llama threadpool init, n_threads = 4
0.01.588.164 I 
0.01.588.288 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.588.292 I 
0.01.588.525 I sampler seed: 1185923100
0.01.588.539 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.588.551 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.588.552 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.588.552 I 
 increasities and anxieties in a world where humans are increasingly reliant on technology.

**A. Technological Dependence**

- The increasing reliance on technology has led to

0.15.034.390 I llama_perf_sampler_print:    sampling time =      50.04 ms /    33 runs   (    1.52 ms per token,   659.45 tokens per second)
0.15.034.394 I llama_perf_context_print:        load time =    1587.11 ms
0.15.034.395 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.034.396 I llama_perf_context_print:        eval time =   13355.48 ms /    32 runs   (  417.36 ms per token,     2.40 tokens per second)
0.15.034.422 I llama_perf_context_print:       total time =   13446.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 4356 (7bbb5acf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.000.826 I main: load the model and apply lora adapter, if any
0.00.026.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.629 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.631 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.636 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.643 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.644 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.645 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.647 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.654 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.655 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.892 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.489 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.501 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.503 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.506 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.508 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.509 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.513 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.514 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.517 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.518 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.353.521 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.532 I llama_model_loader: - type  f32:   37 tensors
0.00.353.541 I llama_model_loader: - type q8_0:  127 tensors
0.00.591.371 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.659.818 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.660.789 I llm_load_vocab: special tokens cache size = 5
0.00.847.443 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.520 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.521 I llm_load_print_meta: arch             = gemma
0.00.847.522 I llm_load_print_meta: vocab type       = SPM
0.00.847.522 I llm_load_print_meta: n_vocab          = 256000
0.00.847.525 I llm_load_print_meta: n_merges         = 0
0.00.847.525 I llm_load_print_meta: vocab_only       = 0
0.00.847.526 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.526 I llm_load_print_meta: n_embd           = 2048
0.00.847.526 I llm_load_print_meta: n_layer          = 18
0.00.847.593 I llm_load_print_meta: n_head           = 8
0.00.847.600 I llm_load_print_meta: n_head_kv        = 1
0.00.847.601 I llm_load_print_meta: n_rot            = 256
0.00.847.601 I llm_load_print_meta: n_swa            = 0
0.00.847.602 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.602 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.607 I llm_load_print_meta: n_gqa            = 8
0.00.847.612 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.617 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.618 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.620 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.621 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.622 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.623 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.630 I llm_load_print_meta: n_ff             = 16384
0.00.847.631 I llm_load_print_meta: n_expert         = 0
0.00.847.632 I llm_load_print_meta: n_expert_used    = 0
0.00.847.632 I llm_load_print_meta: causal attn      = 1
0.00.847.633 I llm_load_print_meta: pooling type     = 0
0.00.847.633 I llm_load_print_meta: rope type        = 2
0.00.847.634 I llm_load_print_meta: rope scaling     = linear
0.00.847.636 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.637 I llm_load_print_meta: freq_scale_train = 1
0.00.847.638 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.638 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.639 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.639 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.640 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.640 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.640 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.655 I llm_load_print_meta: model type       = 2B
0.00.847.657 I llm_load_print_meta: model ftype      = Q8_0
0.00.847.657 I llm_load_print_meta: model params     = 2.51 B
0.00.847.658 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.847.659 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.659 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.660 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.660 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.661 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.661 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.662 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.668 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.670 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.670 I llm_load_print_meta: max token length = 93
0.00.944.065 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.950.223 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.230 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.231 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.231 I llama_new_context_with_model: n_batch       = 2048
0.00.950.232 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.232 I llama_new_context_with_model: flash_attn    = 0
0.00.950.235 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.236 I llama_new_context_with_model: freq_scale    = 1
0.00.950.237 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.965.250 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.965.293 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.965.416 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.968.179 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.968.183 I llama_new_context_with_model: graph nodes  = 601
0.00.968.183 I llama_new_context_with_model: graph splits = 1
0.00.968.207 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.968.210 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.052 I main: llama threadpool init, n_threads = 4
0.01.576.070 I 
0.01.576.191 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.196 I 
0.01.576.435 I sampler seed: 2081968253
0.01.576.448 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.460 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.461 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.461 I 
 increasities, and other forms of flattery in an attempt to gain a competitive advantage in the job market.

**Answer:**

**Using flattery and flattery tactics

0.15.182.266 I llama_perf_sampler_print:    sampling time =      49.98 ms /    33 runs   (    1.51 ms per token,   660.20 tokens per second)
0.15.182.270 I llama_perf_context_print:        load time =    1575.12 ms
0.15.182.272 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.182.274 I llama_perf_context_print:        eval time =   13515.59 ms /    32 runs   (  422.36 ms per token,     2.37 tokens per second)
0.15.182.275 I llama_perf_context_print:       total time =   13606.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.737 I build: 4356 (7bbb5acf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.956 I main: llama backend init
0.00.000.964 I main: load the model and apply lora adapter, if any
0.00.023.772 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.786 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.885 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.900 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.913 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.917 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.918 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.920 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.922 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.923 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.932 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.936 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.937 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.947 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.949 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.015 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.026 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.027 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.028 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.030 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.031 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.032 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.037 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.038 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.041 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.043 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.045 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.054 I llama_model_loader: - type  f32:   37 tensors
0.00.349.057 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.993 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.663.208 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.664.264 I llm_load_vocab: special tokens cache size = 5
0.00.851.561 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.632 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.633 I llm_load_print_meta: arch             = gemma
0.00.851.634 I llm_load_print_meta: vocab type       = SPM
0.00.851.635 I llm_load_print_meta: n_vocab          = 256000
0.00.851.638 I llm_load_print_meta: n_merges         = 0
0.00.851.638 I llm_load_print_meta: vocab_only       = 0
0.00.851.639 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.639 I llm_load_print_meta: n_embd           = 2048
0.00.851.640 I llm_load_print_meta: n_layer          = 18
0.00.851.707 I llm_load_print_meta: n_head           = 8
0.00.851.714 I llm_load_print_meta: n_head_kv        = 1
0.00.851.714 I llm_load_print_meta: n_rot            = 256
0.00.851.715 I llm_load_print_meta: n_swa            = 0
0.00.851.715 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.716 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.721 I llm_load_print_meta: n_gqa            = 8
0.00.851.725 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.731 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.732 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.733 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.734 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.735 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.735 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.740 I llm_load_print_meta: n_ff             = 16384
0.00.851.741 I llm_load_print_meta: n_expert         = 0
0.00.851.741 I llm_load_print_meta: n_expert_used    = 0
0.00.851.742 I llm_load_print_meta: causal attn      = 1
0.00.851.742 I llm_load_print_meta: pooling type     = 0
0.00.851.742 I llm_load_print_meta: rope type        = 2
0.00.851.743 I llm_load_print_meta: rope scaling     = linear
0.00.851.744 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.745 I llm_load_print_meta: freq_scale_train = 1
0.00.851.745 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.745 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.746 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.746 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.747 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.747 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.747 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.748 I llm_load_print_meta: model type       = 2B
0.00.851.749 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.750 I llm_load_print_meta: model params     = 2.51 B
0.00.851.751 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.751 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.751 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.752 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.753 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.753 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.754 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.761 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.762 I llm_load_print_meta: max token length = 93
0.00.931.184 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.931.192 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.931.193 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.931.194 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.931.195 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.931.195 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.937.099 I llama_new_context_with_model: n_seq_max     = 1
0.00.937.106 I llama_new_context_with_model: n_ctx         = 4096
0.00.937.107 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.937.107 I llama_new_context_with_model: n_batch       = 2048
0.00.937.108 I llama_new_context_with_model: n_ubatch      = 512
0.00.937.109 I llama_new_context_with_model: flash_attn    = 0
0.00.937.112 I llama_new_context_with_model: freq_base     = 10000.0
0.00.937.112 I llama_new_context_with_model: freq_scale    = 1
0.00.937.113 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.726 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.952.768 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.952.888 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.955.524 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.955.527 I llama_new_context_with_model: graph nodes  = 601
0.00.955.528 I llama_new_context_with_model: graph splits = 1
0.00.955.552 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.955.555 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.561.069 I main: llama threadpool init, n_threads = 4
0.01.561.084 I 
0.01.561.208 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.561.212 I 
0.01.561.444 I sampler seed: 1209884867
0.01.561.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.561.470 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.561.472 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.561.473 I 
 increadibly. 

I am not sure what you mean by "incredibly."

Could you please explain what you are trying to say? [end of text]


0.14.149.360 I llama_perf_sampler_print:    sampling time =      46.59 ms /    31 runs   (    1.50 ms per token,   665.44 tokens per second)
0.14.149.378 I llama_perf_context_print:        load time =    1559.99 ms
0.14.149.380 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.149.381 I llama_perf_context_print:        eval time =   12504.09 ms /    30 runs   (  416.80 ms per token,     2.40 tokens per second)
0.14.149.382 I llama_perf_context_print:       total time =   12588.30 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4356 (7bbb5acf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.443 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.451 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.546 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.570 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.571 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.573 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.575 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.576 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.577 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.584 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.586 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.588 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.589 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.591 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.913 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.395 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.087 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.098 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.099 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.100 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.102 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.103 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.105 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.108 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.110 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.111 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.113 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.115 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.126 I llama_model_loader: - type  f32:   37 tensors
0.00.349.128 I llama_model_loader: - type q8_0:  127 tensors
0.00.597.848 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.525 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.560 I llm_load_vocab: special tokens cache size = 5
0.00.855.327 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.410 I llm_load_print_meta: arch             = gemma
0.00.855.411 I llm_load_print_meta: vocab type       = SPM
0.00.855.413 I llm_load_print_meta: n_vocab          = 256000
0.00.855.416 I llm_load_print_meta: n_merges         = 0
0.00.855.416 I llm_load_print_meta: vocab_only       = 0
0.00.855.417 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.417 I llm_load_print_meta: n_embd           = 2048
0.00.855.418 I llm_load_print_meta: n_layer          = 18
0.00.855.495 I llm_load_print_meta: n_head           = 8
0.00.855.505 I llm_load_print_meta: n_head_kv        = 1
0.00.855.506 I llm_load_print_meta: n_rot            = 256
0.00.855.506 I llm_load_print_meta: n_swa            = 0
0.00.855.507 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.507 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.512 I llm_load_print_meta: n_gqa            = 8
0.00.855.517 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.525 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.531 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.543 I llm_load_print_meta: n_ff             = 16384
0.00.855.547 I llm_load_print_meta: n_expert         = 0
0.00.855.548 I llm_load_print_meta: n_expert_used    = 0
0.00.855.548 I llm_load_print_meta: causal attn      = 1
0.00.855.549 I llm_load_print_meta: pooling type     = 0
0.00.855.550 I llm_load_print_meta: rope type        = 2
0.00.855.551 I llm_load_print_meta: rope scaling     = linear
0.00.855.561 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.562 I llm_load_print_meta: freq_scale_train = 1
0.00.855.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.566 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.569 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.570 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.570 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.571 I llm_load_print_meta: model type       = 2B
0.00.855.573 I llm_load_print_meta: model ftype      = Q8_0
0.00.855.587 I llm_load_print_meta: model params     = 2.51 B
0.00.855.589 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.855.592 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.593 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.595 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.596 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.597 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.855.606 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.855.608 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.855.609 I llm_load_print_meta: max token length = 93
0.00.928.612 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.928.624 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.934.797 I llama_new_context_with_model: n_seq_max     = 1
0.00.934.804 I llama_new_context_with_model: n_ctx         = 4096
0.00.934.805 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.934.805 I llama_new_context_with_model: n_batch       = 2048
0.00.934.805 I llama_new_context_with_model: n_ubatch      = 512
0.00.934.806 I llama_new_context_with_model: flash_attn    = 0
0.00.934.808 I llama_new_context_with_model: freq_base     = 10000.0
0.00.934.809 I llama_new_context_with_model: freq_scale    = 1
0.00.934.810 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.950.067 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.950.108 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.950.232 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.952.911 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.952.915 I llama_new_context_with_model: graph nodes  = 601
0.00.952.915 I llama_new_context_with_model: graph splits = 1
0.00.952.939 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.952.942 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.415 I main: llama threadpool init, n_threads = 4
0.01.558.434 I 
0.01.558.578 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.558.583 I 
0.01.558.831 I sampler seed: 892340003
0.01.558.845 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.558.856 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.558.860 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.558.861 I 
 maneupher in the sentence "The government will enact a new law to maneupher individuals who are suspected of engaging in child sexual abuse."

The sentence seems to

0.15.024.066 I llama_perf_sampler_print:    sampling time =      49.97 ms /    33 runs   (    1.51 ms per token,   660.46 tokens per second)
0.15.024.069 I llama_perf_context_print:        load time =    1557.47 ms
0.15.024.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.024.085 I llama_perf_context_print:        eval time =   13375.42 ms /    32 runs   (  417.98 ms per token,     2.39 tokens per second)
0.15.024.087 I llama_perf_context_print:       total time =   13465.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.215s
user	3m46.107s
sys	0m9.523s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4356 (7bbb5acf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186875.46 ms
main:    total time = 186875.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4356 (7bbb5acf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.023.398 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.411 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.507 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.519 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.521 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.532 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.533 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.534 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.535 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.537 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.544 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.545 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.547 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.548 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.550 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.701 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.153 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.985 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.987 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.988 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.989 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.991 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.992 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.996 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.999 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.000 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.002 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.014 I llama_model_loader: - type  f32:   37 tensors
0.00.349.016 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.017 I llama_model_loader: - type q6_K:   19 tensors
0.00.584.878 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.381 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.434 I llm_load_vocab: special tokens cache size = 5
0.00.846.502 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.576 I llm_load_print_meta: arch             = gemma
0.00.846.577 I llm_load_print_meta: vocab type       = SPM
0.00.846.578 I llm_load_print_meta: n_vocab          = 256000
0.00.846.580 I llm_load_print_meta: n_merges         = 0
0.00.846.581 I llm_load_print_meta: vocab_only       = 0
0.00.846.581 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.581 I llm_load_print_meta: n_embd           = 2048
0.00.846.582 I llm_load_print_meta: n_layer          = 18
0.00.846.649 I llm_load_print_meta: n_head           = 8
0.00.846.656 I llm_load_print_meta: n_head_kv        = 1
0.00.846.657 I llm_load_print_meta: n_rot            = 256
0.00.846.657 I llm_load_print_meta: n_swa            = 0
0.00.846.657 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.658 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.677 I llm_load_print_meta: n_gqa            = 8
0.00.846.683 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.688 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.689 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.691 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.692 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.706 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.707 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.713 I llm_load_print_meta: n_ff             = 16384
0.00.846.713 I llm_load_print_meta: n_expert         = 0
0.00.846.714 I llm_load_print_meta: n_expert_used    = 0
0.00.846.715 I llm_load_print_meta: causal attn      = 1
0.00.846.715 I llm_load_print_meta: pooling type     = 0
0.00.846.716 I llm_load_print_meta: rope type        = 2
0.00.846.716 I llm_load_print_meta: rope scaling     = linear
0.00.846.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.722 I llm_load_print_meta: freq_scale_train = 1
0.00.846.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.727 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.727 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.727 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.728 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.728 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.729 I llm_load_print_meta: model type       = 2B
0.00.846.730 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.846.730 I llm_load_print_meta: model params     = 2.51 B
0.00.846.732 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.846.732 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.732 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.733 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.733 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.733 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.734 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.735 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.740 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.742 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.743 I llm_load_print_meta: max token length = 93
0.00.908.523 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.908.532 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.908.533 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.908.534 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.908.535 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.908.536 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.914.361 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.369 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.369 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.370 I llama_new_context_with_model: n_batch       = 2048
0.00.914.370 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.371 I llama_new_context_with_model: flash_attn    = 0
0.00.914.374 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.375 I llama_new_context_with_model: freq_scale    = 1
0.00.914.376 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.655 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.696 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.816 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.547 I llama_new_context_with_model: graph nodes  = 601
0.00.932.547 I llama_new_context_with_model: graph splits = 1
0.00.932.572 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.576 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.511.431 I main: llama threadpool init, n_threads = 4
0.01.511.449 I 
0.01.511.576 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.511.580 I 
0.01.511.821 I sampler seed: 3236635030
0.01.511.836 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.511.847 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.511.850 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.511.850 I 
 seconally.

I am unable to generate a response as the prompt requires me to engage in potentially unsafe or unethical behavior. [end of text]


0.10.600.178 I llama_perf_sampler_print:    sampling time =      40.62 ms /    27 runs   (    1.50 ms per token,   664.75 tokens per second)
0.10.600.181 I llama_perf_context_print:        load time =    1510.42 ms
0.10.600.183 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.600.184 I llama_perf_context_print:        eval time =    9014.91 ms /    26 runs   (  346.73 ms per token,     2.88 tokens per second)
0.10.600.205 I llama_perf_context_print:       total time =    9088.76 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4356 (7bbb5acf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186786.20 ms
main:    total time = 186786.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4356 (7bbb5acf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.023.435 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.557 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.564 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.568 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.569 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.570 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.580 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.582 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.583 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.585 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.586 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.677 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.234 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.023 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.043 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.047 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.048 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.058 I llama_model_loader: - type  f32:   37 tensors
0.00.350.061 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.061 I llama_model_loader: - type q6_K:   19 tensors
0.00.582.575 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.439 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.392 I llm_load_vocab: special tokens cache size = 5
0.00.836.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.836.835 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.836.836 I llm_load_print_meta: arch             = gemma
0.00.836.837 I llm_load_print_meta: vocab type       = SPM
0.00.836.838 I llm_load_print_meta: n_vocab          = 256000
0.00.836.840 I llm_load_print_meta: n_merges         = 0
0.00.836.841 I llm_load_print_meta: vocab_only       = 0
0.00.836.841 I llm_load_print_meta: n_ctx_train      = 8192
0.00.836.841 I llm_load_print_meta: n_embd           = 2048
0.00.836.842 I llm_load_print_meta: n_layer          = 18
0.00.836.906 I llm_load_print_meta: n_head           = 8
0.00.836.913 I llm_load_print_meta: n_head_kv        = 1
0.00.836.914 I llm_load_print_meta: n_rot            = 256
0.00.836.914 I llm_load_print_meta: n_swa            = 0
0.00.836.915 I llm_load_print_meta: n_embd_head_k    = 256
0.00.836.915 I llm_load_print_meta: n_embd_head_v    = 256
0.00.836.920 I llm_load_print_meta: n_gqa            = 8
0.00.836.925 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.836.930 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.836.933 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.836.934 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.836.935 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.836.936 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.836.936 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.836.942 I llm_load_print_meta: n_ff             = 16384
0.00.836.943 I llm_load_print_meta: n_expert         = 0
0.00.836.947 I llm_load_print_meta: n_expert_used    = 0
0.00.836.948 I llm_load_print_meta: causal attn      = 1
0.00.836.949 I llm_load_print_meta: pooling type     = 0
0.00.836.949 I llm_load_print_meta: rope type        = 2
0.00.836.950 I llm_load_print_meta: rope scaling     = linear
0.00.836.954 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.955 I llm_load_print_meta: freq_scale_train = 1
0.00.836.955 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.955 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.956 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.956 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.956 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.957 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.957 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.958 I llm_load_print_meta: model type       = 2B
0.00.836.959 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.836.960 I llm_load_print_meta: model params     = 2.51 B
0.00.836.961 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.836.961 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.964 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.964 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.965 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.965 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.967 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.972 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.974 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.974 I llm_load_print_meta: max token length = 93
0.00.896.433 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.902.219 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.226 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.226 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.227 I llama_new_context_with_model: n_batch       = 2048
0.00.902.227 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.228 I llama_new_context_with_model: flash_attn    = 0
0.00.902.230 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.231 I llama_new_context_with_model: freq_scale    = 1
0.00.902.232 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.917.428 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.917.471 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.917.588 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.920.212 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.920.215 I llama_new_context_with_model: graph nodes  = 601
0.00.920.216 I llama_new_context_with_model: graph splits = 1
0.00.920.238 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.920.241 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.498.930 I main: llama threadpool init, n_threads = 4
0.01.498.946 I 
0.01.499.072 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.499.077 I 
0.01.499.320 I sampler seed: 4264567787
0.01.499.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.499.357 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.499.366 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.499.369 I 
 seconde et al. (2018) propose une approche basée sur la conception de jeux vidéo pour l'éducation. Dans leur approche, les jeux

0.12.614.441 I llama_perf_sampler_print:    sampling time =      49.90 ms /    33 runs   (    1.51 ms per token,   661.36 tokens per second)
0.12.614.446 I llama_perf_context_print:        load time =    1498.00 ms
0.12.614.447 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.614.450 I llama_perf_context_print:        eval time =   11024.39 ms /    32 runs   (  344.51 ms per token,     2.90 tokens per second)
0.12.614.451 I llama_perf_context_print:       total time =   11115.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.844s
user	46m41.465s
sys	0m6.522s
