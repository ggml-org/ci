+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.559 I build: 4148 (1e9447a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.056 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.079 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.080 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.084 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.087 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.088 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.089 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.089 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.090 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.094 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.094 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.095 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.095 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.096 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.020 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.599 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.605 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.605 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.606 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.607 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.608 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.608 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.610 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.611 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.611 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.612 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.613 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.617 I llama_model_loader: - type  f32:   37 tensors
0.00.129.617 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.833 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.400 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.996 I llm_load_vocab: special tokens cache size = 5
0.00.268.863 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.879 I llm_load_print_meta: arch             = gemma
0.00.268.879 I llm_load_print_meta: vocab type       = SPM
0.00.268.880 I llm_load_print_meta: n_vocab          = 256000
0.00.268.881 I llm_load_print_meta: n_merges         = 0
0.00.268.881 I llm_load_print_meta: vocab_only       = 0
0.00.268.881 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.882 I llm_load_print_meta: n_embd           = 2048
0.00.268.882 I llm_load_print_meta: n_layer          = 18
0.00.268.893 I llm_load_print_meta: n_head           = 8
0.00.268.894 I llm_load_print_meta: n_head_kv        = 1
0.00.268.894 I llm_load_print_meta: n_rot            = 256
0.00.268.895 I llm_load_print_meta: n_swa            = 0
0.00.268.895 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.895 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.896 I llm_load_print_meta: n_gqa            = 8
0.00.268.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.898 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.899 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.900 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.900 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.901 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.901 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.902 I llm_load_print_meta: n_ff             = 16384
0.00.268.902 I llm_load_print_meta: n_expert         = 0
0.00.268.903 I llm_load_print_meta: n_expert_used    = 0
0.00.268.903 I llm_load_print_meta: causal attn      = 1
0.00.268.903 I llm_load_print_meta: pooling type     = 0
0.00.268.903 I llm_load_print_meta: rope type        = 2
0.00.268.904 I llm_load_print_meta: rope scaling     = linear
0.00.268.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.906 I llm_load_print_meta: freq_scale_train = 1
0.00.268.906 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.906 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.907 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.907 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.907 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.907 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.908 I llm_load_print_meta: model type       = 2B
0.00.268.909 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.909 I llm_load_print_meta: model params     = 2.51 B
0.00.268.910 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.910 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.911 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.911 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.911 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.912 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.912 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.912 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.913 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.913 I llm_load_print_meta: max token length = 93
0.00.367.349 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.358 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.359 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.359 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.360 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.361 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.635 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.642 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.643 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.643 I llama_new_context_with_model: n_batch       = 2048
0.00.372.644 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.644 I llama_new_context_with_model: flash_attn    = 0
0.00.372.648 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.649 I llama_new_context_with_model: freq_scale    = 1
0.00.372.650 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.638 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.651 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.744 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.026 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.032 I llama_new_context_with_model: graph nodes  = 601
0.00.389.032 I llama_new_context_with_model: graph splits = 1
0.00.389.034 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.099 I main: llama threadpool init, n_threads = 4
0.00.474.112 I 
0.00.474.188 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.192 I 
0.00.474.232 I sampler seed: 535622754
0.00.474.243 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.249 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.249 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.249 I 
 increadibly.

I have a question about the following sentence: "I'd rather have a broken leg than be without work."

Is this sentence logically

0.02.714.674 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6422.73 tokens per second)
0.02.714.677 I llama_perf_context_print:        load time =     473.33 ms
0.02.714.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.681 I llama_perf_context_print:        eval time =    2221.17 ms /    32 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.714.682 I llama_perf_context_print:       total time =    2240.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 4148 (1e9447a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.020.686 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.701 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.707 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.712 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.713 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.713 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.714 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.714 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.715 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.720 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.721 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.721 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.722 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.723 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.489 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.339 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.345 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.346 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.347 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.347 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.348 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.349 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.351 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.352 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.352 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.353 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.354 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.357 I llama_model_loader: - type  f32:   37 tensors
0.00.129.358 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.094 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.840 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.338 I llm_load_vocab: special tokens cache size = 5
0.00.262.075 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.090 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.090 I llm_load_print_meta: arch             = gemma
0.00.262.091 I llm_load_print_meta: vocab type       = SPM
0.00.262.092 I llm_load_print_meta: n_vocab          = 256000
0.00.262.092 I llm_load_print_meta: n_merges         = 0
0.00.262.093 I llm_load_print_meta: vocab_only       = 0
0.00.262.093 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.093 I llm_load_print_meta: n_embd           = 2048
0.00.262.094 I llm_load_print_meta: n_layer          = 18
0.00.262.104 I llm_load_print_meta: n_head           = 8
0.00.262.105 I llm_load_print_meta: n_head_kv        = 1
0.00.262.106 I llm_load_print_meta: n_rot            = 256
0.00.262.106 I llm_load_print_meta: n_swa            = 0
0.00.262.106 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.107 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.108 I llm_load_print_meta: n_gqa            = 8
0.00.262.109 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.110 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.111 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.112 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.112 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.113 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.113 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.114 I llm_load_print_meta: n_ff             = 16384
0.00.262.114 I llm_load_print_meta: n_expert         = 0
0.00.262.115 I llm_load_print_meta: n_expert_used    = 0
0.00.262.115 I llm_load_print_meta: causal attn      = 1
0.00.262.116 I llm_load_print_meta: pooling type     = 0
0.00.262.116 I llm_load_print_meta: rope type        = 2
0.00.262.117 I llm_load_print_meta: rope scaling     = linear
0.00.262.118 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.118 I llm_load_print_meta: freq_scale_train = 1
0.00.262.119 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.119 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.119 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.120 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.120 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.120 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.121 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.121 I llm_load_print_meta: model type       = 2B
0.00.262.122 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.123 I llm_load_print_meta: model params     = 2.51 B
0.00.262.124 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.124 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.124 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.125 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.125 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.125 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.126 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.126 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.127 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.127 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.127 I llm_load_print_meta: max token length = 93
0.00.355.077 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.206 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.213 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.213 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.214 I llama_new_context_with_model: n_batch       = 2048
0.00.360.214 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.214 I llama_new_context_with_model: flash_attn    = 0
0.00.360.216 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.217 I llama_new_context_with_model: freq_scale    = 1
0.00.360.218 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.844 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.858 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.163 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.170 I llama_new_context_with_model: graph nodes  = 601
0.00.376.170 I llama_new_context_with_model: graph splits = 1
0.00.376.172 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.020 I main: llama threadpool init, n_threads = 4
0.00.456.033 I 
0.00.456.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.113 I 
0.00.456.154 I sampler seed: 2979010016
0.00.456.164 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.167 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.168 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.168 I 
 increasels, and other parasitic flatworms pose a significant threat to public health worldwide. They can cause malnutrition, anemia, and other serious health complications.

**

0.02.609.881 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6647.86 tokens per second)
0.02.609.883 I llama_perf_context_print:        load time =     455.25 ms
0.02.609.885 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.609.886 I llama_perf_context_print:        eval time =    2135.40 ms /    32 runs   (   66.73 ms per token,    14.99 tokens per second)
0.02.609.887 I llama_perf_context_print:       total time =    2153.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.592 I build: 4148 (1e9447a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.021.286 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.295 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.303 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.309 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.314 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.315 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.315 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.316 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.316 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.321 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.321 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.322 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.323 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.324 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.148 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.154 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.156 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.157 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.157 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.161 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.162 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.162 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.166 I llama_model_loader: - type  f32:   37 tensors
0.00.130.167 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.902 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.236 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.755 I llm_load_vocab: special tokens cache size = 5
0.00.259.374 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.390 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.390 I llm_load_print_meta: arch             = gemma
0.00.259.391 I llm_load_print_meta: vocab type       = SPM
0.00.259.392 I llm_load_print_meta: n_vocab          = 256000
0.00.259.392 I llm_load_print_meta: n_merges         = 0
0.00.259.392 I llm_load_print_meta: vocab_only       = 0
0.00.259.393 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.393 I llm_load_print_meta: n_embd           = 2048
0.00.259.393 I llm_load_print_meta: n_layer          = 18
0.00.259.406 I llm_load_print_meta: n_head           = 8
0.00.259.407 I llm_load_print_meta: n_head_kv        = 1
0.00.259.407 I llm_load_print_meta: n_rot            = 256
0.00.259.408 I llm_load_print_meta: n_swa            = 0
0.00.259.408 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.408 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.410 I llm_load_print_meta: n_gqa            = 8
0.00.259.411 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.412 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.413 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.414 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.414 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.415 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.416 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.417 I llm_load_print_meta: n_ff             = 16384
0.00.259.418 I llm_load_print_meta: n_expert         = 0
0.00.259.418 I llm_load_print_meta: n_expert_used    = 0
0.00.259.419 I llm_load_print_meta: causal attn      = 1
0.00.259.419 I llm_load_print_meta: pooling type     = 0
0.00.259.420 I llm_load_print_meta: rope type        = 2
0.00.259.420 I llm_load_print_meta: rope scaling     = linear
0.00.259.421 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.422 I llm_load_print_meta: freq_scale_train = 1
0.00.259.423 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.423 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.423 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.424 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.424 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.424 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.424 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.426 I llm_load_print_meta: model type       = 2B
0.00.259.427 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.429 I llm_load_print_meta: model params     = 2.51 B
0.00.259.430 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.430 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.431 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.431 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.432 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.432 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.433 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.434 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.435 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.436 I llm_load_print_meta: max token length = 93
0.00.331.486 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.331.491 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.331.493 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.331.493 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.331.494 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.331.495 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.336.679 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.685 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.686 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.686 I llama_new_context_with_model: n_batch       = 2048
0.00.336.686 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.687 I llama_new_context_with_model: flash_attn    = 0
0.00.336.689 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.690 I llama_new_context_with_model: freq_scale    = 1
0.00.336.691 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.810 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.825 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.913 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.129 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.136 I llama_new_context_with_model: graph nodes  = 601
0.00.352.137 I llama_new_context_with_model: graph splits = 1
0.00.352.139 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.807 I main: llama threadpool init, n_threads = 4
0.00.437.819 I 
0.00.437.902 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.437.906 I 
0.00.437.963 I sampler seed: 985973321
0.00.437.974 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.979 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.980 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.980 I 
 increably, a mischievous grin spreading across his face.

This is a snippet from a story about a mischievous child.

**Questions:**

1. Who

0.02.711.802 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7060.33 tokens per second)
0.02.711.804 I llama_perf_context_print:        load time =     436.95 ms
0.02.711.805 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.807 I llama_perf_context_print:        eval time =    2255.78 ms /    32 runs   (   70.49 ms per token,    14.19 tokens per second)
0.02.711.807 I llama_perf_context_print:       total time =    2274.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.561 I build: 4148 (1e9447a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.007 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.017 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.025 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.034 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.035 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.036 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.036 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.036 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.037 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.040 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.041 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.042 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.042 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.043 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.006 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.666 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.517 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.523 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.524 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.525 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.527 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.528 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.529 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.529 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.530 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.531 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.534 I llama_model_loader: - type  f32:   37 tensors
0.00.129.535 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.540 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.212 I llm_load_vocab: special tokens cache size = 5
0.00.272.226 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.248 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.248 I llm_load_print_meta: arch             = gemma
0.00.272.249 I llm_load_print_meta: vocab type       = SPM
0.00.272.250 I llm_load_print_meta: n_vocab          = 256000
0.00.272.251 I llm_load_print_meta: n_merges         = 0
0.00.272.251 I llm_load_print_meta: vocab_only       = 0
0.00.272.251 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.252 I llm_load_print_meta: n_embd           = 2048
0.00.272.252 I llm_load_print_meta: n_layer          = 18
0.00.272.264 I llm_load_print_meta: n_head           = 8
0.00.272.265 I llm_load_print_meta: n_head_kv        = 1
0.00.272.265 I llm_load_print_meta: n_rot            = 256
0.00.272.265 I llm_load_print_meta: n_swa            = 0
0.00.272.266 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.266 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.267 I llm_load_print_meta: n_gqa            = 8
0.00.272.268 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.269 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.269 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.271 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.271 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.271 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.272 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.273 I llm_load_print_meta: n_ff             = 16384
0.00.272.273 I llm_load_print_meta: n_expert         = 0
0.00.272.273 I llm_load_print_meta: n_expert_used    = 0
0.00.272.274 I llm_load_print_meta: causal attn      = 1
0.00.272.274 I llm_load_print_meta: pooling type     = 0
0.00.272.274 I llm_load_print_meta: rope type        = 2
0.00.272.275 I llm_load_print_meta: rope scaling     = linear
0.00.272.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.277 I llm_load_print_meta: freq_scale_train = 1
0.00.272.277 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.278 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.278 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.278 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.278 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.279 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.279 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.280 I llm_load_print_meta: model type       = 2B
0.00.272.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.281 I llm_load_print_meta: model params     = 2.51 B
0.00.272.282 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.282 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.283 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.283 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.283 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.284 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.284 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.284 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.285 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.286 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.286 I llm_load_print_meta: max token length = 93
0.00.343.215 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.221 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.401 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.408 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.408 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.409 I llama_new_context_with_model: n_batch       = 2048
0.00.348.409 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.410 I llama_new_context_with_model: flash_attn    = 0
0.00.348.412 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.412 I llama_new_context_with_model: freq_scale    = 1
0.00.348.413 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.624 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.637 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.958 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.965 I llama_new_context_with_model: graph nodes  = 601
0.00.363.965 I llama_new_context_with_model: graph splits = 1
0.00.363.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.216 I main: llama threadpool init, n_threads = 4
0.00.452.229 I 
0.00.452.307 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.310 I 
0.00.452.350 I sampler seed: 1404987920
0.00.452.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.363 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.363 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.363 I 
 seconals, 2018.

**Abstract:**

This paper investigates the phenomenon of unsolicited email marketing, commonly known as spam. Spam emails are

0.02.883.503 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6727.83 tokens per second)
0.02.883.506 I llama_perf_context_print:        load time =     451.43 ms
0.02.883.507 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.883.509 I llama_perf_context_print:        eval time =    2411.87 ms /    32 runs   (   75.37 ms per token,    13.27 tokens per second)
0.02.883.510 I llama_perf_context_print:       total time =    2431.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.313s
user	0m39.230s
sys	0m9.231s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4148 (1e9447a0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40169.14 ms
main:    total time = 40169.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 4148 (1e9447a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.242 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.251 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.259 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.264 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.267 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.271 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.272 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.272 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.273 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.273 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.273 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.306 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.564 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.380 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.381 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.382 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.383 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.384 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.385 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.388 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.389 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.390 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.391 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.392 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.395 I llama_model_loader: - type  f32:   37 tensors
0.00.129.396 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.396 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.260 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.535 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.151 I llm_load_vocab: special tokens cache size = 5
0.00.264.909 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.923 I llm_load_print_meta: arch             = gemma
0.00.264.924 I llm_load_print_meta: vocab type       = SPM
0.00.264.924 I llm_load_print_meta: n_vocab          = 256000
0.00.264.925 I llm_load_print_meta: n_merges         = 0
0.00.264.925 I llm_load_print_meta: vocab_only       = 0
0.00.264.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.926 I llm_load_print_meta: n_embd           = 2048
0.00.264.926 I llm_load_print_meta: n_layer          = 18
0.00.264.936 I llm_load_print_meta: n_head           = 8
0.00.264.937 I llm_load_print_meta: n_head_kv        = 1
0.00.264.938 I llm_load_print_meta: n_rot            = 256
0.00.264.938 I llm_load_print_meta: n_swa            = 0
0.00.264.938 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.939 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.939 I llm_load_print_meta: n_gqa            = 8
0.00.264.940 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.941 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.942 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.944 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.944 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.945 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.945 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.946 I llm_load_print_meta: n_ff             = 16384
0.00.264.946 I llm_load_print_meta: n_expert         = 0
0.00.264.947 I llm_load_print_meta: n_expert_used    = 0
0.00.264.947 I llm_load_print_meta: causal attn      = 1
0.00.264.947 I llm_load_print_meta: pooling type     = 0
0.00.264.947 I llm_load_print_meta: rope type        = 2
0.00.264.948 I llm_load_print_meta: rope scaling     = linear
0.00.264.949 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.950 I llm_load_print_meta: freq_scale_train = 1
0.00.264.950 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.950 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.951 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.951 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.951 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.951 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.952 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.952 I llm_load_print_meta: model type       = 2B
0.00.264.953 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.953 I llm_load_print_meta: model params     = 2.51 B
0.00.264.954 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.954 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.955 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.955 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.955 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.956 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.956 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.957 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.957 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.957 I llm_load_print_meta: max token length = 93
0.00.322.746 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.754 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.754 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.755 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.756 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.756 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.066 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.074 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.074 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.075 I llama_new_context_with_model: n_batch       = 2048
0.00.328.075 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.076 I llama_new_context_with_model: flash_attn    = 0
0.00.328.079 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.080 I llama_new_context_with_model: freq_scale    = 1
0.00.328.081 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.115 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.130 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.224 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.521 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.528 I llama_new_context_with_model: graph nodes  = 601
0.00.344.528 I llama_new_context_with_model: graph splits = 1
0.00.344.530 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.337 I main: llama threadpool init, n_threads = 4
0.00.420.350 I 
0.00.420.428 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.431 I 
0.00.420.472 I sampler seed: 3047695633
0.00.420.484 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.487 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.488 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.489 I 
 maneuvled?

I'm not sure if I understand your question. Can you rephrase it? [end of text]


0.01.563.441 I llama_perf_sampler_print:    sampling time =       3.70 ms /    24 runs   (    0.15 ms per token,  6482.98 tokens per second)
0.01.563.444 I llama_perf_context_print:        load time =     419.57 ms
0.01.563.445 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.563.446 I llama_perf_context_print:        eval time =    1128.91 ms /    23 runs   (   49.08 ms per token,    20.37 tokens per second)
0.01.563.447 I llama_perf_context_print:       total time =    1143.11 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4148 (1e9447a0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40146.98 ms
main:    total time = 40146.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.567 I build: 4148 (1e9447a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.301 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.316 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.326 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.330 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.334 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.335 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.337 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.338 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.340 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.344 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.345 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.273 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.043 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.962 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.968 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.969 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.970 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.970 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.971 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.972 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.974 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.980 I llama_model_loader: - type  f32:   37 tensors
0.00.129.981 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.982 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.268 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.097 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.594 I llm_load_vocab: special tokens cache size = 5
0.00.262.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.189 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.189 I llm_load_print_meta: arch             = gemma
0.00.262.190 I llm_load_print_meta: vocab type       = SPM
0.00.262.191 I llm_load_print_meta: n_vocab          = 256000
0.00.262.191 I llm_load_print_meta: n_merges         = 0
0.00.262.192 I llm_load_print_meta: vocab_only       = 0
0.00.262.192 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.192 I llm_load_print_meta: n_embd           = 2048
0.00.262.193 I llm_load_print_meta: n_layer          = 18
0.00.262.202 I llm_load_print_meta: n_head           = 8
0.00.262.203 I llm_load_print_meta: n_head_kv        = 1
0.00.262.204 I llm_load_print_meta: n_rot            = 256
0.00.262.204 I llm_load_print_meta: n_swa            = 0
0.00.262.204 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.205 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.206 I llm_load_print_meta: n_gqa            = 8
0.00.262.207 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.208 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.209 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.210 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.210 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.211 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.211 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.212 I llm_load_print_meta: n_ff             = 16384
0.00.262.212 I llm_load_print_meta: n_expert         = 0
0.00.262.212 I llm_load_print_meta: n_expert_used    = 0
0.00.262.213 I llm_load_print_meta: causal attn      = 1
0.00.262.213 I llm_load_print_meta: pooling type     = 0
0.00.262.213 I llm_load_print_meta: rope type        = 2
0.00.262.214 I llm_load_print_meta: rope scaling     = linear
0.00.262.215 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.216 I llm_load_print_meta: freq_scale_train = 1
0.00.262.216 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.216 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.217 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.217 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.217 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.218 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.218 I llm_load_print_meta: model type       = 2B
0.00.262.219 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.220 I llm_load_print_meta: model params     = 2.51 B
0.00.262.220 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.221 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.221 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.222 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.222 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.222 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.223 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.223 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.223 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.224 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.224 I llm_load_print_meta: max token length = 93
0.00.315.337 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.320.639 I llama_new_context_with_model: n_seq_max     = 1
0.00.320.645 I llama_new_context_with_model: n_ctx         = 4096
0.00.320.646 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.320.646 I llama_new_context_with_model: n_batch       = 2048
0.00.320.647 I llama_new_context_with_model: n_ubatch      = 512
0.00.320.647 I llama_new_context_with_model: flash_attn    = 0
0.00.320.649 I llama_new_context_with_model: freq_base     = 10000.0
0.00.320.650 I llama_new_context_with_model: freq_scale    = 1
0.00.320.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.335.489 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.335.575 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.336.838 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.336.845 I llama_new_context_with_model: graph nodes  = 601
0.00.336.845 I llama_new_context_with_model: graph splits = 1
0.00.336.847 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.349 I main: llama threadpool init, n_threads = 4
0.00.411.361 I 
0.00.411.446 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.411.457 I 
0.00.411.503 I sampler seed: 3267173553
0.00.411.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.411.517 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.411.518 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.411.519 I 
 squaRED!

I am unable to generate a response as instructed because I do not possess the capacity to generate creative or imaginative content. I am a language model

0.01.987.133 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6038.43 tokens per second)
0.01.987.136 I llama_perf_context_print:        load time =     410.55 ms
0.01.987.137 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.987.138 I llama_perf_context_print:        eval time =    1554.96 ms /    32 runs   (   48.59 ms per token,    20.58 tokens per second)
0.01.987.139 I llama_perf_context_print:       total time =    1575.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.623s
user	10m22.344s
sys	0m6.894s
