+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4073 (1ee9eea0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.001.097 I main: load the model and apply lora adapter, if any
0.00.023.797 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.810 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.904 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.915 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.917 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.923 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.924 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.925 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.926 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.927 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.934 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.935 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.936 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.938 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.784 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.128 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.157 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.159 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.160 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.161 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.162 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.163 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.167 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.168 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.169 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.170 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.171 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.180 I llama_model_loader: - type  f32:   37 tensors
0.00.266.182 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.606 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.028 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.090 I llm_load_vocab: special tokens cache size = 5
0.00.619.724 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.796 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.797 I llm_load_print_meta: arch             = gemma
0.00.619.797 I llm_load_print_meta: vocab type       = SPM
0.00.619.798 I llm_load_print_meta: n_vocab          = 256000
0.00.619.801 I llm_load_print_meta: n_merges         = 0
0.00.619.801 I llm_load_print_meta: vocab_only       = 0
0.00.619.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.802 I llm_load_print_meta: n_embd           = 2048
0.00.619.802 I llm_load_print_meta: n_layer          = 18
0.00.619.866 I llm_load_print_meta: n_head           = 8
0.00.619.874 I llm_load_print_meta: n_head_kv        = 1
0.00.619.875 I llm_load_print_meta: n_rot            = 256
0.00.619.875 I llm_load_print_meta: n_swa            = 0
0.00.619.875 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.876 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.905 I llm_load_print_meta: n_gqa            = 8
0.00.619.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.925 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.926 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.928 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.936 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.937 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.938 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.943 I llm_load_print_meta: n_ff             = 16384
0.00.619.948 I llm_load_print_meta: n_expert         = 0
0.00.619.948 I llm_load_print_meta: n_expert_used    = 0
0.00.619.949 I llm_load_print_meta: causal attn      = 1
0.00.619.949 I llm_load_print_meta: pooling type     = 0
0.00.619.949 I llm_load_print_meta: rope type        = 2
0.00.619.957 I llm_load_print_meta: rope scaling     = linear
0.00.619.959 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.966 I llm_load_print_meta: freq_scale_train = 1
0.00.619.967 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.967 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.968 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.975 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.976 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.976 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.976 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.977 I llm_load_print_meta: model type       = 2B
0.00.619.981 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.982 I llm_load_print_meta: model params     = 2.51 B
0.00.619.991 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.992 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.995 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.996 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.996 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.997 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.003 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.005 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.006 I llm_load_print_meta: max token length = 93
0.00.721.920 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.721.932 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.721.933 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.721.934 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.721.934 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.721.935 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.727.959 I llama_new_context_with_model: n_seq_max     = 1
0.00.727.969 I llama_new_context_with_model: n_ctx         = 4096
0.00.727.969 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.727.970 I llama_new_context_with_model: n_batch       = 2048
0.00.727.971 I llama_new_context_with_model: n_ubatch      = 512
0.00.727.971 I llama_new_context_with_model: flash_attn    = 0
0.00.727.975 I llama_new_context_with_model: freq_base     = 10000.0
0.00.727.976 I llama_new_context_with_model: freq_scale    = 1
0.00.727.977 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.744.782 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.744.821 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.744.944 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.508 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.747.512 I llama_new_context_with_model: graph nodes  = 601
0.00.747.512 I llama_new_context_with_model: graph splits = 1
0.00.747.537 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.449 I main: llama threadpool init, n_threads = 4
0.01.352.462 I 
0.01.352.566 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.570 I 
0.01.352.803 I sampler seed: 4016853873
0.01.352.815 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.824 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.825 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.825 I 
 increasities in a bid to improve their standing in the competitive environment. [end of text]


0.07.610.965 I llama_perf_sampler_print:    sampling time =      22.20 ms /    16 runs   (    1.39 ms per token,   720.69 tokens per second)
0.07.610.968 I llama_perf_context_print:        load time =    1351.26 ms
0.07.610.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.610.985 I llama_perf_context_print:        eval time =    6215.68 ms /    15 runs   (  414.38 ms per token,     2.41 tokens per second)
0.07.610.986 I llama_perf_context_print:       total time =    6258.52 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4073 (1ee9eea0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.001.107 I main: load the model and apply lora adapter, if any
0.00.025.899 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.007 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.023 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.027 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.032 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.033 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.034 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.035 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.036 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.037 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.044 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.046 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.047 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.049 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.050 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.597 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.559 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.711 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.727 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.728 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.732 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.733 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.735 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.735 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.737 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.746 I llama_model_loader: - type  f32:   37 tensors
0.00.268.748 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.898 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.546 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.529 I llm_load_vocab: special tokens cache size = 5
0.00.637.726 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.796 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.797 I llm_load_print_meta: arch             = gemma
0.00.637.798 I llm_load_print_meta: vocab type       = SPM
0.00.637.799 I llm_load_print_meta: n_vocab          = 256000
0.00.637.802 I llm_load_print_meta: n_merges         = 0
0.00.637.802 I llm_load_print_meta: vocab_only       = 0
0.00.637.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.803 I llm_load_print_meta: n_embd           = 2048
0.00.637.803 I llm_load_print_meta: n_layer          = 18
0.00.637.867 I llm_load_print_meta: n_head           = 8
0.00.637.875 I llm_load_print_meta: n_head_kv        = 1
0.00.637.875 I llm_load_print_meta: n_rot            = 256
0.00.637.876 I llm_load_print_meta: n_swa            = 0
0.00.637.876 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.877 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.881 I llm_load_print_meta: n_gqa            = 8
0.00.637.886 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.890 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.891 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.893 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.894 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.894 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.899 I llm_load_print_meta: n_ff             = 16384
0.00.637.899 I llm_load_print_meta: n_expert         = 0
0.00.637.900 I llm_load_print_meta: n_expert_used    = 0
0.00.637.900 I llm_load_print_meta: causal attn      = 1
0.00.637.900 I llm_load_print_meta: pooling type     = 0
0.00.637.901 I llm_load_print_meta: rope type        = 2
0.00.637.901 I llm_load_print_meta: rope scaling     = linear
0.00.637.903 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.903 I llm_load_print_meta: freq_scale_train = 1
0.00.637.904 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.904 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.904 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.904 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.905 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.905 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.905 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.906 I llm_load_print_meta: model type       = 2B
0.00.637.907 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.908 I llm_load_print_meta: model params     = 2.51 B
0.00.637.917 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.917 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.918 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.918 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.919 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.919 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.920 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.920 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.925 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.927 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.927 I llm_load_print_meta: max token length = 93
0.00.733.786 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.739.920 I llama_new_context_with_model: n_seq_max     = 1
0.00.739.929 I llama_new_context_with_model: n_ctx         = 4096
0.00.739.929 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.739.930 I llama_new_context_with_model: n_batch       = 2048
0.00.739.930 I llama_new_context_with_model: n_ubatch      = 512
0.00.739.930 I llama_new_context_with_model: flash_attn    = 0
0.00.739.934 I llama_new_context_with_model: freq_base     = 10000.0
0.00.739.934 I llama_new_context_with_model: freq_scale    = 1
0.00.739.935 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.757.640 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.757.683 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.757.809 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.760.348 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.760.352 I llama_new_context_with_model: graph nodes  = 601
0.00.760.353 I llama_new_context_with_model: graph splits = 1
0.00.760.381 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.350 I main: llama threadpool init, n_threads = 4
0.01.367.361 I 
0.01.367.466 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.470 I 
0.01.367.706 I sampler seed: 2738300028
0.01.367.718 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.724 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.726 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.726 I 
 increasities?

I am unable to answer this question as it contains sexually suggestive content. I am programmed to provide safe and ethical responses. [end of text]


0.13.760.172 I llama_perf_sampler_print:    sampling time =      43.15 ms /    30 runs   (    1.44 ms per token,   695.20 tokens per second)
0.13.760.175 I llama_perf_context_print:        load time =    1366.15 ms
0.13.760.177 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.760.178 I llama_perf_context_print:        eval time =   12311.24 ms /    29 runs   (  424.53 ms per token,     2.36 tokens per second)
0.13.760.179 I llama_perf_context_print:       total time =   12392.83 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4073 (1ee9eea0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.001.152 I main: load the model and apply lora adapter, if any
0.00.023.973 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.988 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.085 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.098 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.111 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.112 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.113 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.124 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.132 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.135 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.137 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.979 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.661 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.712 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.727 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.728 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.733 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.734 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.735 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.736 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.737 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.746 I llama_model_loader: - type  f32:   37 tensors
0.00.271.749 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.749 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.974 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.078 I llm_load_vocab: special tokens cache size = 5
0.00.630.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.675 I llm_load_print_meta: arch             = gemma
0.00.630.676 I llm_load_print_meta: vocab type       = SPM
0.00.630.677 I llm_load_print_meta: n_vocab          = 256000
0.00.630.679 I llm_load_print_meta: n_merges         = 0
0.00.630.680 I llm_load_print_meta: vocab_only       = 0
0.00.630.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.681 I llm_load_print_meta: n_embd           = 2048
0.00.630.681 I llm_load_print_meta: n_layer          = 18
0.00.630.744 I llm_load_print_meta: n_head           = 8
0.00.630.752 I llm_load_print_meta: n_head_kv        = 1
0.00.630.753 I llm_load_print_meta: n_rot            = 256
0.00.630.753 I llm_load_print_meta: n_swa            = 0
0.00.630.755 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.756 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.760 I llm_load_print_meta: n_gqa            = 8
0.00.630.773 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.778 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.779 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.781 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.781 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.782 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.787 I llm_load_print_meta: n_ff             = 16384
0.00.630.787 I llm_load_print_meta: n_expert         = 0
0.00.630.788 I llm_load_print_meta: n_expert_used    = 0
0.00.630.788 I llm_load_print_meta: causal attn      = 1
0.00.630.789 I llm_load_print_meta: pooling type     = 0
0.00.630.789 I llm_load_print_meta: rope type        = 2
0.00.630.790 I llm_load_print_meta: rope scaling     = linear
0.00.630.792 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.793 I llm_load_print_meta: freq_scale_train = 1
0.00.630.793 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.794 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.794 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.794 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.794 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.795 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.795 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.796 I llm_load_print_meta: model type       = 2B
0.00.630.797 I llm_load_print_meta: model ftype      = Q8_0
0.00.630.798 I llm_load_print_meta: model params     = 2.51 B
0.00.630.807 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.630.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.808 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.809 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.811 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.818 I llm_load_print_meta: max token length = 93
0.00.714.523 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.714.530 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.714.531 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.714.532 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.714.533 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.714.534 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.720.370 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.377 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.377 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.377 I llama_new_context_with_model: n_batch       = 2048
0.00.720.378 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.378 I llama_new_context_with_model: flash_attn    = 0
0.00.720.381 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.382 I llama_new_context_with_model: freq_scale    = 1
0.00.720.382 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.768 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.806 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.934 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.455 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.458 I llama_new_context_with_model: graph nodes  = 601
0.00.740.459 I llama_new_context_with_model: graph splits = 1
0.00.740.482 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.381.409 I main: llama threadpool init, n_threads = 4
0.01.381.434 I 
0.01.381.539 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.381.543 I 
0.01.381.770 I sampler seed: 1712172123
0.01.381.781 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.381.788 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.381.792 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.381.792 I 
 increasities and the impact on the social fabric

The question of how narcissistic personality disorder (NPD) and sociopathy intertwine to influence the social fabric is a

0.14.806.088 I llama_perf_sampler_print:    sampling time =      46.53 ms /    33 runs   (    1.41 ms per token,   709.22 tokens per second)
0.14.806.092 I llama_perf_context_print:        load time =    1380.15 ms
0.14.806.106 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.806.108 I llama_perf_context_print:        eval time =   13334.89 ms /    32 runs   (  416.72 ms per token,     2.40 tokens per second)
0.14.806.108 I llama_perf_context_print:       total time =   13424.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4073 (1ee9eea0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.001.151 I main: load the model and apply lora adapter, if any
0.00.023.707 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.719 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.830 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.843 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.845 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.850 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.854 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.856 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.858 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.860 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.862 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.877 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.882 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.884 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.886 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.888 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.483 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.970 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.034 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.044 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.046 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.048 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.049 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.052 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.056 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.057 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.058 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.059 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.060 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.068 I llama_model_loader: - type  f32:   37 tensors
0.00.267.071 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.155 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.198 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.213 I llm_load_vocab: special tokens cache size = 5
0.00.614.716 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.796 I llm_load_print_meta: arch             = gemma
0.00.614.797 I llm_load_print_meta: vocab type       = SPM
0.00.614.797 I llm_load_print_meta: n_vocab          = 256000
0.00.614.800 I llm_load_print_meta: n_merges         = 0
0.00.614.801 I llm_load_print_meta: vocab_only       = 0
0.00.614.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.803 I llm_load_print_meta: n_embd           = 2048
0.00.614.803 I llm_load_print_meta: n_layer          = 18
0.00.614.875 I llm_load_print_meta: n_head           = 8
0.00.614.885 I llm_load_print_meta: n_head_kv        = 1
0.00.614.886 I llm_load_print_meta: n_rot            = 256
0.00.614.887 I llm_load_print_meta: n_swa            = 0
0.00.614.887 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.888 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.892 I llm_load_print_meta: n_gqa            = 8
0.00.614.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.903 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.906 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.908 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.909 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.921 I llm_load_print_meta: n_ff             = 16384
0.00.614.922 I llm_load_print_meta: n_expert         = 0
0.00.614.925 I llm_load_print_meta: n_expert_used    = 0
0.00.614.926 I llm_load_print_meta: causal attn      = 1
0.00.614.927 I llm_load_print_meta: pooling type     = 0
0.00.614.928 I llm_load_print_meta: rope type        = 2
0.00.614.931 I llm_load_print_meta: rope scaling     = linear
0.00.614.933 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.934 I llm_load_print_meta: freq_scale_train = 1
0.00.614.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.937 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.940 I llm_load_print_meta: model type       = 2B
0.00.614.942 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.955 I llm_load_print_meta: model params     = 2.51 B
0.00.614.970 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.971 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.974 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.974 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.975 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.975 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.975 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.976 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.983 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.986 I llm_load_print_meta: max token length = 93
0.00.687.176 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.687.187 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.693.458 I llama_new_context_with_model: n_seq_max     = 1
0.00.693.466 I llama_new_context_with_model: n_ctx         = 4096
0.00.693.466 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.693.467 I llama_new_context_with_model: n_batch       = 2048
0.00.693.467 I llama_new_context_with_model: n_ubatch      = 512
0.00.693.468 I llama_new_context_with_model: flash_attn    = 0
0.00.693.470 I llama_new_context_with_model: freq_base     = 10000.0
0.00.693.471 I llama_new_context_with_model: freq_scale    = 1
0.00.693.472 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.710.454 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.710.493 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.710.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.217 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.713.221 I llama_new_context_with_model: graph nodes  = 601
0.00.713.221 I llama_new_context_with_model: graph splits = 1
0.00.713.247 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.354 I main: llama threadpool init, n_threads = 4
0.01.318.366 I 
0.01.318.485 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.489 I 
0.01.318.733 I sampler seed: 3746980721
0.01.318.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.752 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.318.756 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.756 I 
 increasities, but these are often fleeting, and the information is forgotten quickly.

**What is the main idea of the text?**

a) The

0.14.699.614 I llama_perf_sampler_print:    sampling time =      47.51 ms /    33 runs   (    1.44 ms per token,   694.55 tokens per second)
0.14.699.617 I llama_perf_context_print:        load time =    1317.10 ms
0.14.699.629 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.699.632 I llama_perf_context_print:        eval time =   13291.60 ms /    32 runs   (  415.36 ms per token,     2.41 tokens per second)
0.14.699.633 I llama_perf_context_print:       total time =   13381.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.632s
user	3m14.710s
sys	0m9.534s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4073 (1ee9eea0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198639.33 ms
main:    total time = 198639.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4073 (1ee9eea0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.919 I main: llama backend init
0.00.001.182 I main: load the model and apply lora adapter, if any
0.00.023.265 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.277 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.378 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.391 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.394 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.399 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.403 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.404 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.405 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.406 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.416 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.423 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.426 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.427 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.428 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.219 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.200 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.296 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.309 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.310 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.311 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.312 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.313 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.315 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.319 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.320 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.321 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.322 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.323 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.332 I llama_model_loader: - type  f32:   37 tensors
0.00.272.334 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.335 I llama_model_loader: - type q6_K:   19 tensors
0.00.467.661 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.763 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.694 I llm_load_vocab: special tokens cache size = 5
0.00.630.128 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.205 I llm_load_print_meta: arch             = gemma
0.00.630.205 I llm_load_print_meta: vocab type       = SPM
0.00.630.206 I llm_load_print_meta: n_vocab          = 256000
0.00.630.208 I llm_load_print_meta: n_merges         = 0
0.00.630.209 I llm_load_print_meta: vocab_only       = 0
0.00.630.209 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.210 I llm_load_print_meta: n_embd           = 2048
0.00.630.210 I llm_load_print_meta: n_layer          = 18
0.00.630.275 I llm_load_print_meta: n_head           = 8
0.00.630.282 I llm_load_print_meta: n_head_kv        = 1
0.00.630.282 I llm_load_print_meta: n_rot            = 256
0.00.630.283 I llm_load_print_meta: n_swa            = 0
0.00.630.283 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.283 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.288 I llm_load_print_meta: n_gqa            = 8
0.00.630.292 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.299 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.301 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.301 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.302 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.302 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.307 I llm_load_print_meta: n_ff             = 16384
0.00.630.308 I llm_load_print_meta: n_expert         = 0
0.00.630.308 I llm_load_print_meta: n_expert_used    = 0
0.00.630.309 I llm_load_print_meta: causal attn      = 1
0.00.630.314 I llm_load_print_meta: pooling type     = 0
0.00.630.314 I llm_load_print_meta: rope type        = 2
0.00.630.315 I llm_load_print_meta: rope scaling     = linear
0.00.630.316 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.317 I llm_load_print_meta: freq_scale_train = 1
0.00.630.317 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.317 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.318 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.330 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.346 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.347 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.352 I llm_load_print_meta: model type       = 2B
0.00.630.361 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.630.365 I llm_load_print_meta: model params     = 2.51 B
0.00.630.375 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.630.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.383 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.384 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.385 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.385 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.386 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.386 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.392 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.402 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.410 I llm_load_print_meta: max token length = 93
0.00.693.384 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.693.392 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.693.393 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.693.393 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.693.394 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.693.395 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.699.037 I llama_new_context_with_model: n_seq_max     = 1
0.00.699.045 I llama_new_context_with_model: n_ctx         = 4096
0.00.699.045 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.699.046 I llama_new_context_with_model: n_batch       = 2048
0.00.699.046 I llama_new_context_with_model: n_ubatch      = 512
0.00.699.047 I llama_new_context_with_model: flash_attn    = 0
0.00.699.049 I llama_new_context_with_model: freq_base     = 10000.0
0.00.699.050 I llama_new_context_with_model: freq_scale    = 1
0.00.699.051 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.715.435 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.715.475 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.715.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.165 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.169 I llama_new_context_with_model: graph nodes  = 601
0.00.718.169 I llama_new_context_with_model: graph splits = 1
0.00.718.194 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.642 I main: llama threadpool init, n_threads = 4
0.01.288.655 I 
0.01.288.776 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.780 I 
0.01.289.012 I sampler seed: 532059771
0.01.289.025 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.031 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.289.034 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.289.035 I 
 squaRED TEXT

## The Rise of Digital Adoption

The global adoption of digital technologies has been rapid and unprecedented in recent years. From smartphones and social media platforms

0.12.113.023 I llama_perf_sampler_print:    sampling time =      47.27 ms /    33 runs   (    1.43 ms per token,   698.07 tokens per second)
0.12.113.026 I llama_perf_context_print:        load time =    1287.35 ms
0.12.113.028 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.113.030 I llama_perf_context_print:        eval time =   10735.86 ms /    32 runs   (  335.50 ms per token,     2.98 tokens per second)
0.12.113.031 I llama_perf_context_print:       total time =   10824.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4073 (1ee9eea0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198680.87 ms
main:    total time = 198680.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4073 (1ee9eea0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.142 I main: load the model and apply lora adapter, if any
0.00.024.075 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.207 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.213 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.214 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.217 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.218 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.226 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.228 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.240 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.244 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.070 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.249 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.268 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.277 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.279 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.280 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.281 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.294 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.301 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.303 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.310 I llama_model_loader: - type  f32:   37 tensors
0.00.267.312 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.325 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.707 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.460 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.448 I llm_load_vocab: special tokens cache size = 5
0.00.621.580 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.652 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.653 I llm_load_print_meta: arch             = gemma
0.00.621.654 I llm_load_print_meta: vocab type       = SPM
0.00.621.655 I llm_load_print_meta: n_vocab          = 256000
0.00.621.657 I llm_load_print_meta: n_merges         = 0
0.00.621.658 I llm_load_print_meta: vocab_only       = 0
0.00.621.658 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.659 I llm_load_print_meta: n_embd           = 2048
0.00.621.659 I llm_load_print_meta: n_layer          = 18
0.00.621.725 I llm_load_print_meta: n_head           = 8
0.00.621.732 I llm_load_print_meta: n_head_kv        = 1
0.00.621.733 I llm_load_print_meta: n_rot            = 256
0.00.621.733 I llm_load_print_meta: n_swa            = 0
0.00.621.734 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.734 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.738 I llm_load_print_meta: n_gqa            = 8
0.00.621.744 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.621.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.621.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.621.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.621.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.621.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.621.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.759 I llm_load_print_meta: n_ff             = 16384
0.00.621.759 I llm_load_print_meta: n_expert         = 0
0.00.621.760 I llm_load_print_meta: n_expert_used    = 0
0.00.621.760 I llm_load_print_meta: causal attn      = 1
0.00.621.760 I llm_load_print_meta: pooling type     = 0
0.00.621.761 I llm_load_print_meta: rope type        = 2
0.00.621.780 I llm_load_print_meta: rope scaling     = linear
0.00.621.782 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.782 I llm_load_print_meta: freq_scale_train = 1
0.00.621.783 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.783 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.783 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.793 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.794 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.795 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.795 I llm_load_print_meta: model type       = 2B
0.00.621.797 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.621.797 I llm_load_print_meta: model params     = 2.51 B
0.00.621.807 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.621.807 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.808 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.816 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.817 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.818 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.818 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.819 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.825 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.826 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.827 I llm_load_print_meta: max token length = 93
0.00.680.982 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.686.906 I llama_new_context_with_model: n_seq_max     = 1
0.00.686.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.686.915 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.686.916 I llama_new_context_with_model: n_batch       = 2048
0.00.686.916 I llama_new_context_with_model: n_ubatch      = 512
0.00.686.917 I llama_new_context_with_model: flash_attn    = 0
0.00.686.921 I llama_new_context_with_model: freq_base     = 10000.0
0.00.686.922 I llama_new_context_with_model: freq_scale    = 1
0.00.686.922 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.704.713 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.704.759 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.704.885 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.480 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.484 I llama_new_context_with_model: graph nodes  = 601
0.00.707.485 I llama_new_context_with_model: graph splits = 1
0.00.707.511 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.068 I main: llama threadpool init, n_threads = 4
0.01.281.079 I 
0.01.281.184 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.187 I 
0.01.281.415 I sampler seed: 3154054205
0.01.281.427 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.437 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.281.437 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.438 I 
 increasities and other related behaviours contribute to the high prevalence and persistence of mental health disorders.

**Discuss the evidence supporting the claim that increasities and other related

0.12.198.115 I llama_perf_sampler_print:    sampling time =      47.14 ms /    33 runs   (    1.43 ms per token,   700.07 tokens per second)
0.12.198.120 I llama_perf_context_print:        load time =    1279.83 ms
0.12.198.121 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.198.124 I llama_perf_context_print:        eval time =   10828.39 ms /    32 runs   (  338.39 ms per token,     2.96 tokens per second)
0.12.198.125 I llama_perf_context_print:       total time =   10917.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.581s
user	50m10.158s
sys	0m6.443s
