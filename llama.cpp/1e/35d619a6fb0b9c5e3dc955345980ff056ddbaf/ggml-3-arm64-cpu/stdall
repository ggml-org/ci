Requirement already satisfied: numpy~=1.24.4 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 1)) (1.24.4)
Requirement already satisfied: sentencepiece~=0.1.98 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 2)) (0.1.99)
Requirement already satisfied: transformers<5.0.0,>=4.35.2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (4.38.1)
Requirement already satisfied: gguf>=0.1.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 4)) (0.7.0)
Requirement already satisfied: protobuf<5.0.0,>=4.21.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 5)) (4.25.3)
Requirement already satisfied: torch~=2.1.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.1.2)
Requirement already satisfied: einops~=0.7.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 3)) (0.7.0)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (6.0.1)
Requirement already satisfied: tokenizers<0.19,>=0.14 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (0.15.2)
Requirement already satisfied: safetensors>=0.4.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (0.4.2)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (4.66.2)
Requirement already satisfied: requests in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2.31.0)
Requirement already satisfied: filelock in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (3.13.1)
Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (0.20.3)
Requirement already satisfied: regex!=2019.12.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2023.12.25)
Requirement already satisfied: packaging>=20.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (23.2)
Requirement already satisfied: typing-extensions in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (4.9.0)
Requirement already satisfied: sympy in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (1.12)
Requirement already satisfied: fsspec in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2024.2.0)
Requirement already satisfied: jinja2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (3.1.3)
Requirement already satisfied: networkx in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (3.2.1)
Requirement already satisfied: MarkupSafe>=2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from jinja2->torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (2.1.5)
Requirement already satisfied: certifi>=2017.4.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2024.2.2)
Requirement already satisfied: urllib3<3,>=1.21.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (2.2.1)
Requirement already satisfied: idna<4,>=2.5 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (3.6)
Requirement already satisfied: charset-normalizer<4,>=2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.35.2->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert.txt (line 3)) (3.3.2)
Requirement already satisfied: mpmath>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from sympy->torch~=2.1.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert-hf-to-gguf.txt (line 2)) (1.3.0)
Obtaining file:///home/ggml/work/llama.cpp/gguf-py
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.7.0) (1.24.4)
Building wheels for collected packages: gguf
  Building editable for gguf (pyproject.toml): started
  Building editable for gguf (pyproject.toml): finished with status 'done'
  Created wheel for gguf: filename=gguf-0.7.0-py3-none-any.whl size=3229 sha256=e77d3489e0beea138863799a05abb421092af60b67ffc67b376508ee3f0720bf
  Stored in directory: /tmp/pip-ephem-wheel-cache-jca5d9l7/wheels/a3/4c/52/c5934ad001d1a70ca5434f11ddc622cad9c0a484e9bf6feda3
Successfully built gguf
Installing collected packages: gguf
  Attempting uninstall: gguf
    Found existing installation: gguf 0.7.0
    Uninstalling gguf-0.7.0:
      Successfully uninstalled gguf-0.7.0
Successfully installed gguf-0.7.0
+ gg_run_ctest_debug
+ tee /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_debug.log
+ cd /home/ggml/work/llama.cpp
+ rm -rf build-ci-debug
+ mkdir build-ci-debug
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_debug-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Debug -DLLAMA_FATAL_WARNINGS=ON ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-debug

real	0m0.770s
user	0m0.400s
sys	0m0.374s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_debug-make.log
+ make -j
[  0%] Generating build details from Git
[  1%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  2%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
[  3%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
-- Found Git: /usr/bin/git (found version "2.34.1") 
[  4%] Built target ggml
[  5%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  5%] Linking C static library libggml_static.a
[  6%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  7%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target build_info
[  9%] Built target ggml_static
[  9%] Built target gguf
[  9%] Built target llama
[ 10%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 10%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 12%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 13%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 13%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 13%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 14%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 16%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 17%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 19%] Linking CXX executable ../bin/test-c
[ 20%] Linking CXX executable ../../bin/quantize
[ 21%] Linking CXX executable ../../bin/benchmark
[ 22%] Linking CXX executable ../../bin/quantize-stats
[ 22%] Built target llava
[ 23%] Linking CXX static library libcommon.a
[ 23%] Built target test-c
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target benchmark
[ 23%] Built target llava_static
[ 23%] Built target common
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 33%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 34%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 35%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 37%] Linking CXX executable ../bin/test-quantize-fns
[ 37%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 38%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 39%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 40%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 41%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 41%] Linking CXX executable ../bin/test-quantize-perf
[ 42%] Linking CXX executable ../bin/test-chat-template
[ 43%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 44%] Linking CXX executable ../bin/test-sampling
[ 45%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 46%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 46%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 47%] Linking CXX executable ../bin/test-grammar-parser
[ 48%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 49%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 51%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 54%] Linking CXX executable ../bin/test-llama-grammar
[ 55%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 57%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 57%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 57%] Linking CXX executable ../bin/test-grad0
[ 57%] Linking CXX executable ../../bin/batched-bench
[ 58%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 59%] Linking CXX executable ../../bin/baby-llama
[ 60%] Linking CXX executable ../bin/test-rope
[ 60%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 61%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 62%] Linking CXX executable ../bin/test-backend-ops
[ 63%] Linking CXX executable ../bin/test-autorelease
[ 64%] Linking CXX executable ../bin/test-model-load-cancel
[ 65%] Linking CXX executable ../../bin/batched
[ 66%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 67%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 69%] Linking CXX executable ../../bin/embedding
[ 70%] Linking CXX executable ../../bin/beam-search
[ 68%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 70%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 71%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 72%] Linking CXX executable ../../bin/infill
[ 72%] Built target quantize
[ 72%] Linking CXX executable ../../bin/finetune
[ 73%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 74%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 75%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 76%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 77%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 78%] Linking CXX executable ../../bin/main
[ 78%] Built target test-quantize-fns
[ 79%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 80%] Linking CXX executable ../../bin/llava-cli
[ 81%] Linking CXX executable ../../bin/parallel
[ 81%] Built target test-rope
[ 81%] Linking CXX executable ../../bin/llama-bench
[ 81%] Built target test-quantize-perf
[ 81%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 81%] Built target test-grad0
[ 82%] Linking CXX executable ../../bin/simple
[ 83%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 83%] Linking CXX executable ../../bin/save-load-state
[ 84%] Linking CXX executable ../../bin/perplexity
[ 85%] Linking CXX executable ../../bin/speculative
[ 85%] Linking CXX executable ../../bin/tokenize
[ 85%] Linking CXX executable ../../bin/passkey
[ 86%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 86%] Built target quantize-stats
[ 87%] Linking CXX executable ../../bin/lookahead
[ 88%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 89%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 90%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 91%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 91%] Built target test-grammar-parser
[ 92%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 93%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 94%] Linking CXX executable ../../bin/lookup
[ 95%] Linking CXX executable ../../bin/q8dot
[ 96%] Linking CXX executable ../../bin/vdot
[ 97%] Linking CXX executable ../../bin/train-text-from-scratch
[ 98%] Linking CXX executable ../../bin/export-lora
[ 99%] Linking CXX executable ../../bin/imatrix
[100%] Linking CXX executable ../../bin/server
[100%] Built target test-backend-ops
[100%] Built target convert-llama2c-to-ggml
[100%] Built target export-lora
[100%] Built target q8dot
[100%] Built target vdot
[100%] Built target test-sampling
[100%] Built target test-chat-template
[100%] Built target test-tokenizer-0-falcon
[100%] Built target test-autorelease
[100%] Built target test-tokenizer-1-bpe
[100%] Built target test-model-load-cancel
[100%] Built target test-llama-grammar
[100%] Built target test-tokenizer-1-llama
[100%] Built target beam-search
[100%] Built target test-tokenizer-0-llama
[100%] Built target baby-llama
[100%] Built target batched-bench
[100%] Built target main
[100%] Built target lookup
[100%] Built target embedding
[100%] Built target batched
[100%] Built target passkey
[100%] Built target speculative
[100%] Built target finetune
[100%] Built target infill
[100%] Built target perplexity
[100%] Built target simple
[100%] Built target llama-bench
[100%] Built target save-load-state
[100%] Built target imatrix
[100%] Built target train-text-from-scratch
[100%] Built target tokenize
[100%] Built target parallel
[100%] Built target llava-cli
[100%] Built target lookahead
[100%] Built target server

real	0m3.903s
user	0m18.398s
sys	0m5.947s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_debug-ctest.log
+ ctest --output-on-failure -L main -E test-opt
Test project /home/ggml/work/llama.cpp/build-ci-debug
      Start  1: test-quantize-fns
 1/21 Test  #1: test-quantize-fns ...................   Passed   14.49 sec
      Start  2: test-quantize-perf
 2/21 Test  #2: test-quantize-perf ..................   Passed   10.84 sec
      Start  3: test-sampling
 3/21 Test  #3: test-sampling .......................   Passed    0.03 sec
      Start  4: test-chat-template
 4/21 Test  #4: test-chat-template ..................   Passed    0.00 sec
      Start  5: test-tokenizer-0-llama
 5/21 Test  #5: test-tokenizer-0-llama ..............   Passed    0.17 sec
      Start  6: test-tokenizer-0-falcon
 6/21 Test  #6: test-tokenizer-0-falcon .............   Passed    1.03 sec
      Start  7: test-tokenizer-1-llama
 7/21 Test  #7: test-tokenizer-1-llama ..............   Passed    2.70 sec
      Start  8: test-tokenizer-1-baichuan
 8/21 Test  #8: test-tokenizer-1-baichuan ...........   Passed    3.20 sec
      Start  9: test-tokenizer-1-falcon
 9/21 Test  #9: test-tokenizer-1-falcon .............   Passed    6.18 sec
      Start 10: test-tokenizer-1-aquila
10/21 Test #10: test-tokenizer-1-aquila .............   Passed    9.09 sec
      Start 11: test-tokenizer-1-mpt
11/21 Test #11: test-tokenizer-1-mpt ................   Passed    5.02 sec
      Start 12: test-tokenizer-1-stablelm-3b-4e1t
12/21 Test #12: test-tokenizer-1-stablelm-3b-4e1t ...   Passed    5.00 sec
      Start 13: test-tokenizer-1-gpt-neox
13/21 Test #13: test-tokenizer-1-gpt-neox ...........   Passed    5.04 sec
      Start 14: test-tokenizer-1-refact
14/21 Test #14: test-tokenizer-1-refact .............   Passed    4.77 sec
      Start 15: test-tokenizer-1-starcoder
15/21 Test #15: test-tokenizer-1-starcoder ..........   Passed    4.77 sec
      Start 16: test-tokenizer-1-gpt2
16/21 Test #16: test-tokenizer-1-gpt2 ...............   Passed    5.06 sec
      Start 17: test-grammar-parser
17/21 Test #17: test-grammar-parser .................   Passed    0.00 sec
      Start 18: test-llama-grammar
18/21 Test #18: test-llama-grammar ..................   Passed    0.00 sec
      Start 19: test-grad0
19/21 Test #19: test-grad0 ..........................   Passed    3.11 sec
      Start 20: test-backend-ops
20/21 Test #20: test-backend-ops ....................   Passed  128.64 sec
      Start 21: test-rope
21/21 Test #21: test-rope ...........................   Passed    0.08 sec

100% tests passed, 0 tests failed out of 21

Label Time Summary:
main    = 209.22 sec*proc (21 tests)

Total Test time (real) = 209.23 sec

real	3m29.244s
user	6m5.675s
sys	0m16.506s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_release
+ tee /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_release.log
+ cd /home/ggml/work/llama.cpp
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_release-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m0.768s
user	0m0.440s
sys	0m0.332s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_release-make.log
+ make -j
[  4%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  4%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
[  5%] Built target ggml
[  5%] Built target build_info
[  6%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  6%] Linking C static library libggml_static.a
[  7%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target ggml_static
[  9%] Built target llama
[  9%] Built target gguf
[ 11%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 11%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 11%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 13%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 13%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 14%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 16%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 17%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 19%] Linking CXX executable ../bin/test-c
[ 20%] Linking CXX executable ../../bin/benchmark
[ 21%] Linking CXX executable ../../bin/quantize-stats
[ 22%] Linking CXX executable ../../bin/quantize
[ 22%] Built target llava
[ 23%] Linking CXX static library libcommon.a
[ 23%] Built target test-c
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target common
[ 23%] Built target benchmark
[ 23%] Built target llava_static
[ 23%] Built target quantize-stats
[ 23%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 24%] Built target quantize
[ 25%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 32%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 33%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 34%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 35%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 36%] Linking CXX executable ../bin/test-quantize-perf
[ 37%] Linking CXX executable ../bin/test-chat-template
[ 38%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 40%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 39%] Linking CXX executable ../bin/test-quantize-fns
[ 42%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 41%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 43%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 43%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 43%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 43%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 45%] Linking CXX executable ../bin/test-sampling
[ 46%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 47%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 51%] Linking CXX executable ../bin/test-grammar-parser
[ 52%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 53%] Linking CXX executable ../bin/test-grad0
[ 54%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 55%] Linking CXX executable ../bin/test-backend-ops
[ 56%] Linking CXX executable ../bin/test-llama-grammar
[ 57%] Linking CXX executable ../bin/test-rope
[ 57%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 58%] Linking CXX executable ../bin/test-autorelease
[ 59%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 60%] Linking CXX executable ../bin/test-model-load-cancel
[ 61%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 62%] Linking CXX executable ../../bin/baby-llama
[ 63%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 63%] Built target test-quantize-perf
[ 64%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 65%] Linking CXX executable ../../bin/batched
[ 65%] Linking CXX executable ../../bin/batched-bench
[ 65%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 65%] Built target test-chat-template
[ 65%] Built target test-quantize-fns
[ 65%] Built target test-tokenizer-1-llama
[ 66%] Linking CXX executable ../../bin/beam-search
[ 66%] Built target test-tokenizer-0-llama
[ 66%] Built target test-tokenizer-1-bpe
[ 66%] Built target test-grad0
[ 66%] Built target test-grammar-parser
[ 67%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 67%] Built target test-sampling
[ 67%] Built target test-rope
[ 67%] Built target test-tokenizer-0-falcon
[ 68%] Linking CXX executable ../../bin/embedding
[ 68%] Built target test-llama-grammar
[ 68%] Built target test-backend-ops
[ 69%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 69%] Built target test-model-load-cancel
[ 69%] Built target test-autorelease
[ 69%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 69%] Linking CXX executable ../../bin/finetune
[ 70%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 71%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 72%] Linking CXX executable ../../bin/infill
[ 72%] Built target baby-llama
[ 72%] Built target beam-search
[ 72%] Built target batched
[ 72%] Built target convert-llama2c-to-ggml
[ 72%] Built target batched-bench
[ 72%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 72%] Linking CXX executable ../../bin/llama-bench
[ 73%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 74%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 75%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 75%] Built target embedding
[ 76%] Linking CXX executable ../../bin/llava-cli
[ 77%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 78%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 79%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 80%] Linking CXX executable ../../bin/main
[ 81%] Linking CXX executable ../../bin/perplexity
[ 81%] Linking CXX executable ../../bin/save-load-state
[ 82%] Linking CXX executable ../../bin/parallel
[ 83%] Linking CXX executable ../../bin/simple
[ 83%] Linking CXX executable ../../bin/passkey
[ 83%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 83%] Linking CXX executable ../../bin/tokenize
[ 84%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 85%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 86%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 87%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 88%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 89%] Linking CXX executable ../../bin/speculative
[ 90%] Linking CXX executable ../../bin/lookup
[ 90%] Built target finetune
[ 91%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 92%] Linking CXX executable ../../bin/imatrix
[ 93%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 94%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 95%] Linking CXX executable ../../bin/lookahead
[ 96%] Linking CXX executable ../../bin/server
[ 97%] Linking CXX executable ../../bin/train-text-from-scratch
[ 97%] Built target llama-bench
[ 98%] Linking CXX executable ../../bin/q8dot
[ 99%] Linking CXX executable ../../bin/vdot
[ 99%] Built target infill
[ 99%] Built target parallel
[100%] Linking CXX executable ../../bin/export-lora
[100%] Built target passkey
[100%] Built target simple
[100%] Built target perplexity
[100%] Built target llava-cli
[100%] Built target main
[100%] Built target tokenize
[100%] Built target save-load-state
[100%] Built target speculative
[100%] Built target lookup
[100%] Built target vdot
[100%] Built target q8dot
[100%] Built target imatrix
[100%] Built target lookahead
[100%] Built target train-text-from-scratch
[100%] Built target export-lora
[100%] Built target server

real	0m1.458s
user	0m5.197s
sys	0m4.654s
+ '[' -z ']'
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_release-ctest.log
+ ctest --output-on-failure -L main
Test project /home/ggml/work/llama.cpp/build-ci-release
      Start  1: test-quantize-fns
 1/21 Test  #1: test-quantize-fns ...................   Passed    8.25 sec
      Start  2: test-quantize-perf
 2/21 Test  #2: test-quantize-perf ..................   Passed    5.58 sec
      Start  3: test-sampling
 3/21 Test  #3: test-sampling .......................   Passed    0.01 sec
      Start  4: test-chat-template
 4/21 Test  #4: test-chat-template ..................   Passed    0.00 sec
      Start  5: test-tokenizer-0-llama
 5/21 Test  #5: test-tokenizer-0-llama ..............   Passed    0.05 sec
      Start  6: test-tokenizer-0-falcon
 6/21 Test  #6: test-tokenizer-0-falcon .............   Passed    0.27 sec
      Start  7: test-tokenizer-1-llama
 7/21 Test  #7: test-tokenizer-1-llama ..............   Passed    0.38 sec
      Start  8: test-tokenizer-1-baichuan
 8/21 Test  #8: test-tokenizer-1-baichuan ...........   Passed    0.46 sec
      Start  9: test-tokenizer-1-falcon
 9/21 Test  #9: test-tokenizer-1-falcon .............   Passed    1.06 sec
      Start 10: test-tokenizer-1-aquila
10/21 Test #10: test-tokenizer-1-aquila .............   Passed    1.52 sec
      Start 11: test-tokenizer-1-mpt
11/21 Test #11: test-tokenizer-1-mpt ................   Passed    0.78 sec
      Start 12: test-tokenizer-1-stablelm-3b-4e1t
12/21 Test #12: test-tokenizer-1-stablelm-3b-4e1t ...   Passed    0.78 sec
      Start 13: test-tokenizer-1-gpt-neox
13/21 Test #13: test-tokenizer-1-gpt-neox ...........   Passed    0.78 sec
      Start 14: test-tokenizer-1-refact
14/21 Test #14: test-tokenizer-1-refact .............   Passed    0.77 sec
      Start 15: test-tokenizer-1-starcoder
15/21 Test #15: test-tokenizer-1-starcoder ..........   Passed    0.76 sec
      Start 16: test-tokenizer-1-gpt2
16/21 Test #16: test-tokenizer-1-gpt2 ...............   Passed    0.78 sec
      Start 17: test-grammar-parser
17/21 Test #17: test-grammar-parser .................   Passed    0.00 sec
      Start 18: test-llama-grammar
18/21 Test #18: test-llama-grammar ..................   Passed    0.00 sec
      Start 19: test-grad0
19/21 Test #19: test-grad0 ..........................   Passed    3.06 sec
      Start 20: test-backend-ops
20/21 Test #20: test-backend-ops ....................   Passed   32.14 sec
      Start 21: test-rope
21/21 Test #21: test-rope ...........................   Passed    0.05 sec

100% tests passed, 0 tests failed out of 21

Label Time Summary:
main    =  57.50 sec*proc (21 tests)

Total Test time (real) =  57.51 sec

real	0m57.524s
user	1m6.643s
sys	0m9.993s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_embd_bge_small
+ tee /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/embd_bge_small.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:37 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model
https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/tokenizer.model:
2024-03-06 07:18:38 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:38 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json [366/366] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:38 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json [125/125] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:38 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json [52/52] -> "sentence_bert_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:38 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt [231508/231508] -> "vocab.txt" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:38 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json [349/349] -> "modules.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:38 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/1_Pooling https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
+ local out=models-mnt/bge-small/1_Pooling
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/1_Pooling
+ cd models-mnt/bge-small/1_Pooling
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:38 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json [190/190] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/bge-small
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/embd_bge_small-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m0.763s
user	0m0.407s
sys	0m0.361s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/embd_bge_small-make.log
+ make -j
[  2%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  3%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  3%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
[  5%] Built target build_info
[  5%] Built target ggml
[  7%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  6%] Linking C static library libggml_static.a
[  7%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target ggml_static
[  9%] Built target llama
[  9%] Built target gguf
[ 11%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 11%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 12%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 13%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 15%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 16%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 17%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 19%] Linking CXX executable ../../bin/benchmark
[ 21%] Linking CXX executable ../../bin/quantize
[ 21%] Linking CXX executable ../bin/test-c
[ 22%] Linking CXX executable ../../bin/quantize-stats
[ 22%] Built target llava
[ 23%] Linking CXX static library libcommon.a
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target test-c
[ 23%] Built target common
[ 23%] Built target benchmark
[ 23%] Built target llava_static
[ 23%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 26%] Built target quantize
[ 29%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 30%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 31%] Built target quantize-stats
[ 31%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 32%] Linking CXX executable ../bin/test-sampling
[ 33%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 34%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 35%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 37%] Linking CXX executable ../bin/test-quantize-fns
[ 38%] Linking CXX executable ../bin/test-chat-template
[ 39%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 40%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 41%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 42%] Linking CXX executable ../bin/test-quantize-perf
[ 43%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 45%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 45%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 48%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 53%] Linking CXX executable ../bin/test-llama-grammar
[ 54%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 54%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 56%] Linking CXX executable ../bin/test-grammar-parser
[ 56%] Linking CXX executable ../bin/test-grad0
[ 57%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 58%] Linking CXX executable ../bin/test-backend-ops
[ 59%] Linking CXX executable ../../bin/baby-llama
[ 60%] Linking CXX executable ../bin/test-model-load-cancel
[ 62%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 63%] Linking CXX executable ../bin/test-autorelease
[ 61%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 64%] Linking CXX executable ../bin/test-rope
[ 64%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 65%] Linking CXX executable ../../bin/batched
[ 65%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 66%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 67%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 67%] Linking CXX executable ../../bin/finetune
[ 67%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 68%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 69%] Linking CXX executable ../../bin/beam-search
[ 69%] Linking CXX executable ../../bin/batched-bench
[ 70%] Linking CXX executable ../../bin/embedding
[ 70%] Built target test-sampling
[ 70%] Built target test-chat-template
[ 71%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 72%] Linking CXX executable ../../bin/main
[ 72%] Built target test-quantize-perf
[ 73%] Linking CXX executable ../../bin/infill
[ 73%] Linking CXX executable ../../bin/llama-bench
[ 73%] Built target test-tokenizer-0-falcon
[ 74%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 75%] Linking CXX executable ../../bin/llava-cli
[ 75%] Built target test-grammar-parser
[ 76%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 76%] Built target test-quantize-fns
[ 77%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 77%] Built target test-tokenizer-1-bpe
[ 77%] Linking CXX executable ../../bin/tokenize
[ 77%] Built target test-llama-grammar
[ 77%] Built target test-tokenizer-1-llama
[ 77%] Built target test-grad0
[ 77%] Built target test-tokenizer-0-llama
[ 77%] Built target test-model-load-cancel
[ 78%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 79%] Linking CXX executable ../../bin/perplexity
[ 80%] Linking CXX executable ../../bin/parallel
[ 80%] Built target test-backend-ops
[ 80%] Built target test-rope
[ 80%] Built target test-autorelease
[ 80%] Built target baby-llama
[ 80%] Linking CXX executable ../../bin/save-load-state
[ 80%] Built target beam-search
[ 80%] Built target batched-bench
[ 80%] Built target embedding
[ 81%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 81%] Built target llava-cli
[ 81%] Built target batched
[ 81%] Built target tokenize
[ 82%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 82%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 82%] Built target llama-bench
[ 82%] Built target finetune
[ 82%] Linking CXX executable ../../bin/passkey
[ 83%] Linking CXX executable ../../bin/speculative
[ 84%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 85%] Linking CXX executable ../../bin/simple
[ 85%] Built target infill
[ 85%] Built target convert-llama2c-to-ggml
[ 86%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 86%] Built target main
[ 87%] Linking CXX executable ../../bin/lookahead
[ 89%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 89%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 90%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 91%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 91%] Built target save-load-state
[ 92%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 93%] Linking CXX executable ../../bin/lookup
[ 94%] Linking CXX executable ../../bin/export-lora
[ 94%] Built target parallel
[ 94%] Built target perplexity
[ 95%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 96%] Linking CXX executable ../../bin/train-text-from-scratch
[ 97%] Linking CXX executable ../../bin/imatrix
[ 97%] Built target passkey
[ 98%] Linking CXX executable ../../bin/server
[ 99%] Linking CXX executable ../../bin/vdot
[100%] Linking CXX executable ../../bin/q8dot
[100%] Built target simple
[100%] Built target speculative
[100%] Built target lookahead
[100%] Built target export-lora
[100%] Built target lookup
[100%] Built target vdot
[100%] Built target q8dot
[100%] Built target train-text-from-scratch
[100%] Built target imatrix
[100%] Built target server

real	0m1.473s
user	0m5.242s
sys	0m4.566s
+ python3 ../convert-hf-to-gguf.py ../models-mnt/bge-small
/mnt/llama.cpp/venv/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  return self.fget.__get__(instance, owner)()
Loading model: bge-small
gguf: This GGUF file is for Little Endian only
Set model parameters
Set model tokenizer
fname_tokenizer: ../models-mnt/bge-small
gguf: Setting special token type pad to 0
Exporting model to '../models-mnt/bge-small/ggml-model-f16.gguf'
gguf: loading model part 'pytorch_model.bin'
token_embd.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
position_embd.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
token_types.weight, n_dims = 2, torch.float32 --> <class 'numpy.float32'>
token_embd_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
token_embd_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.0.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.0.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.1.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.1.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.2.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.2.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.3.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.3.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.4.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.4.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.5.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.5.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.6.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.6.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.7.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.7.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.8.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.8.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.9.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.9.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.10.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.10.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_q.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_q.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_k.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_k.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_v.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_v.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_output.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.attn_output.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.attn_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.ffn_up.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.ffn_up.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.ffn_down.weight, n_dims = 2, torch.float32 --> <class 'numpy.float16'>
blk.11.ffn_down.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.layer_output_norm.weight, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
blk.11.layer_output_norm.bias, n_dims = 1, torch.float32 --> <class 'numpy.float32'>
Model successfully exported to '../models-mnt/bge-small/ggml-model-f16.gguf'
+ model_f16=../models-mnt/bge-small/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/bge-small/ggml-model-q8_0.gguf
+ ./bin/quantize ../models-mnt/bge-small/ggml-model-f16.gguf ../models-mnt/bge-small/ggml-model-q8_0.gguf q8_0
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/bge-small/ggml-model-f16.gguf' to '../models-mnt/bge-small/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 19 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 1
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                tokenizer.ggml.bos_token_id u32              = 101
llama_model_loader: - kv  13:                tokenizer.ggml.eos_token_id u32              = 102
llama_model_loader: - kv  14:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  16:                      tokenizer.ggml.scores arr[f32,30522]   = [-1000.000000, -1000.000000, -1000.00...
llama_model_loader: - kv  17:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - type  f32:  123 tensors
llama_model_loader: - type  f16:   74 tensors
llama_model_quantize_internal ============ Strange model: n_attention_wv = 12, n_ffn_down = 24, hparams.n_layer = 12
llama_model_quantize_internal: meta size = 760800 bytes
[   1/ 197]                    token_embd.weight - [  384, 30522,     1,     1], type =    f16, quantizing to q8_0 .. size =    22.35 MiB ->    11.88 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[   2/ 197]                 position_embd.weight - [  384,   512,     1,     1], type =    f16, size =    0.375 MB
[   3/ 197]                   token_types.weight - [  384,     2,     1,     1], type =    f32, size =    0.003 MB
[   4/ 197]               token_embd_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   5/ 197]                 token_embd_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   6/ 197]                  blk.0.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.031 0.046 0.066 0.086 0.108 0.230 0.109 0.088 0.066 0.046 0.031 0.020 0.027 
[   7/ 197]                    blk.0.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   8/ 197]                  blk.0.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.019 0.031 0.046 0.067 0.089 0.107 0.227 0.107 0.087 0.068 0.047 0.031 0.019 0.027 
[   9/ 197]                    blk.0.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  10/ 197]                  blk.0.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.018 0.030 0.045 0.066 0.086 0.109 0.237 0.109 0.088 0.065 0.046 0.030 0.018 0.026 
[  11/ 197]                    blk.0.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  12/ 197]             blk.0.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.032 0.048 0.066 0.089 0.106 0.228 0.107 0.088 0.066 0.047 0.031 0.019 0.028 
[  13/ 197]               blk.0.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  14/ 197]        blk.0.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  15/ 197]          blk.0.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  16/ 197]                  blk.0.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.030 0.021 0.033 0.049 0.069 0.091 0.110 0.232 0.105 0.084 0.063 0.044 0.028 0.017 0.024 
[  17/ 197]                    blk.0.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  18/ 197]                blk.0.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.016 0.026 0.041 0.061 0.087 0.114 0.259 0.115 0.087 0.061 0.041 0.026 0.016 0.025 
[  19/ 197]                  blk.0.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  20/ 197]       blk.0.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  21/ 197]         blk.0.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  22/ 197]                  blk.1.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.019 0.031 0.047 0.067 0.089 0.108 0.230 0.108 0.087 0.066 0.046 0.030 0.019 0.026 
[  23/ 197]                    blk.1.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  24/ 197]                  blk.1.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.045 0.064 0.088 0.109 0.240 0.108 0.088 0.065 0.046 0.029 0.018 0.026 
[  25/ 197]                    blk.1.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  26/ 197]                  blk.1.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.029 0.045 0.064 0.087 0.109 0.239 0.109 0.087 0.064 0.045 0.030 0.019 0.027 
[  27/ 197]                    blk.1.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  28/ 197]             blk.1.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.090 0.107 0.226 0.106 0.089 0.066 0.047 0.031 0.020 0.027 
[  29/ 197]               blk.1.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  30/ 197]        blk.1.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  31/ 197]          blk.1.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  32/ 197]                  blk.1.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.028 0.019 0.030 0.046 0.066 0.089 0.111 0.241 0.108 0.085 0.062 0.043 0.028 0.017 0.025 
[  33/ 197]                    blk.1.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  34/ 197]                blk.1.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.016 0.025 0.039 0.059 0.085 0.116 0.269 0.115 0.086 0.060 0.040 0.025 0.015 0.025 
[  35/ 197]                  blk.1.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  36/ 197]       blk.1.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  37/ 197]         blk.1.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  38/ 197]                  blk.2.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.031 0.047 0.067 0.089 0.107 0.231 0.107 0.087 0.065 0.046 0.031 0.019 0.027 
[  39/ 197]                    blk.2.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  40/ 197]                  blk.2.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.029 0.046 0.065 0.088 0.110 0.237 0.109 0.088 0.064 0.045 0.029 0.018 0.027 
[  41/ 197]                    blk.2.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  42/ 197]                  blk.2.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.066 0.087 0.109 0.237 0.110 0.087 0.066 0.046 0.029 0.019 0.027 
[  43/ 197]                    blk.2.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  44/ 197]             blk.2.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.021 0.032 0.048 0.066 0.087 0.107 0.224 0.104 0.089 0.067 0.049 0.032 0.020 0.027 
[  45/ 197]               blk.2.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  46/ 197]        blk.2.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  47/ 197]          blk.2.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  48/ 197]                  blk.2.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.109 0.240 0.108 0.087 0.064 0.044 0.029 0.018 0.026 
[  49/ 197]                    blk.2.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  50/ 197]                blk.2.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.039 0.058 0.085 0.116 0.273 0.116 0.086 0.059 0.039 0.024 0.016 0.025 
[  51/ 197]                  blk.2.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  52/ 197]       blk.2.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  53/ 197]         blk.2.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  54/ 197]                  blk.3.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.045 0.066 0.088 0.109 0.234 0.108 0.089 0.066 0.046 0.029 0.019 0.027 
[  55/ 197]                    blk.3.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  56/ 197]                  blk.3.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.028 0.044 0.063 0.087 0.111 0.247 0.114 0.088 0.062 0.043 0.028 0.017 0.026 
[  57/ 197]                    blk.3.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  58/ 197]                  blk.3.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.028 0.043 0.064 0.088 0.110 0.243 0.111 0.088 0.064 0.044 0.029 0.018 0.026 
[  59/ 197]                    blk.3.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  60/ 197]             blk.3.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.020 0.032 0.047 0.068 0.087 0.106 0.225 0.106 0.088 0.068 0.046 0.031 0.020 0.027 
[  61/ 197]               blk.3.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  62/ 197]        blk.3.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  63/ 197]          blk.3.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  64/ 197]                  blk.3.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.108 0.239 0.108 0.087 0.065 0.045 0.029 0.018 0.027 
[  65/ 197]                    blk.3.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  66/ 197]                blk.3.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.039 0.059 0.086 0.115 0.269 0.115 0.086 0.060 0.040 0.025 0.015 0.025 
[  67/ 197]                  blk.3.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  68/ 197]       blk.3.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  69/ 197]         blk.3.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  70/ 197]                  blk.4.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.029 0.046 0.064 0.088 0.109 0.235 0.110 0.088 0.065 0.045 0.031 0.018 0.027 
[  71/ 197]                    blk.4.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  72/ 197]                  blk.4.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.027 0.043 0.064 0.088 0.111 0.245 0.112 0.087 0.064 0.043 0.028 0.017 0.026 
[  73/ 197]                    blk.4.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  74/ 197]                  blk.4.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.027 0.042 0.062 0.085 0.113 0.256 0.112 0.087 0.061 0.042 0.027 0.017 0.026 
[  75/ 197]                    blk.4.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  76/ 197]             blk.4.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.019 0.031 0.048 0.067 0.089 0.105 0.226 0.107 0.088 0.066 0.047 0.032 0.020 0.027 
[  77/ 197]               blk.4.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  78/ 197]        blk.4.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  79/ 197]          blk.4.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  80/ 197]                  blk.4.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.018 0.029 0.044 0.063 0.087 0.108 0.242 0.110 0.088 0.065 0.045 0.030 0.019 0.027 
[  81/ 197]                    blk.4.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  82/ 197]                blk.4.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.024 0.038 0.059 0.085 0.116 0.275 0.116 0.086 0.059 0.038 0.024 0.015 0.025 
[  83/ 197]                  blk.4.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  84/ 197]       blk.4.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  85/ 197]         blk.4.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  86/ 197]                  blk.5.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.066 0.089 0.107 0.233 0.107 0.087 0.066 0.046 0.030 0.019 0.027 
[  87/ 197]                    blk.5.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  88/ 197]                  blk.5.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.029 0.044 0.064 0.088 0.111 0.240 0.110 0.087 0.064 0.045 0.029 0.018 0.026 
[  89/ 197]                    blk.5.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  90/ 197]                  blk.5.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.027 0.040 0.061 0.085 0.112 0.262 0.114 0.086 0.061 0.042 0.027 0.016 0.026 
[  91/ 197]                    blk.5.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  92/ 197]             blk.5.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.020 0.032 0.048 0.067 0.086 0.105 0.225 0.105 0.089 0.067 0.048 0.032 0.020 0.027 
[  93/ 197]               blk.5.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  94/ 197]        blk.5.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  95/ 197]          blk.5.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  96/ 197]                  blk.5.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.017 0.028 0.042 0.062 0.086 0.109 0.243 0.111 0.089 0.065 0.046 0.030 0.019 0.028 
[  97/ 197]                    blk.5.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  98/ 197]                blk.5.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.040 0.060 0.087 0.115 0.267 0.116 0.086 0.060 0.040 0.025 0.015 0.025 
[  99/ 197]                  blk.5.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 100/ 197]       blk.5.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 101/ 197]         blk.5.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 102/ 197]                  blk.6.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.030 0.046 0.067 0.088 0.106 0.236 0.108 0.087 0.066 0.046 0.030 0.018 0.028 
[ 103/ 197]                    blk.6.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 104/ 197]                  blk.6.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.017 0.029 0.044 0.064 0.088 0.110 0.244 0.112 0.087 0.064 0.045 0.028 0.018 0.026 
[ 105/ 197]                    blk.6.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 106/ 197]                  blk.6.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.016 0.026 0.040 0.059 0.085 0.115 0.267 0.114 0.085 0.060 0.041 0.025 0.016 0.025 
[ 107/ 197]                    blk.6.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 108/ 197]             blk.6.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.032 0.047 0.067 0.088 0.105 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 109/ 197]               blk.6.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 110/ 197]        blk.6.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 111/ 197]          blk.6.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 112/ 197]                  blk.6.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.018 0.028 0.044 0.064 0.087 0.110 0.240 0.110 0.088 0.065 0.045 0.029 0.019 0.027 
[ 113/ 197]                    blk.6.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 114/ 197]                blk.6.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.017 0.027 0.042 0.062 0.086 0.113 0.255 0.113 0.087 0.062 0.042 0.027 0.017 0.026 
[ 115/ 197]                  blk.6.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 116/ 197]       blk.6.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 117/ 197]         blk.6.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 118/ 197]                  blk.7.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.047 0.064 0.088 0.110 0.235 0.109 0.089 0.065 0.045 0.029 0.018 0.027 
[ 119/ 197]                    blk.7.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 120/ 197]                  blk.7.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.086 0.107 0.236 0.111 0.088 0.065 0.045 0.029 0.019 0.027 
[ 121/ 197]                    blk.7.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 122/ 197]                  blk.7.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.016 0.026 0.041 0.060 0.086 0.113 0.263 0.113 0.086 0.061 0.041 0.027 0.017 0.025 
[ 123/ 197]                    blk.7.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 124/ 197]             blk.7.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.021 0.031 0.047 0.067 0.088 0.105 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 125/ 197]               blk.7.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 126/ 197]        blk.7.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 127/ 197]          blk.7.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 128/ 197]                  blk.7.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.064 0.088 0.110 0.242 0.109 0.088 0.064 0.045 0.029 0.018 0.027 
[ 129/ 197]                    blk.7.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 130/ 197]                blk.7.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.016 0.027 0.041 0.062 0.087 0.113 0.256 0.113 0.087 0.062 0.042 0.027 0.016 0.025 
[ 131/ 197]                  blk.7.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 132/ 197]       blk.7.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 133/ 197]         blk.7.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 134/ 197]                  blk.8.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.018 0.028 0.044 0.065 0.088 0.112 0.239 0.111 0.087 0.065 0.044 0.028 0.018 0.026 
[ 135/ 197]                    blk.8.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 136/ 197]                  blk.8.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.017 0.028 0.043 0.062 0.089 0.113 0.247 0.113 0.087 0.063 0.042 0.027 0.017 0.026 
[ 137/ 197]                    blk.8.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 138/ 197]                  blk.8.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.016 0.026 0.041 0.059 0.086 0.113 0.265 0.113 0.086 0.061 0.041 0.026 0.016 0.026 
[ 139/ 197]                    blk.8.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 140/ 197]             blk.8.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.028 0.020 0.032 0.048 0.067 0.089 0.104 0.225 0.105 0.087 0.067 0.049 0.032 0.020 0.027 
[ 141/ 197]               blk.8.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 142/ 197]        blk.8.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 143/ 197]          blk.8.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 144/ 197]                  blk.8.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.028 0.019 0.030 0.046 0.066 0.088 0.109 0.238 0.109 0.087 0.064 0.044 0.029 0.018 0.025 
[ 145/ 197]                    blk.8.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 146/ 197]                blk.8.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.017 0.027 0.042 0.062 0.087 0.112 0.253 0.113 0.087 0.063 0.042 0.027 0.017 0.025 
[ 147/ 197]                  blk.8.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 148/ 197]       blk.8.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 149/ 197]         blk.8.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 150/ 197]                  blk.9.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.030 0.044 0.065 0.088 0.108 0.236 0.109 0.087 0.066 0.047 0.030 0.019 0.027 
[ 151/ 197]                    blk.9.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 152/ 197]                  blk.9.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.029 0.044 0.065 0.088 0.109 0.237 0.111 0.087 0.065 0.045 0.029 0.019 0.026 
[ 153/ 197]                    blk.9.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 154/ 197]                  blk.9.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.064 0.086 0.110 0.242 0.110 0.087 0.064 0.045 0.029 0.017 0.027 
[ 155/ 197]                    blk.9.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 156/ 197]             blk.9.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.021 0.031 0.047 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.031 0.020 0.028 
[ 157/ 197]               blk.9.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 158/ 197]        blk.9.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 159/ 197]          blk.9.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 160/ 197]                  blk.9.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.019 0.030 0.045 0.065 0.087 0.108 0.234 0.110 0.088 0.066 0.046 0.030 0.019 0.027 
[ 161/ 197]                    blk.9.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 162/ 197]                blk.9.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.026 0.017 0.028 0.044 0.064 0.088 0.111 0.245 0.112 0.087 0.064 0.043 0.028 0.017 0.026 
[ 163/ 197]                  blk.9.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 164/ 197]       blk.9.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 165/ 197]         blk.9.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 166/ 197]                 blk.10.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.029 0.045 0.065 0.088 0.109 0.233 0.111 0.088 0.065 0.047 0.031 0.019 0.027 
[ 167/ 197]                   blk.10.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 168/ 197]                 blk.10.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.019 0.030 0.046 0.066 0.086 0.108 0.233 0.109 0.088 0.066 0.046 0.030 0.019 0.027 
[ 169/ 197]                   blk.10.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 170/ 197]                 blk.10.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.030 0.045 0.065 0.087 0.109 0.244 0.107 0.086 0.064 0.044 0.029 0.019 0.027 
[ 171/ 197]                   blk.10.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 172/ 197]            blk.10.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.068 0.088 0.107 0.223 0.105 0.089 0.068 0.047 0.032 0.020 0.027 
[ 173/ 197]              blk.10.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 174/ 197]       blk.10.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 175/ 197]         blk.10.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 176/ 197]                 blk.10.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.067 0.088 0.107 0.228 0.107 0.088 0.066 0.047 0.031 0.019 0.027 
[ 177/ 197]                   blk.10.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 178/ 197]               blk.10.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.015 0.025 0.039 0.060 0.086 0.117 0.267 0.117 0.087 0.060 0.039 0.024 0.015 0.025 
[ 179/ 197]                 blk.10.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 180/ 197]      blk.10.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 181/ 197]        blk.10.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 182/ 197]                 blk.11.attn_q.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.029 0.047 0.066 0.089 0.108 0.233 0.108 0.089 0.065 0.046 0.030 0.018 0.027 
[ 183/ 197]                   blk.11.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 184/ 197]                 blk.11.attn_k.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.026 0.018 0.030 0.046 0.066 0.088 0.109 0.233 0.109 0.087 0.066 0.045 0.031 0.019 0.026 
[ 185/ 197]                   blk.11.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 186/ 197]                 blk.11.attn_v.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.025 0.017 0.028 0.043 0.064 0.088 0.111 0.245 0.110 0.087 0.064 0.044 0.027 0.018 0.027 
[ 187/ 197]                   blk.11.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 188/ 197]            blk.11.attn_output.weight - [  384,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     0.28 MiB ->     0.15 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.068 0.088 0.105 0.225 0.106 0.086 0.067 0.048 0.032 0.020 0.028 
[ 189/ 197]              blk.11.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 190/ 197]       blk.11.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 191/ 197]         blk.11.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 192/ 197]                 blk.11.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.025 0.016 0.026 0.041 0.061 0.085 0.112 0.257 0.115 0.088 0.063 0.043 0.027 0.017 0.026 
[ 193/ 197]                   blk.11.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 194/ 197]               blk.11.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, quantizing to q8_0 .. size =     1.12 MiB ->     0.60 MiB | hist: 0.000 0.021 0.009 0.014 0.023 0.038 0.064 0.117 0.415 0.120 0.067 0.040 0.025 0.016 0.009 0.022 
[ 195/ 197]                 blk.11.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 196/ 197]      blk.11.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 197/ 197]        blk.11.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
llama_model_quantize_internal: model size  =    63.46 MB
llama_model_quantize_internal: quant size  =    34.00 MB
llama_model_quantize_internal: hist: 0.000 0.026 0.018 0.029 0.045 0.064 0.087 0.109 0.241 0.109 0.087 0.064 0.045 0.029 0.018 0.026 

main: quantize time =   160.17 ms
main:    total time =   160.17 ms
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/embd_bge_small-tg-f16.log
+ ./bin/embedding --model ../models-mnt/bge-small/ggml-model-f16.gguf -p 'I believe the meaning of life is'
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709524
llama_model_loader: loaded meta data with 19 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 1
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                tokenizer.ggml.bos_token_id u32              = 101
llama_model_loader: - kv  13:                tokenizer.ggml.eos_token_id u32              = 102
llama_model_loader: - kv  14:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  16:                      tokenizer.ggml.scores arr[f32,30522]   = [-1000.000000, -1000.000000, -1000.00...
llama_model_loader: - kv  17:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - type  f32:  123 tensors
llama_model_loader: - type  f16:   74 tensors
llm_load_vocab: mismatch in special tokens definition ( 7104/30522 vs 5/30522 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = bert
llm_load_print_meta: vocab type       = WPM
llm_load_print_meta: n_vocab          = 30522
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 512
llm_load_print_meta: n_embd           = 384
llm_load_print_meta: n_head           = 12
llm_load_print_meta: n_head_kv        = 12
llm_load_print_meta: n_layer          = 12
llm_load_print_meta: n_rot            = 32
llm_load_print_meta: n_embd_head_k    = 32
llm_load_print_meta: n_embd_head_v    = 32
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 384
llm_load_print_meta: n_embd_v_gqa     = 384
llm_load_print_meta: f_norm_eps       = 1.0e-12
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 1536
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 2
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 512
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 33M
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 33.21 M
llm_load_print_meta: model size       = 63.46 MiB (16.03 BPW) 
llm_load_print_meta: general.name     = bge-small
llm_load_print_meta: BOS token        = 101 '[CLS]'
llm_load_print_meta: EOS token        = 102 '[SEP]'
llm_load_print_meta: UNK token        = 100 '[UNK]'
llm_load_print_meta: PAD token        = 0 '[PAD]'
llm_load_tensors: ggml ctx size =    0.08 MiB
llm_load_tensors:        CPU buffer size =    63.46 MiB
.................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =     9.00 MiB
llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
llama_new_context_with_model:        CPU input buffer size   =     2.76 MiB
llama_new_context_with_model:        CPU compute buffer size =    16.00 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
batch_decode: n_tokens = 9, n_seq = 1
embedding 0: -0.044007 -0.019911 0.007675 -0.000838 0.001372 -0.037058 0.109424 0.042576 0.092043 -0.015909 0.006781 -0.035701 -0.017898 0.015045 0.018116 0.015891 -0.011293 0.010445 -0.085229 -0.008448 0.091366 -0.017099 -0.060327 -0.024495 0.027507 0.076059 0.027992 -0.014563 0.017659 -0.033285 -0.037861 -0.019001 0.068707 -0.009850 -0.025018 0.072357 -0.046567 0.011044 -0.050265 0.047692 0.032376 -0.011712 0.022079 0.049627 0.010464 0.005794 -0.028874 0.008934 -0.018506 -0.051437 -0.046048 0.030504 -0.035416 0.054215 -0.069652 0.044245 0.029800 0.046327 0.073421 -0.042592 0.076109 0.038836 -0.181180 0.082502 0.042276 -0.064577 -0.060094 -0.017854 0.006459 0.005889 0.017179 -0.026607 0.064562 0.112560 0.035140 -0.067448 0.027061 -0.067285 -0.033497 -0.033224 0.033246 0.013507 -0.003342 -0.037476 -0.052074 0.055172 -0.001974 -0.038259 0.064444 0.028826 -0.043311 -0.029268 -0.039466 0.036314 0.008394 -0.015461 -0.036560 0.018143 0.028593 0.342799 -0.044484 0.056097 0.017603 -0.020869 -0.066827 0.000171 -0.037902 -0.030055 -0.008537 -0.021592 0.000545 -0.003217 0.003994 0.018930 -0.008552 0.025850 0.049417 0.000057 0.050935 -0.042486 -0.031896 0.023567 0.030689 -0.023160 -0.046254 -0.079292 0.115156 0.046746 0.027830 -0.040707 0.067798 -0.022951 0.010335 -0.032942 -0.018300 0.043844 0.024272 0.052408 0.007437 0.008896 0.011226 -0.074674 -0.065576 -0.026750 -0.041200 -0.023889 0.026714 0.006886 0.027783 0.052861 -0.036661 0.057709 -0.000172 0.031735 -0.019762 -0.022063 0.041035 -0.058899 0.019612 0.043153 0.043599 0.041570 -0.022537 0.027071 -0.021823 0.005460 -0.041321 -0.001245 0.024425 0.002096 0.044341 -0.022728 0.043676 0.064778 0.055436 0.037059 -0.000934 0.046111 0.045786 -0.008496 0.063063 -0.073243 -0.011935 0.032090 0.023941 0.014702 -0.033701 0.001095 -0.015867 -0.018997 0.047890 0.110883 0.028419 0.031356 -0.013271 -0.057519 0.006664 0.005152 -0.012240 -0.051454 -0.000949 -0.017657 -0.019438 -0.040934 0.009200 -0.057949 0.050981 0.052337 -0.009601 -0.040241 -0.014093 -0.024854 -0.017272 0.006315 0.006566 -0.026916 0.015603 0.030751 0.002570 0.023213 -0.022189 -0.098566 -0.051132 -0.278038 -0.014987 -0.061565 -0.027238 0.017687 -0.010942 -0.017095 0.035051 0.047010 -0.015423 0.015232 -0.025476 0.047845 -0.005957 -0.000760 -0.061026 -0.068917 -0.060382 -0.035944 0.043324 -0.055060 0.015062 0.000554 -0.058177 -0.010449 0.012648 0.151473 0.127109 -0.013611 0.042015 -0.025661 0.014009 -0.001075 -0.150478 0.044857 0.005318 -0.036273 -0.029789 -0.020170 -0.034902 0.010266 0.033546 -0.048187 -0.051786 -0.017462 -0.023485 0.047354 0.052064 -0.016770 -0.055470 0.025830 -0.005697 0.010714 0.038704 0.008223 -0.009738 -0.105745 -0.027416 -0.096121 0.025071 -0.011266 0.092350 0.056099 0.003741 0.027819 0.002071 -0.051058 -0.039901 -0.013533 -0.044943 -0.015324 0.002881 -0.043498 -0.077953 0.065239 -0.006812 -0.001618 -0.014646 0.071576 0.023714 -0.037180 0.009178 0.001562 -0.032290 0.015465 0.037925 0.000361 -0.053216 0.021305 -0.039827 0.000028 0.013413 0.019820 -0.057888 0.006450 -0.049524 -0.267849 0.039162 -0.067957 0.038283 -0.012334 0.041495 -0.016113 0.052413 -0.071387 0.011333 0.024699 -0.007251 0.082086 0.028563 -0.021489 0.040517 -0.004578 -0.074622 -0.014763 0.020041 0.002273 0.023136 0.197191 -0.043231 -0.026009 -0.004969 -0.019276 0.074260 0.001771 -0.031982 -0.036607 -0.045056 0.000542 -0.011573 0.018133 -0.029460 -0.008470 0.006395 0.050791 -0.014924 0.006187 0.026094 -0.030808 0.048056 0.114075 -0.040814 -0.011441 0.005435 -0.003575 0.025143 -0.059149 0.013761 -0.010408 0.038667 0.051437 0.035412 0.035043 -0.017007 0.026370 -0.014484 -0.049999 0.003224 0.054143 0.039722 -0.039132 



llama_print_timings:        load time =      40.22 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =      19.09 ms /     9 tokens (    2.12 ms per token,   471.43 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =      85.10 ms /    10 tokens

real	0m0.213s
user	0m0.207s
sys	0m0.076s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/embd_bge_small-tg-q8_0.log
+ ./bin/embedding --model ../models-mnt/bge-small/ggml-model-q8_0.gguf -p 'I believe the meaning of life is'
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709524
llama_model_loader: loaded meta data with 20 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.name str              = bge-small
llama_model_loader: - kv   2:                           bert.block_count u32              = 12
llama_model_loader: - kv   3:                        bert.context_length u32              = 512
llama_model_loader: - kv   4:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   5:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   6:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv   7:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv   8:                          general.file_type u32              = 7
llama_model_loader: - kv   9:                      bert.attention.causal bool             = false
llama_model_loader: - kv  10:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  11:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  12:                tokenizer.ggml.bos_token_id u32              = 101
llama_model_loader: - kv  13:                tokenizer.ggml.eos_token_id u32              = 102
llama_model_loader: - kv  14:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  16:                      tokenizer.ggml.scores arr[f32,30522]   = [-1000.000000, -1000.000000, -1000.00...
llama_model_loader: - kv  17:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  19:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  123 tensors
llama_model_loader: - type  f16:    1 tensors
llama_model_loader: - type q8_0:   73 tensors
llm_load_vocab: mismatch in special tokens definition ( 7104/30522 vs 5/30522 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = bert
llm_load_print_meta: vocab type       = WPM
llm_load_print_meta: n_vocab          = 30522
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 512
llm_load_print_meta: n_embd           = 384
llm_load_print_meta: n_head           = 12
llm_load_print_meta: n_head_kv        = 12
llm_load_print_meta: n_layer          = 12
llm_load_print_meta: n_rot            = 32
llm_load_print_meta: n_embd_head_k    = 32
llm_load_print_meta: n_embd_head_v    = 32
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 384
llm_load_print_meta: n_embd_v_gqa     = 384
llm_load_print_meta: f_norm_eps       = 1.0e-12
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 1536
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 2
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 512
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 33M
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 33.21 M
llm_load_print_meta: model size       = 34.00 MiB (8.59 BPW) 
llm_load_print_meta: general.name     = bge-small
llm_load_print_meta: BOS token        = 101 '[CLS]'
llm_load_print_meta: EOS token        = 102 '[SEP]'
llm_load_print_meta: UNK token        = 100 '[UNK]'
llm_load_print_meta: PAD token        = 0 '[PAD]'
llm_load_tensors: ggml ctx size =    0.08 MiB
llm_load_tensors:        CPU buffer size =    34.00 MiB
.................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =     9.00 MiB
llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
llama_new_context_with_model:        CPU input buffer size   =     2.76 MiB
llama_new_context_with_model:        CPU compute buffer size =    16.00 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
batch_decode: n_tokens = 9, n_seq = 1
embedding 0: -0.044660 -0.020685 0.008437 -0.001024 0.003019 -0.037369 0.108908 0.043496 0.092429 -0.014842 0.006213 -0.035864 -0.019461 0.014530 0.017036 0.013924 -0.013276 0.010890 -0.084548 -0.007167 0.092387 -0.018075 -0.062032 -0.025178 0.027372 0.077162 0.027567 -0.014752 0.018430 -0.034928 -0.038307 -0.018421 0.068320 -0.010384 -0.022877 0.072300 -0.046294 0.010846 -0.051338 0.049476 0.032615 -0.012213 0.021241 0.050034 0.010036 0.005481 -0.027705 0.008532 -0.019280 -0.053102 -0.045108 0.029669 -0.034854 0.053138 -0.068644 0.043175 0.029629 0.046147 0.073313 -0.043047 0.075461 0.038868 -0.181743 0.082173 0.043041 -0.066124 -0.059377 -0.017072 0.005878 0.005862 0.016845 -0.026935 0.065312 0.111083 0.035345 -0.067229 0.027613 -0.066671 -0.034696 -0.034657 0.032549 0.013384 -0.004591 -0.036785 -0.051621 0.054379 -0.003605 -0.036522 0.063018 0.028800 -0.040731 -0.028087 -0.039405 0.036279 0.007295 -0.014993 -0.035729 0.018139 0.030858 0.345921 -0.045010 0.056801 0.016095 -0.021209 -0.063465 -0.000045 -0.037899 -0.030358 -0.009055 -0.020592 0.000839 -0.004579 0.003938 0.018373 -0.010429 0.024701 0.048054 -0.001155 0.050504 -0.041406 -0.030798 0.023215 0.030370 -0.022495 -0.044581 -0.080071 0.114937 0.047392 0.027032 -0.040772 0.067819 -0.023267 0.010684 -0.034224 -0.017015 0.043799 0.022628 0.051012 0.008434 0.006672 0.010097 -0.075288 -0.064869 -0.026393 -0.040538 -0.024051 0.028096 0.006042 0.027188 0.052059 -0.037503 0.058633 0.001001 0.032501 -0.019734 -0.021308 0.042170 -0.059741 0.019336 0.042450 0.042362 0.040850 -0.021011 0.028609 -0.022844 0.006536 -0.041455 0.000483 0.024506 0.000863 0.042925 -0.023524 0.043161 0.065519 0.055712 0.038272 0.000362 0.047442 0.045455 -0.008719 0.060562 -0.072951 -0.011771 0.033622 0.023081 0.015470 -0.033410 0.000994 -0.015879 -0.018342 0.048125 0.110212 0.028976 0.031063 -0.011789 -0.056761 0.006193 0.005163 -0.012697 -0.052306 -0.002443 -0.017749 -0.020630 -0.040443 0.009383 -0.058023 0.050380 0.053019 -0.009789 -0.041281 -0.015999 -0.024466 -0.015232 0.006019 0.006900 -0.026397 0.016208 0.030124 0.000795 0.022265 -0.021545 -0.097502 -0.050740 -0.277660 -0.013602 -0.061246 -0.027066 0.017483 -0.009854 -0.016756 0.035140 0.048831 -0.016834 0.015571 -0.023724 0.049795 -0.006104 0.000356 -0.059554 -0.069783 -0.061052 -0.035498 0.044029 -0.055562 0.014881 0.000311 -0.058245 -0.011136 0.011301 0.150564 0.126358 -0.011910 0.043553 -0.025292 0.014557 -0.000628 -0.150017 0.042911 0.005253 -0.037266 -0.028969 -0.019134 -0.033908 0.010919 0.034581 -0.049971 -0.052215 -0.016746 -0.024579 0.048295 0.050131 -0.017739 -0.057042 0.023565 -0.005808 0.011984 0.039348 0.007786 -0.008632 -0.106961 -0.027378 -0.096206 0.024158 -0.010554 0.092844 0.055344 0.004300 0.028191 0.001434 -0.050493 -0.038943 -0.011967 -0.046076 -0.015074 0.002835 -0.045189 -0.076815 0.065757 -0.005955 -0.000552 -0.016030 0.069531 0.025068 -0.036617 0.008442 0.002066 -0.033306 0.015992 0.038031 -0.000379 -0.051558 0.022414 -0.038657 0.000481 0.013178 0.020186 -0.057914 0.005572 -0.050556 -0.268647 0.038804 -0.066575 0.038035 -0.011469 0.043923 -0.016644 0.051069 -0.071799 0.012381 0.024113 -0.007501 0.082198 0.029673 -0.021552 0.041400 -0.002683 -0.073990 -0.014561 0.019617 0.003116 0.023334 0.196670 -0.043814 -0.025805 -0.005977 -0.018530 0.073525 0.001418 -0.031095 -0.037183 -0.043311 -0.000080 -0.010754 0.018648 -0.026419 -0.009500 0.006691 0.050915 -0.014734 0.006921 0.027849 -0.031930 0.048440 0.112606 -0.041562 -0.012753 0.004124 -0.003594 0.025054 -0.061359 0.014250 -0.010986 0.037578 0.048842 0.034889 0.036728 -0.017179 0.026345 -0.015225 -0.050945 0.004287 0.054541 0.040305 -0.038189 



llama_print_timings:        load time =      24.23 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =       9.20 ms /     9 tokens (    1.02 ms per token,   978.15 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =      75.56 ms /    10 tokens

real	0m0.187s
user	0m0.166s
sys	0m0.055s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_open_llama_3b_v2
+ tee /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:44 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/config.json [506/506] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/tokenizer.model
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/tokenizer.model
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/tokenizer.model
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:44 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/tokenizer_config.json [593/593] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:44 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/special_tokens_map.json [330/330] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/pytorch_model.bin
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/open-llama/3B-v2/ https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json
+ local out=models-mnt/open-llama/3B-v2/
+ local url=https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/open-llama/3B-v2/
+ cd models-mnt/open-llama/3B-v2/
+ wget -nv -N https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:18:44 URL:https://huggingface.co/openlm-research/open_llama_3b_v2/raw/main/generation_config.json [137/137] -> "generation_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/wikitext/ https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ local out=models-mnt/wikitext/
+ local url=https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/wikitext/
+ cd models-mnt/wikitext/
+ wget -nv -N https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ cd /home/ggml/work/llama.cpp
+ unzip -o models-mnt/wikitext/wikitext-2-raw-v1.zip -d models-mnt/wikitext/
Archive:  models-mnt/wikitext/wikitext-2-raw-v1.zip
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.test.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.valid.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.train.raw  
+ head -n 60 models-mnt/wikitext/wikitext-2-raw/wiki.test.raw
+ path_models=../models-mnt/open-llama/3B-v2
+ path_wiki=../models-mnt/wikitext/wikitext-2-raw
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DLLAMA_QKK_64=1 ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with LLAMA_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: aarch64
-- ARM detected
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E
-- Performing Test COMPILER_SUPPORTS_FP16_FORMAT_I3E - Failed
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m0.772s
user	0m0.398s
sys	0m0.378s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-make.log
+ make -j
[  4%] Building C object CMakeFiles/ggml.dir/ggml.c.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-backend.c.o
[  4%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  4%] Building C object CMakeFiles/ggml.dir/ggml-alloc.c.o
[  5%] Building C object CMakeFiles/ggml.dir/ggml-quants.c.o
[  5%] Built target ggml
[  5%] Built target build_info
[  5%] Linking C static library libggml_static.a
[  7%] Building CXX object examples/gguf/CMakeFiles/gguf.dir/gguf.cpp.o
[  7%] Building CXX object CMakeFiles/llama.dir/llama.cpp.o
[  8%] Linking CXX executable ../../bin/gguf
[  9%] Linking CXX static library libllama.a
[  9%] Built target ggml_static
[  9%] Built target llama
[  9%] Built target gguf
[ 10%] Building CXX object examples/benchmark/CMakeFiles/benchmark.dir/benchmark-matmult.cpp.o
[ 11%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 12%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 13%] Building CXX object examples/quantize-stats/CMakeFiles/quantize-stats.dir/quantize-stats.cpp.o
[ 14%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 15%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 16%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 17%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 17%] Building CXX object examples/quantize/CMakeFiles/quantize.dir/quantize.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 18%] Building CXX object common/CMakeFiles/common.dir/grammar-parser.cpp.o
[ 19%] Linking CXX executable ../bin/test-c
[ 20%] Linking CXX executable ../../bin/quantize-stats
[ 20%] Built target llava
[ 21%] Linking CXX executable ../../bin/quantize
[ 22%] Linking CXX executable ../../bin/benchmark
[ 23%] Linking CXX static library libcommon.a
[ 23%] Linking CXX static library libllava_static.a
[ 23%] Built target test-c
[ 23%] Built target common
[ 23%] Built target llava_static
[ 24%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 24%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 24%] Built target quantize
[ 24%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 25%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 26%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 23%] Built target benchmark
[ 26%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/test-tokenizer-0-llama.cpp.o
[ 27%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 28%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/test-tokenizer-0-falcon.cpp.o
[ 29%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 29%] Built target quantize-stats
[ 30%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-tokenizer-0-falcon.dir/get-model.cpp.o
[ 31%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 32%] Linking CXX executable ../bin/test-chat-template
[ 33%] Linking CXX executable ../bin/test-quantize-fns
[ 34%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/get-model.cpp.o
[ 35%] Building CXX object tests/CMakeFiles/test-tokenizer-1-llama.dir/test-tokenizer-1-llama.cpp.o
[ 36%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 37%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 38%] Building CXX object tests/CMakeFiles/test-tokenizer-0-llama.dir/get-model.cpp.o
[ 38%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 38%] Linking CXX executable ../bin/test-quantize-perf
[ 39%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/get-model.cpp.o
[ 40%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 41%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 39%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 42%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 46%] Linking CXX executable ../bin/test-grammar-parser
[ 43%] Linking CXX executable ../bin/test-sampling
[ 47%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 49%] Linking CXX executable ../bin/test-tokenizer-0-llama
[ 50%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 53%] Building CXX object examples/batched/CMakeFiles/batched.dir/batched.cpp.o
[ 54%] Linking CXX executable ../bin/test-tokenizer-0-falcon
[ 56%] Linking CXX executable ../bin/test-model-load-cancel
[ 56%] Building CXX object examples/baby-llama/CMakeFiles/baby-llama.dir/baby-llama.cpp.o
[ 56%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 57%] Linking CXX executable ../bin/test-tokenizer-1-llama
[ 58%] Building CXX object examples/batched-bench/CMakeFiles/batched-bench.dir/batched-bench.cpp.o
[ 58%] Linking CXX executable ../bin/test-grad0
[ 59%] Linking CXX executable ../bin/test-rope
[ 60%] Linking CXX executable ../bin/test-autorelease
[ 61%] Building CXX object examples/beam-search/CMakeFiles/beam-search.dir/beam-search.cpp.o
[ 62%] Linking CXX executable ../bin/test-backend-ops
[ 63%] Linking CXX executable ../../bin/batched
[ 63%] Building CXX object examples/embedding/CMakeFiles/embedding.dir/embedding.cpp.o
[ 64%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 64%] Linking CXX executable ../../bin/batched-bench
[ 64%] Built target test-chat-template
[ 65%] Building CXX object examples/tokenize/CMakeFiles/tokenize.dir/tokenize.cpp.o
[ 66%] Linking CXX executable ../../bin/baby-llama
[ 67%] Linking CXX executable ../../bin/beam-search
[ 68%] Building CXX object examples/finetune/CMakeFiles/finetune.dir/finetune.cpp.o
[ 68%] Built target test-grammar-parser
[ 68%] Building CXX object examples/infill/CMakeFiles/infill.dir/infill.cpp.o
[ 69%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 69%] Built target test-quantize-fns
[ 70%] Linking CXX executable ../../bin/embedding
[ 71%] Building CXX object examples/llava/CMakeFiles/llava-cli.dir/llava-cli.cpp.o
[ 71%] Building CXX object examples/main/CMakeFiles/main.dir/main.cpp.o
[ 72%] Linking CXX executable ../../bin/convert-llama2c-to-ggml
[ 73%] Building CXX object examples/parallel/CMakeFiles/parallel.dir/parallel.cpp.o
[ 74%] Building CXX object examples/save-load-state/CMakeFiles/save-load-state.dir/save-load-state.cpp.o
[ 74%] Built target test-autorelease
[ 74%] Linking CXX executable ../../bin/finetune
[ 74%] Linking CXX executable ../../bin/tokenize
[ 74%] Built target test-grad0
[ 73%] Built target test-quantize-perf
[ 74%] Built target test-sampling
[ 75%] Building CXX object examples/perplexity/CMakeFiles/perplexity.dir/perplexity.cpp.o
[ 76%] Building CXX object examples/lookahead/CMakeFiles/lookahead.dir/lookahead.cpp.o
[ 76%] Built target test-model-load-cancel
[ 77%] Linking CXX executable ../../bin/infill
[ 77%] Built target test-tokenizer-0-llama
[ 77%] Linking CXX executable ../../bin/save-load-state
[ 78%] Linking CXX executable ../../bin/llava-cli
[ 79%] Linking CXX executable ../../bin/parallel
[ 79%] Built target test-tokenizer-0-falcon
[ 79%] Linking CXX executable ../../bin/llama-bench
[ 79%] Built target test-rope
[ 80%] Building CXX object examples/simple/CMakeFiles/simple.dir/simple.cpp.o
[ 81%] Linking CXX executable ../../bin/main
[ 82%] Building CXX object examples/passkey/CMakeFiles/passkey.dir/passkey.cpp.o
[ 83%] Linking CXX executable ../../bin/perplexity
[ 83%] Built target test-backend-ops
[ 83%] Built target batched
[ 83%] Building CXX object examples/speculative/CMakeFiles/speculative.dir/speculative.cpp.o
[ 84%] Building CXX object examples/lookup/CMakeFiles/lookup.dir/lookup.cpp.o
[ 85%] Building CXX object examples/train-text-from-scratch/CMakeFiles/train-text-from-scratch.dir/train-text-from-scratch.cpp.o
[ 86%] Building CXX object examples/export-lora/CMakeFiles/export-lora.dir/export-lora.cpp.o
[ 87%] Building CXX object examples/imatrix/CMakeFiles/imatrix.dir/imatrix.cpp.o
[ 87%] Built target test-llama-grammar
[ 87%] Built target test-tokenizer-1-bpe
[ 87%] Built target test-tokenizer-1-llama
[ 88%] Building CXX object examples/server/CMakeFiles/server.dir/server.cpp.o
[ 89%] Linking CXX executable ../../bin/lookahead
[ 90%] Building CXX object pocs/vdot/CMakeFiles/vdot.dir/vdot.cpp.o
[ 90%] Built target batched-bench
[ 91%] Linking CXX executable ../../bin/simple
[ 92%] Linking CXX executable ../../bin/vdot
[ 93%] Linking CXX executable ../../bin/export-lora
[ 91%] Built target baby-llama
[ 94%] Linking CXX executable ../../bin/speculative
[ 95%] Linking CXX executable ../../bin/imatrix
[ 95%] Linking CXX executable ../../bin/passkey
[ 96%] Linking CXX executable ../../bin/server
[ 97%] Linking CXX executable ../../bin/lookup
[ 98%] Building CXX object pocs/vdot/CMakeFiles/q8dot.dir/q8dot.cpp.o
[ 99%] Linking CXX executable ../../bin/train-text-from-scratch
[ 99%] Built target convert-llama2c-to-ggml
[ 99%] Built target beam-search
[100%] Linking CXX executable ../../bin/q8dot
[100%] Built target embedding
[100%] Built target finetune
[100%] Built target tokenize
[100%] Built target parallel
[100%] Built target export-lora
[100%] Built target infill
[100%] Built target perplexity
[100%] Built target save-load-state
[100%] Built target llama-bench
[100%] Built target lookahead
[100%] Built target llava-cli
[100%] Built target main
[100%] Built target vdot
[100%] Built target simple
[100%] Built target imatrix
[100%] Built target q8dot
[100%] Built target speculative
[100%] Built target server
[100%] Built target lookup
[100%] Built target train-text-from-scratch
[100%] Built target passkey

real	0m1.468s
user	0m5.394s
sys	0m4.576s
+ python3 ../convert.py ../models-mnt/open-llama/3B-v2
Loading model file ../models-mnt/open-llama/3B-v2/pytorch_model.bin
params = Params(n_vocab=32000, n_embd=3200, n_layer=26, n_ctx=2048, n_ff=8640, n_head=32, n_head_kv=32, n_experts=None, n_experts_used=None, f_norm_eps=1e-06, rope_scaling_type=None, f_rope_freq_base=None, f_rope_scale=None, n_orig_ctx=None, rope_finetuned=None, ftype=None, path_model=PosixPath('../models-mnt/open-llama/3B-v2'))
Found vocab files: {'spm': PosixPath('../models-mnt/open-llama/3B-v2/tokenizer.model'), 'bpe': None, 'hfft': None}
Loading vocab file PosixPath('../models-mnt/open-llama/3B-v2/tokenizer.model'), type 'spm'
Vocab info: <SentencePieceVocab with 32000 base tokens and 0 added tokens>
Special vocab info: <SpecialVocab with 0 merges, special tokens {'bos': 1, 'eos': 2, 'pad': 0}, add special tokens {'bos': True, 'eos': False}>
Permuting layer 0
Permuting layer 1
Permuting layer 2
Permuting layer 3
Permuting layer 4
Permuting layer 5
Permuting layer 6
Permuting layer 7
Permuting layer 8
Permuting layer 9
Permuting layer 10
Permuting layer 11
Permuting layer 12
Permuting layer 13
Permuting layer 14
Permuting layer 15
Permuting layer 16
Permuting layer 17
Permuting layer 18
Permuting layer 19
Permuting layer 20
Permuting layer 21
Permuting layer 22
Permuting layer 23
Permuting layer 24
Permuting layer 25
model.embed_tokens.weight                        -> token_embd.weight                        | F16    | [32000, 3200]
model.layers.0.self_attn.q_proj.weight           -> blk.0.attn_q.weight                      | F16    | [3200, 3200]
model.layers.0.self_attn.k_proj.weight           -> blk.0.attn_k.weight                      | F16    | [3200, 3200]
model.layers.0.self_attn.v_proj.weight           -> blk.0.attn_v.weight                      | F16    | [3200, 3200]
model.layers.0.self_attn.o_proj.weight           -> blk.0.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.0.attn_rot_embd
model.layers.0.mlp.gate_proj.weight              -> blk.0.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.0.mlp.down_proj.weight              -> blk.0.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.0.mlp.up_proj.weight                -> blk.0.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.0.input_layernorm.weight            -> blk.0.attn_norm.weight                   | F16    | [3200]
model.layers.0.post_attention_layernorm.weight   -> blk.0.ffn_norm.weight                    | F16    | [3200]
model.layers.1.self_attn.q_proj.weight           -> blk.1.attn_q.weight                      | F16    | [3200, 3200]
model.layers.1.self_attn.k_proj.weight           -> blk.1.attn_k.weight                      | F16    | [3200, 3200]
model.layers.1.self_attn.v_proj.weight           -> blk.1.attn_v.weight                      | F16    | [3200, 3200]
model.layers.1.self_attn.o_proj.weight           -> blk.1.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.1.attn_rot_embd
model.layers.1.mlp.gate_proj.weight              -> blk.1.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.1.mlp.down_proj.weight              -> blk.1.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.1.mlp.up_proj.weight                -> blk.1.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.1.input_layernorm.weight            -> blk.1.attn_norm.weight                   | F16    | [3200]
model.layers.1.post_attention_layernorm.weight   -> blk.1.ffn_norm.weight                    | F16    | [3200]
model.layers.2.self_attn.q_proj.weight           -> blk.2.attn_q.weight                      | F16    | [3200, 3200]
model.layers.2.self_attn.k_proj.weight           -> blk.2.attn_k.weight                      | F16    | [3200, 3200]
model.layers.2.self_attn.v_proj.weight           -> blk.2.attn_v.weight                      | F16    | [3200, 3200]
model.layers.2.self_attn.o_proj.weight           -> blk.2.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.2.attn_rot_embd
model.layers.2.mlp.gate_proj.weight              -> blk.2.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.2.mlp.down_proj.weight              -> blk.2.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.2.mlp.up_proj.weight                -> blk.2.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.2.input_layernorm.weight            -> blk.2.attn_norm.weight                   | F16    | [3200]
model.layers.2.post_attention_layernorm.weight   -> blk.2.ffn_norm.weight                    | F16    | [3200]
model.layers.3.self_attn.q_proj.weight           -> blk.3.attn_q.weight                      | F16    | [3200, 3200]
model.layers.3.self_attn.k_proj.weight           -> blk.3.attn_k.weight                      | F16    | [3200, 3200]
model.layers.3.self_attn.v_proj.weight           -> blk.3.attn_v.weight                      | F16    | [3200, 3200]
model.layers.3.self_attn.o_proj.weight           -> blk.3.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.3.attn_rot_embd
model.layers.3.mlp.gate_proj.weight              -> blk.3.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.3.mlp.down_proj.weight              -> blk.3.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.3.mlp.up_proj.weight                -> blk.3.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.3.input_layernorm.weight            -> blk.3.attn_norm.weight                   | F16    | [3200]
model.layers.3.post_attention_layernorm.weight   -> blk.3.ffn_norm.weight                    | F16    | [3200]
model.layers.4.self_attn.q_proj.weight           -> blk.4.attn_q.weight                      | F16    | [3200, 3200]
model.layers.4.self_attn.k_proj.weight           -> blk.4.attn_k.weight                      | F16    | [3200, 3200]
model.layers.4.self_attn.v_proj.weight           -> blk.4.attn_v.weight                      | F16    | [3200, 3200]
model.layers.4.self_attn.o_proj.weight           -> blk.4.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.4.attn_rot_embd
model.layers.4.mlp.gate_proj.weight              -> blk.4.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.4.mlp.down_proj.weight              -> blk.4.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.4.mlp.up_proj.weight                -> blk.4.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.4.input_layernorm.weight            -> blk.4.attn_norm.weight                   | F16    | [3200]
model.layers.4.post_attention_layernorm.weight   -> blk.4.ffn_norm.weight                    | F16    | [3200]
model.layers.5.self_attn.q_proj.weight           -> blk.5.attn_q.weight                      | F16    | [3200, 3200]
model.layers.5.self_attn.k_proj.weight           -> blk.5.attn_k.weight                      | F16    | [3200, 3200]
model.layers.5.self_attn.v_proj.weight           -> blk.5.attn_v.weight                      | F16    | [3200, 3200]
model.layers.5.self_attn.o_proj.weight           -> blk.5.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.5.attn_rot_embd
model.layers.5.mlp.gate_proj.weight              -> blk.5.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.5.mlp.down_proj.weight              -> blk.5.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.5.mlp.up_proj.weight                -> blk.5.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.5.input_layernorm.weight            -> blk.5.attn_norm.weight                   | F16    | [3200]
model.layers.5.post_attention_layernorm.weight   -> blk.5.ffn_norm.weight                    | F16    | [3200]
model.layers.6.self_attn.q_proj.weight           -> blk.6.attn_q.weight                      | F16    | [3200, 3200]
model.layers.6.self_attn.k_proj.weight           -> blk.6.attn_k.weight                      | F16    | [3200, 3200]
model.layers.6.self_attn.v_proj.weight           -> blk.6.attn_v.weight                      | F16    | [3200, 3200]
model.layers.6.self_attn.o_proj.weight           -> blk.6.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.6.attn_rot_embd
model.layers.6.mlp.gate_proj.weight              -> blk.6.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.6.mlp.down_proj.weight              -> blk.6.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.6.mlp.up_proj.weight                -> blk.6.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.6.input_layernorm.weight            -> blk.6.attn_norm.weight                   | F16    | [3200]
model.layers.6.post_attention_layernorm.weight   -> blk.6.ffn_norm.weight                    | F16    | [3200]
model.layers.7.self_attn.q_proj.weight           -> blk.7.attn_q.weight                      | F16    | [3200, 3200]
model.layers.7.self_attn.k_proj.weight           -> blk.7.attn_k.weight                      | F16    | [3200, 3200]
model.layers.7.self_attn.v_proj.weight           -> blk.7.attn_v.weight                      | F16    | [3200, 3200]
model.layers.7.self_attn.o_proj.weight           -> blk.7.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.7.attn_rot_embd
model.layers.7.mlp.gate_proj.weight              -> blk.7.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.7.mlp.down_proj.weight              -> blk.7.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.7.mlp.up_proj.weight                -> blk.7.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.7.input_layernorm.weight            -> blk.7.attn_norm.weight                   | F16    | [3200]
model.layers.7.post_attention_layernorm.weight   -> blk.7.ffn_norm.weight                    | F16    | [3200]
model.layers.8.self_attn.q_proj.weight           -> blk.8.attn_q.weight                      | F16    | [3200, 3200]
model.layers.8.self_attn.k_proj.weight           -> blk.8.attn_k.weight                      | F16    | [3200, 3200]
model.layers.8.self_attn.v_proj.weight           -> blk.8.attn_v.weight                      | F16    | [3200, 3200]
model.layers.8.self_attn.o_proj.weight           -> blk.8.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.8.attn_rot_embd
model.layers.8.mlp.gate_proj.weight              -> blk.8.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.8.mlp.down_proj.weight              -> blk.8.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.8.mlp.up_proj.weight                -> blk.8.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.8.input_layernorm.weight            -> blk.8.attn_norm.weight                   | F16    | [3200]
model.layers.8.post_attention_layernorm.weight   -> blk.8.ffn_norm.weight                    | F16    | [3200]
model.layers.9.self_attn.q_proj.weight           -> blk.9.attn_q.weight                      | F16    | [3200, 3200]
model.layers.9.self_attn.k_proj.weight           -> blk.9.attn_k.weight                      | F16    | [3200, 3200]
model.layers.9.self_attn.v_proj.weight           -> blk.9.attn_v.weight                      | F16    | [3200, 3200]
model.layers.9.self_attn.o_proj.weight           -> blk.9.attn_output.weight                 | F16    | [3200, 3200]
skipping tensor blk.9.attn_rot_embd
model.layers.9.mlp.gate_proj.weight              -> blk.9.ffn_gate.weight                    | F16    | [8640, 3200]
model.layers.9.mlp.down_proj.weight              -> blk.9.ffn_down.weight                    | F16    | [3200, 8640]
model.layers.9.mlp.up_proj.weight                -> blk.9.ffn_up.weight                      | F16    | [8640, 3200]
model.layers.9.input_layernorm.weight            -> blk.9.attn_norm.weight                   | F16    | [3200]
model.layers.9.post_attention_layernorm.weight   -> blk.9.ffn_norm.weight                    | F16    | [3200]
model.layers.10.self_attn.q_proj.weight          -> blk.10.attn_q.weight                     | F16    | [3200, 3200]
model.layers.10.self_attn.k_proj.weight          -> blk.10.attn_k.weight                     | F16    | [3200, 3200]
model.layers.10.self_attn.v_proj.weight          -> blk.10.attn_v.weight                     | F16    | [3200, 3200]
model.layers.10.self_attn.o_proj.weight          -> blk.10.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.10.attn_rot_embd
model.layers.10.mlp.gate_proj.weight             -> blk.10.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.10.mlp.down_proj.weight             -> blk.10.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.10.mlp.up_proj.weight               -> blk.10.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.10.input_layernorm.weight           -> blk.10.attn_norm.weight                  | F16    | [3200]
model.layers.10.post_attention_layernorm.weight  -> blk.10.ffn_norm.weight                   | F16    | [3200]
model.layers.11.self_attn.q_proj.weight          -> blk.11.attn_q.weight                     | F16    | [3200, 3200]
model.layers.11.self_attn.k_proj.weight          -> blk.11.attn_k.weight                     | F16    | [3200, 3200]
model.layers.11.self_attn.v_proj.weight          -> blk.11.attn_v.weight                     | F16    | [3200, 3200]
model.layers.11.self_attn.o_proj.weight          -> blk.11.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.11.attn_rot_embd
model.layers.11.mlp.gate_proj.weight             -> blk.11.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.11.mlp.down_proj.weight             -> blk.11.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.11.mlp.up_proj.weight               -> blk.11.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.11.input_layernorm.weight           -> blk.11.attn_norm.weight                  | F16    | [3200]
model.layers.11.post_attention_layernorm.weight  -> blk.11.ffn_norm.weight                   | F16    | [3200]
model.layers.12.self_attn.q_proj.weight          -> blk.12.attn_q.weight                     | F16    | [3200, 3200]
model.layers.12.self_attn.k_proj.weight          -> blk.12.attn_k.weight                     | F16    | [3200, 3200]
model.layers.12.self_attn.v_proj.weight          -> blk.12.attn_v.weight                     | F16    | [3200, 3200]
model.layers.12.self_attn.o_proj.weight          -> blk.12.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.12.attn_rot_embd
model.layers.12.mlp.gate_proj.weight             -> blk.12.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.12.mlp.down_proj.weight             -> blk.12.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.12.mlp.up_proj.weight               -> blk.12.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.12.input_layernorm.weight           -> blk.12.attn_norm.weight                  | F16    | [3200]
model.layers.12.post_attention_layernorm.weight  -> blk.12.ffn_norm.weight                   | F16    | [3200]
model.layers.13.self_attn.q_proj.weight          -> blk.13.attn_q.weight                     | F16    | [3200, 3200]
model.layers.13.self_attn.k_proj.weight          -> blk.13.attn_k.weight                     | F16    | [3200, 3200]
model.layers.13.self_attn.v_proj.weight          -> blk.13.attn_v.weight                     | F16    | [3200, 3200]
model.layers.13.self_attn.o_proj.weight          -> blk.13.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.13.attn_rot_embd
model.layers.13.mlp.gate_proj.weight             -> blk.13.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.13.mlp.down_proj.weight             -> blk.13.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.13.mlp.up_proj.weight               -> blk.13.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.13.input_layernorm.weight           -> blk.13.attn_norm.weight                  | F16    | [3200]
model.layers.13.post_attention_layernorm.weight  -> blk.13.ffn_norm.weight                   | F16    | [3200]
model.layers.14.self_attn.q_proj.weight          -> blk.14.attn_q.weight                     | F16    | [3200, 3200]
model.layers.14.self_attn.k_proj.weight          -> blk.14.attn_k.weight                     | F16    | [3200, 3200]
model.layers.14.self_attn.v_proj.weight          -> blk.14.attn_v.weight                     | F16    | [3200, 3200]
model.layers.14.self_attn.o_proj.weight          -> blk.14.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.14.attn_rot_embd
model.layers.14.mlp.gate_proj.weight             -> blk.14.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.14.mlp.down_proj.weight             -> blk.14.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.14.mlp.up_proj.weight               -> blk.14.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.14.input_layernorm.weight           -> blk.14.attn_norm.weight                  | F16    | [3200]
model.layers.14.post_attention_layernorm.weight  -> blk.14.ffn_norm.weight                   | F16    | [3200]
model.layers.15.self_attn.q_proj.weight          -> blk.15.attn_q.weight                     | F16    | [3200, 3200]
model.layers.15.self_attn.k_proj.weight          -> blk.15.attn_k.weight                     | F16    | [3200, 3200]
model.layers.15.self_attn.v_proj.weight          -> blk.15.attn_v.weight                     | F16    | [3200, 3200]
model.layers.15.self_attn.o_proj.weight          -> blk.15.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.15.attn_rot_embd
model.layers.15.mlp.gate_proj.weight             -> blk.15.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.15.mlp.down_proj.weight             -> blk.15.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.15.mlp.up_proj.weight               -> blk.15.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.15.input_layernorm.weight           -> blk.15.attn_norm.weight                  | F16    | [3200]
model.layers.15.post_attention_layernorm.weight  -> blk.15.ffn_norm.weight                   | F16    | [3200]
model.layers.16.self_attn.q_proj.weight          -> blk.16.attn_q.weight                     | F16    | [3200, 3200]
model.layers.16.self_attn.k_proj.weight          -> blk.16.attn_k.weight                     | F16    | [3200, 3200]
model.layers.16.self_attn.v_proj.weight          -> blk.16.attn_v.weight                     | F16    | [3200, 3200]
model.layers.16.self_attn.o_proj.weight          -> blk.16.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.16.attn_rot_embd
model.layers.16.mlp.gate_proj.weight             -> blk.16.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.16.mlp.down_proj.weight             -> blk.16.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.16.mlp.up_proj.weight               -> blk.16.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.16.input_layernorm.weight           -> blk.16.attn_norm.weight                  | F16    | [3200]
model.layers.16.post_attention_layernorm.weight  -> blk.16.ffn_norm.weight                   | F16    | [3200]
model.layers.17.self_attn.q_proj.weight          -> blk.17.attn_q.weight                     | F16    | [3200, 3200]
model.layers.17.self_attn.k_proj.weight          -> blk.17.attn_k.weight                     | F16    | [3200, 3200]
model.layers.17.self_attn.v_proj.weight          -> blk.17.attn_v.weight                     | F16    | [3200, 3200]
model.layers.17.self_attn.o_proj.weight          -> blk.17.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.17.attn_rot_embd
model.layers.17.mlp.gate_proj.weight             -> blk.17.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.17.mlp.down_proj.weight             -> blk.17.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.17.mlp.up_proj.weight               -> blk.17.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.17.input_layernorm.weight           -> blk.17.attn_norm.weight                  | F16    | [3200]
model.layers.17.post_attention_layernorm.weight  -> blk.17.ffn_norm.weight                   | F16    | [3200]
model.layers.18.self_attn.q_proj.weight          -> blk.18.attn_q.weight                     | F16    | [3200, 3200]
model.layers.18.self_attn.k_proj.weight          -> blk.18.attn_k.weight                     | F16    | [3200, 3200]
model.layers.18.self_attn.v_proj.weight          -> blk.18.attn_v.weight                     | F16    | [3200, 3200]
model.layers.18.self_attn.o_proj.weight          -> blk.18.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.18.attn_rot_embd
model.layers.18.mlp.gate_proj.weight             -> blk.18.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.18.mlp.down_proj.weight             -> blk.18.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.18.mlp.up_proj.weight               -> blk.18.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.18.input_layernorm.weight           -> blk.18.attn_norm.weight                  | F16    | [3200]
model.layers.18.post_attention_layernorm.weight  -> blk.18.ffn_norm.weight                   | F16    | [3200]
model.layers.19.self_attn.q_proj.weight          -> blk.19.attn_q.weight                     | F16    | [3200, 3200]
model.layers.19.self_attn.k_proj.weight          -> blk.19.attn_k.weight                     | F16    | [3200, 3200]
model.layers.19.self_attn.v_proj.weight          -> blk.19.attn_v.weight                     | F16    | [3200, 3200]
model.layers.19.self_attn.o_proj.weight          -> blk.19.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.19.attn_rot_embd
model.layers.19.mlp.gate_proj.weight             -> blk.19.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.19.mlp.down_proj.weight             -> blk.19.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.19.mlp.up_proj.weight               -> blk.19.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.19.input_layernorm.weight           -> blk.19.attn_norm.weight                  | F16    | [3200]
model.layers.19.post_attention_layernorm.weight  -> blk.19.ffn_norm.weight                   | F16    | [3200]
model.layers.20.self_attn.q_proj.weight          -> blk.20.attn_q.weight                     | F16    | [3200, 3200]
model.layers.20.self_attn.k_proj.weight          -> blk.20.attn_k.weight                     | F16    | [3200, 3200]
model.layers.20.self_attn.v_proj.weight          -> blk.20.attn_v.weight                     | F16    | [3200, 3200]
model.layers.20.self_attn.o_proj.weight          -> blk.20.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.20.attn_rot_embd
model.layers.20.mlp.gate_proj.weight             -> blk.20.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.20.mlp.down_proj.weight             -> blk.20.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.20.mlp.up_proj.weight               -> blk.20.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.20.input_layernorm.weight           -> blk.20.attn_norm.weight                  | F16    | [3200]
model.layers.20.post_attention_layernorm.weight  -> blk.20.ffn_norm.weight                   | F16    | [3200]
model.layers.21.self_attn.q_proj.weight          -> blk.21.attn_q.weight                     | F16    | [3200, 3200]
model.layers.21.self_attn.k_proj.weight          -> blk.21.attn_k.weight                     | F16    | [3200, 3200]
model.layers.21.self_attn.v_proj.weight          -> blk.21.attn_v.weight                     | F16    | [3200, 3200]
model.layers.21.self_attn.o_proj.weight          -> blk.21.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.21.attn_rot_embd
model.layers.21.mlp.gate_proj.weight             -> blk.21.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.21.mlp.down_proj.weight             -> blk.21.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.21.mlp.up_proj.weight               -> blk.21.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.21.input_layernorm.weight           -> blk.21.attn_norm.weight                  | F16    | [3200]
model.layers.21.post_attention_layernorm.weight  -> blk.21.ffn_norm.weight                   | F16    | [3200]
model.layers.22.self_attn.q_proj.weight          -> blk.22.attn_q.weight                     | F16    | [3200, 3200]
model.layers.22.self_attn.k_proj.weight          -> blk.22.attn_k.weight                     | F16    | [3200, 3200]
model.layers.22.self_attn.v_proj.weight          -> blk.22.attn_v.weight                     | F16    | [3200, 3200]
model.layers.22.self_attn.o_proj.weight          -> blk.22.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.22.attn_rot_embd
model.layers.22.mlp.gate_proj.weight             -> blk.22.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.22.mlp.down_proj.weight             -> blk.22.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.22.mlp.up_proj.weight               -> blk.22.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.22.input_layernorm.weight           -> blk.22.attn_norm.weight                  | F16    | [3200]
model.layers.22.post_attention_layernorm.weight  -> blk.22.ffn_norm.weight                   | F16    | [3200]
model.layers.23.self_attn.q_proj.weight          -> blk.23.attn_q.weight                     | F16    | [3200, 3200]
model.layers.23.self_attn.k_proj.weight          -> blk.23.attn_k.weight                     | F16    | [3200, 3200]
model.layers.23.self_attn.v_proj.weight          -> blk.23.attn_v.weight                     | F16    | [3200, 3200]
model.layers.23.self_attn.o_proj.weight          -> blk.23.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.23.attn_rot_embd
model.layers.23.mlp.gate_proj.weight             -> blk.23.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.23.mlp.down_proj.weight             -> blk.23.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.23.mlp.up_proj.weight               -> blk.23.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.23.input_layernorm.weight           -> blk.23.attn_norm.weight                  | F16    | [3200]
model.layers.23.post_attention_layernorm.weight  -> blk.23.ffn_norm.weight                   | F16    | [3200]
model.layers.24.self_attn.q_proj.weight          -> blk.24.attn_q.weight                     | F16    | [3200, 3200]
model.layers.24.self_attn.k_proj.weight          -> blk.24.attn_k.weight                     | F16    | [3200, 3200]
model.layers.24.self_attn.v_proj.weight          -> blk.24.attn_v.weight                     | F16    | [3200, 3200]
model.layers.24.self_attn.o_proj.weight          -> blk.24.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.24.attn_rot_embd
model.layers.24.mlp.gate_proj.weight             -> blk.24.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.24.mlp.down_proj.weight             -> blk.24.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.24.mlp.up_proj.weight               -> blk.24.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.24.input_layernorm.weight           -> blk.24.attn_norm.weight                  | F16    | [3200]
model.layers.24.post_attention_layernorm.weight  -> blk.24.ffn_norm.weight                   | F16    | [3200]
model.layers.25.self_attn.q_proj.weight          -> blk.25.attn_q.weight                     | F16    | [3200, 3200]
model.layers.25.self_attn.k_proj.weight          -> blk.25.attn_k.weight                     | F16    | [3200, 3200]
model.layers.25.self_attn.v_proj.weight          -> blk.25.attn_v.weight                     | F16    | [3200, 3200]
model.layers.25.self_attn.o_proj.weight          -> blk.25.attn_output.weight                | F16    | [3200, 3200]
skipping tensor blk.25.attn_rot_embd
model.layers.25.mlp.gate_proj.weight             -> blk.25.ffn_gate.weight                   | F16    | [8640, 3200]
model.layers.25.mlp.down_proj.weight             -> blk.25.ffn_down.weight                   | F16    | [3200, 8640]
model.layers.25.mlp.up_proj.weight               -> blk.25.ffn_up.weight                     | F16    | [8640, 3200]
model.layers.25.input_layernorm.weight           -> blk.25.attn_norm.weight                  | F16    | [3200]
model.layers.25.post_attention_layernorm.weight  -> blk.25.ffn_norm.weight                   | F16    | [3200]
model.norm.weight                                -> output_norm.weight                       | F16    | [3200]
lm_head.weight                                   -> output.weight                            | F16    | [32000, 3200]
Writing ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf, format 1
Ignoring added_tokens.json since model matches vocab size without it.
gguf: This GGUF file is for Little Endian only
gguf: Setting special token type bos to 1
gguf: Setting special token type eos to 2
gguf: Setting special token type pad to 0
gguf: Setting add_bos_token to True
gguf: Setting add_eos_token to False
[  1/237] Writing tensor token_embd.weight                      | size  32000 x   3200  | type F16  | T+   0
[  2/237] Writing tensor blk.0.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[  3/237] Writing tensor blk.0.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[  4/237] Writing tensor blk.0.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[  5/237] Writing tensor blk.0.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[  6/237] Writing tensor blk.0.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   0
[  7/237] Writing tensor blk.0.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   0
[  8/237] Writing tensor blk.0.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   0
[  9/237] Writing tensor blk.0.attn_norm.weight                 | size   3200           | type F32  | T+   0
[ 10/237] Writing tensor blk.0.ffn_norm.weight                  | size   3200           | type F32  | T+   0
[ 11/237] Writing tensor blk.1.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 12/237] Writing tensor blk.1.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 13/237] Writing tensor blk.1.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 14/237] Writing tensor blk.1.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[ 15/237] Writing tensor blk.1.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   0
[ 16/237] Writing tensor blk.1.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   0
[ 17/237] Writing tensor blk.1.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   0
[ 18/237] Writing tensor blk.1.attn_norm.weight                 | size   3200           | type F32  | T+   0
[ 19/237] Writing tensor blk.1.ffn_norm.weight                  | size   3200           | type F32  | T+   0
[ 20/237] Writing tensor blk.2.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 21/237] Writing tensor blk.2.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 22/237] Writing tensor blk.2.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 23/237] Writing tensor blk.2.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[ 24/237] Writing tensor blk.2.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   0
[ 25/237] Writing tensor blk.2.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   0
[ 26/237] Writing tensor blk.2.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   0
[ 27/237] Writing tensor blk.2.attn_norm.weight                 | size   3200           | type F32  | T+   0
[ 28/237] Writing tensor blk.2.ffn_norm.weight                  | size   3200           | type F32  | T+   0
[ 29/237] Writing tensor blk.3.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 30/237] Writing tensor blk.3.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 31/237] Writing tensor blk.3.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   0
[ 32/237] Writing tensor blk.3.attn_output.weight               | size   3200 x   3200  | type F16  | T+   0
[ 33/237] Writing tensor blk.3.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   0
[ 34/237] Writing tensor blk.3.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 35/237] Writing tensor blk.3.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 36/237] Writing tensor blk.3.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 37/237] Writing tensor blk.3.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 38/237] Writing tensor blk.4.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 39/237] Writing tensor blk.4.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 40/237] Writing tensor blk.4.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 41/237] Writing tensor blk.4.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 42/237] Writing tensor blk.4.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 43/237] Writing tensor blk.4.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 44/237] Writing tensor blk.4.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 45/237] Writing tensor blk.4.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 46/237] Writing tensor blk.4.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 47/237] Writing tensor blk.5.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 48/237] Writing tensor blk.5.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 49/237] Writing tensor blk.5.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 50/237] Writing tensor blk.5.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 51/237] Writing tensor blk.5.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 52/237] Writing tensor blk.5.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 53/237] Writing tensor blk.5.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 54/237] Writing tensor blk.5.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 55/237] Writing tensor blk.5.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 56/237] Writing tensor blk.6.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 57/237] Writing tensor blk.6.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 58/237] Writing tensor blk.6.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 59/237] Writing tensor blk.6.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 60/237] Writing tensor blk.6.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 61/237] Writing tensor blk.6.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 62/237] Writing tensor blk.6.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 63/237] Writing tensor blk.6.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 64/237] Writing tensor blk.6.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 65/237] Writing tensor blk.7.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 66/237] Writing tensor blk.7.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 67/237] Writing tensor blk.7.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 68/237] Writing tensor blk.7.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 69/237] Writing tensor blk.7.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 70/237] Writing tensor blk.7.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 71/237] Writing tensor blk.7.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 72/237] Writing tensor blk.7.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 73/237] Writing tensor blk.7.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 74/237] Writing tensor blk.8.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 75/237] Writing tensor blk.8.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 76/237] Writing tensor blk.8.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 77/237] Writing tensor blk.8.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 78/237] Writing tensor blk.8.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 79/237] Writing tensor blk.8.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 80/237] Writing tensor blk.8.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   1
[ 81/237] Writing tensor blk.8.attn_norm.weight                 | size   3200           | type F32  | T+   1
[ 82/237] Writing tensor blk.8.ffn_norm.weight                  | size   3200           | type F32  | T+   1
[ 83/237] Writing tensor blk.9.attn_q.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 84/237] Writing tensor blk.9.attn_k.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 85/237] Writing tensor blk.9.attn_v.weight                    | size   3200 x   3200  | type F16  | T+   1
[ 86/237] Writing tensor blk.9.attn_output.weight               | size   3200 x   3200  | type F16  | T+   1
[ 87/237] Writing tensor blk.9.ffn_gate.weight                  | size   8640 x   3200  | type F16  | T+   1
[ 88/237] Writing tensor blk.9.ffn_down.weight                  | size   3200 x   8640  | type F16  | T+   1
[ 89/237] Writing tensor blk.9.ffn_up.weight                    | size   8640 x   3200  | type F16  | T+   2
[ 90/237] Writing tensor blk.9.attn_norm.weight                 | size   3200           | type F32  | T+   2
[ 91/237] Writing tensor blk.9.ffn_norm.weight                  | size   3200           | type F32  | T+   2
[ 92/237] Writing tensor blk.10.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[ 93/237] Writing tensor blk.10.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[ 94/237] Writing tensor blk.10.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[ 95/237] Writing tensor blk.10.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[ 96/237] Writing tensor blk.10.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[ 97/237] Writing tensor blk.10.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[ 98/237] Writing tensor blk.10.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[ 99/237] Writing tensor blk.10.attn_norm.weight                | size   3200           | type F32  | T+   2
[100/237] Writing tensor blk.10.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[101/237] Writing tensor blk.11.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[102/237] Writing tensor blk.11.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[103/237] Writing tensor blk.11.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[104/237] Writing tensor blk.11.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[105/237] Writing tensor blk.11.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[106/237] Writing tensor blk.11.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[107/237] Writing tensor blk.11.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[108/237] Writing tensor blk.11.attn_norm.weight                | size   3200           | type F32  | T+   2
[109/237] Writing tensor blk.11.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[110/237] Writing tensor blk.12.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[111/237] Writing tensor blk.12.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[112/237] Writing tensor blk.12.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[113/237] Writing tensor blk.12.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[114/237] Writing tensor blk.12.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[115/237] Writing tensor blk.12.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[116/237] Writing tensor blk.12.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[117/237] Writing tensor blk.12.attn_norm.weight                | size   3200           | type F32  | T+   2
[118/237] Writing tensor blk.12.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[119/237] Writing tensor blk.13.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[120/237] Writing tensor blk.13.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[121/237] Writing tensor blk.13.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[122/237] Writing tensor blk.13.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[123/237] Writing tensor blk.13.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[124/237] Writing tensor blk.13.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[125/237] Writing tensor blk.13.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[126/237] Writing tensor blk.13.attn_norm.weight                | size   3200           | type F32  | T+   2
[127/237] Writing tensor blk.13.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[128/237] Writing tensor blk.14.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[129/237] Writing tensor blk.14.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[130/237] Writing tensor blk.14.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[131/237] Writing tensor blk.14.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[132/237] Writing tensor blk.14.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[133/237] Writing tensor blk.14.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[134/237] Writing tensor blk.14.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[135/237] Writing tensor blk.14.attn_norm.weight                | size   3200           | type F32  | T+   2
[136/237] Writing tensor blk.14.ffn_norm.weight                 | size   3200           | type F32  | T+   2
[137/237] Writing tensor blk.15.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   2
[138/237] Writing tensor blk.15.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   2
[139/237] Writing tensor blk.15.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   2
[140/237] Writing tensor blk.15.attn_output.weight              | size   3200 x   3200  | type F16  | T+   2
[141/237] Writing tensor blk.15.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   2
[142/237] Writing tensor blk.15.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   2
[143/237] Writing tensor blk.15.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   2
[144/237] Writing tensor blk.15.attn_norm.weight                | size   3200           | type F32  | T+   3
[145/237] Writing tensor blk.15.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[146/237] Writing tensor blk.16.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[147/237] Writing tensor blk.16.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[148/237] Writing tensor blk.16.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[149/237] Writing tensor blk.16.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[150/237] Writing tensor blk.16.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[151/237] Writing tensor blk.16.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[152/237] Writing tensor blk.16.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[153/237] Writing tensor blk.16.attn_norm.weight                | size   3200           | type F32  | T+   3
[154/237] Writing tensor blk.16.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[155/237] Writing tensor blk.17.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[156/237] Writing tensor blk.17.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[157/237] Writing tensor blk.17.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[158/237] Writing tensor blk.17.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[159/237] Writing tensor blk.17.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[160/237] Writing tensor blk.17.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[161/237] Writing tensor blk.17.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[162/237] Writing tensor blk.17.attn_norm.weight                | size   3200           | type F32  | T+   3
[163/237] Writing tensor blk.17.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[164/237] Writing tensor blk.18.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[165/237] Writing tensor blk.18.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[166/237] Writing tensor blk.18.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[167/237] Writing tensor blk.18.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[168/237] Writing tensor blk.18.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[169/237] Writing tensor blk.18.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[170/237] Writing tensor blk.18.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[171/237] Writing tensor blk.18.attn_norm.weight                | size   3200           | type F32  | T+   3
[172/237] Writing tensor blk.18.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[173/237] Writing tensor blk.19.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[174/237] Writing tensor blk.19.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[175/237] Writing tensor blk.19.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[176/237] Writing tensor blk.19.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[177/237] Writing tensor blk.19.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[178/237] Writing tensor blk.19.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[179/237] Writing tensor blk.19.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[180/237] Writing tensor blk.19.attn_norm.weight                | size   3200           | type F32  | T+   3
[181/237] Writing tensor blk.19.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[182/237] Writing tensor blk.20.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[183/237] Writing tensor blk.20.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[184/237] Writing tensor blk.20.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[185/237] Writing tensor blk.20.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[186/237] Writing tensor blk.20.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[187/237] Writing tensor blk.20.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[188/237] Writing tensor blk.20.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[189/237] Writing tensor blk.20.attn_norm.weight                | size   3200           | type F32  | T+   3
[190/237] Writing tensor blk.20.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[191/237] Writing tensor blk.21.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[192/237] Writing tensor blk.21.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[193/237] Writing tensor blk.21.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[194/237] Writing tensor blk.21.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[195/237] Writing tensor blk.21.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   3
[196/237] Writing tensor blk.21.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   3
[197/237] Writing tensor blk.21.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   3
[198/237] Writing tensor blk.21.attn_norm.weight                | size   3200           | type F32  | T+   3
[199/237] Writing tensor blk.21.ffn_norm.weight                 | size   3200           | type F32  | T+   3
[200/237] Writing tensor blk.22.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   3
[201/237] Writing tensor blk.22.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   3
[202/237] Writing tensor blk.22.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   3
[203/237] Writing tensor blk.22.attn_output.weight              | size   3200 x   3200  | type F16  | T+   3
[204/237] Writing tensor blk.22.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[205/237] Writing tensor blk.22.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[206/237] Writing tensor blk.22.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[207/237] Writing tensor blk.22.attn_norm.weight                | size   3200           | type F32  | T+   4
[208/237] Writing tensor blk.22.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[209/237] Writing tensor blk.23.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   4
[210/237] Writing tensor blk.23.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   4
[211/237] Writing tensor blk.23.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   4
[212/237] Writing tensor blk.23.attn_output.weight              | size   3200 x   3200  | type F16  | T+   4
[213/237] Writing tensor blk.23.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[214/237] Writing tensor blk.23.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[215/237] Writing tensor blk.23.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[216/237] Writing tensor blk.23.attn_norm.weight                | size   3200           | type F32  | T+   4
[217/237] Writing tensor blk.23.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[218/237] Writing tensor blk.24.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   4
[219/237] Writing tensor blk.24.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   4
[220/237] Writing tensor blk.24.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   4
[221/237] Writing tensor blk.24.attn_output.weight              | size   3200 x   3200  | type F16  | T+   4
[222/237] Writing tensor blk.24.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[223/237] Writing tensor blk.24.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[224/237] Writing tensor blk.24.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[225/237] Writing tensor blk.24.attn_norm.weight                | size   3200           | type F32  | T+   4
[226/237] Writing tensor blk.24.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[227/237] Writing tensor blk.25.attn_q.weight                   | size   3200 x   3200  | type F16  | T+   4
[228/237] Writing tensor blk.25.attn_k.weight                   | size   3200 x   3200  | type F16  | T+   4
[229/237] Writing tensor blk.25.attn_v.weight                   | size   3200 x   3200  | type F16  | T+   4
[230/237] Writing tensor blk.25.attn_output.weight              | size   3200 x   3200  | type F16  | T+   4
[231/237] Writing tensor blk.25.ffn_gate.weight                 | size   8640 x   3200  | type F16  | T+   4
[232/237] Writing tensor blk.25.ffn_down.weight                 | size   3200 x   8640  | type F16  | T+   4
[233/237] Writing tensor blk.25.ffn_up.weight                   | size   8640 x   3200  | type F16  | T+   4
[234/237] Writing tensor blk.25.attn_norm.weight                | size   3200           | type F32  | T+   4
[235/237] Writing tensor blk.25.ffn_norm.weight                 | size   3200           | type F32  | T+   4
[236/237] Writing tensor output_norm.weight                     | size   3200           | type F32  | T+   4
[237/237] Writing tensor output.weight                          | size  32000 x   3200  | type F16  | T+   4
Wrote ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf
+ model_f16=../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf
+ model_q4_0=../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf
+ model_q4_1=../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf
+ model_q5_0=../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf
+ model_q5_1=../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf
+ model_q2_k=../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf
+ model_q3_k=../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf
+ model_q4_k=../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf
+ model_q5_k=../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf
+ model_q6_k=../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf
+ wiki_test_60=../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf q8_0
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q8_0 .. size =   195.31 MiB ->   103.76 MiB | hist: 0.000 0.028 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.026 0.018 0.028 0.044 0.063 0.087 0.110 0.246 0.110 0.087 0.063 0.044 0.028 0.018 0.026 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.025 0.017 0.027 0.042 0.062 0.087 0.113 0.255 0.112 0.087 0.062 0.042 0.027 0.017 0.025 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.087 0.108 0.238 0.108 0.087 0.065 0.046 0.030 0.019 0.027 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.026 0.017 0.028 0.043 0.063 0.088 0.111 0.246 0.111 0.088 0.063 0.044 0.028 0.017 0.026 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.028 0.020 0.032 0.049 0.067 0.088 0.105 0.223 0.105 0.088 0.067 0.049 0.032 0.020 0.028 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.028 0.020 0.032 0.049 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.107 0.229 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.019 0.031 0.047 0.066 0.088 0.107 0.230 0.107 0.088 0.066 0.047 0.031 0.019 0.027 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.108 0.234 0.108 0.088 0.066 0.046 0.030 0.019 0.027 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.026 0.018 0.029 0.044 0.064 0.088 0.111 0.242 0.110 0.088 0.064 0.044 0.029 0.018 0.026 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.228 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.087 0.067 0.048 0.032 0.020 0.027 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.087 0.106 0.228 0.106 0.088 0.066 0.048 0.032 0.020 0.027 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.087 0.106 0.230 0.106 0.087 0.066 0.047 0.031 0.020 0.027 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.087 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.229 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.229 0.106 0.087 0.066 0.048 0.031 0.020 0.027 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.087 0.066 0.047 0.031 0.020 0.027 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.066 0.048 0.032 0.020 0.027 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.228 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.105 0.088 0.066 0.048 0.032 0.020 0.027 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.228 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.066 0.088 0.106 0.228 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.105 0.088 0.067 0.048 0.032 0.020 0.027 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.227 0.106 0.088 0.067 0.048 0.031 0.020 0.027 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.105 0.224 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.088 0.106 0.228 0.106 0.088 0.067 0.047 0.031 0.020 0.027 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.226 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.048 0.066 0.087 0.106 0.229 0.106 0.088 0.066 0.048 0.031 0.020 0.027 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    19.53 MiB ->    10.38 MiB | hist: 0.000 0.027 0.020 0.031 0.047 0.066 0.088 0.106 0.228 0.106 0.088 0.066 0.047 0.031 0.020 0.027 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.019 0.030 0.046 0.065 0.088 0.108 0.233 0.108 0.088 0.066 0.046 0.030 0.019 0.027 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q8_0 .. size =    52.73 MiB ->    28.02 MiB | hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q8_0 .. size =   195.31 MiB ->   103.76 MiB | hist: 0.000 0.027 0.020 0.033 0.049 0.068 0.088 0.103 0.217 0.104 0.088 0.069 0.050 0.033 0.021 0.028 
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  3472.45 MB
llama_model_quantize_internal: hist: 0.000 0.027 0.020 0.032 0.048 0.067 0.088 0.106 0.225 0.106 0.088 0.067 0.048 0.032 0.020 0.027 

main: quantize time =  9443.68 ms
main:    total time =  9443.68 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf q4_0
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf' as Q4_0
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q4_0 .. size =   195.31 MiB ->    54.93 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.014 0.023 0.035 0.053 0.074 0.098 0.119 0.129 0.119 0.098 0.074 0.053 0.035 0.023 0.019 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.013 0.021 0.034 0.051 0.073 0.099 0.122 0.134 0.123 0.099 0.073 0.051 0.033 0.021 0.017 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.024 0.037 0.054 0.075 0.097 0.115 0.125 0.115 0.096 0.075 0.054 0.037 0.024 0.020 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.014 0.022 0.035 0.052 0.074 0.099 0.120 0.128 0.119 0.099 0.075 0.052 0.035 0.022 0.018 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.026 0.040 0.057 0.077 0.096 0.110 0.115 0.110 0.096 0.077 0.057 0.040 0.026 0.021 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.026 0.039 0.057 0.077 0.096 0.110 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.112 0.119 0.112 0.097 0.076 0.056 0.038 0.025 0.020 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.113 0.120 0.113 0.097 0.076 0.056 0.038 0.024 0.020 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.024 0.037 0.055 0.076 0.097 0.114 0.122 0.114 0.097 0.076 0.055 0.037 0.024 0.020 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.014 0.023 0.035 0.053 0.075 0.098 0.118 0.126 0.118 0.098 0.075 0.053 0.035 0.023 0.019 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.111 0.096 0.076 0.056 0.039 0.025 0.021 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.097 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.111 0.096 0.076 0.056 0.039 0.025 0.021 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.097 0.112 0.118 0.112 0.097 0.076 0.056 0.039 0.025 0.021 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.118 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.118 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.118 0.112 0.096 0.077 0.057 0.039 0.025 0.021 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.120 0.112 0.096 0.076 0.056 0.038 0.025 0.020 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.110 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.096 0.112 0.119 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.097 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.038 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.112 0.118 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.038 0.025 0.021 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.112 0.097 0.077 0.057 0.039 0.025 0.021 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.112 0.096 0.077 0.057 0.039 0.025 0.021 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.097 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.026 0.021 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.056 0.039 0.025 0.021 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.119 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.077 0.097 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.119 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.076 0.096 0.111 0.119 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.015 0.025 0.039 0.056 0.077 0.097 0.111 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.056 0.039 0.025 0.021 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.076 0.096 0.112 0.118 0.112 0.096 0.077 0.056 0.039 0.025 0.021 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.097 0.112 0.118 0.112 0.097 0.077 0.056 0.038 0.025 0.021 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.116 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.057 0.077 0.097 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.112 0.117 0.112 0.097 0.077 0.056 0.039 0.025 0.021 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.039 0.056 0.076 0.096 0.112 0.119 0.112 0.096 0.076 0.056 0.039 0.025 0.021 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    19.53 MiB ->     5.49 MiB | hist: 0.036 0.015 0.025 0.038 0.056 0.077 0.097 0.112 0.118 0.112 0.097 0.076 0.056 0.038 0.025 0.021 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.036 0.015 0.024 0.037 0.055 0.076 0.097 0.114 0.121 0.114 0.098 0.076 0.055 0.037 0.024 0.020 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_0 .. size =    52.73 MiB ->    14.83 MiB | hist: 0.037 0.016 0.025 0.039 0.057 0.077 0.096 0.111 0.117 0.111 0.097 0.077 0.057 0.039 0.025 0.021 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  1866.13 MB
llama_model_quantize_internal: hist: 0.036 0.016 0.025 0.039 0.056 0.077 0.096 0.111 0.117 0.111 0.096 0.077 0.057 0.039 0.025 0.021 

main: quantize time =  6646.49 ms
main:    total time =  6646.49 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf q4_1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf' as Q4_1
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q4_1 .. size =   195.31 MiB ->    61.04 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.068 0.051 0.037 0.025 0.040 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.037 0.052 0.068 0.083 0.095 0.101 0.102 0.095 0.083 0.068 0.052 0.037 0.024 0.040 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.036 0.050 0.066 0.083 0.097 0.105 0.105 0.097 0.082 0.066 0.050 0.036 0.024 0.040 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.035 0.050 0.067 0.083 0.097 0.104 0.104 0.097 0.083 0.067 0.050 0.036 0.024 0.040 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.101 0.094 0.082 0.067 0.051 0.037 0.025 0.040 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.102 0.094 0.082 0.067 0.051 0.037 0.025 0.040 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.050 0.067 0.083 0.096 0.104 0.104 0.096 0.083 0.067 0.050 0.036 0.024 0.040 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.024 0.035 0.050 0.067 0.083 0.097 0.104 0.104 0.097 0.083 0.067 0.050 0.036 0.024 0.040 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.026 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.026 0.040 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.101 0.095 0.083 0.067 0.052 0.037 0.025 0.040 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.026 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.026 0.040 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.101 0.094 0.083 0.067 0.051 0.037 0.025 0.040 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.102 0.101 0.095 0.083 0.067 0.052 0.037 0.025 0.040 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.101 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.101 0.094 0.082 0.067 0.051 0.037 0.025 0.040 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.068 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.038 0.025 0.040 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.025 0.040 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.094 0.101 0.101 0.094 0.082 0.067 0.052 0.037 0.025 0.040 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.101 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.103 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.101 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.052 0.037 0.025 0.040 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.052 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.101 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.103 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    19.53 MiB ->     6.10 MiB | hist: 0.040 0.025 0.036 0.051 0.067 0.083 0.095 0.102 0.103 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.082 0.095 0.102 0.102 0.095 0.083 0.067 0.051 0.037 0.025 0.040 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.024 0.036 0.051 0.067 0.083 0.096 0.103 0.103 0.096 0.083 0.067 0.050 0.036 0.025 0.040 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_1 .. size =    52.73 MiB ->    16.48 MiB | hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2064.25 MB
llama_model_quantize_internal: hist: 0.040 0.025 0.037 0.051 0.067 0.083 0.095 0.102 0.102 0.095 0.082 0.067 0.051 0.037 0.025 0.040 

main: quantize time =  7237.02 ms
main:    total time =  7237.02 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf q5_0
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf' as Q5_0
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q5_0 .. size =   195.31 MiB ->    67.14 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.016 0.025 0.039 0.058 0.080 0.103 0.123 0.128 0.114 0.092 0.069 0.048 0.032 0.020 0.014 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.038 0.015 0.024 0.037 0.056 0.079 0.105 0.127 0.133 0.117 0.092 0.067 0.046 0.030 0.019 0.013 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.017 0.027 0.041 0.059 0.080 0.102 0.119 0.124 0.111 0.091 0.070 0.050 0.033 0.021 0.016 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.015 0.025 0.039 0.057 0.081 0.105 0.123 0.128 0.115 0.093 0.069 0.047 0.031 0.020 0.014 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.044 0.062 0.082 0.100 0.112 0.115 0.107 0.092 0.072 0.052 0.036 0.023 0.017 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.036 0.023 0.016 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.034 0.022 0.016 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.017 0.028 0.042 0.061 0.082 0.102 0.116 0.119 0.110 0.092 0.071 0.051 0.034 0.022 0.016 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.017 0.027 0.041 0.060 0.081 0.102 0.117 0.121 0.111 0.092 0.071 0.050 0.034 0.021 0.016 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.039 0.016 0.026 0.039 0.058 0.081 0.104 0.122 0.126 0.114 0.093 0.069 0.048 0.032 0.020 0.015 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.043 0.062 0.082 0.100 0.113 0.115 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.100 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.114 0.118 0.108 0.091 0.072 0.052 0.035 0.022 0.016 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.117 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.081 0.101 0.115 0.119 0.109 0.091 0.071 0.051 0.035 0.022 0.016 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.119 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.109 0.091 0.071 0.051 0.035 0.022 0.016 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.081 0.101 0.115 0.119 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.081 0.101 0.115 0.118 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.091 0.071 0.052 0.035 0.022 0.016 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.108 0.092 0.071 0.051 0.035 0.022 0.016 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.100 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.071 0.052 0.035 0.022 0.016 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.029 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.100 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.091 0.072 0.052 0.035 0.022 0.016 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.109 0.092 0.072 0.052 0.035 0.022 0.016 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.118 0.108 0.092 0.071 0.052 0.035 0.022 0.016 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.062 0.082 0.101 0.113 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.043 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    19.53 MiB ->     6.71 MiB | hist: 0.040 0.017 0.028 0.042 0.061 0.082 0.101 0.115 0.118 0.109 0.092 0.071 0.051 0.035 0.022 0.016 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.023 0.016 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.039 0.017 0.027 0.041 0.060 0.081 0.102 0.117 0.120 0.111 0.092 0.071 0.050 0.034 0.021 0.016 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_0 .. size =    52.73 MiB ->    18.13 MiB | hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.116 0.108 0.092 0.072 0.052 0.035 0.022 0.016 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2262.37 MB
llama_model_quantize_internal: hist: 0.040 0.018 0.028 0.043 0.061 0.082 0.101 0.114 0.117 0.108 0.092 0.072 0.052 0.035 0.022 0.016 

main: quantize time =  7654.28 ms
main:    total time =  7654.28 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf q5_1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf' as Q5_1
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q5_1 .. size =   195.31 MiB ->    73.24 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.044 
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.037 0.051 0.066 0.081 0.094 0.102 0.102 0.094 0.081 0.066 0.050 0.037 0.026 0.045 
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.044 0.025 0.037 0.051 0.066 0.082 0.094 0.101 0.101 0.094 0.082 0.066 0.051 0.037 0.025 0.044 
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.037 0.051 0.066 0.081 0.094 0.100 0.101 0.093 0.081 0.066 0.051 0.037 0.026 0.045 
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.044 0.025 0.037 0.051 0.066 0.082 0.094 0.101 0.101 0.094 0.082 0.066 0.051 0.037 0.025 0.044 
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.039 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.051 0.038 0.026 0.045 
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.091 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.066 0.052 0.038 0.026 0.045 
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.039 0.027 0.045 
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.066 0.052 0.038 0.026 0.045 
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.052 0.038 0.026 0.045 
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.093 0.099 0.100 0.093 0.081 0.066 0.051 0.038 0.026 0.045 
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.098 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.051 0.038 0.026 0.045 
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.027 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.052 0.066 0.081 0.092 0.099 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    19.53 MiB ->     7.32 MiB | hist: 0.045 0.026 0.038 0.051 0.066 0.081 0.093 0.099 0.099 0.093 0.081 0.067 0.052 0.038 0.026 0.045 
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.027 0.045 
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.037 0.051 0.066 0.081 0.093 0.100 0.100 0.093 0.081 0.066 0.051 0.037 0.026 0.045 
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_1 .. size =    52.73 MiB ->    19.78 MiB | hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2460.49 MB
llama_model_quantize_internal: hist: 0.045 0.026 0.038 0.052 0.067 0.081 0.092 0.098 0.099 0.092 0.081 0.067 0.052 0.038 0.026 0.045 

main: quantize time =  8392.75 ms
main:    total time =  8392.75 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf q2_k
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf' as Q2_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q2_K .. size =   195.31 MiB ->    36.62 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q2_K .. size =    19.53 MiB ->     3.66 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q2_K .. size =    52.73 MiB ->     9.89 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  1346.35 MB

main: quantize time = 25638.56 ms
main:    total time = 25638.56 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf q3_k
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf' as Q3_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q3_K .. size =   195.31 MiB ->    42.72 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q3_K .. size =    19.53 MiB ->     4.27 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q3_K .. size =    52.73 MiB ->    11.54 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  1662.08 MB

main: quantize time = 23187.17 ms
main:    total time = 23187.17 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf q4_k
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf' as Q4_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q4_K .. size =   195.31 MiB ->    57.98 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q4_K .. size =    19.53 MiB ->     5.80 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q4_K .. size =    52.73 MiB ->    15.66 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2082.62 MB

main: quantize time = 40588.25 ms
main:    total time = 40588.25 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf q5_k
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf' as Q5_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q5_K .. size =   195.31 MiB ->    70.19 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q5_K .. size =    19.53 MiB ->     7.02 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q5_K .. size =    52.73 MiB ->    18.95 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2420.14 MB

main: quantize time = 27499.07 ms
main:    total time = 27499.07 ms
+ ./bin/quantize ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf q6_k
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: quantizing '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf' to '../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf' as Q6_K
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llama_model_quantize_internal: meta size = 749792 bytes
[   1/ 237]                    token_embd.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
[   2/ 237]                  blk.0.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   3/ 237]                  blk.0.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   4/ 237]                  blk.0.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   5/ 237]             blk.0.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[   6/ 237]                blk.0.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   7/ 237]                blk.0.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   8/ 237]                  blk.0.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[   9/ 237]               blk.0.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  10/ 237]                blk.0.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  11/ 237]                  blk.1.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  12/ 237]                  blk.1.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  13/ 237]                  blk.1.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  14/ 237]             blk.1.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  15/ 237]                blk.1.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  16/ 237]                blk.1.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  17/ 237]                  blk.1.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  18/ 237]               blk.1.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  19/ 237]                blk.1.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  20/ 237]                  blk.2.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  21/ 237]                  blk.2.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  22/ 237]                  blk.2.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  23/ 237]             blk.2.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  24/ 237]                blk.2.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  25/ 237]                blk.2.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  26/ 237]                  blk.2.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  27/ 237]               blk.2.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  28/ 237]                blk.2.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  29/ 237]                  blk.3.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  30/ 237]                  blk.3.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  31/ 237]                  blk.3.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  32/ 237]             blk.3.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  33/ 237]                blk.3.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  34/ 237]                blk.3.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  35/ 237]                  blk.3.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  36/ 237]               blk.3.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  37/ 237]                blk.3.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  38/ 237]                  blk.4.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  39/ 237]                  blk.4.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  40/ 237]                  blk.4.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  41/ 237]             blk.4.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  42/ 237]                blk.4.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  43/ 237]                blk.4.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  44/ 237]                  blk.4.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  45/ 237]               blk.4.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  46/ 237]                blk.4.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  47/ 237]                  blk.5.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  48/ 237]                  blk.5.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  49/ 237]                  blk.5.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  50/ 237]             blk.5.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  51/ 237]                blk.5.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  52/ 237]                blk.5.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  53/ 237]                  blk.5.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  54/ 237]               blk.5.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  55/ 237]                blk.5.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  56/ 237]                  blk.6.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  57/ 237]                  blk.6.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  58/ 237]                  blk.6.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  59/ 237]             blk.6.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  60/ 237]                blk.6.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  61/ 237]                blk.6.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  62/ 237]                  blk.6.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  63/ 237]               blk.6.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  64/ 237]                blk.6.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  65/ 237]                  blk.7.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  66/ 237]                  blk.7.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  67/ 237]                  blk.7.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  68/ 237]             blk.7.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  69/ 237]                blk.7.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  70/ 237]                blk.7.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  71/ 237]                  blk.7.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  72/ 237]               blk.7.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  73/ 237]                blk.7.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  74/ 237]                  blk.8.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  75/ 237]                  blk.8.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  76/ 237]                  blk.8.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  77/ 237]             blk.8.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  78/ 237]                blk.8.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  79/ 237]                blk.8.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  80/ 237]                  blk.8.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  81/ 237]               blk.8.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  82/ 237]                blk.8.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  83/ 237]                  blk.9.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  84/ 237]                  blk.9.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  85/ 237]                  blk.9.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  86/ 237]             blk.9.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  87/ 237]                blk.9.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  88/ 237]                blk.9.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  89/ 237]                  blk.9.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  90/ 237]               blk.9.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  91/ 237]                blk.9.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[  92/ 237]                 blk.10.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  93/ 237]                 blk.10.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  94/ 237]                 blk.10.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  95/ 237]            blk.10.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[  96/ 237]               blk.10.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  97/ 237]               blk.10.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  98/ 237]                 blk.10.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[  99/ 237]              blk.10.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 100/ 237]               blk.10.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 101/ 237]                 blk.11.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 102/ 237]                 blk.11.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 103/ 237]                 blk.11.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 104/ 237]            blk.11.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 105/ 237]               blk.11.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 106/ 237]               blk.11.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 107/ 237]                 blk.11.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 108/ 237]              blk.11.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 109/ 237]               blk.11.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 110/ 237]                 blk.12.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 111/ 237]                 blk.12.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 112/ 237]                 blk.12.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 113/ 237]            blk.12.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 114/ 237]               blk.12.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 115/ 237]               blk.12.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 116/ 237]                 blk.12.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 117/ 237]              blk.12.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 118/ 237]               blk.12.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 119/ 237]                 blk.13.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 120/ 237]                 blk.13.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 121/ 237]                 blk.13.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 122/ 237]            blk.13.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 123/ 237]               blk.13.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 124/ 237]               blk.13.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 125/ 237]                 blk.13.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 126/ 237]              blk.13.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 127/ 237]               blk.13.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 128/ 237]                 blk.14.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 129/ 237]                 blk.14.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 130/ 237]                 blk.14.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 131/ 237]            blk.14.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 132/ 237]               blk.14.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 133/ 237]               blk.14.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 134/ 237]                 blk.14.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 135/ 237]              blk.14.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 136/ 237]               blk.14.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 137/ 237]                 blk.15.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 138/ 237]                 blk.15.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 139/ 237]                 blk.15.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 140/ 237]            blk.15.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 141/ 237]               blk.15.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 142/ 237]               blk.15.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 143/ 237]                 blk.15.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 144/ 237]              blk.15.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 145/ 237]               blk.15.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 146/ 237]                 blk.16.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 147/ 237]                 blk.16.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 148/ 237]                 blk.16.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 149/ 237]            blk.16.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 150/ 237]               blk.16.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 151/ 237]               blk.16.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 152/ 237]                 blk.16.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 153/ 237]              blk.16.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 154/ 237]               blk.16.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 155/ 237]                 blk.17.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 156/ 237]                 blk.17.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 157/ 237]                 blk.17.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 158/ 237]            blk.17.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 159/ 237]               blk.17.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 160/ 237]               blk.17.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 161/ 237]                 blk.17.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 162/ 237]              blk.17.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 163/ 237]               blk.17.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 164/ 237]                 blk.18.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 165/ 237]                 blk.18.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 166/ 237]                 blk.18.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 167/ 237]            blk.18.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 168/ 237]               blk.18.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 169/ 237]               blk.18.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 170/ 237]                 blk.18.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 171/ 237]              blk.18.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 172/ 237]               blk.18.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 173/ 237]                 blk.19.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 174/ 237]                 blk.19.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 175/ 237]                 blk.19.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 176/ 237]            blk.19.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 177/ 237]               blk.19.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 178/ 237]               blk.19.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 179/ 237]                 blk.19.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 180/ 237]              blk.19.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 181/ 237]               blk.19.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 182/ 237]                 blk.20.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 183/ 237]                 blk.20.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 184/ 237]                 blk.20.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 185/ 237]            blk.20.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 186/ 237]               blk.20.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 187/ 237]               blk.20.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 188/ 237]                 blk.20.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 189/ 237]              blk.20.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 190/ 237]               blk.20.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 191/ 237]                 blk.21.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 192/ 237]                 blk.21.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 193/ 237]                 blk.21.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 194/ 237]            blk.21.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 195/ 237]               blk.21.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 196/ 237]               blk.21.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 197/ 237]                 blk.21.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 198/ 237]              blk.21.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 199/ 237]               blk.21.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 200/ 237]                 blk.22.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 201/ 237]                 blk.22.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 202/ 237]                 blk.22.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 203/ 237]            blk.22.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 204/ 237]               blk.22.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 205/ 237]               blk.22.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 206/ 237]                 blk.22.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 207/ 237]              blk.22.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 208/ 237]               blk.22.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 209/ 237]                 blk.23.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 210/ 237]                 blk.23.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 211/ 237]                 blk.23.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 212/ 237]            blk.23.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 213/ 237]               blk.23.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 214/ 237]               blk.23.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 215/ 237]                 blk.23.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 216/ 237]              blk.23.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 217/ 237]               blk.23.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 218/ 237]                 blk.24.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 219/ 237]                 blk.24.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 220/ 237]                 blk.24.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 221/ 237]            blk.24.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 222/ 237]               blk.24.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 223/ 237]               blk.24.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 224/ 237]                 blk.24.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 225/ 237]              blk.24.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 226/ 237]               blk.24.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 227/ 237]                 blk.25.attn_q.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 228/ 237]                 blk.25.attn_k.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 229/ 237]                 blk.25.attn_v.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 230/ 237]            blk.25.attn_output.weight - [ 3200,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    19.53 MiB ->     8.24 MiB
[ 231/ 237]               blk.25.ffn_gate.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 232/ 237]               blk.25.ffn_down.weight - [ 8640,  3200,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 233/ 237]                 blk.25.ffn_up.weight - [ 3200,  8640,     1,     1], type =    f16, quantizing to q6_K .. size =    52.73 MiB ->    22.25 MiB
[ 234/ 237]              blk.25.attn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 235/ 237]               blk.25.ffn_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 236/ 237]                   output_norm.weight - [ 3200,     1,     1,     1], type =    f32, size =    0.012 MB
[ 237/ 237]                        output.weight - [ 3200, 32000,     1,     1], type =    f16, quantizing to q6_K .. size =   195.31 MiB ->    82.40 MiB
llama_model_quantize_internal: model size  =  6535.80 MB
llama_model_quantize_internal: quant size  =  2757.67 MB

main: quantize time = 26697.07 ms
main:    total time = 26697.07 ms
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-f16.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love. Love with everything you have and then some more!
It’s not easy, but it should be everyones goal in this lifetime because that means your soul has a purpose on Earth or at least deserves an adventure; especially if we are given so much freedom as humans do today (even though many still
llama_print_timings:        load time =    3026.76 ms
llama_print_timings:      sample time =      11.80 ms /    64 runs   (    0.18 ms per token,  5424.19 tokens per second)
llama_print_timings: prompt eval time =    2352.81 ms /     8 tokens (  294.10 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =   19705.88 ms /    63 runs   (  312.79 ms per token,     3.20 tokens per second)
llama_print_timings:       total time =   22082.58 ms /    71 tokens
Log end

real	0m25.388s
user	1m30.505s
sys	0m2.752s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q8_0.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love. Love unconditionally, without expectations and with a deep sense of gratitude for what you have been given on this day in your life; every single one that God has created so far!
To be able to walk down from childhood years into adulthood feeling complete contentment about yourself as well as the world
llama_print_timings:        load time =    1530.81 ms
llama_print_timings:      sample time =      11.81 ms /    64 runs   (    0.18 ms per token,  5420.51 tokens per second)
llama_print_timings: prompt eval time =     923.95 ms /     8 tokens (  115.49 ms per token,     8.66 tokens per second)
llama_print_timings:        eval time =    8361.34 ms /    63 runs   (  132.72 ms per token,     7.53 tokens per second)
llama_print_timings:       total time =    9308.36 ms /    71 tokens
Log end

real	0m11.119s
user	0m37.876s
sys	0m1.721s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_0.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 2
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.82 GiB (4.57 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1866.13 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to experience all that this world has in store for us. To take risks, and make mistakes so we can grow as people who have been given a chance on earth with another opportunity at life after death comes knocking your door….
I love living here because there are no boundaries or limitations when it come s to the
llama_print_timings:        load time =    1019.02 ms
llama_print_timings:      sample time =      11.87 ms /    64 runs   (    0.19 ms per token,  5389.93 tokens per second)
llama_print_timings: prompt eval time =     966.24 ms /     8 tokens (  120.78 ms per token,     8.28 tokens per second)
llama_print_timings:        eval time =    7911.46 ms /    63 runs   (  125.58 ms per token,     7.96 tokens per second)
llama_print_timings:       total time =    8901.41 ms /    71 tokens
Log end

real	0m10.112s
user	0m36.256s
sys	0m1.104s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_1.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 3
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.02 GiB (5.05 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2064.25 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to make a difference, and that all people are created equal. My goal in this class will be for us to figure out how we can help each other as well as our community improve by doing what you love best: writing stories!
Mission Statement 2016-present day; I am the proud
llama_print_timings:        load time =    1088.39 ms
llama_print_timings:      sample time =      11.75 ms /    64 runs   (    0.18 ms per token,  5448.20 tokens per second)
llama_print_timings: prompt eval time =     919.46 ms /     8 tokens (  114.93 ms per token,     8.70 tokens per second)
llama_print_timings:        eval time =    7692.50 ms /    63 runs   (  122.10 ms per token,     8.19 tokens per second)
llama_print_timings:       total time =    8635.58 ms /    71 tokens
Log end

real	0m9.928s
user	0m35.154s
sys	0m1.195s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_0.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 8
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.21 GiB (5.54 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2262.37 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to find and do your calling.
If you are not sure what that means, or if it’s a myth about how we all know who we were meant for in this world – then keep reading… because once upon an elvish time (I can see my family rolling their eyes at me) I was
llama_print_timings:        load time =    1269.75 ms
llama_print_timings:      sample time =      11.77 ms /    64 runs   (    0.18 ms per token,  5436.63 tokens per second)
llama_print_timings: prompt eval time =    1299.33 ms /     8 tokens (  162.42 ms per token,     6.16 tokens per second)
llama_print_timings:        eval time =   10670.95 ms /    63 runs   (  169.38 ms per token,     5.90 tokens per second)
llama_print_timings:       total time =   11994.79 ms /    71 tokens
Log end

real	0m13.487s
user	0m48.972s
sys	0m1.280s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_1.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 9
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.40 GiB (6.02 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2460.49 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to find joy and share it with others.
I am a writer, photographer & graphic designer who loves adventure and getting lost in nature. My main focus for my personal work has been capturing moments through travel photography from around Asia: Singapore, Malaysia, Hong Kong, Thailand (Bangkok), Bali, Vietnam,
llama_print_timings:        load time =    1330.03 ms
llama_print_timings:      sample time =      12.29 ms /    64 runs   (    0.19 ms per token,  5205.79 tokens per second)
llama_print_timings: prompt eval time =    1241.14 ms /     8 tokens (  155.14 ms per token,     6.45 tokens per second)
llama_print_timings:        eval time =   10561.49 ms /    63 runs   (  167.64 ms per token,     5.97 tokens per second)
llama_print_timings:       total time =   11826.60 ms /    71 tokens
Log end

real	0m13.379s
user	0m48.277s
sys	0m1.352s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q2_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 10
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q2_K:  105 tensors
llama_model_loader: - type q3_K:   78 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q2_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.31 GiB (3.30 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1346.35 MiB
..............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to make it happen and not just for you but also with your children.
I am a 21st century woman, an urbanite who loves going out in nature even if only by walking up my neighbourhood hillock or taking public transport instead of driving around town on weekends! This blog aims at helping women like
llama_print_timings:        load time =     872.14 ms
llama_print_timings:      sample time =      12.02 ms /    64 runs   (    0.19 ms per token,  5324.46 tokens per second)
llama_print_timings: prompt eval time =    1211.66 ms /     8 tokens (  151.46 ms per token,     6.60 tokens per second)
llama_print_timings:        eval time =    9803.61 ms /    63 runs   (  155.61 ms per token,     6.43 tokens per second)
llama_print_timings:       total time =   11038.68 ms /    71 tokens
Log end

real	0m12.069s
user	0m44.805s
sys	0m1.104s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q3_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 12
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q3_K:  105 tensors
llama_model_loader: - type q4_K:   75 tensors
llama_model_loader: - type q5_K:    3 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q3_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.62 GiB (4.07 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1662.08 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to help others, but it’s so hard when you have a kid with autism.
I was asked what advice would I give my younger self and this came out – “It will get better!” This may be cliche in hindsight (and also very vague), because there are many different ways that things could
llama_print_timings:        load time =     985.41 ms
llama_print_timings:      sample time =      12.03 ms /    64 runs   (    0.19 ms per token,  5320.92 tokens per second)
llama_print_timings: prompt eval time =    1143.60 ms /     8 tokens (  142.95 ms per token,     7.00 tokens per second)
llama_print_timings:        eval time =    9369.58 ms /    63 runs   (  148.72 ms per token,     6.72 tokens per second)
llama_print_timings:       total time =   10536.85 ms /    71 tokens
Log end

real	0m11.700s
user	0m42.859s
sys	0m1.129s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 15
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.03 GiB (5.10 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2082.62 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love, live and serve.
I am a wife who loves my husband with all her heart! We are best friends…we have been together since we were 14 years old and married for almost ten years now!!! He supports me in every area; he’s an awesome cook (that I don’
llama_print_timings:        load time =    1053.06 ms
llama_print_timings:      sample time =      11.92 ms /    64 runs   (    0.19 ms per token,  5367.78 tokens per second)
llama_print_timings: prompt eval time =    1015.08 ms /     8 tokens (  126.88 ms per token,     7.88 tokens per second)
llama_print_timings:        eval time =    8376.39 ms /    63 runs   (  132.96 ms per token,     7.52 tokens per second)
llama_print_timings:       total time =    9415.25 ms /    71 tokens
Log end

real	0m10.669s
user	0m38.221s
sys	0m1.276s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 17
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.36 GiB (5.92 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2420.14 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to find and follow your bliss.
Monday, November 25,: #143697) | Contact Support
Please refer to our Terms of Use for further information regarding our privacy policy.
- Type in an item number or a part name (i.e., "A0
llama_print_timings:        load time =    1338.84 ms
llama_print_timings:      sample time =      12.38 ms /    64 runs   (    0.19 ms per token,  5169.63 tokens per second)
llama_print_timings: prompt eval time =    1377.79 ms /     8 tokens (  172.22 ms per token,     5.81 tokens per second)
llama_print_timings:        eval time =   11195.07 ms /    63 runs   (  177.70 ms per token,     5.63 tokens per second)
llama_print_timings:       total time =   12596.74 ms /    71 tokens
Log end

real	0m14.153s
user	0m51.241s
sys	0m1.557s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q6_k.log
+ ./bin/main --model ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf -s 1234 -n 64 --ignore-eos -p 'I believe the meaning of life is'
Log start
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1234
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 18
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q6_K:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q6_K
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.69 GiB (6.75 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2757.67 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
sampling: 
	repeat_last_n = 64, repeat_penalty = 1.100, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
sampling order: 
CFG -> Penalties -> top_k -> tfs_z -> typical_p -> top_p -> min_p -> temperature 
generate: n_ctx = 512, n_batch = 512, n_predict = 64, n_keep = 1


 I believe the meaning of life is to love. Love with everything you have and then some more!
My name's Alexandra, but my friends just call me Lexi or L.E.! :3 My nickname came from one day when in school everyone had trouble saying "Lex-" so they all started calling me that instead of
llama_print_timings:        load time =    1389.88 ms
llama_print_timings:      sample time =      11.80 ms /    64 runs   (    0.18 ms per token,  5421.89 tokens per second)
llama_print_timings: prompt eval time =    1411.85 ms /     8 tokens (  176.48 ms per token,     5.67 tokens per second)
llama_print_timings:        eval time =   11509.21 ms /    63 runs   (  182.69 ms per token,     5.47 tokens per second)
llama_print_timings:       total time =   12944.46 ms /    71 tokens
Log end

real	0m14.569s
user	0m52.735s
sys	0m1.552s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709870
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 10.055 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 37.61 seconds per pass - ETA 0.62 minutes
[1]4.2442,
llama_print_timings:        load time =    3202.55 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37607.41 ms /   128 tokens (  293.81 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   37618.83 ms /   129 tokens

Final estimate: PPL = 4.2442 +/- 1.01574

real	0m41.100s
user	2m32.686s
sys	0m3.036s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q8_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709911
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.688 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.74 seconds per pass - ETA 0.23 minutes
[1]4.2615,
llama_print_timings:        load time =    1493.21 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14741.30 ms /   128 tokens (  115.17 ms per token,     8.68 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14752.45 ms /   129 tokens

Final estimate: PPL = 4.2615 +/- 1.02325

real	0m16.389s
user	0m59.731s
sys	0m1.607s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709928
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 2
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.82 GiB (4.57 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1866.13 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.662 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 15.48 seconds per pass - ETA 0.25 minutes
[1]4.1750,
llama_print_timings:        load time =     932.89 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   15478.70 ms /   128 tokens (  120.93 ms per token,     8.27 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   15490.08 ms /   129 tokens

Final estimate: PPL = 4.1750 +/- 0.98064

real	0m16.535s
user	1m2.749s
sys	0m0.944s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_1.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709944
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 3
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.02 GiB (5.05 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2064.25 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.638 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.76 seconds per pass - ETA 0.23 minutes
[1]4.3872,
llama_print_timings:        load time =     989.35 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14759.99 ms /   128 tokens (  115.31 ms per token,     8.67 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14771.60 ms /   129 tokens

Final estimate: PPL = 4.3872 +/- 1.05084

real	0m15.877s
user	0m59.698s
sys	0m1.153s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709960
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 8
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.21 GiB (5.54 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2262.37 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.867 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 20.53 seconds per pass - ETA 0.33 minutes
[1]4.3466,
llama_print_timings:        load time =    1203.99 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   20528.50 ms /   128 tokens (  160.38 ms per token,     6.24 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   20540.33 ms /   129 tokens

Final estimate: PPL = 4.3466 +/- 1.04362

real	0m21.868s
user	1m23.196s
sys	0m1.228s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_1.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709709982
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_1.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 9
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_1:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_1
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.40 GiB (6.02 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2460.49 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.943 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 19.92 seconds per pass - ETA 0.32 minutes
[1]4.2515,
llama_print_timings:        load time =    1286.89 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   19923.21 ms /   128 tokens (  155.65 ms per token,     6.42 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   19934.58 ms /   129 tokens

Final estimate: PPL = 4.2515 +/- 1.01921

real	0m21.346s
user	1m20.812s
sys	0m1.252s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q2_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710003
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q2_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 10
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q2_K:  105 tensors
llama_model_loader: - type q3_K:   78 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q2_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.31 GiB (3.30 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1346.35 MiB
..............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.683 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 19.36 seconds per pass - ETA 0.32 minutes
[1]5.6188,
llama_print_timings:        load time =     810.68 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   19357.74 ms /   128 tokens (  151.23 ms per token,     6.61 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   19368.95 ms /   129 tokens

Final estimate: PPL = 5.6188 +/- 1.37004

real	0m20.277s
user	1m18.181s
sys	0m1.072s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q3_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710024
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q3_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 12
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q3_K:  105 tensors
llama_model_loader: - type q4_K:   75 tensors
llama_model_loader: - type q5_K:    3 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q3_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.62 GiB (4.07 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1662.08 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.643 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 18.43 seconds per pass - ETA 0.30 minutes
[1]4.4258,
llama_print_timings:        load time =     904.38 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   18425.63 ms /   128 tokens (  143.95 ms per token,     6.95 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   18436.81 ms /   129 tokens

Final estimate: PPL = 4.4258 +/- 1.05707

real	0m19.447s
user	1m14.369s
sys	0m1.216s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710043
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 15
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.03 GiB (5.10 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2082.62 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.949 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 16.23 seconds per pass - ETA 0.27 minutes
[1]4.1929,
llama_print_timings:        load time =    1088.01 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   16228.64 ms /   128 tokens (  126.79 ms per token,     7.89 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   16240.27 ms /   129 tokens

Final estimate: PPL = 4.1929 +/- 0.99765

real	0m17.446s
user	1m5.515s
sys	0m1.379s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710061
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q5_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 17
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q5_K:  157 tensors
llama_model_loader: - type q6_K:   27 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q5_K - Medium
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.36 GiB (5.92 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2420.14 MiB
................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 10.025 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 22.14 seconds per pass - ETA 0.37 minutes
[1]4.2316,
llama_print_timings:        load time =    1298.16 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   22136.40 ms /   128 tokens (  172.94 ms per token,     5.78 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   22148.04 ms /   129 tokens

Final estimate: PPL = 4.2316 +/- 1.00381

real	0m23.567s
user	1m29.585s
sys	0m1.429s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q6_k.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710084
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q6_k.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 18
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q6_K:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q6_K
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 2.69 GiB (6.75 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  2757.67 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 9.948 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 22.64 seconds per pass - ETA 0.37 minutes
[1]4.2451,
llama_print_timings:        load time =    1446.84 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   22643.56 ms /   128 tokens (  176.90 ms per token,     5.65 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   22655.10 ms /   129 tokens

Final estimate: PPL = 4.2451 +/- 1.02166

real	0m24.230s
user	1m31.557s
sys	0m1.672s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-imatrix.log
+ ./bin/imatrix --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test-60.raw -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710108
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
compute_imatrix: tokenizing the input ..
compute_imatrix: tokenization took 9.74 ms
compute_imatrix: computing over 1 chunks with batch_size 128
compute_imatrix: 37.64 seconds per pass - ETA 0.62 minutes
[1]4.2442,
save_imatrix: stored collected data after 1 chunks in imatrix.dat

llama_print_timings:        load time =   40187.60 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37641.65 ms /   128 tokens (  294.08 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   40192.07 ms /   129 tokens

Final estimate: PPL = 4.2442 +/- 1.01574

real	0m40.470s
user	2m30.210s
sys	0m3.016s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-save-load-state.log
+ ./bin/save-load-state --model ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 2
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q4_0:  183 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 1.82 GiB (4.57 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  1866.13 MiB
...............................................................................................
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1
main : serialized state into 1798805 out of a maximum of 236003404 bytes
llama_new_context_with_model: n_ctx      = 512
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =   162.50 MiB
llama_new_context_with_model: KV self size  =  162.50 MiB, K (f16):   81.25 MiB, V (f16):   81.25 MiB
llama_new_context_with_model:        CPU input buffer size   =     8.26 MiB
llama_new_context_with_model:        CPU compute buffer size =    68.75 MiB
llama_new_context_with_model: graph splits (measure): 1
main : deserialized state from 1798805 out of a maximum of 236003404 bytes

main : success

first run: The quick brown fox jumped over the lazy dog.
6 contributorsco< 8:32


second run: The quick brown fox jumped over the lazy dog.
6 contributorsco< 8:32

real	0m5.986s
user	0m19.421s
sys	0m1.056s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-f16.log
++ grep '^\[1\]'
+ check_ppl f16 '[1]4.2442,'
+ qnt=f16
++ echo '[1]4.2442,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2442
++ echo '4.2442 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' f16 4.2442
+ return 0
  - f16 @ 4.2442 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q8_0.log
++ grep '^\[1\]'
+ check_ppl q8_0 '[1]4.2615,'
+ qnt=q8_0
++ echo '[1]4.2615,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2615
++ echo '4.2615 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q8_0 4.2615
+ return 0
  - q8_0 @ 4.2615 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_0.log
++ grep '^\[1\]'
+ check_ppl q4_0 '[1]4.1750,'
+ qnt=q4_0
++ echo '[1]4.1750,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.1750
++ echo '4.1750 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_0 4.1750
+ return 0
  - q4_0 @ 4.1750 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_1.log
++ grep '^\[1\]'
+ check_ppl q4_1 '[1]4.3872,'
+ qnt=q4_1
++ echo '[1]4.3872,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.3872
++ echo '4.3872 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_1 4.3872
+ return 0
  - q4_1 @ 4.3872 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_0.log
++ grep '^\[1\]'
+ check_ppl q5_0 '[1]4.3466,'
+ qnt=q5_0
++ echo '[1]4.3466,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.3466
++ echo '4.3466 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_0 4.3466
+ return 0
  - q5_0 @ 4.3466 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_1.log
++ grep '^\[1\]'
+ check_ppl q5_1 '[1]4.2515,'
+ qnt=q5_1
++ echo '[1]4.2515,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2515
++ echo '4.2515 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_1 4.2515
+ return 0
  - q5_1 @ 4.2515 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q2_k.log
++ grep '^\[1\]'
+ check_ppl q2_k '[1]5.6188,'
+ qnt=q2_k
++ echo '[1]5.6188,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=5.6188
++ echo '5.6188 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q2_k 5.6188
+ return 0
  - q2_k @ 5.6188 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q3_k.log
++ grep '^\[1\]'
+ check_ppl q3_k '[1]4.4258,'
+ qnt=q3_k
++ echo '[1]4.4258,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.4258
++ echo '4.4258 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q3_k 4.4258
+ return 0
  - q3_k @ 4.4258 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q4_k.log
++ grep '^\[1\]'
+ check_ppl q4_k '[1]4.1929,'
+ qnt=q4_k
++ echo '[1]4.1929,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.1929
++ echo '4.1929 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_k 4.1929
+ return 0
  - q4_k @ 4.1929 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q5_k.log
++ grep '^\[1\]'
+ check_ppl q5_k '[1]4.2316,'
+ qnt=q5_k
++ echo '[1]4.2316,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2316
++ echo '4.2316 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_k 4.2316
+ return 0
  - q5_k @ 4.2316 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-tg-q6_k.log
++ grep '^\[1\]'
+ check_ppl q6_k '[1]4.2451,'
+ qnt=q6_k
++ echo '[1]4.2451,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=4.2451
++ echo '4.2451 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q6_k 4.2451
+ return 0
  - q6_k @ 4.2451 OK
+ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-imatrix.log
+ grep Final
+ path_lora=../models-mnt/open-llama/3B-v2/lora
+ path_shakespeare=../models-mnt/shakespeare
+ shakespeare=../models-mnt/shakespeare/shakespeare.txt
+ lora_shakespeare=../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin
+ gg_wget ../models-mnt/open-llama/3B-v2/lora https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json
+ local out=../models-mnt/open-llama/3B-v2/lora
+ local url=https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp/build-ci-release
+ mkdir -p ../models-mnt/open-llama/3B-v2/lora
+ cd ../models-mnt/open-llama/3B-v2/lora
+ wget -nv -N https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:29:15 URL:https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_config.json [457/457] -> "adapter_config.json" [1]
+ cd /home/ggml/work/llama.cpp/build-ci-release
+ gg_wget ../models-mnt/open-llama/3B-v2/lora https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_model.bin
+ local out=../models-mnt/open-llama/3B-v2/lora
+ local url=https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp/build-ci-release
+ mkdir -p ../models-mnt/open-llama/3B-v2/lora
+ cd ../models-mnt/open-llama/3B-v2/lora
+ wget -nv -N https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/adapter_model.bin
+ cd /home/ggml/work/llama.cpp/build-ci-release
+ gg_wget ../models-mnt/shakespeare https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt
+ local out=../models-mnt/shakespeare
+ local url=https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp/build-ci-release
+ mkdir -p ../models-mnt/shakespeare
+ cd ../models-mnt/shakespeare
+ wget -nv -N https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt
Last-modified header missing -- time-stamps turned off.
2024-03-06 07:29:15 URL:https://huggingface.co/slaren/open_llama_3b_v2_shakespeare_lora/resolve/main/shakespeare.txt [94275/94275] -> "shakespeare.txt" [1]
+ cd /home/ggml/work/llama.cpp/build-ci-release
+ python3 ../convert-lora-to-ggml.py ../models-mnt/open-llama/3B-v2/lora
model.layers.0.self_attn.q_proj => blk.0.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.0.self_attn.q_proj => blk.0.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.0.self_attn.v_proj => blk.0.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.0.self_attn.v_proj => blk.0.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.1.self_attn.q_proj => blk.1.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.1.self_attn.q_proj => blk.1.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.1.self_attn.v_proj => blk.1.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.1.self_attn.v_proj => blk.1.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.2.self_attn.q_proj => blk.2.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.2.self_attn.q_proj => blk.2.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.2.self_attn.v_proj => blk.2.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.2.self_attn.v_proj => blk.2.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.3.self_attn.q_proj => blk.3.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.3.self_attn.q_proj => blk.3.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.3.self_attn.v_proj => blk.3.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.3.self_attn.v_proj => blk.3.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.4.self_attn.q_proj => blk.4.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.4.self_attn.q_proj => blk.4.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.4.self_attn.v_proj => blk.4.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.4.self_attn.v_proj => blk.4.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.5.self_attn.q_proj => blk.5.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.5.self_attn.q_proj => blk.5.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.5.self_attn.v_proj => blk.5.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.5.self_attn.v_proj => blk.5.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.6.self_attn.q_proj => blk.6.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.6.self_attn.q_proj => blk.6.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.6.self_attn.v_proj => blk.6.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.6.self_attn.v_proj => blk.6.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.7.self_attn.q_proj => blk.7.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.7.self_attn.q_proj => blk.7.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.7.self_attn.v_proj => blk.7.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.7.self_attn.v_proj => blk.7.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.8.self_attn.q_proj => blk.8.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.8.self_attn.q_proj => blk.8.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.8.self_attn.v_proj => blk.8.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.8.self_attn.v_proj => blk.8.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.9.self_attn.q_proj => blk.9.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.9.self_attn.q_proj => blk.9.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.9.self_attn.v_proj => blk.9.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.9.self_attn.v_proj => blk.9.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.10.self_attn.q_proj => blk.10.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.10.self_attn.q_proj => blk.10.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.10.self_attn.v_proj => blk.10.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.10.self_attn.v_proj => blk.10.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.11.self_attn.q_proj => blk.11.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.11.self_attn.q_proj => blk.11.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.11.self_attn.v_proj => blk.11.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.11.self_attn.v_proj => blk.11.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.12.self_attn.q_proj => blk.12.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.12.self_attn.q_proj => blk.12.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.12.self_attn.v_proj => blk.12.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.12.self_attn.v_proj => blk.12.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.13.self_attn.q_proj => blk.13.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.13.self_attn.q_proj => blk.13.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.13.self_attn.v_proj => blk.13.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.13.self_attn.v_proj => blk.13.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.14.self_attn.q_proj => blk.14.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.14.self_attn.q_proj => blk.14.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.14.self_attn.v_proj => blk.14.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.14.self_attn.v_proj => blk.14.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.15.self_attn.q_proj => blk.15.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.15.self_attn.q_proj => blk.15.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.15.self_attn.v_proj => blk.15.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.15.self_attn.v_proj => blk.15.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.16.self_attn.q_proj => blk.16.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.16.self_attn.q_proj => blk.16.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.16.self_attn.v_proj => blk.16.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.16.self_attn.v_proj => blk.16.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.17.self_attn.q_proj => blk.17.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.17.self_attn.q_proj => blk.17.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.17.self_attn.v_proj => blk.17.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.17.self_attn.v_proj => blk.17.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.18.self_attn.q_proj => blk.18.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.18.self_attn.q_proj => blk.18.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.18.self_attn.v_proj => blk.18.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.18.self_attn.v_proj => blk.18.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.19.self_attn.q_proj => blk.19.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.19.self_attn.q_proj => blk.19.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.19.self_attn.v_proj => blk.19.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.19.self_attn.v_proj => blk.19.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.20.self_attn.q_proj => blk.20.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.20.self_attn.q_proj => blk.20.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.20.self_attn.v_proj => blk.20.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.20.self_attn.v_proj => blk.20.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.21.self_attn.q_proj => blk.21.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.21.self_attn.q_proj => blk.21.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.21.self_attn.v_proj => blk.21.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.21.self_attn.v_proj => blk.21.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.22.self_attn.q_proj => blk.22.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.22.self_attn.q_proj => blk.22.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.22.self_attn.v_proj => blk.22.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.22.self_attn.v_proj => blk.22.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.23.self_attn.q_proj => blk.23.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.23.self_attn.q_proj => blk.23.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.23.self_attn.v_proj => blk.23.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.23.self_attn.v_proj => blk.23.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.24.self_attn.q_proj => blk.24.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.24.self_attn.q_proj => blk.24.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.24.self_attn.v_proj => blk.24.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.24.self_attn.v_proj => blk.24.attn_v.weight.loraB (3200, 64) float32 0.78MB
model.layers.25.self_attn.q_proj => blk.25.attn_q.weight.loraA (3200, 64) float32 0.78MB
model.layers.25.self_attn.q_proj => blk.25.attn_q.weight.loraB (3200, 64) float32 0.78MB
model.layers.25.self_attn.v_proj => blk.25.attn_v.weight.loraA (3200, 64) float32 0.78MB
model.layers.25.self_attn.v_proj => blk.25.attn_v.weight.loraB (3200, 64) float32 0.78MB
Converted ../models-mnt/open-llama/3B-v2/lora/adapter_config.json and ../models-mnt/open-llama/3B-v2/lora/adapter_model.bin to ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/shakespeare/shakespeare.txt -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710157
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 60.828 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 37.60 seconds per pass - ETA 0.62 minutes
[1]9.1017,
llama_print_timings:        load time =    2993.97 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37601.71 ms /   128 tokens (  293.76 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   37664.30 ms /   129 tokens

Final estimate: PPL = 9.1017 +/- 2.25284

real	0m40.929s
user	2m32.545s
sys	0m2.988s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -f ../models-mnt/shakespeare/shakespeare.txt --lora ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710198
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = F16
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 6.38 GiB (16.00 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  6535.80 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1
llama_apply_lora_from_file_internal: applying lora adapter from '../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin' - please wait ...
llama_apply_lora_from_file_internal: r = 64, alpha = 128, scaling = 2.00
............. done (2878.24 ms)

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 59.222 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 37.62 seconds per pass - ETA 0.62 minutes
[1]7.0171,
llama_print_timings:        load time =    6263.04 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   37622.86 ms /   128 tokens (  293.93 ms per token,     3.40 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   37683.38 ms /   129 tokens

Final estimate: PPL = 7.0171 +/- 1.75945

real	0m44.321s
user	2m41.308s
sys	0m4.901s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-lora-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-f16.log
++ grep '^\[1\]'
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-f16.log
++ grep '^\[1\]'
+ compare_ppl 'f16 shakespeare' '[1]9.1017,' '[1]7.0171,'
+ qnt='f16 shakespeare'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
++ echo '[1]9.1017,'
+ ppl1=9.1017
++ echo '[1]7.0171,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl2=7.0171
++ echo '9.1017 < 7.0171'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s %s OK\n' 'f16 shakespeare' 9.1017 7.0171
+ return 0
  - f16 shakespeare @ 9.1017 7.0171 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-q8_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/shakespeare/shakespeare.txt -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710243
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 60.054 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.75 seconds per pass - ETA 0.23 minutes
[1]9.1296,
llama_print_timings:        load time =    1498.29 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14752.08 ms /   128 tokens (  115.25 ms per token,     8.68 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14813.81 ms /   129 tokens

Final estimate: PPL = 9.1296 +/- 2.27370

real	0m16.455s
user	0m59.820s
sys	0m1.617s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/shakespeare/shakespeare.txt --lora ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710259
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1
llama_apply_lora_from_file_internal: applying lora adapter from '../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin' - please wait ...
llama_apply_lora_from_file_internal: r = 64, alpha = 128, scaling = 2.00
llama_apply_lora_from_file_internal: warning: using a lora adapter with a quantized model may result in poor quality, use a f16 or f32 base model with --lora-base
............. done (2787.19 ms)

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 56.512 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.75 seconds per pass - ETA 0.23 minutes
[1]6.9856,
llama_print_timings:        load time =    4348.81 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14751.64 ms /   128 tokens (  115.25 ms per token,     8.68 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14809.39 ms /   129 tokens

Final estimate: PPL = 6.9856 +/- 1.74649

real	0m19.394s
user	1m8.607s
sys	0m3.140s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-lora-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-q8_0.log
++ grep '^\[1\]'
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0.log
++ grep '^\[1\]'
+ compare_ppl 'q8_0 shakespeare' '[1]9.1296,' '[1]6.9856,'
+ qnt='q8_0 shakespeare'
++ echo '[1]9.1296,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl1=9.1296
++ echo '[1]6.9856,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl2=6.9856
++ echo '9.1296 < 6.9856'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s %s OK\n' 'q8_0 shakespeare' 9.1296 6.9856
+ return 0
  - q8_0 shakespeare @ 9.1296 6.9856 OK
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0-f16.log
+ ./bin/perplexity --model ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf -f ../models-mnt/shakespeare/shakespeare.txt --lora ../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin --lora-base ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf -c 128 -b 128 --chunks 1
main: build = 2353 (1e35d619)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for aarch64-linux-gnu
main: seed  = 1709710279
llama_model_loader: loaded meta data with 21 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-q8_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 7
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  20:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type q8_0:  184 tensors
llm_load_vocab: special tokens definition check successful ( 259/32000 ).
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = SPM
llm_load_print_meta: n_vocab          = 32000
llm_load_print_meta: n_merges         = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 3200
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_layer          = 26
llm_load_print_meta: n_rot            = 100
llm_load_print_meta: n_embd_head_k    = 100
llm_load_print_meta: n_embd_head_v    = 100
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 3200
llm_load_print_meta: n_embd_v_gqa     = 3200
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: n_ff             = 8640
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_yarn_orig_ctx  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: model type       = 3B
llm_load_print_meta: model ftype      = Q8_0
llm_load_print_meta: model params     = 3.43 B
llm_load_print_meta: model size       = 3.39 GiB (8.50 BPW) 
llm_load_print_meta: general.name     = open-llama
llm_load_print_meta: BOS token        = 1 '<s>'
llm_load_print_meta: EOS token        = 2 '</s>'
llm_load_print_meta: UNK token        = 0 '<unk>'
llm_load_print_meta: PAD token        = 0 '<unk>'
llm_load_print_meta: LF token         = 13 '<0x0A>'
llm_load_tensors: ggml ctx size =    0.09 MiB
llm_load_tensors:        CPU buffer size =  3472.45 MiB
.................................................................................................
llama_new_context_with_model: n_ctx      = 128
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:        CPU KV buffer size =    40.63 MiB
llama_new_context_with_model: KV self size  =   40.62 MiB, K (f16):   20.31 MiB, V (f16):   20.31 MiB
llama_new_context_with_model:        CPU input buffer size   =     1.69 MiB
llama_new_context_with_model:        CPU compute buffer size =    17.19 MiB
llama_new_context_with_model: graph splits (measure): 1
llama_apply_lora_from_file_internal: applying lora adapter from '../models-mnt/open-llama/3B-v2/lora/ggml-adapter-model.bin' - please wait ...
llama_apply_lora_from_file_internal: r = 64, alpha = 128, scaling = 2.00
llama_apply_lora_from_file_internal: loading base model from '../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf'
llama_model_loader: loaded meta data with 20 key-value pairs and 237 tensors from ../models-mnt/open-llama/3B-v2/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = open-llama
llama_model_loader: - kv   2:                       llama.context_length u32              = 2048
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 3200
llama_model_loader: - kv   4:                          llama.block_count u32              = 26
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 8640
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 100
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  10:                          general.file_type u32              = 1
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  18:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  19:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - type  f32:   53 tensors
llama_model_loader: - type  f16:  184 tensors
............. done (3467.72 ms)

system_info: n_threads = 4 / 8 | AVX = 0 | AVX_VNNI = 0 | AVX2 = 0 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 0 | NEON = 1 | ARM_FMA = 1 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | SSSE3 = 0 | VSX = 0 | MATMUL_INT8 = 0 | 
perplexity: tokenizing the input ..
perplexity: tokenization took 58.923 ms
perplexity: calculating perplexity over 1 chunks, batch_size=128
perplexity: 14.74 seconds per pass - ETA 0.23 minutes
[1]6.9967,
llama_print_timings:        load time =    5106.92 ms
llama_print_timings:      sample time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings: prompt eval time =   14743.73 ms /   128 tokens (  115.19 ms per token,     8.68 tokens per second)
llama_print_timings:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
llama_print_timings:       total time =   14804.57 ms /   129 tokens

Final estimate: PPL = 6.9967 +/- 1.74338

real	0m20.153s
user	1m9.070s
sys	0m3.892s
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-lora-ppl.log
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-q8_0.log
++ grep '^\[1\]'
++ cat /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/open_llama_3b_v2-ppl-shakespeare-lora-q8_0-f16.log
++ grep '^\[1\]'
+ compare_ppl 'q8_0 / f16 base shakespeare' '[1]9.1296,' '[1]6.9967,'
+ qnt='q8_0 / f16 base shakespeare'
++ echo '[1]9.1296,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl1=9.1296
++ echo '[1]6.9967,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl2=6.9967
++ echo '9.1296 < 6.9967'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s %s OK\n' 'q8_0 / f16 base shakespeare' 9.1296 6.9967
+ return 0
  - q8_0 / f16 base shakespeare @ 9.1296 6.9967 OK
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_debug
+ tee /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_with_model_debug.log
+ cd /home/ggml/work/llama.cpp
+ local model
++ gg_get_model
++ local gguf_3b=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
++ local gguf_7b=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_with_model_debug-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-debug
    Start 22: test-model-load-cancel
1/2 Test #22: test-model-load-cancel ...........   Passed    0.18 sec
    Start 23: test-autorelease
2/2 Test #23: test-autorelease .................   Passed    2.97 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   3.15 sec*proc (2 tests)

Total Test time (real) =   3.15 sec
0.36user 2.80system 0:03.16elapsed 100%CPU (0avgtext+0avgdata 6875452maxresident)k
0inputs+40outputs (0major+153104minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_release
+ tee /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_with_model_release.log
+ cd /home/ggml/work/llama.cpp
+ local model
++ gg_get_model
++ local gguf_3b=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
++ local gguf_7b=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/1e/35d619a6fb0b9c5e3dc955345980ff056ddbaf/ggml-3-arm64-cpu/ctest_with_model_release-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/open-llama/3B-v2/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-release
    Start 22: test-model-load-cancel
1/2 Test #22: test-model-load-cancel ...........   Passed    0.06 sec
    Start 23: test-autorelease
2/2 Test #23: test-autorelease .................   Passed    2.85 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   2.90 sec*proc (2 tests)

Total Test time (real) =   2.91 sec
0.11user 2.80system 0:02.91elapsed 100%CPU (0avgtext+0avgdata 6874916maxresident)k
0inputs+40outputs (0major+153079minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
