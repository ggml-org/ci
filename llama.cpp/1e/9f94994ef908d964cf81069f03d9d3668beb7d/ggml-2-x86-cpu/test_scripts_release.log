+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 4001 (1e9f9499) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.001.900 I main: load the model and apply lora adapter, if any
0.00.022.513 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.523 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.531 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.535 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.537 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.540 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.541 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.542 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.542 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.543 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.543 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.548 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.549 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.550 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.550 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.551 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.245 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.094 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.910 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.911 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.912 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.913 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.914 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.915 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.919 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.920 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.921 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.922 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.923 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.926 I llama_model_loader: - type  f32:   37 tensors
0.00.132.927 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.445 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.882 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.393 I llm_load_vocab: special tokens cache size = 5
0.00.262.629 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.645 I llm_load_print_meta: arch             = gemma
0.00.262.646 I llm_load_print_meta: vocab type       = SPM
0.00.262.646 I llm_load_print_meta: n_vocab          = 256000
0.00.262.647 I llm_load_print_meta: n_merges         = 0
0.00.262.647 I llm_load_print_meta: vocab_only       = 0
0.00.262.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.648 I llm_load_print_meta: n_embd           = 2048
0.00.262.648 I llm_load_print_meta: n_layer          = 18
0.00.262.660 I llm_load_print_meta: n_head           = 8
0.00.262.661 I llm_load_print_meta: n_head_kv        = 1
0.00.262.662 I llm_load_print_meta: n_rot            = 256
0.00.262.662 I llm_load_print_meta: n_swa            = 0
0.00.262.662 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.663 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.664 I llm_load_print_meta: n_gqa            = 8
0.00.262.665 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.666 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.667 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.668 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.668 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.669 I llm_load_print_meta: n_ff             = 16384
0.00.262.670 I llm_load_print_meta: n_expert         = 0
0.00.262.670 I llm_load_print_meta: n_expert_used    = 0
0.00.262.670 I llm_load_print_meta: causal attn      = 1
0.00.262.671 I llm_load_print_meta: pooling type     = 0
0.00.262.671 I llm_load_print_meta: rope type        = 2
0.00.262.672 I llm_load_print_meta: rope scaling     = linear
0.00.262.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.673 I llm_load_print_meta: freq_scale_train = 1
0.00.262.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.674 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.676 I llm_load_print_meta: model type       = 2B
0.00.262.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.677 I llm_load_print_meta: model params     = 2.51 B
0.00.262.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.678 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.679 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.680 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.680 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.680 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.682 I llm_load_print_meta: max token length = 93
0.00.372.971 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.372.977 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.372.977 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.372.978 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.372.979 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.372.979 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.378.461 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.469 I llama_new_context_with_model: n_batch    = 2048
0.00.378.469 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.469 I llama_new_context_with_model: flash_attn = 0
0.00.378.473 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.474 I llama_new_context_with_model: freq_scale = 1
0.00.408.792 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.408.809 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.408.903 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.410.150 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.410.157 I llama_new_context_with_model: graph nodes  = 601
0.00.410.157 I llama_new_context_with_model: graph splits = 1
0.00.410.159 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.608 I main: llama threadpool init, n_threads = 4
0.00.503.623 I 
0.00.503.696 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.503.699 I 
0.00.503.744 I sampler seed: 2365956654
0.00.503.757 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.759 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.760 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.760 I 
 increamically.

I am a young woman with big dreams and a restless heart. I crave adventure, exploration, and a life that is anything but ordinary.

0.02.807.559 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  6001.09 tokens per second)
0.02.807.561 I llama_perf_context_print:        load time =     501.68 ms
0.02.807.563 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.807.565 I llama_perf_context_print:        eval time =    2283.09 ms /    32 runs   (   71.35 ms per token,    14.02 tokens per second)
0.02.807.566 I llama_perf_context_print:       total time =    2303.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.555 I build: 4001 (1e9f9499) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.849 I main: load the model and apply lora adapter, if any
0.00.022.412 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.428 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.435 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.436 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.442 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.443 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.443 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.444 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.445 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.445 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.449 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.450 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.816 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.597 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.604 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.604 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.605 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.605 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.607 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.607 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.610 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.611 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.612 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.612 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.613 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.616 I llama_model_loader: - type  f32:   37 tensors
0.00.133.617 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.449 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.503 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.001 I llm_load_vocab: special tokens cache size = 5
0.00.265.596 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.610 I llm_load_print_meta: arch             = gemma
0.00.265.611 I llm_load_print_meta: vocab type       = SPM
0.00.265.612 I llm_load_print_meta: n_vocab          = 256000
0.00.265.612 I llm_load_print_meta: n_merges         = 0
0.00.265.612 I llm_load_print_meta: vocab_only       = 0
0.00.265.612 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.613 I llm_load_print_meta: n_embd           = 2048
0.00.265.613 I llm_load_print_meta: n_layer          = 18
0.00.265.625 I llm_load_print_meta: n_head           = 8
0.00.265.626 I llm_load_print_meta: n_head_kv        = 1
0.00.265.626 I llm_load_print_meta: n_rot            = 256
0.00.265.626 I llm_load_print_meta: n_swa            = 0
0.00.265.627 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.627 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.628 I llm_load_print_meta: n_gqa            = 8
0.00.265.629 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.630 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.630 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.632 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.633 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.633 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.634 I llm_load_print_meta: n_ff             = 16384
0.00.265.634 I llm_load_print_meta: n_expert         = 0
0.00.265.635 I llm_load_print_meta: n_expert_used    = 0
0.00.265.635 I llm_load_print_meta: causal attn      = 1
0.00.265.635 I llm_load_print_meta: pooling type     = 0
0.00.265.636 I llm_load_print_meta: rope type        = 2
0.00.265.636 I llm_load_print_meta: rope scaling     = linear
0.00.265.638 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.638 I llm_load_print_meta: freq_scale_train = 1
0.00.265.639 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.639 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.639 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.640 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.640 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.640 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.640 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.641 I llm_load_print_meta: model type       = 2B
0.00.265.642 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.642 I llm_load_print_meta: model params     = 2.51 B
0.00.265.643 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.644 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.644 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.644 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.645 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.645 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.646 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.647 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.647 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.648 I llm_load_print_meta: max token length = 93
0.00.364.940 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.370.197 I llama_new_context_with_model: n_ctx      = 8192
0.00.370.204 I llama_new_context_with_model: n_batch    = 2048
0.00.370.204 I llama_new_context_with_model: n_ubatch   = 512
0.00.370.205 I llama_new_context_with_model: flash_attn = 0
0.00.370.207 I llama_new_context_with_model: freq_base  = 10000.0
0.00.370.208 I llama_new_context_with_model: freq_scale = 1
0.00.399.188 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.202 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.399.295 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.537 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.544 I llama_new_context_with_model: graph nodes  = 601
0.00.400.544 I llama_new_context_with_model: graph splits = 1
0.00.400.546 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.339 I main: llama threadpool init, n_threads = 4
0.00.492.354 I 
0.00.492.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.431 I 
0.00.492.478 I sampler seed: 2851920774
0.00.492.489 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.493 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.494 I 
 increadibly in quality and quantity, especially in the area of biomanufacturing and synthetic biology.

**What does the passage imply about the future of biomanufacturing and

0.02.728.336 I llama_perf_sampler_print:    sampling time =       5.40 ms /    33 runs   (    0.16 ms per token,  6111.11 tokens per second)
0.02.728.339 I llama_perf_context_print:        load time =     490.47 ms
0.02.728.340 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.341 I llama_perf_context_print:        eval time =    2216.20 ms /    32 runs   (   69.26 ms per token,    14.44 tokens per second)
0.02.728.342 I llama_perf_context_print:       total time =    2236.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.564 I build: 4001 (1e9f9499) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.022.427 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.438 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.446 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.451 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.452 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.456 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.457 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.457 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.458 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.459 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.460 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.464 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.465 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.465 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.466 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.467 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.511 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.631 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.480 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.486 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.486 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.487 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.488 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.488 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.489 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.492 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.492 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.493 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.495 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.498 I llama_model_loader: - type  f32:   37 tensors
0.00.133.499 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.357 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.985 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.652 I llm_load_vocab: special tokens cache size = 5
0.00.274.907 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.923 I llm_load_print_meta: arch             = gemma
0.00.274.923 I llm_load_print_meta: vocab type       = SPM
0.00.274.924 I llm_load_print_meta: n_vocab          = 256000
0.00.274.924 I llm_load_print_meta: n_merges         = 0
0.00.274.925 I llm_load_print_meta: vocab_only       = 0
0.00.274.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.925 I llm_load_print_meta: n_embd           = 2048
0.00.274.925 I llm_load_print_meta: n_layer          = 18
0.00.274.936 I llm_load_print_meta: n_head           = 8
0.00.274.937 I llm_load_print_meta: n_head_kv        = 1
0.00.274.938 I llm_load_print_meta: n_rot            = 256
0.00.274.938 I llm_load_print_meta: n_swa            = 0
0.00.274.939 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.940 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.941 I llm_load_print_meta: n_gqa            = 8
0.00.274.942 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.943 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.944 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.946 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.947 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.947 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.948 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.949 I llm_load_print_meta: n_ff             = 16384
0.00.274.949 I llm_load_print_meta: n_expert         = 0
0.00.274.949 I llm_load_print_meta: n_expert_used    = 0
0.00.274.951 I llm_load_print_meta: causal attn      = 1
0.00.274.951 I llm_load_print_meta: pooling type     = 0
0.00.274.951 I llm_load_print_meta: rope type        = 2
0.00.274.952 I llm_load_print_meta: rope scaling     = linear
0.00.274.953 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.954 I llm_load_print_meta: freq_scale_train = 1
0.00.274.954 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.955 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.955 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.955 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.956 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.956 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.959 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.960 I llm_load_print_meta: model type       = 2B
0.00.274.961 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.961 I llm_load_print_meta: model params     = 2.51 B
0.00.274.962 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.962 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.963 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.963 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.964 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.964 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.964 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.964 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.965 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.965 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.965 I llm_load_print_meta: max token length = 93
0.00.373.151 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.373.159 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.373.160 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.373.160 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.373.161 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.373.162 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.378.383 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.389 I llama_new_context_with_model: n_batch    = 2048
0.00.378.389 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.389 I llama_new_context_with_model: flash_attn = 0
0.00.378.392 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.393 I llama_new_context_with_model: freq_scale = 1
0.00.407.441 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.407.454 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.407.542 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.796 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.408.802 I llama_new_context_with_model: graph nodes  = 601
0.00.408.802 I llama_new_context_with_model: graph splits = 1
0.00.408.804 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.308 I main: llama threadpool init, n_threads = 4
0.00.500.321 I 
0.00.500.396 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.500.400 I 
0.00.500.445 I sampler seed: 115832051
0.00.500.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.458 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.459 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.460 I 
 increadibly for a living.

I am unable to provide personally identifiable information or financial data. [end of text]


0.01.874.593 I llama_perf_sampler_print:    sampling time =       3.35 ms /    21 runs   (    0.16 ms per token,  6264.92 tokens per second)
0.01.874.595 I llama_perf_context_print:        load time =     498.43 ms
0.01.874.596 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.874.597 I llama_perf_context_print:        eval time =    1361.38 ms /    20 runs   (   68.07 ms per token,    14.69 tokens per second)
0.01.874.598 I llama_perf_context_print:       total time =    1374.29 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.436 I build: 4001 (1e9f9499) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.627 I main: llama backend init
0.00.001.728 I main: load the model and apply lora adapter, if any
0.00.022.337 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.357 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.363 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.364 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.369 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.370 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.370 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.371 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.372 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.372 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.379 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.379 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.600 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.520 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.527 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.527 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.528 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.529 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.530 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.533 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.534 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.535 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.536 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.540 I llama_model_loader: - type  f32:   37 tensors
0.00.133.541 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.279 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.846 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.378 I llm_load_vocab: special tokens cache size = 5
0.00.271.099 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.117 I llm_load_print_meta: arch             = gemma
0.00.271.117 I llm_load_print_meta: vocab type       = SPM
0.00.271.118 I llm_load_print_meta: n_vocab          = 256000
0.00.271.118 I llm_load_print_meta: n_merges         = 0
0.00.271.119 I llm_load_print_meta: vocab_only       = 0
0.00.271.119 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.119 I llm_load_print_meta: n_embd           = 2048
0.00.271.119 I llm_load_print_meta: n_layer          = 18
0.00.271.130 I llm_load_print_meta: n_head           = 8
0.00.271.132 I llm_load_print_meta: n_head_kv        = 1
0.00.271.132 I llm_load_print_meta: n_rot            = 256
0.00.271.132 I llm_load_print_meta: n_swa            = 0
0.00.271.133 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.134 I llm_load_print_meta: n_gqa            = 8
0.00.271.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.137 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.139 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.140 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.140 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.140 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.141 I llm_load_print_meta: n_ff             = 16384
0.00.271.142 I llm_load_print_meta: n_expert         = 0
0.00.271.142 I llm_load_print_meta: n_expert_used    = 0
0.00.271.142 I llm_load_print_meta: causal attn      = 1
0.00.271.143 I llm_load_print_meta: pooling type     = 0
0.00.271.143 I llm_load_print_meta: rope type        = 2
0.00.271.143 I llm_load_print_meta: rope scaling     = linear
0.00.271.145 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.146 I llm_load_print_meta: freq_scale_train = 1
0.00.271.146 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.147 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.147 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.149 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.150 I llm_load_print_meta: model type       = 2B
0.00.271.151 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.151 I llm_load_print_meta: model params     = 2.51 B
0.00.271.152 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.153 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.154 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.154 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.155 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.155 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.155 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.156 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.156 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.156 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.157 I llm_load_print_meta: max token length = 93
0.00.357.683 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.357.688 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.362.873 I llama_new_context_with_model: n_ctx      = 8192
0.00.362.880 I llama_new_context_with_model: n_batch    = 2048
0.00.362.880 I llama_new_context_with_model: n_ubatch   = 512
0.00.362.881 I llama_new_context_with_model: flash_attn = 0
0.00.362.882 I llama_new_context_with_model: freq_base  = 10000.0
0.00.362.883 I llama_new_context_with_model: freq_scale = 1
0.00.393.852 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.393.866 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.393.971 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.253 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.395.259 I llama_new_context_with_model: graph nodes  = 601
0.00.395.260 I llama_new_context_with_model: graph splits = 1
0.00.395.261 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.671 I main: llama threadpool init, n_threads = 4
0.00.494.685 I 
0.00.494.770 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.494.775 I 
0.00.494.827 I sampler seed: 1067090661
0.00.494.838 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.842 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.843 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.843 I 
 increably. [end of text]


0.00.776.463 I llama_perf_sampler_print:    sampling time =       0.72 ms /     5 runs   (    0.14 ms per token,  6983.24 tokens per second)
0.00.776.466 I llama_perf_context_print:        load time =     492.92 ms
0.00.776.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.776.468 I llama_perf_context_print:        eval time =     278.20 ms /     4 runs   (   69.55 ms per token,    14.38 tokens per second)
0.00.776.468 I llama_perf_context_print:       total time =     281.80 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.089s
user	0m27.683s
sys	0m9.722s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4001 (1e9f9499)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32339.66 ms
main:    total time = 32339.66 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4001 (1e9f9499) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.811 I main: load the model and apply lora adapter, if any
0.00.022.524 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.531 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.540 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.546 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.547 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.550 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.551 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.552 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.552 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.557 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.557 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.558 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.558 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.639 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.588 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.404 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.410 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.411 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.412 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.412 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.414 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.416 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.418 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.419 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.419 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.420 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.423 I llama_model_loader: - type  f32:   37 tensors
0.00.133.424 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.425 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.243 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.770 I llm_load_vocab: special tokens cache size = 5
0.00.268.085 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.100 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.101 I llm_load_print_meta: arch             = gemma
0.00.268.101 I llm_load_print_meta: vocab type       = SPM
0.00.268.102 I llm_load_print_meta: n_vocab          = 256000
0.00.268.102 I llm_load_print_meta: n_merges         = 0
0.00.268.103 I llm_load_print_meta: vocab_only       = 0
0.00.268.103 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.103 I llm_load_print_meta: n_embd           = 2048
0.00.268.104 I llm_load_print_meta: n_layer          = 18
0.00.268.116 I llm_load_print_meta: n_head           = 8
0.00.268.117 I llm_load_print_meta: n_head_kv        = 1
0.00.268.117 I llm_load_print_meta: n_rot            = 256
0.00.268.117 I llm_load_print_meta: n_swa            = 0
0.00.268.117 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.118 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.119 I llm_load_print_meta: n_gqa            = 8
0.00.268.120 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.121 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.121 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.123 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.123 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.123 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.124 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.124 I llm_load_print_meta: n_ff             = 16384
0.00.268.125 I llm_load_print_meta: n_expert         = 0
0.00.268.125 I llm_load_print_meta: n_expert_used    = 0
0.00.268.125 I llm_load_print_meta: causal attn      = 1
0.00.268.126 I llm_load_print_meta: pooling type     = 0
0.00.268.126 I llm_load_print_meta: rope type        = 2
0.00.268.126 I llm_load_print_meta: rope scaling     = linear
0.00.268.128 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.128 I llm_load_print_meta: freq_scale_train = 1
0.00.268.128 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.129 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.129 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.129 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.130 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.131 I llm_load_print_meta: model type       = 2B
0.00.268.131 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.132 I llm_load_print_meta: model params     = 2.51 B
0.00.268.132 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.133 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.134 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.134 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.134 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.135 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.135 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.136 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.136 I llm_load_print_meta: max token length = 93
0.00.329.435 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.329.444 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.329.445 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.329.446 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.329.447 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.329.447 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.786 I llama_new_context_with_model: n_ctx      = 8192
0.00.334.793 I llama_new_context_with_model: n_batch    = 2048
0.00.334.794 I llama_new_context_with_model: n_ubatch   = 512
0.00.334.795 I llama_new_context_with_model: flash_attn = 0
0.00.334.798 I llama_new_context_with_model: freq_base  = 10000.0
0.00.334.799 I llama_new_context_with_model: freq_scale = 1
0.00.365.647 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.661 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.758 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.038 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.367.043 I llama_new_context_with_model: graph nodes  = 601
0.00.367.044 I llama_new_context_with_model: graph splits = 1
0.00.367.045 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.048 I main: llama threadpool init, n_threads = 4
0.00.449.062 I 
0.00.449.142 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.145 I 
0.00.449.187 I sampler seed: 4142597884
0.00.449.197 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.200 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.201 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.201 I 
 seconally, while her voice trembled with a mixture of fear and confusion.

**Meaning:**

The sentence depicts a situation where a person (referred to as

0.02.103.048 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6041.74 tokens per second)
0.02.103.051 I llama_perf_context_print:        load time =     447.22 ms
0.02.103.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.103.053 I llama_perf_context_print:        eval time =    1634.12 ms /    32 runs   (   51.07 ms per token,    19.58 tokens per second)
0.02.103.054 I llama_perf_context_print:       total time =    1654.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4001 (1e9f9499)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32028.14 ms
main:    total time = 32028.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.518 I build: 4001 (1e9f9499) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.496 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.515 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.516 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.520 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.520 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.521 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.522 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.522 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.522 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.526 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.527 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.527 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.529 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.530 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.395 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.266 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.172 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.179 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.184 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.185 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.188 I llama_model_loader: - type  f32:   37 tensors
0.00.133.189 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.190 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.877 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.873 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.458 I llm_load_vocab: special tokens cache size = 5
0.00.268.868 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.884 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.884 I llm_load_print_meta: arch             = gemma
0.00.268.885 I llm_load_print_meta: vocab type       = SPM
0.00.268.885 I llm_load_print_meta: n_vocab          = 256000
0.00.268.885 I llm_load_print_meta: n_merges         = 0
0.00.268.886 I llm_load_print_meta: vocab_only       = 0
0.00.268.886 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.886 I llm_load_print_meta: n_embd           = 2048
0.00.268.887 I llm_load_print_meta: n_layer          = 18
0.00.268.899 I llm_load_print_meta: n_head           = 8
0.00.268.900 I llm_load_print_meta: n_head_kv        = 1
0.00.268.900 I llm_load_print_meta: n_rot            = 256
0.00.268.900 I llm_load_print_meta: n_swa            = 0
0.00.268.901 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.901 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.902 I llm_load_print_meta: n_gqa            = 8
0.00.268.903 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.904 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.904 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.906 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.907 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.907 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.907 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.908 I llm_load_print_meta: n_ff             = 16384
0.00.268.908 I llm_load_print_meta: n_expert         = 0
0.00.268.908 I llm_load_print_meta: n_expert_used    = 0
0.00.268.909 I llm_load_print_meta: causal attn      = 1
0.00.268.909 I llm_load_print_meta: pooling type     = 0
0.00.268.909 I llm_load_print_meta: rope type        = 2
0.00.268.910 I llm_load_print_meta: rope scaling     = linear
0.00.268.911 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.911 I llm_load_print_meta: freq_scale_train = 1
0.00.268.912 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.912 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.912 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.913 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.914 I llm_load_print_meta: model type       = 2B
0.00.268.915 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.923 I llm_load_print_meta: model params     = 2.51 B
0.00.268.924 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.924 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.924 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.925 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.925 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.925 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.926 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.926 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.927 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.927 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.927 I llm_load_print_meta: max token length = 93
0.00.329.949 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.274 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.281 I llama_new_context_with_model: n_batch    = 2048
0.00.335.281 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.282 I llama_new_context_with_model: flash_attn = 0
0.00.335.285 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.286 I llama_new_context_with_model: freq_scale = 1
0.00.366.749 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.366.767 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.366.863 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.130 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.368.137 I llama_new_context_with_model: graph nodes  = 601
0.00.368.137 I llama_new_context_with_model: graph splits = 1
0.00.368.139 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.945 I main: llama threadpool init, n_threads = 4
0.00.450.958 I 
0.00.451.031 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.035 I 
0.00.451.077 I sampler seed: 2015048683
0.00.451.087 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.090 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.090 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.091 I 
 increasities. [end of text]


0.00.659.120 I llama_perf_sampler_print:    sampling time =       0.69 ms /     5 runs   (    0.14 ms per token,  7225.43 tokens per second)
0.00.659.122 I llama_perf_context_print:        load time =     449.06 ms
0.00.659.123 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.659.124 I llama_perf_context_print:        eval time =     204.89 ms /     4 runs   (   51.22 ms per token,    19.52 tokens per second)
0.00.659.125 I llama_perf_context_print:       total time =     208.18 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.018s
user	8m9.015s
sys	0m7.037s
