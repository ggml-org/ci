+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.025.705 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.906 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.995 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.006 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.008 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.013 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.016 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.017 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.021 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.028 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.029 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.031 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.033 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.037 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.650 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.363 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.622 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.630 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.631 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.632 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.633 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.635 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.636 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.639 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.640 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.641 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.642 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.643 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.650 I llama_model_loader: - type  f32:   37 tensors
0.00.267.654 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.777 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.705 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.501.444 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.506.574 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.517.509 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.386 I llm_load_vocab: special tokens cache size = 5
0.00.617.573 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.643 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.644 I llm_load_print_meta: arch             = gemma
0.00.617.644 I llm_load_print_meta: vocab type       = SPM
0.00.617.645 I llm_load_print_meta: n_vocab          = 256000
0.00.617.648 I llm_load_print_meta: n_merges         = 0
0.00.617.648 I llm_load_print_meta: vocab_only       = 0
0.00.617.649 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.649 I llm_load_print_meta: n_embd           = 2048
0.00.617.649 I llm_load_print_meta: n_layer          = 18
0.00.617.710 I llm_load_print_meta: n_head           = 8
0.00.617.717 I llm_load_print_meta: n_head_kv        = 1
0.00.617.717 I llm_load_print_meta: n_rot            = 256
0.00.617.718 I llm_load_print_meta: n_swa            = 0
0.00.617.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.718 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.723 I llm_load_print_meta: n_gqa            = 8
0.00.617.727 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.732 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.735 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.740 I llm_load_print_meta: n_ff             = 16384
0.00.617.741 I llm_load_print_meta: n_expert         = 0
0.00.617.741 I llm_load_print_meta: n_expert_used    = 0
0.00.617.742 I llm_load_print_meta: causal attn      = 1
0.00.617.753 I llm_load_print_meta: pooling type     = 0
0.00.617.754 I llm_load_print_meta: rope type        = 2
0.00.617.755 I llm_load_print_meta: rope scaling     = linear
0.00.617.757 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.757 I llm_load_print_meta: freq_scale_train = 1
0.00.617.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.758 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.758 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.758 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.759 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.759 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.759 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.760 I llm_load_print_meta: model type       = 2B
0.00.617.761 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.762 I llm_load_print_meta: model params     = 2.51 B
0.00.617.763 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.765 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.765 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.766 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.772 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.774 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.774 I llm_load_print_meta: max token length = 93
0.00.617.935 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.718.061 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.718.073 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.718.073 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.718.074 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.718.075 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.718.076 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.723.847 I llama_new_context_with_model: n_ctx      = 8192
0.00.723.854 I llama_new_context_with_model: n_batch    = 2048
0.00.723.854 I llama_new_context_with_model: n_ubatch   = 512
0.00.723.855 I llama_new_context_with_model: flash_attn = 0
0.00.723.857 I llama_new_context_with_model: freq_base  = 10000.0
0.00.723.858 I llama_new_context_with_model: freq_scale = 1
0.00.753.047 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.753.090 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.753.199 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.754.616 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.754.621 I llama_new_context_with_model: graph nodes  = 601
0.00.754.621 I llama_new_context_with_model: graph splits = 1
0.00.754.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.073 I main: llama threadpool init, n_threads = 4
0.01.363.086 I 
0.01.363.206 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.209 I 
0.01.363.385 I sampler seed: 584597223
0.01.363.396 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.404 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.363.404 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.404 I 
 increasities with a focus on the emotional impact and physiological responses of such encounters.

**Answer:**

**Emotional Impact:**

* Intense emotions ranging from love

0.14.843.340 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.52 tokens per second)
0.14.843.345 I llama_perf_context_print:        load time =    1360.18 ms
0.14.843.347 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.843.349 I llama_perf_context_print:        eval time =   13399.08 ms /    32 runs   (  418.72 ms per token,     2.39 tokens per second)
0.14.843.350 I llama_perf_context_print:       total time =   13480.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.952 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.042 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.055 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.057 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.061 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.064 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.068 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.076 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.078 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.079 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.080 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.088 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.821 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.824 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.166 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.167 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.168 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.169 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.170 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.173 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.177 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.178 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.179 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.180 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.181 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.189 I llama_model_loader: - type  f32:   37 tensors
0.00.267.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.451 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.533 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.485.703 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.492.374 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.506.757 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.810 I llm_load_vocab: special tokens cache size = 5
0.00.615.873 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.942 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.943 I llm_load_print_meta: arch             = gemma
0.00.615.943 I llm_load_print_meta: vocab type       = SPM
0.00.615.944 I llm_load_print_meta: n_vocab          = 256000
0.00.615.946 I llm_load_print_meta: n_merges         = 0
0.00.615.947 I llm_load_print_meta: vocab_only       = 0
0.00.615.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.947 I llm_load_print_meta: n_embd           = 2048
0.00.615.948 I llm_load_print_meta: n_layer          = 18
0.00.616.013 I llm_load_print_meta: n_head           = 8
0.00.616.020 I llm_load_print_meta: n_head_kv        = 1
0.00.616.020 I llm_load_print_meta: n_rot            = 256
0.00.616.021 I llm_load_print_meta: n_swa            = 0
0.00.616.021 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.022 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.026 I llm_load_print_meta: n_gqa            = 8
0.00.616.031 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.035 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.036 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.038 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.039 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.039 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.040 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.045 I llm_load_print_meta: n_ff             = 16384
0.00.616.045 I llm_load_print_meta: n_expert         = 0
0.00.616.047 I llm_load_print_meta: n_expert_used    = 0
0.00.616.047 I llm_load_print_meta: causal attn      = 1
0.00.616.048 I llm_load_print_meta: pooling type     = 0
0.00.616.048 I llm_load_print_meta: rope type        = 2
0.00.616.049 I llm_load_print_meta: rope scaling     = linear
0.00.616.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.051 I llm_load_print_meta: freq_scale_train = 1
0.00.616.061 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.065 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.066 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.066 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.066 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.067 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.067 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.068 I llm_load_print_meta: model type       = 2B
0.00.616.069 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.070 I llm_load_print_meta: model params     = 2.51 B
0.00.616.071 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.071 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.073 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.074 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.080 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.081 I llm_load_print_meta: max token length = 93
0.00.616.245 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.183 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.717.084 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.091 I llama_new_context_with_model: n_batch    = 2048
0.00.717.091 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.092 I llama_new_context_with_model: flash_attn = 0
0.00.717.095 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.096 I llama_new_context_with_model: freq_scale = 1
0.00.747.085 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.128 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.674 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.679 I llama_new_context_with_model: graph nodes  = 601
0.00.748.680 I llama_new_context_with_model: graph splits = 1
0.00.748.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.365.044 I main: llama threadpool init, n_threads = 4
0.01.365.059 I 
0.01.365.189 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.365.194 I 
0.01.365.413 I sampler seed: 2462197239
0.01.365.431 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.365.441 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.365.445 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.365.446 I 
 increasities
I am unable to generate a response as the provided context contains sexually suggestive material and violates our content policies. [end of text]


0.11.887.033 I llama_perf_sampler_print:    sampling time =      38.74 ms /    26 runs   (    1.49 ms per token,   671.12 tokens per second)
0.11.887.037 I llama_perf_context_print:        load time =    1362.15 ms
0.11.887.050 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.887.052 I llama_perf_context_print:        eval time =   10456.55 ms /    25 runs   (  418.26 ms per token,     2.39 tokens per second)
0.11.887.054 I llama_perf_context_print:       total time =   10522.00 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.024.842 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.051 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.144 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.157 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.158 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.163 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.165 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.167 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.168 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.190 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.191 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.192 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.010 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.353 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.362 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.363 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.364 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.365 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.366 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.368 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.371 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.373 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.374 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.375 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.376 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.384 I llama_model_loader: - type  f32:   37 tensors
0.00.267.388 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.076 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.013 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.499.846 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.505.460 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.517.104 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.047 I llm_load_vocab: special tokens cache size = 5
0.00.613.524 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.596 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.597 I llm_load_print_meta: arch             = gemma
0.00.613.598 I llm_load_print_meta: vocab type       = SPM
0.00.613.599 I llm_load_print_meta: n_vocab          = 256000
0.00.613.601 I llm_load_print_meta: n_merges         = 0
0.00.613.601 I llm_load_print_meta: vocab_only       = 0
0.00.613.601 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.602 I llm_load_print_meta: n_embd           = 2048
0.00.613.602 I llm_load_print_meta: n_layer          = 18
0.00.613.665 I llm_load_print_meta: n_head           = 8
0.00.613.672 I llm_load_print_meta: n_head_kv        = 1
0.00.613.673 I llm_load_print_meta: n_rot            = 256
0.00.613.673 I llm_load_print_meta: n_swa            = 0
0.00.613.673 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.674 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.678 I llm_load_print_meta: n_gqa            = 8
0.00.613.683 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.688 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.689 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.691 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.693 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.693 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.694 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.699 I llm_load_print_meta: n_ff             = 16384
0.00.613.699 I llm_load_print_meta: n_expert         = 0
0.00.613.699 I llm_load_print_meta: n_expert_used    = 0
0.00.613.700 I llm_load_print_meta: causal attn      = 1
0.00.613.701 I llm_load_print_meta: pooling type     = 0
0.00.613.702 I llm_load_print_meta: rope type        = 2
0.00.613.702 I llm_load_print_meta: rope scaling     = linear
0.00.613.703 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.704 I llm_load_print_meta: freq_scale_train = 1
0.00.613.705 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.705 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.706 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.706 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.706 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.706 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.707 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.708 I llm_load_print_meta: model type       = 2B
0.00.613.709 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.710 I llm_load_print_meta: model params     = 2.51 B
0.00.613.711 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.711 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.712 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.712 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.725 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.727 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.732 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.734 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.734 I llm_load_print_meta: max token length = 93
0.00.613.910 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.070 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.691.082 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.691.083 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.691.083 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.691.084 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.691.085 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.696.845 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.853 I llama_new_context_with_model: n_batch    = 2048
0.00.696.854 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.854 I llama_new_context_with_model: flash_attn = 0
0.00.696.859 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.859 I llama_new_context_with_model: freq_scale = 1
0.00.727.264 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.306 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.423 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.845 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.849 I llama_new_context_with_model: graph nodes  = 601
0.00.728.850 I llama_new_context_with_model: graph splits = 1
0.00.728.865 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.943 I main: llama threadpool init, n_threads = 4
0.01.338.955 I 
0.01.339.056 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.060 I 
0.01.339.238 I sampler seed: 2056487520
0.01.339.250 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.257 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.258 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.258 I 
 increasities in a world where the concept of personal space and physical distance is nonexistent.

In this bizarre and unsettling reality, individuals navigate their existence within a boundless

0.14.804.612 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.21 tokens per second)
0.14.804.616 I llama_perf_context_print:        load time =    1336.08 ms
0.14.804.630 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.804.631 I llama_perf_context_print:        eval time =   13382.15 ms /    32 runs   (  418.19 ms per token,     2.39 tokens per second)
0.14.804.632 I llama_perf_context_print:       total time =   13465.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.701 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.902 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.006 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.007 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.013 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.014 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.014 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.015 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.016 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.024 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.027 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.042 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.044 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.046 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.901 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.865 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.219 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.228 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.229 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.230 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.231 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.232 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.233 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.236 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.237 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.239 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.240 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.241 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.248 I llama_model_loader: - type  f32:   37 tensors
0.00.267.251 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.885 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.229 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.488.110 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.493.773 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.506.312 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.298 I llm_load_vocab: special tokens cache size = 5
0.00.602.729 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.800 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.806 I llm_load_print_meta: arch             = gemma
0.00.602.807 I llm_load_print_meta: vocab type       = SPM
0.00.602.807 I llm_load_print_meta: n_vocab          = 256000
0.00.602.810 I llm_load_print_meta: n_merges         = 0
0.00.602.810 I llm_load_print_meta: vocab_only       = 0
0.00.602.811 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.812 I llm_load_print_meta: n_embd           = 2048
0.00.602.812 I llm_load_print_meta: n_layer          = 18
0.00.602.887 I llm_load_print_meta: n_head           = 8
0.00.602.897 I llm_load_print_meta: n_head_kv        = 1
0.00.602.898 I llm_load_print_meta: n_rot            = 256
0.00.602.898 I llm_load_print_meta: n_swa            = 0
0.00.602.899 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.900 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.905 I llm_load_print_meta: n_gqa            = 8
0.00.602.909 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.915 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.917 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.919 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.920 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.921 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.929 I llm_load_print_meta: n_ff             = 16384
0.00.602.932 I llm_load_print_meta: n_expert         = 0
0.00.602.933 I llm_load_print_meta: n_expert_used    = 0
0.00.602.934 I llm_load_print_meta: causal attn      = 1
0.00.602.934 I llm_load_print_meta: pooling type     = 0
0.00.602.935 I llm_load_print_meta: rope type        = 2
0.00.602.936 I llm_load_print_meta: rope scaling     = linear
0.00.602.938 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.939 I llm_load_print_meta: freq_scale_train = 1
0.00.602.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.952 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.952 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.953 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.962 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.965 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.965 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.966 I llm_load_print_meta: model type       = 2B
0.00.602.967 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.968 I llm_load_print_meta: model params     = 2.51 B
0.00.602.969 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.970 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.970 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.971 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.972 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.972 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.973 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.973 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.981 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.983 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.983 I llm_load_print_meta: max token length = 93
0.00.603.172 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.097 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.674.108 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.679.870 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.877 I llama_new_context_with_model: n_batch    = 2048
0.00.679.878 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.878 I llama_new_context_with_model: flash_attn = 0
0.00.679.881 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.882 I llama_new_context_with_model: freq_scale = 1
0.00.709.578 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.621 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.145 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.149 I llama_new_context_with_model: graph nodes  = 601
0.00.711.150 I llama_new_context_with_model: graph splits = 1
0.00.711.166 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.967 I main: llama threadpool init, n_threads = 4
0.01.337.979 I 
0.01.338.095 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.100 I 
0.01.338.303 I sampler seed: 476198779
0.01.338.316 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.323 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.338.324 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.324 I 
 increably!

I am unable to generate a response that is both humorous and appropriate for all audiences. [end of text]


0.10.562.731 I llama_perf_sampler_print:    sampling time =      33.75 ms /    23 runs   (    1.47 ms per token,   681.40 tokens per second)
0.10.562.734 I llama_perf_context_print:        load time =    1335.09 ms
0.10.562.736 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.562.738 I llama_perf_context_print:        eval time =    9168.22 ms /    22 runs   (  416.74 ms per token,     2.40 tokens per second)
0.10.562.739 I llama_perf_context_print:       total time =    9224.77 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.767s
user	3m19.543s
sys	0m9.443s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3936 (33a69ec7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197212.98 ms
main:    total time = 197212.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.589 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.782 I main: llama backend init
0.00.002.728 I main: load the model and apply lora adapter, if any
0.00.024.746 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.957 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.052 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.062 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.064 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.068 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.069 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.070 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.071 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.073 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.074 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.080 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.081 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.082 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.083 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.084 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.266.295 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.284.671 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.284.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.284.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.284.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.284.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.284.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.284.685 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.284.688 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.284.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.284.690 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.284.691 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.284.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.284.701 I llama_model_loader: - type  f32:   37 tensors
0.00.284.705 I llama_model_loader: - type q4_K:  108 tensors
0.00.284.706 I llama_model_loader: - type q6_K:   19 tensors
0.00.461.128 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.667 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.507.434 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.512.700 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.524.449 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.366 I llm_load_vocab: special tokens cache size = 5
0.00.620.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.708 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.712 I llm_load_print_meta: arch             = gemma
0.00.620.713 I llm_load_print_meta: vocab type       = SPM
0.00.620.713 I llm_load_print_meta: n_vocab          = 256000
0.00.620.715 I llm_load_print_meta: n_merges         = 0
0.00.620.716 I llm_load_print_meta: vocab_only       = 0
0.00.620.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.717 I llm_load_print_meta: n_embd           = 2048
0.00.620.717 I llm_load_print_meta: n_layer          = 18
0.00.620.783 I llm_load_print_meta: n_head           = 8
0.00.620.794 I llm_load_print_meta: n_head_kv        = 1
0.00.620.795 I llm_load_print_meta: n_rot            = 256
0.00.620.804 I llm_load_print_meta: n_swa            = 0
0.00.620.805 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.806 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.811 I llm_load_print_meta: n_gqa            = 8
0.00.620.815 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.821 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.822 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.824 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.824 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.825 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.825 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.831 I llm_load_print_meta: n_ff             = 16384
0.00.620.831 I llm_load_print_meta: n_expert         = 0
0.00.620.832 I llm_load_print_meta: n_expert_used    = 0
0.00.620.833 I llm_load_print_meta: causal attn      = 1
0.00.620.833 I llm_load_print_meta: pooling type     = 0
0.00.620.833 I llm_load_print_meta: rope type        = 2
0.00.620.846 I llm_load_print_meta: rope scaling     = linear
0.00.620.848 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.849 I llm_load_print_meta: freq_scale_train = 1
0.00.620.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.849 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.851 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.851 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.852 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.852 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.853 I llm_load_print_meta: model type       = 2B
0.00.620.862 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.620.863 I llm_load_print_meta: model params     = 2.51 B
0.00.620.864 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.620.864 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.867 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.868 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.868 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.868 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.869 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.869 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.875 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.877 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.878 I llm_load_print_meta: max token length = 93
0.00.621.050 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.966 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.680.978 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.680.978 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.680.979 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.680.980 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.680.980 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.686.571 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.577 I llama_new_context_with_model: n_batch    = 2048
0.00.686.578 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.578 I llama_new_context_with_model: flash_attn = 0
0.00.686.580 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.581 I llama_new_context_with_model: freq_scale = 1
0.00.716.060 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.102 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.219 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.632 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.637 I llama_new_context_with_model: graph nodes  = 601
0.00.717.637 I llama_new_context_with_model: graph splits = 1
0.00.717.653 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.480 I main: llama threadpool init, n_threads = 4
0.01.296.492 I 
0.01.296.598 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.602 I 
0.01.296.780 I sampler seed: 3540337350
0.01.296.791 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.296.797 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.296.798 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.296.801 I 
 seconded the question and provided a revised version. 

**Original Question:**

> Explain the concept of a recursive function. Explain how a recursive function works

0.12.168.226 I llama_perf_sampler_print:    sampling time =      48.93 ms /    33 runs   (    1.48 ms per token,   674.42 tokens per second)
0.12.168.228 I llama_perf_context_print:        load time =    1293.66 ms
0.12.168.230 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.168.232 I llama_perf_context_print:        eval time =   10790.70 ms /    32 runs   (  337.21 ms per token,     2.97 tokens per second)
0.12.168.233 I llama_perf_context_print:       total time =   10871.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3936 (33a69ec7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197163.99 ms
main:    total time = 197163.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.795 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.899 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.915 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.919 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.925 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.927 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.928 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.931 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.940 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.942 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.943 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.944 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.946 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.031 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.024 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.352 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.360 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.361 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.362 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.364 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.365 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.366 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.370 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.371 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.379 I llama_model_loader: - type  f32:   37 tensors
0.00.266.383 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.384 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.874 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.174 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.491.237 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.497.166 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.509.628 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.517 I llm_load_vocab: special tokens cache size = 5
0.00.617.791 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.863 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.864 I llm_load_print_meta: arch             = gemma
0.00.617.864 I llm_load_print_meta: vocab type       = SPM
0.00.617.865 I llm_load_print_meta: n_vocab          = 256000
0.00.617.867 I llm_load_print_meta: n_merges         = 0
0.00.617.868 I llm_load_print_meta: vocab_only       = 0
0.00.617.868 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.868 I llm_load_print_meta: n_embd           = 2048
0.00.617.869 I llm_load_print_meta: n_layer          = 18
0.00.617.935 I llm_load_print_meta: n_head           = 8
0.00.617.941 I llm_load_print_meta: n_head_kv        = 1
0.00.617.942 I llm_load_print_meta: n_rot            = 256
0.00.617.942 I llm_load_print_meta: n_swa            = 0
0.00.617.942 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.945 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.949 I llm_load_print_meta: n_gqa            = 8
0.00.617.955 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.960 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.961 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.963 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.964 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.964 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.965 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.970 I llm_load_print_meta: n_ff             = 16384
0.00.617.970 I llm_load_print_meta: n_expert         = 0
0.00.617.971 I llm_load_print_meta: n_expert_used    = 0
0.00.617.972 I llm_load_print_meta: causal attn      = 1
0.00.617.972 I llm_load_print_meta: pooling type     = 0
0.00.617.973 I llm_load_print_meta: rope type        = 2
0.00.617.974 I llm_load_print_meta: rope scaling     = linear
0.00.617.975 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.976 I llm_load_print_meta: freq_scale_train = 1
0.00.617.977 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.977 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.978 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.978 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.979 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.980 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.980 I llm_load_print_meta: model type       = 2B
0.00.617.981 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.982 I llm_load_print_meta: model params     = 2.51 B
0.00.617.988 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.988 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.989 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.990 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.991 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.992 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.998 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.999 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.000 I llm_load_print_meta: max token length = 93
0.00.618.168 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.675.980 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.681.575 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.583 I llama_new_context_with_model: n_batch    = 2048
0.00.681.583 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.584 I llama_new_context_with_model: flash_attn = 0
0.00.681.587 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.588 I llama_new_context_with_model: freq_scale = 1
0.00.712.726 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.712.773 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.882 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.240 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.714.243 I llama_new_context_with_model: graph nodes  = 601
0.00.714.244 I llama_new_context_with_model: graph splits = 1
0.00.714.260 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.500 I main: llama threadpool init, n_threads = 4
0.01.292.512 I 
0.01.292.618 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.622 I 
0.01.292.804 I sampler seed: 923127471
0.01.292.815 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.822 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.292.823 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.823 I 
 effega.

I am unable to access the requested file, and I believe it may be corrupted.

I would appreciate it if you could:

1

0.12.190.498 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.84 tokens per second)
0.12.190.502 I llama_perf_context_print:        load time =    1289.62 ms
0.12.190.504 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.190.506 I llama_perf_context_print:        eval time =   10816.94 ms /    32 runs   (  338.03 ms per token,     2.96 tokens per second)
0.12.190.507 I llama_perf_context_print:       total time =   10898.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.629s
user	49m52.950s
sys	0m6.330s
