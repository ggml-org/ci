+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.598 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.799 I main: llama backend init
0.00.001.943 I main: load the model and apply lora adapter, if any
0.00.022.375 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.425 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.435 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.440 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.441 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.446 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.447 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.447 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.448 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.448 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.453 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.453 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.454 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.455 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.455 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.254 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.192 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.126 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.134 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.136 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.136 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.137 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.138 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.140 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.141 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.142 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.146 I llama_model_loader: - type  f32:   37 tensors
0.00.133.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.707 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.234.403 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.235.609 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.239.193 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.246.227 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.729 I llm_load_vocab: special tokens cache size = 5
0.00.267.581 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.597 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.598 I llm_load_print_meta: arch             = gemma
0.00.267.598 I llm_load_print_meta: vocab type       = SPM
0.00.267.599 I llm_load_print_meta: n_vocab          = 256000
0.00.267.599 I llm_load_print_meta: n_merges         = 0
0.00.267.600 I llm_load_print_meta: vocab_only       = 0
0.00.267.600 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.600 I llm_load_print_meta: n_embd           = 2048
0.00.267.601 I llm_load_print_meta: n_layer          = 18
0.00.267.614 I llm_load_print_meta: n_head           = 8
0.00.267.615 I llm_load_print_meta: n_head_kv        = 1
0.00.267.615 I llm_load_print_meta: n_rot            = 256
0.00.267.616 I llm_load_print_meta: n_swa            = 0
0.00.267.616 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.616 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.617 I llm_load_print_meta: n_gqa            = 8
0.00.267.618 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.619 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.620 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.621 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.621 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.621 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.622 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.622 I llm_load_print_meta: n_ff             = 16384
0.00.267.623 I llm_load_print_meta: n_expert         = 0
0.00.267.623 I llm_load_print_meta: n_expert_used    = 0
0.00.267.623 I llm_load_print_meta: causal attn      = 1
0.00.267.624 I llm_load_print_meta: pooling type     = 0
0.00.267.624 I llm_load_print_meta: rope type        = 2
0.00.267.624 I llm_load_print_meta: rope scaling     = linear
0.00.267.626 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.626 I llm_load_print_meta: freq_scale_train = 1
0.00.267.627 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.627 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.627 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.627 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.627 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.628 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.628 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.628 I llm_load_print_meta: model type       = 2B
0.00.267.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.630 I llm_load_print_meta: model params     = 2.51 B
0.00.267.631 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.632 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.633 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.633 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.633 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.634 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.634 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.634 I llm_load_print_meta: max token length = 93
0.00.267.661 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.368.580 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.368.589 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.368.589 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.368.590 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.368.590 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.368.591 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.373.734 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.740 I llama_new_context_with_model: n_batch    = 2048
0.00.373.740 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.741 I llama_new_context_with_model: flash_attn = 0
0.00.373.743 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.744 I llama_new_context_with_model: freq_scale = 1
0.00.402.133 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.402.149 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.402.248 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.128 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.403.136 I llama_new_context_with_model: graph nodes  = 601
0.00.403.137 I llama_new_context_with_model: graph splits = 1
0.00.403.139 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.634 I main: llama threadpool init, n_threads = 4
0.00.494.647 I 
0.00.494.724 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.494.728 I 
0.00.494.767 I sampler seed: 1629475388
0.00.494.777 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.780 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.782 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.782 I 
 maneuvred.

I am not sure what the question is asking, so I am unable to provide an answer. Please provide more context or rephrase the

0.02.747.796 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6970.85 tokens per second)
0.02.747.798 I llama_perf_context_print:        load time =     492.67 ms
0.02.747.799 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.747.801 I llama_perf_context_print:        eval time =    2235.27 ms /    32 runs   (   69.85 ms per token,    14.32 tokens per second)
0.02.747.802 I llama_perf_context_print:       total time =    2253.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.548 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.840 I main: load the model and apply lora adapter, if any
0.00.022.160 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.176 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.183 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.191 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.193 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.197 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.197 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.198 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.198 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.199 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.413 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.047 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.909 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.915 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.916 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.917 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.918 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.919 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.919 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.922 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.922 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.923 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.924 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.927 I llama_model_loader: - type  f32:   37 tensors
0.00.132.929 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.693 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.520 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.243.169 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.248.324 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.259.323 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.078 I llm_load_vocab: special tokens cache size = 5
0.00.281.168 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.185 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.186 I llm_load_print_meta: arch             = gemma
0.00.281.186 I llm_load_print_meta: vocab type       = SPM
0.00.281.187 I llm_load_print_meta: n_vocab          = 256000
0.00.281.187 I llm_load_print_meta: n_merges         = 0
0.00.281.187 I llm_load_print_meta: vocab_only       = 0
0.00.281.188 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.188 I llm_load_print_meta: n_embd           = 2048
0.00.281.188 I llm_load_print_meta: n_layer          = 18
0.00.281.200 I llm_load_print_meta: n_head           = 8
0.00.281.201 I llm_load_print_meta: n_head_kv        = 1
0.00.281.201 I llm_load_print_meta: n_rot            = 256
0.00.281.201 I llm_load_print_meta: n_swa            = 0
0.00.281.202 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.202 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.203 I llm_load_print_meta: n_gqa            = 8
0.00.281.204 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.205 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.206 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.207 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.207 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.207 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.208 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.209 I llm_load_print_meta: n_ff             = 16384
0.00.281.209 I llm_load_print_meta: n_expert         = 0
0.00.281.209 I llm_load_print_meta: n_expert_used    = 0
0.00.281.209 I llm_load_print_meta: causal attn      = 1
0.00.281.210 I llm_load_print_meta: pooling type     = 0
0.00.281.210 I llm_load_print_meta: rope type        = 2
0.00.281.210 I llm_load_print_meta: rope scaling     = linear
0.00.281.212 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.212 I llm_load_print_meta: freq_scale_train = 1
0.00.281.213 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.213 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.213 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.214 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.214 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.214 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.214 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.215 I llm_load_print_meta: model type       = 2B
0.00.281.215 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.216 I llm_load_print_meta: model params     = 2.51 B
0.00.281.217 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.217 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.218 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.218 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.219 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.219 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.219 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.220 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.220 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.221 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.221 I llm_load_print_meta: max token length = 93
0.00.281.240 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.375.547 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.380.649 I llama_new_context_with_model: n_ctx      = 8192
0.00.380.654 I llama_new_context_with_model: n_batch    = 2048
0.00.380.655 I llama_new_context_with_model: n_ubatch   = 512
0.00.380.655 I llama_new_context_with_model: flash_attn = 0
0.00.380.657 I llama_new_context_with_model: freq_base  = 10000.0
0.00.380.658 I llama_new_context_with_model: freq_scale = 1
0.00.410.173 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.410.190 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.410.284 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.411.178 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.411.185 I llama_new_context_with_model: graph nodes  = 601
0.00.411.186 I llama_new_context_with_model: graph splits = 1
0.00.411.188 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.497.926 I main: llama threadpool init, n_threads = 4
0.00.497.940 I 
0.00.498.017 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.498.021 I 
0.00.498.060 I sampler seed: 357574703
0.00.498.070 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.072 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.498.073 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.073 I 
 seconded by the number 7. Is this a lucky number?

The number 7 is considered a lucky number in many cultures and religions. It is

0.02.679.446 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6785.93 tokens per second)
0.02.679.449 I llama_perf_context_print:        load time =     496.06 ms
0.02.679.450 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.679.452 I llama_perf_context_print:        eval time =    2162.55 ms /    32 runs   (   67.58 ms per token,    14.80 tokens per second)
0.02.679.453 I llama_perf_context_print:       total time =    2181.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.620 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.843 I main: llama backend init
0.00.001.982 I main: load the model and apply lora adapter, if any
0.00.021.971 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.026 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.036 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.043 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.044 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.050 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.054 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.055 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.056 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.057 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.057 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.063 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.063 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.064 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.066 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.209 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.608 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.480 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.488 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.488 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.489 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.490 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.491 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.491 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.493 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.495 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.495 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.496 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.497 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.502 I llama_model_loader: - type  f32:   37 tensors
0.00.135.505 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.479 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.898 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.256.318 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.261.255 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.271.999 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.694 I llm_load_vocab: special tokens cache size = 5
0.00.295.015 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.033 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.033 I llm_load_print_meta: arch             = gemma
0.00.295.034 I llm_load_print_meta: vocab type       = SPM
0.00.295.035 I llm_load_print_meta: n_vocab          = 256000
0.00.295.035 I llm_load_print_meta: n_merges         = 0
0.00.295.035 I llm_load_print_meta: vocab_only       = 0
0.00.295.036 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.036 I llm_load_print_meta: n_embd           = 2048
0.00.295.037 I llm_load_print_meta: n_layer          = 18
0.00.295.048 I llm_load_print_meta: n_head           = 8
0.00.295.050 I llm_load_print_meta: n_head_kv        = 1
0.00.295.050 I llm_load_print_meta: n_rot            = 256
0.00.295.050 I llm_load_print_meta: n_swa            = 0
0.00.295.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.052 I llm_load_print_meta: n_gqa            = 8
0.00.295.053 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.054 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.056 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.056 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.056 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.057 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.058 I llm_load_print_meta: n_ff             = 16384
0.00.295.058 I llm_load_print_meta: n_expert         = 0
0.00.295.058 I llm_load_print_meta: n_expert_used    = 0
0.00.295.059 I llm_load_print_meta: causal attn      = 1
0.00.295.059 I llm_load_print_meta: pooling type     = 0
0.00.295.059 I llm_load_print_meta: rope type        = 2
0.00.295.060 I llm_load_print_meta: rope scaling     = linear
0.00.295.061 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.062 I llm_load_print_meta: freq_scale_train = 1
0.00.295.062 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.064 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.066 I llm_load_print_meta: model type       = 2B
0.00.295.067 I llm_load_print_meta: model ftype      = Q8_0
0.00.295.068 I llm_load_print_meta: model params     = 2.51 B
0.00.295.069 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.295.069 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.069 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.071 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.071 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.072 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.072 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.073 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.073 I llm_load_print_meta: max token length = 93
0.00.295.093 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.370.122 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.370.131 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.370.131 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.370.132 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.370.132 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.370.133 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.375.190 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.197 I llama_new_context_with_model: n_batch    = 2048
0.00.375.197 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.198 I llama_new_context_with_model: flash_attn = 0
0.00.375.200 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.202 I llama_new_context_with_model: freq_scale = 1
0.00.405.470 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.405.484 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.405.574 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.460 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.468 I llama_new_context_with_model: graph nodes  = 601
0.00.406.468 I llama_new_context_with_model: graph splits = 1
0.00.406.470 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.143 I main: llama threadpool init, n_threads = 4
0.00.500.156 I 
0.00.500.234 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.500.238 I 
0.00.500.278 I sampler seed: 1931247423
0.00.500.288 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.290 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.291 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.291 I 
 increasities. 

I am unable to access the requested context. [end of text]


0.01.574.097 I llama_perf_sampler_print:    sampling time =       2.35 ms /    16 runs   (    0.15 ms per token,  6820.12 tokens per second)
0.01.574.099 I llama_perf_context_print:        load time =     498.14 ms
0.01.574.100 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.574.101 I llama_perf_context_print:        eval time =    1064.82 ms /    15 runs   (   70.99 ms per token,    14.09 tokens per second)
0.01.574.102 I llama_perf_context_print:       total time =    1073.96 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.001.819 I main: load the model and apply lora adapter, if any
0.00.021.736 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.782 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.793 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.798 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.799 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.803 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.804 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.806 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.807 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.808 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.812 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.813 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.813 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.814 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.814 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.374 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.269 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.276 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.277 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.278 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.278 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.279 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.282 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.283 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.283 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.284 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.288 I llama_model_loader: - type  f32:   37 tensors
0.00.132.291 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.357 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.213 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.242.549 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.246.691 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.255.955 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.599 I llm_load_vocab: special tokens cache size = 5
0.00.277.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.610 I llm_load_print_meta: arch             = gemma
0.00.277.611 I llm_load_print_meta: vocab type       = SPM
0.00.277.612 I llm_load_print_meta: n_vocab          = 256000
0.00.277.612 I llm_load_print_meta: n_merges         = 0
0.00.277.612 I llm_load_print_meta: vocab_only       = 0
0.00.277.613 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.613 I llm_load_print_meta: n_embd           = 2048
0.00.277.613 I llm_load_print_meta: n_layer          = 18
0.00.277.626 I llm_load_print_meta: n_head           = 8
0.00.277.627 I llm_load_print_meta: n_head_kv        = 1
0.00.277.628 I llm_load_print_meta: n_rot            = 256
0.00.277.628 I llm_load_print_meta: n_swa            = 0
0.00.277.628 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.629 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.630 I llm_load_print_meta: n_gqa            = 8
0.00.277.631 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.632 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.633 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.634 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.634 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.634 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.635 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.636 I llm_load_print_meta: n_ff             = 16384
0.00.277.636 I llm_load_print_meta: n_expert         = 0
0.00.277.636 I llm_load_print_meta: n_expert_used    = 0
0.00.277.637 I llm_load_print_meta: causal attn      = 1
0.00.277.637 I llm_load_print_meta: pooling type     = 0
0.00.277.637 I llm_load_print_meta: rope type        = 2
0.00.277.638 I llm_load_print_meta: rope scaling     = linear
0.00.277.639 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.640 I llm_load_print_meta: freq_scale_train = 1
0.00.277.640 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.640 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.641 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.641 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.641 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.641 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.642 I llm_load_print_meta: model type       = 2B
0.00.277.642 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.643 I llm_load_print_meta: model params     = 2.51 B
0.00.277.644 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.645 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.645 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.658 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.659 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.659 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.660 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.660 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.661 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.662 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.662 I llm_load_print_meta: max token length = 93
0.00.277.685 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.348.283 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.348.290 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.353.302 I llama_new_context_with_model: n_ctx      = 8192
0.00.353.308 I llama_new_context_with_model: n_batch    = 2048
0.00.353.308 I llama_new_context_with_model: n_ubatch   = 512
0.00.353.308 I llama_new_context_with_model: flash_attn = 0
0.00.353.310 I llama_new_context_with_model: freq_base  = 10000.0
0.00.353.311 I llama_new_context_with_model: freq_scale = 1
0.00.382.789 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.382.800 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.382.893 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.752 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.383.760 I llama_new_context_with_model: graph nodes  = 601
0.00.383.760 I llama_new_context_with_model: graph splits = 1
0.00.383.762 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.245 I main: llama threadpool init, n_threads = 4
0.00.477.258 I 
0.00.477.335 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.338 I 
0.00.477.376 I sampler seed: 200051357
0.00.477.387 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.389 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.390 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.390 I 
 increasities?

I'm so confused by your question. Can you please rephrase it? [end of text]


0.02.076.610 I llama_perf_sampler_print:    sampling time =       3.56 ms /    22 runs   (    0.16 ms per token,  6178.04 tokens per second)
0.02.076.612 I llama_perf_context_print:        load time =     475.40 ms
0.02.076.613 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.076.615 I llama_perf_context_print:        eval time =    1586.31 ms /    21 runs   (   75.54 ms per token,    13.24 tokens per second)
0.02.076.615 I llama_perf_context_print:       total time =    1599.37 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.924s
user	0m31.318s
sys	0m9.537s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3936 (33a69ec7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32381.86 ms
main:    total time = 32381.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.881 I main: load the model and apply lora adapter, if any
0.00.022.601 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.652 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.664 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.670 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.674 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.678 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.679 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.679 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.680 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.681 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.681 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.686 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.686 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.687 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.688 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.688 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.568 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.763 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.627 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.636 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.637 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.640 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.641 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.642 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.642 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.643 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.646 I llama_model_loader: - type  f32:   37 tensors
0.00.133.649 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.650 I llama_model_loader: - type q6_K:   19 tensors
0.00.221.057 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.959 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.257.499 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.262.206 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.272.226 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.883 I llm_load_vocab: special tokens cache size = 5
0.00.294.045 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.063 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.064 I llm_load_print_meta: arch             = gemma
0.00.294.064 I llm_load_print_meta: vocab type       = SPM
0.00.294.065 I llm_load_print_meta: n_vocab          = 256000
0.00.294.066 I llm_load_print_meta: n_merges         = 0
0.00.294.066 I llm_load_print_meta: vocab_only       = 0
0.00.294.066 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.067 I llm_load_print_meta: n_embd           = 2048
0.00.294.067 I llm_load_print_meta: n_layer          = 18
0.00.294.080 I llm_load_print_meta: n_head           = 8
0.00.294.081 I llm_load_print_meta: n_head_kv        = 1
0.00.294.081 I llm_load_print_meta: n_rot            = 256
0.00.294.081 I llm_load_print_meta: n_swa            = 0
0.00.294.082 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.082 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.083 I llm_load_print_meta: n_gqa            = 8
0.00.294.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.086 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.087 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.088 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.088 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.089 I llm_load_print_meta: n_ff             = 16384
0.00.294.090 I llm_load_print_meta: n_expert         = 0
0.00.294.090 I llm_load_print_meta: n_expert_used    = 0
0.00.294.090 I llm_load_print_meta: causal attn      = 1
0.00.294.091 I llm_load_print_meta: pooling type     = 0
0.00.294.091 I llm_load_print_meta: rope type        = 2
0.00.294.091 I llm_load_print_meta: rope scaling     = linear
0.00.294.092 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.093 I llm_load_print_meta: freq_scale_train = 1
0.00.294.093 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.093 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.094 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.094 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.094 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.094 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.095 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.095 I llm_load_print_meta: model type       = 2B
0.00.294.096 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.294.097 I llm_load_print_meta: model params     = 2.51 B
0.00.294.097 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.294.098 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.098 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.098 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.099 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.099 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.099 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.099 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.100 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.100 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.101 I llm_load_print_meta: max token length = 93
0.00.294.122 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.352.260 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.352.268 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.352.269 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.352.270 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.352.270 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.352.271 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.357.425 I llama_new_context_with_model: n_ctx      = 8192
0.00.357.432 I llama_new_context_with_model: n_batch    = 2048
0.00.357.432 I llama_new_context_with_model: n_ubatch   = 512
0.00.357.433 I llama_new_context_with_model: flash_attn = 0
0.00.357.435 I llama_new_context_with_model: freq_base  = 10000.0
0.00.357.436 I llama_new_context_with_model: freq_scale = 1
0.00.387.035 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.387.049 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.387.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.039 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.388.047 I llama_new_context_with_model: graph nodes  = 601
0.00.388.047 I llama_new_context_with_model: graph splits = 1
0.00.388.049 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.252 I main: llama threadpool init, n_threads = 4
0.00.470.267 I 
0.00.470.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.348 I 
0.00.470.386 I sampler seed: 1434523540
0.00.470.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.400 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.401 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.401 I 
 seconded.

**I am sorry, I am unable to generate responses that contain potentially harmful or inappropriate content.**

I am designed to provide safe and responsible

0.02.114.838 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6749.85 tokens per second)
0.02.114.840 I llama_perf_context_print:        load time =     468.35 ms
0.02.114.842 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.114.844 I llama_perf_context_print:        eval time =    1625.35 ms /    32 runs   (   50.79 ms per token,    19.69 tokens per second)
0.02.114.844 I llama_perf_context_print:       total time =    1644.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3936 (33a69ec7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32107.89 ms
main:    total time = 32107.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.601 I build: 3936 (33a69ec7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.001.896 I main: load the model and apply lora adapter, if any
0.00.022.197 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.221 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.222 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.225 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.226 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.227 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.227 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.228 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.228 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.232 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.232 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.233 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.234 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.235 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.770 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.864 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.779 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.786 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.786 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.787 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.788 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.789 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.789 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.792 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.792 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.797 I llama_model_loader: - type  f32:   37 tensors
0.00.133.799 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.800 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.570 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.706 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.247.990 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.251.837 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.260.111 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.733 I llm_load_vocab: special tokens cache size = 5
0.00.281.953 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.969 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.970 I llm_load_print_meta: arch             = gemma
0.00.281.970 I llm_load_print_meta: vocab type       = SPM
0.00.281.971 I llm_load_print_meta: n_vocab          = 256000
0.00.281.971 I llm_load_print_meta: n_merges         = 0
0.00.281.972 I llm_load_print_meta: vocab_only       = 0
0.00.281.972 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.972 I llm_load_print_meta: n_embd           = 2048
0.00.281.973 I llm_load_print_meta: n_layer          = 18
0.00.281.983 I llm_load_print_meta: n_head           = 8
0.00.281.984 I llm_load_print_meta: n_head_kv        = 1
0.00.281.985 I llm_load_print_meta: n_rot            = 256
0.00.281.985 I llm_load_print_meta: n_swa            = 0
0.00.281.985 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.985 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.986 I llm_load_print_meta: n_gqa            = 8
0.00.281.987 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.989 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.991 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.991 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.991 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.992 I llm_load_print_meta: n_ff             = 16384
0.00.281.992 I llm_load_print_meta: n_expert         = 0
0.00.281.993 I llm_load_print_meta: n_expert_used    = 0
0.00.281.993 I llm_load_print_meta: causal attn      = 1
0.00.281.993 I llm_load_print_meta: pooling type     = 0
0.00.281.994 I llm_load_print_meta: rope type        = 2
0.00.281.994 I llm_load_print_meta: rope scaling     = linear
0.00.281.995 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.996 I llm_load_print_meta: freq_scale_train = 1
0.00.281.996 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.997 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.997 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.997 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.997 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.998 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.998 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.998 I llm_load_print_meta: model type       = 2B
0.00.281.999 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.000 I llm_load_print_meta: model params     = 2.51 B
0.00.282.000 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.001 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.002 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.002 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.002 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.003 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.003 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.003 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.004 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.004 I llm_load_print_meta: max token length = 93
0.00.282.026 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.339.714 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.344.954 I llama_new_context_with_model: n_ctx      = 8192
0.00.344.960 I llama_new_context_with_model: n_batch    = 2048
0.00.344.960 I llama_new_context_with_model: n_ubatch   = 512
0.00.344.961 I llama_new_context_with_model: flash_attn = 0
0.00.344.964 I llama_new_context_with_model: freq_base  = 10000.0
0.00.344.965 I llama_new_context_with_model: freq_scale = 1
0.00.375.120 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.375.136 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.375.229 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.075 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.376.084 I llama_new_context_with_model: graph nodes  = 601
0.00.376.085 I llama_new_context_with_model: graph splits = 1
0.00.376.087 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.146 I main: llama threadpool init, n_threads = 4
0.00.457.160 I 
0.00.457.238 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.457.242 I 
0.00.457.282 I sampler seed: 358885389
0.00.457.292 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.296 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.297 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.299 I 
 seconde.

I am not sure how to format this question.

I need help formatting this question so that it is clear and concise.

**Question

0.02.078.130 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6774.79 tokens per second)
0.02.078.132 I llama_perf_context_print:        load time =     455.23 ms
0.02.078.133 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.078.135 I llama_perf_context_print:        eval time =    1601.86 ms /    32 runs   (   50.06 ms per token,    19.98 tokens per second)
0.02.078.135 I llama_perf_context_print:       total time =    1620.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.946s
user	8m15.434s
sys	0m7.179s
