+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3917 (33d9acf9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.837 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.061 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.150 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.161 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.162 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.168 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.169 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.170 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.171 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.173 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.179 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.181 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.182 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.183 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.184 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.443 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.305 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.314 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.315 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.316 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.317 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.319 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.319 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.323 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.324 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.325 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.326 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.327 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.334 I llama_model_loader: - type  f32:   37 tensors
0.00.268.338 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.380 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.063 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.493.886 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.499.343 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.510.971 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.938 I llm_load_vocab: special tokens cache size = 5
0.00.605.346 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.412 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.413 I llm_load_print_meta: arch             = gemma
0.00.605.414 I llm_load_print_meta: vocab type       = SPM
0.00.605.414 I llm_load_print_meta: n_vocab          = 256000
0.00.605.417 I llm_load_print_meta: n_merges         = 0
0.00.605.417 I llm_load_print_meta: vocab_only       = 0
0.00.605.418 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.418 I llm_load_print_meta: n_embd           = 2048
0.00.605.419 I llm_load_print_meta: n_layer          = 18
0.00.605.483 I llm_load_print_meta: n_head           = 8
0.00.605.491 I llm_load_print_meta: n_head_kv        = 1
0.00.605.493 I llm_load_print_meta: n_rot            = 256
0.00.605.493 I llm_load_print_meta: n_swa            = 0
0.00.605.494 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.494 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.499 I llm_load_print_meta: n_gqa            = 8
0.00.605.503 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.508 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.510 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.512 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.513 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.518 I llm_load_print_meta: n_ff             = 16384
0.00.605.519 I llm_load_print_meta: n_expert         = 0
0.00.605.520 I llm_load_print_meta: n_expert_used    = 0
0.00.605.521 I llm_load_print_meta: causal attn      = 1
0.00.605.522 I llm_load_print_meta: pooling type     = 0
0.00.605.523 I llm_load_print_meta: rope type        = 2
0.00.605.523 I llm_load_print_meta: rope scaling     = linear
0.00.605.525 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.526 I llm_load_print_meta: freq_scale_train = 1
0.00.605.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.527 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.528 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.529 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.529 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.530 I llm_load_print_meta: model type       = 2B
0.00.605.531 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.532 I llm_load_print_meta: model params     = 2.51 B
0.00.605.533 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.533 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.534 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.535 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.536 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.537 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.543 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.544 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.544 I llm_load_print_meta: max token length = 93
0.00.605.706 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.706.421 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.706.430 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.706.431 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.706.432 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.706.432 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.706.433 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.712.080 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.086 I llama_new_context_with_model: n_batch    = 2048
0.00.712.087 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.087 I llama_new_context_with_model: flash_attn = 0
0.00.712.090 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.091 I llama_new_context_with_model: freq_scale = 1
0.00.741.348 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.741.392 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.741.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.865 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.870 I llama_new_context_with_model: graph nodes  = 601
0.00.742.870 I llama_new_context_with_model: graph splits = 1
0.00.742.887 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.574 I main: llama threadpool init, n_threads = 4
0.01.356.586 I 
0.01.356.689 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.356.693 I 
0.01.356.862 I sampler seed: 2266845459
0.01.356.872 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.356.878 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.356.879 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.356.879 I 
 seconary effects in the context of recommender systems.

**Background:**

Reccomender systems are commonly used to personalize user experiences by suggesting items that align

0.14.877.307 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.86 tokens per second)
0.14.877.311 I llama_perf_context_print:        load time =    1353.67 ms
0.14.877.313 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.877.315 I llama_perf_context_print:        eval time =   13438.26 ms /    32 runs   (  419.95 ms per token,     2.38 tokens per second)
0.14.877.316 I llama_perf_context_print:       total time =   13520.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3917 (33d9acf9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.759 I main: load the model and apply lora adapter, if any
0.00.025.791 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.888 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.903 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.915 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.916 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.918 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.919 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.920 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.927 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.928 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.929 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.930 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.931 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.018 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.181 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.157 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.158 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.160 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.160 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.162 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.163 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.166 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.167 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.169 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.170 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.172 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.181 I llama_model_loader: - type  f32:   37 tensors
0.00.270.185 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.271 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.744 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.487.527 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.492.922 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.504.754 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.735 I llm_load_vocab: special tokens cache size = 5
0.00.599.449 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.520 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.521 I llm_load_print_meta: arch             = gemma
0.00.599.522 I llm_load_print_meta: vocab type       = SPM
0.00.599.523 I llm_load_print_meta: n_vocab          = 256000
0.00.599.525 I llm_load_print_meta: n_merges         = 0
0.00.599.526 I llm_load_print_meta: vocab_only       = 0
0.00.599.526 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.526 I llm_load_print_meta: n_embd           = 2048
0.00.599.527 I llm_load_print_meta: n_layer          = 18
0.00.599.589 I llm_load_print_meta: n_head           = 8
0.00.599.596 I llm_load_print_meta: n_head_kv        = 1
0.00.599.598 I llm_load_print_meta: n_rot            = 256
0.00.599.599 I llm_load_print_meta: n_swa            = 0
0.00.599.599 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.600 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.605 I llm_load_print_meta: n_gqa            = 8
0.00.599.610 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.615 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.616 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.618 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.619 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.619 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.620 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.625 I llm_load_print_meta: n_ff             = 16384
0.00.599.626 I llm_load_print_meta: n_expert         = 0
0.00.599.651 I llm_load_print_meta: n_expert_used    = 0
0.00.599.655 I llm_load_print_meta: causal attn      = 1
0.00.599.656 I llm_load_print_meta: pooling type     = 0
0.00.599.656 I llm_load_print_meta: rope type        = 2
0.00.599.656 I llm_load_print_meta: rope scaling     = linear
0.00.599.658 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.659 I llm_load_print_meta: freq_scale_train = 1
0.00.599.659 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.660 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.660 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.660 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.661 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.661 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.661 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.662 I llm_load_print_meta: model type       = 2B
0.00.599.671 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.679 I llm_load_print_meta: model params     = 2.51 B
0.00.599.680 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.681 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.682 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.683 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.684 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.684 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.685 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.685 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.692 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.694 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.695 I llm_load_print_meta: max token length = 93
0.00.599.861 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.696.058 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.702.749 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.756 I llama_new_context_with_model: n_batch    = 2048
0.00.702.756 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.757 I llama_new_context_with_model: flash_attn = 0
0.00.702.759 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.760 I llama_new_context_with_model: freq_scale = 1
0.00.731.779 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.824 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.937 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.299 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.304 I llama_new_context_with_model: graph nodes  = 601
0.00.733.305 I llama_new_context_with_model: graph splits = 1
0.00.733.320 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.975 I main: llama threadpool init, n_threads = 4
0.01.345.988 I 
0.01.346.099 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.346.099 I 
0.01.346.275 I sampler seed: 148414036
0.01.346.286 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.293 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.346.293 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.293 I 
 increasities, but never disrespect them. [end of text]


0.05.190.668 I llama_perf_sampler_print:    sampling time =      13.89 ms /    10 runs   (    1.39 ms per token,   719.84 tokens per second)
0.05.190.671 I llama_perf_context_print:        load time =    1343.13 ms
0.05.190.684 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.190.686 I llama_perf_context_print:        eval time =    3820.56 ms /     9 runs   (  424.51 ms per token,     2.36 tokens per second)
0.05.190.686 I llama_perf_context_print:       total time =    3844.70 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 3917 (33d9acf9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.024.420 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.622 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.702 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.714 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.718 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.719 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.721 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.729 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.730 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.731 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.732 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.745 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.838 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.639 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.648 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.649 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.650 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.651 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.652 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.654 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.658 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.660 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.661 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.670 I llama_model_loader: - type  f32:   37 tensors
0.00.268.674 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.410 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.451 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.486.106 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.490.968 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.501.316 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.210 I llm_load_vocab: special tokens cache size = 5
0.00.595.956 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.024 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.025 I llm_load_print_meta: arch             = gemma
0.00.596.026 I llm_load_print_meta: vocab type       = SPM
0.00.596.027 I llm_load_print_meta: n_vocab          = 256000
0.00.596.029 I llm_load_print_meta: n_merges         = 0
0.00.596.030 I llm_load_print_meta: vocab_only       = 0
0.00.596.030 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.030 I llm_load_print_meta: n_embd           = 2048
0.00.596.030 I llm_load_print_meta: n_layer          = 18
0.00.596.094 I llm_load_print_meta: n_head           = 8
0.00.596.100 I llm_load_print_meta: n_head_kv        = 1
0.00.596.101 I llm_load_print_meta: n_rot            = 256
0.00.596.101 I llm_load_print_meta: n_swa            = 0
0.00.596.103 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.103 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.108 I llm_load_print_meta: n_gqa            = 8
0.00.596.133 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.139 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.141 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.143 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.144 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.144 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.145 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.150 I llm_load_print_meta: n_ff             = 16384
0.00.596.150 I llm_load_print_meta: n_expert         = 0
0.00.596.151 I llm_load_print_meta: n_expert_used    = 0
0.00.596.151 I llm_load_print_meta: causal attn      = 1
0.00.596.160 I llm_load_print_meta: pooling type     = 0
0.00.596.160 I llm_load_print_meta: rope type        = 2
0.00.596.168 I llm_load_print_meta: rope scaling     = linear
0.00.596.170 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.171 I llm_load_print_meta: freq_scale_train = 1
0.00.596.171 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.172 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.172 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.172 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.173 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.180 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.181 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.181 I llm_load_print_meta: model type       = 2B
0.00.596.182 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.190 I llm_load_print_meta: model params     = 2.51 B
0.00.596.198 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.207 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.208 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.208 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.211 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.212 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.212 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.219 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.225 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.226 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.227 I llm_load_print_meta: max token length = 93
0.00.596.392 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.673.574 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.673.587 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.673.588 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.673.589 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.673.589 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.673.590 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.679.368 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.376 I llama_new_context_with_model: n_batch    = 2048
0.00.679.377 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.377 I llama_new_context_with_model: flash_attn = 0
0.00.679.381 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.382 I llama_new_context_with_model: freq_scale = 1
0.00.709.421 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.465 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.587 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.970 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.975 I llama_new_context_with_model: graph nodes  = 601
0.00.710.975 I llama_new_context_with_model: graph splits = 1
0.00.710.992 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.221 I main: llama threadpool init, n_threads = 4
0.01.324.232 I 
0.01.324.337 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.341 I 
0.01.324.507 I sampler seed: 3979591901
0.01.324.518 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.524 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.324.525 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.525 I 
 increasities, and the intricate tapestry of human emotions.

Our minds, a tangled web of neurons, each with its own unique function. From the intricate circuitry

0.14.880.308 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.49 tokens per second)
0.14.880.311 I llama_perf_context_print:        load time =    1321.37 ms
0.14.880.312 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.880.314 I llama_perf_context_print:        eval time =   13473.62 ms /    32 runs   (  421.05 ms per token,     2.38 tokens per second)
0.14.880.315 I llama_perf_context_print:       total time =   13556.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3917 (33d9acf9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.805 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.012 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.098 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.109 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.110 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.114 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.115 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.117 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.118 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.119 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.120 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.127 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.128 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.129 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.130 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.131 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.610 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.258 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.270 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.272 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.273 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.276 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.277 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.278 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.279 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.281 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.289 I llama_model_loader: - type  f32:   37 tensors
0.00.270.293 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.335 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.482.965 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.484.692 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.489.585 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.499.846 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.747 I llm_load_vocab: special tokens cache size = 5
0.00.594.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.386 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.387 I llm_load_print_meta: arch             = gemma
0.00.594.388 I llm_load_print_meta: vocab type       = SPM
0.00.594.388 I llm_load_print_meta: n_vocab          = 256000
0.00.594.391 I llm_load_print_meta: n_merges         = 0
0.00.594.391 I llm_load_print_meta: vocab_only       = 0
0.00.594.392 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.392 I llm_load_print_meta: n_embd           = 2048
0.00.594.393 I llm_load_print_meta: n_layer          = 18
0.00.594.460 I llm_load_print_meta: n_head           = 8
0.00.594.468 I llm_load_print_meta: n_head_kv        = 1
0.00.594.469 I llm_load_print_meta: n_rot            = 256
0.00.594.470 I llm_load_print_meta: n_swa            = 0
0.00.594.471 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.471 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.476 I llm_load_print_meta: n_gqa            = 8
0.00.594.482 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.487 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.488 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.490 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.490 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.491 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.491 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.496 I llm_load_print_meta: n_ff             = 16384
0.00.594.496 I llm_load_print_meta: n_expert         = 0
0.00.594.496 I llm_load_print_meta: n_expert_used    = 0
0.00.594.497 I llm_load_print_meta: causal attn      = 1
0.00.594.497 I llm_load_print_meta: pooling type     = 0
0.00.594.497 I llm_load_print_meta: rope type        = 2
0.00.594.498 I llm_load_print_meta: rope scaling     = linear
0.00.594.500 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.501 I llm_load_print_meta: freq_scale_train = 1
0.00.594.502 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.503 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.503 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.504 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.504 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.506 I llm_load_print_meta: model type       = 2B
0.00.594.507 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.517 I llm_load_print_meta: model params     = 2.51 B
0.00.594.523 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.523 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.524 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.524 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.526 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.526 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.526 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.527 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.533 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.534 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.535 I llm_load_print_meta: max token length = 93
0.00.594.707 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.080 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.666.090 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.671.660 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.667 I llama_new_context_with_model: n_batch    = 2048
0.00.671.668 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.668 I llama_new_context_with_model: flash_attn = 0
0.00.671.670 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.671 I llama_new_context_with_model: freq_scale = 1
0.00.701.411 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.453 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.939 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.944 I llama_new_context_with_model: graph nodes  = 601
0.00.702.944 I llama_new_context_with_model: graph splits = 1
0.00.702.960 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.321.570 I main: llama threadpool init, n_threads = 4
0.01.321.580 I 
0.01.321.696 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.321.701 I 
0.01.321.889 I sampler seed: 1647984324
0.01.321.901 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.321.907 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.321.907 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.321.908 I 
 increably.

I am unable to access the provided text due to a technical issue. Could you please provide a summary of the text or tell me what the

0.15.006.468 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.91 tokens per second)
0.15.006.483 I llama_perf_context_print:        load time =    1318.69 ms
0.15.006.486 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.006.488 I llama_perf_context_print:        eval time =   13602.40 ms /    32 runs   (  425.07 ms per token,     2.35 tokens per second)
0.15.006.489 I llama_perf_context_print:       total time =   13684.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.453s
user	3m11.062s
sys	0m9.377s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3917 (33d9acf9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199216.85 ms
main:    total time = 199216.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3917 (33d9acf9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.760 I main: load the model and apply lora adapter, if any
0.00.024.875 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.075 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.164 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.174 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.176 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.180 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.181 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.183 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.187 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.194 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.202 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.205 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.206 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.313 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.802 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.653 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.661 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.662 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.664 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.665 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.666 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.667 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.671 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.672 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.673 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.674 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.675 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.684 I llama_model_loader: - type  f32:   37 tensors
0.00.267.687 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.688 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.908 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.494.846 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.500.735 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.513.133 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.092 I llm_load_vocab: special tokens cache size = 5
0.00.607.639 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.708 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.709 I llm_load_print_meta: arch             = gemma
0.00.607.710 I llm_load_print_meta: vocab type       = SPM
0.00.607.710 I llm_load_print_meta: n_vocab          = 256000
0.00.607.713 I llm_load_print_meta: n_merges         = 0
0.00.607.714 I llm_load_print_meta: vocab_only       = 0
0.00.607.714 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.715 I llm_load_print_meta: n_embd           = 2048
0.00.607.715 I llm_load_print_meta: n_layer          = 18
0.00.607.778 I llm_load_print_meta: n_head           = 8
0.00.607.785 I llm_load_print_meta: n_head_kv        = 1
0.00.607.785 I llm_load_print_meta: n_rot            = 256
0.00.607.786 I llm_load_print_meta: n_swa            = 0
0.00.607.786 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.787 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.791 I llm_load_print_meta: n_gqa            = 8
0.00.607.796 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.801 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.804 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.806 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.807 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.807 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.807 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.814 I llm_load_print_meta: n_ff             = 16384
0.00.607.818 I llm_load_print_meta: n_expert         = 0
0.00.607.818 I llm_load_print_meta: n_expert_used    = 0
0.00.607.819 I llm_load_print_meta: causal attn      = 1
0.00.607.819 I llm_load_print_meta: pooling type     = 0
0.00.607.819 I llm_load_print_meta: rope type        = 2
0.00.607.829 I llm_load_print_meta: rope scaling     = linear
0.00.607.831 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.832 I llm_load_print_meta: freq_scale_train = 1
0.00.607.832 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.833 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.833 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.834 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.834 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.834 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.835 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.835 I llm_load_print_meta: model type       = 2B
0.00.607.837 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.838 I llm_load_print_meta: model params     = 2.51 B
0.00.607.850 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.851 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.852 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.853 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.862 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.863 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.870 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.877 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.878 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.879 I llm_load_print_meta: max token length = 93
0.00.608.049 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.261 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.668.272 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.668.273 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.668.274 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.668.274 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.668.275 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.673.875 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.883 I llama_new_context_with_model: n_batch    = 2048
0.00.673.883 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.884 I llama_new_context_with_model: flash_attn = 0
0.00.673.886 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.887 I llama_new_context_with_model: freq_scale = 1
0.00.702.054 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.097 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.209 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.595 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.601 I llama_new_context_with_model: graph nodes  = 601
0.00.703.601 I llama_new_context_with_model: graph splits = 1
0.00.703.616 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.797 I main: llama threadpool init, n_threads = 4
0.01.286.809 I 
0.01.286.914 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.918 I 
0.01.287.091 I sampler seed: 74276091
0.01.287.102 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.109 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.287.110 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.110 I 
 encompasses the idea of using artificial intelligence and machine learning to automate tasks, improve decision-making, and create new products and services.

**a) Discuss

0.12.190.987 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.91 tokens per second)
0.12.190.990 I llama_perf_context_print:        load time =    1283.95 ms
0.12.190.992 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.190.993 I llama_perf_context_print:        eval time =   10820.87 ms /    32 runs   (  338.15 ms per token,     2.96 tokens per second)
0.12.191.020 I llama_perf_context_print:       total time =   10904.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3917 (33d9acf9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199163.00 ms
main:    total time = 199163.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 3917 (33d9acf9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.550 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.639 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.652 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.654 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.657 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.658 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.660 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.662 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.663 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.669 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.672 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.673 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.713 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.733 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.621 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.628 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.629 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.631 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.632 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.633 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.634 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.638 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.646 I llama_model_loader: - type  f32:   37 tensors
0.00.266.650 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.650 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.737 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.117 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.487.875 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.493.189 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.505.240 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.213 I llm_load_vocab: special tokens cache size = 5
0.00.600.112 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.180 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.181 I llm_load_print_meta: arch             = gemma
0.00.600.181 I llm_load_print_meta: vocab type       = SPM
0.00.600.182 I llm_load_print_meta: n_vocab          = 256000
0.00.600.185 I llm_load_print_meta: n_merges         = 0
0.00.600.185 I llm_load_print_meta: vocab_only       = 0
0.00.600.186 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.186 I llm_load_print_meta: n_embd           = 2048
0.00.600.186 I llm_load_print_meta: n_layer          = 18
0.00.600.252 I llm_load_print_meta: n_head           = 8
0.00.600.259 I llm_load_print_meta: n_head_kv        = 1
0.00.600.260 I llm_load_print_meta: n_rot            = 256
0.00.600.260 I llm_load_print_meta: n_swa            = 0
0.00.600.261 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.261 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.266 I llm_load_print_meta: n_gqa            = 8
0.00.600.270 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.275 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.276 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.290 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.291 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.292 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.292 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.297 I llm_load_print_meta: n_ff             = 16384
0.00.600.298 I llm_load_print_meta: n_expert         = 0
0.00.600.298 I llm_load_print_meta: n_expert_used    = 0
0.00.600.299 I llm_load_print_meta: causal attn      = 1
0.00.600.299 I llm_load_print_meta: pooling type     = 0
0.00.600.300 I llm_load_print_meta: rope type        = 2
0.00.600.300 I llm_load_print_meta: rope scaling     = linear
0.00.600.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.302 I llm_load_print_meta: freq_scale_train = 1
0.00.600.303 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.312 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.313 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.313 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.313 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.313 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.315 I llm_load_print_meta: model type       = 2B
0.00.600.317 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.318 I llm_load_print_meta: model params     = 2.51 B
0.00.600.319 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.319 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.320 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.322 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.323 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.329 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.331 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.331 I llm_load_print_meta: max token length = 93
0.00.600.497 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.938 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.664.359 I llama_new_context_with_model: n_ctx      = 8192
0.00.664.366 I llama_new_context_with_model: n_batch    = 2048
0.00.664.367 I llama_new_context_with_model: n_ubatch   = 512
0.00.664.367 I llama_new_context_with_model: flash_attn = 0
0.00.664.370 I llama_new_context_with_model: freq_base  = 10000.0
0.00.664.371 I llama_new_context_with_model: freq_scale = 1
0.00.693.379 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.426 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.538 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.694.873 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.878 I llama_new_context_with_model: graph nodes  = 601
0.00.694.879 I llama_new_context_with_model: graph splits = 1
0.00.694.895 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.276.648 I main: llama threadpool init, n_threads = 4
0.01.276.658 I 
0.01.276.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.276.770 I 
0.01.276.940 I sampler seed: 3274451458
0.01.276.951 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.276.957 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.276.958 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.276.959 I 
 squaRED TEXT:

I am not sure if I am ready to move forward with this project. I am still processing the emotional impact of losing my loved one

0.12.316.021 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   672.03 tokens per second)
0.12.316.037 I llama_perf_context_print:        load time =    1273.78 ms
0.12.316.039 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.316.041 I llama_perf_context_print:        eval time =   10957.52 ms /    32 runs   (  342.42 ms per token,     2.92 tokens per second)
0.12.316.042 I llama_perf_context_print:       total time =   11039.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.799s
user	50m8.555s
sys	0m6.364s
