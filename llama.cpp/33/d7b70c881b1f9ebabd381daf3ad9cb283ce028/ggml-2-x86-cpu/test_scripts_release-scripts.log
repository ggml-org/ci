+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4243 (33d7b70c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.021.094 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.102 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.109 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.114 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.115 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.119 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.120 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.121 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.121 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.122 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.122 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.126 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.128 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.128 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.129 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.663 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.945 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.810 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.817 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.817 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.818 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.819 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.819 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.821 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.822 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.822 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.823 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.824 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.827 I llama_model_loader: - type  f32:   37 tensors
0.00.130.828 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.571 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.353 I llm_load_vocab: special tokens cache size = 5
0.00.264.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.385 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.386 I llm_load_print_meta: arch             = gemma
0.00.264.387 I llm_load_print_meta: vocab type       = SPM
0.00.264.387 I llm_load_print_meta: n_vocab          = 256000
0.00.264.388 I llm_load_print_meta: n_merges         = 0
0.00.264.388 I llm_load_print_meta: vocab_only       = 0
0.00.264.389 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.389 I llm_load_print_meta: n_embd           = 2048
0.00.264.389 I llm_load_print_meta: n_layer          = 18
0.00.264.399 I llm_load_print_meta: n_head           = 8
0.00.264.400 I llm_load_print_meta: n_head_kv        = 1
0.00.264.401 I llm_load_print_meta: n_rot            = 256
0.00.264.401 I llm_load_print_meta: n_swa            = 0
0.00.264.401 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.402 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.402 I llm_load_print_meta: n_gqa            = 8
0.00.264.403 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.404 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.406 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.407 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.407 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.407 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.408 I llm_load_print_meta: n_ff             = 16384
0.00.264.409 I llm_load_print_meta: n_expert         = 0
0.00.264.409 I llm_load_print_meta: n_expert_used    = 0
0.00.264.409 I llm_load_print_meta: causal attn      = 1
0.00.264.409 I llm_load_print_meta: pooling type     = 0
0.00.264.409 I llm_load_print_meta: rope type        = 2
0.00.264.410 I llm_load_print_meta: rope scaling     = linear
0.00.264.411 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.412 I llm_load_print_meta: freq_scale_train = 1
0.00.264.412 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.413 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.413 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.413 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.413 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.414 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.414 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.414 I llm_load_print_meta: model type       = 2B
0.00.264.415 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.416 I llm_load_print_meta: model params     = 2.51 B
0.00.264.416 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.417 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.417 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.417 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.418 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.418 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.419 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.419 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.419 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.420 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.420 I llm_load_print_meta: max token length = 93
0.00.365.156 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.161 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.162 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.162 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.163 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.164 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.344 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.349 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.350 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.350 I llama_new_context_with_model: n_batch       = 2048
0.00.370.351 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.351 I llama_new_context_with_model: flash_attn    = 0
0.00.370.353 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.354 I llama_new_context_with_model: freq_scale    = 1
0.00.370.354 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.442 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.458 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.745 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.751 I llama_new_context_with_model: graph nodes  = 601
0.00.385.752 I llama_new_context_with_model: graph splits = 1
0.00.385.754 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.032 I main: llama threadpool init, n_threads = 4
0.00.470.048 I 
0.00.470.119 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.125 I 
0.00.470.165 I sampler seed: 1262324919
0.00.470.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.186 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.190 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.190 I 
 seconally with the text.

I am unable to answer this question as it requires access to personal information, which I am not authorized to disclose. [end of text]


0.02.638.627 I llama_perf_sampler_print:    sampling time =       4.78 ms /    32 runs   (    0.15 ms per token,  6701.57 tokens per second)
0.02.638.629 I llama_perf_context_print:        load time =     469.28 ms
0.02.638.631 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.638.632 I llama_perf_context_print:        eval time =    2150.33 ms /    31 runs   (   69.37 ms per token,    14.42 tokens per second)
0.02.638.632 I llama_perf_context_print:       total time =    2168.60 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.557 I build: 4243 (33d7b70c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.079 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.089 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.093 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.098 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.099 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.100 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.101 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.102 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.103 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.108 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.109 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.110 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.112 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.406 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.980 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.981 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.982 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.983 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.984 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.985 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.989 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.990 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.991 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.992 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.996 I llama_model_loader: - type  f32:   37 tensors
0.00.130.997 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.517 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.056 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.686 I llm_load_vocab: special tokens cache size = 5
0.00.285.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.758 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.759 I llm_load_print_meta: arch             = gemma
0.00.285.759 I llm_load_print_meta: vocab type       = SPM
0.00.285.760 I llm_load_print_meta: n_vocab          = 256000
0.00.285.760 I llm_load_print_meta: n_merges         = 0
0.00.285.761 I llm_load_print_meta: vocab_only       = 0
0.00.285.761 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.761 I llm_load_print_meta: n_embd           = 2048
0.00.285.762 I llm_load_print_meta: n_layer          = 18
0.00.285.774 I llm_load_print_meta: n_head           = 8
0.00.285.775 I llm_load_print_meta: n_head_kv        = 1
0.00.285.776 I llm_load_print_meta: n_rot            = 256
0.00.285.776 I llm_load_print_meta: n_swa            = 0
0.00.285.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.777 I llm_load_print_meta: n_gqa            = 8
0.00.285.778 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.784 I llm_load_print_meta: n_ff             = 16384
0.00.285.784 I llm_load_print_meta: n_expert         = 0
0.00.285.785 I llm_load_print_meta: n_expert_used    = 0
0.00.285.785 I llm_load_print_meta: causal attn      = 1
0.00.285.785 I llm_load_print_meta: pooling type     = 0
0.00.285.785 I llm_load_print_meta: rope type        = 2
0.00.285.786 I llm_load_print_meta: rope scaling     = linear
0.00.285.787 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.788 I llm_load_print_meta: freq_scale_train = 1
0.00.285.788 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.788 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.789 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.789 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.789 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.790 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.790 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.790 I llm_load_print_meta: model type       = 2B
0.00.285.791 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.792 I llm_load_print_meta: model params     = 2.51 B
0.00.285.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.793 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.794 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.794 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.794 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.795 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.795 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.795 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.796 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.797 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.797 I llm_load_print_meta: max token length = 93
0.00.381.968 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.387.261 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.268 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.268 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.269 I llama_new_context_with_model: n_batch       = 2048
0.00.387.269 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.270 I llama_new_context_with_model: flash_attn    = 0
0.00.387.272 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.273 I llama_new_context_with_model: freq_scale    = 1
0.00.387.274 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.735 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.751 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.841 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.103 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.110 I llama_new_context_with_model: graph nodes  = 601
0.00.404.111 I llama_new_context_with_model: graph splits = 1
0.00.404.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.844 I main: llama threadpool init, n_threads = 4
0.00.484.860 I 
0.00.484.957 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.484.960 I 
0.00.485.009 I sampler seed: 2510811530
0.00.485.020 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.039 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.043 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.044 I 
 increasities of the Earth, and how these impacts are altering ecosystems in various parts of the world.

**Answer:**

**1. Earth's Climate

0.02.664.357 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7037.75 tokens per second)
0.02.664.360 I llama_perf_context_print:        load time =     484.05 ms
0.02.664.361 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.664.362 I llama_perf_context_print:        eval time =    2160.15 ms /    32 runs   (   67.50 ms per token,    14.81 tokens per second)
0.02.664.363 I llama_perf_context_print:       total time =    2179.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4243 (33d7b70c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.023.468 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.477 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.484 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.493 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.497 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.503 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.504 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.505 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.505 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.506 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.507 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.512 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.513 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.514 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.514 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.515 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.076 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.968 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.974 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.975 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.975 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.976 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.977 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.978 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.980 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.980 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.981 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.982 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.983 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.987 I llama_model_loader: - type  f32:   37 tensors
0.00.133.988 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.860 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.509 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.115 I llm_load_vocab: special tokens cache size = 5
0.00.274.338 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.355 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.355 I llm_load_print_meta: arch             = gemma
0.00.274.356 I llm_load_print_meta: vocab type       = SPM
0.00.274.357 I llm_load_print_meta: n_vocab          = 256000
0.00.274.357 I llm_load_print_meta: n_merges         = 0
0.00.274.358 I llm_load_print_meta: vocab_only       = 0
0.00.274.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.358 I llm_load_print_meta: n_embd           = 2048
0.00.274.359 I llm_load_print_meta: n_layer          = 18
0.00.274.370 I llm_load_print_meta: n_head           = 8
0.00.274.371 I llm_load_print_meta: n_head_kv        = 1
0.00.274.372 I llm_load_print_meta: n_rot            = 256
0.00.274.372 I llm_load_print_meta: n_swa            = 0
0.00.274.372 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.372 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.373 I llm_load_print_meta: n_gqa            = 8
0.00.274.374 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.375 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.376 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.377 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.377 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.378 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.379 I llm_load_print_meta: n_ff             = 16384
0.00.274.379 I llm_load_print_meta: n_expert         = 0
0.00.274.380 I llm_load_print_meta: n_expert_used    = 0
0.00.274.380 I llm_load_print_meta: causal attn      = 1
0.00.274.380 I llm_load_print_meta: pooling type     = 0
0.00.274.380 I llm_load_print_meta: rope type        = 2
0.00.274.381 I llm_load_print_meta: rope scaling     = linear
0.00.274.382 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.383 I llm_load_print_meta: freq_scale_train = 1
0.00.274.383 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.383 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.384 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.384 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.384 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.385 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.385 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.385 I llm_load_print_meta: model type       = 2B
0.00.274.386 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.387 I llm_load_print_meta: model params     = 2.51 B
0.00.274.388 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.388 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.388 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.389 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.389 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.389 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.390 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.390 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.390 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.391 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.391 I llm_load_print_meta: max token length = 93
0.00.351.123 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.129 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.130 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.131 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.132 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.132 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.486 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.493 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.493 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.493 I llama_new_context_with_model: n_batch       = 2048
0.00.356.494 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.494 I llama_new_context_with_model: flash_attn    = 0
0.00.356.497 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.498 I llama_new_context_with_model: freq_scale    = 1
0.00.356.499 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.053 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.069 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.164 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.496 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.503 I llama_new_context_with_model: graph nodes  = 601
0.00.373.504 I llama_new_context_with_model: graph splits = 1
0.00.373.506 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.440 I main: llama threadpool init, n_threads = 4
0.00.473.459 I 
0.00.473.537 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.540 I 
0.00.473.582 I sampler seed: 605487142
0.00.473.593 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.596 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.597 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.597 I 
 increasities from time to time, but I never thought I'd see the day where it would involve a sentient AI.

I'm not sure how

0.02.769.222 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6860.71 tokens per second)
0.02.769.224 I llama_perf_context_print:        load time =     472.66 ms
0.02.769.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.769.227 I llama_perf_context_print:        eval time =    2276.88 ms /    32 runs   (   71.15 ms per token,    14.05 tokens per second)
0.02.769.228 I llama_perf_context_print:       total time =    2295.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.525 I build: 4243 (33d7b70c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.713 I main: llama backend init
0.00.000.719 I main: load the model and apply lora adapter, if any
0.00.021.230 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.240 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.259 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.260 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.260 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.261 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.262 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.270 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.270 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.270 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.271 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.076 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.785 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.794 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.800 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.801 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.802 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.802 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.803 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.804 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.806 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.807 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.808 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.808 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.809 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.813 I llama_model_loader: - type  f32:   37 tensors
0.00.131.815 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.505 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.391 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.018 I llm_load_vocab: special tokens cache size = 5
0.00.279.085 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.100 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.101 I llm_load_print_meta: arch             = gemma
0.00.279.101 I llm_load_print_meta: vocab type       = SPM
0.00.279.102 I llm_load_print_meta: n_vocab          = 256000
0.00.279.103 I llm_load_print_meta: n_merges         = 0
0.00.279.103 I llm_load_print_meta: vocab_only       = 0
0.00.279.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.104 I llm_load_print_meta: n_embd           = 2048
0.00.279.106 I llm_load_print_meta: n_layer          = 18
0.00.279.117 I llm_load_print_meta: n_head           = 8
0.00.279.118 I llm_load_print_meta: n_head_kv        = 1
0.00.279.119 I llm_load_print_meta: n_rot            = 256
0.00.279.119 I llm_load_print_meta: n_swa            = 0
0.00.279.119 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.119 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.120 I llm_load_print_meta: n_gqa            = 8
0.00.279.122 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.123 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.123 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.125 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.125 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.126 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.126 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.127 I llm_load_print_meta: n_ff             = 16384
0.00.279.127 I llm_load_print_meta: n_expert         = 0
0.00.279.127 I llm_load_print_meta: n_expert_used    = 0
0.00.279.128 I llm_load_print_meta: causal attn      = 1
0.00.279.128 I llm_load_print_meta: pooling type     = 0
0.00.279.129 I llm_load_print_meta: rope type        = 2
0.00.279.129 I llm_load_print_meta: rope scaling     = linear
0.00.279.131 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.131 I llm_load_print_meta: freq_scale_train = 1
0.00.279.132 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.132 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.132 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.133 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.133 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.133 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.133 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.134 I llm_load_print_meta: model type       = 2B
0.00.279.135 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.136 I llm_load_print_meta: model params     = 2.51 B
0.00.279.137 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.137 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.138 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.139 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.139 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.140 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.140 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.140 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.141 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.142 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.142 I llm_load_print_meta: max token length = 93
0.00.350.828 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.836 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.356.065 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.071 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.072 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.072 I llama_new_context_with_model: n_batch       = 2048
0.00.356.073 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.073 I llama_new_context_with_model: flash_attn    = 0
0.00.356.075 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.077 I llama_new_context_with_model: freq_scale    = 1
0.00.356.077 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.039 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.053 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.144 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.395 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.401 I llama_new_context_with_model: graph nodes  = 601
0.00.372.402 I llama_new_context_with_model: graph splits = 1
0.00.372.404 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.325 I main: llama threadpool init, n_threads = 4
0.00.461.340 I 
0.00.461.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.461.417 I 
0.00.461.466 I sampler seed: 3572158928
0.00.461.476 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.480 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.480 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.481 I 
 increably, its tentacles writhing in a frenzied dance. [end of text]


0.01.524.886 I llama_perf_sampler_print:    sampling time =       2.19 ms /    15 runs   (    0.15 ms per token,  6843.07 tokens per second)
0.01.524.889 I llama_perf_context_print:        load time =     460.59 ms
0.01.524.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.524.891 I llama_perf_context_print:        eval time =    1054.46 ms /    14 runs   (   75.32 ms per token,    13.28 tokens per second)
0.01.524.892 I llama_perf_context_print:       total time =    1063.57 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.145s
user	0m33.709s
sys	0m9.446s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4243 (33d7b70c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40191.11 ms
main:    total time = 40191.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.561 I build: 4243 (33d7b70c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.020.960 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.970 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.984 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.985 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.989 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.990 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.990 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.997 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.997 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.998 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.999 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.000 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.771 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.223 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.083 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.090 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.091 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.092 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.093 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.094 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.095 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.098 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.099 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.100 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.101 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.102 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.105 I llama_model_loader: - type  f32:   37 tensors
0.00.132.107 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.107 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.182 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.890 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.520 I llm_load_vocab: special tokens cache size = 5
0.00.273.166 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.191 I llm_load_print_meta: arch             = gemma
0.00.273.192 I llm_load_print_meta: vocab type       = SPM
0.00.273.193 I llm_load_print_meta: n_vocab          = 256000
0.00.273.193 I llm_load_print_meta: n_merges         = 0
0.00.273.193 I llm_load_print_meta: vocab_only       = 0
0.00.273.194 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.194 I llm_load_print_meta: n_embd           = 2048
0.00.273.195 I llm_load_print_meta: n_layer          = 18
0.00.273.206 I llm_load_print_meta: n_head           = 8
0.00.273.207 I llm_load_print_meta: n_head_kv        = 1
0.00.273.208 I llm_load_print_meta: n_rot            = 256
0.00.273.208 I llm_load_print_meta: n_swa            = 0
0.00.273.209 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.209 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.210 I llm_load_print_meta: n_gqa            = 8
0.00.273.212 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.212 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.213 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.215 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.215 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.216 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.216 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.217 I llm_load_print_meta: n_ff             = 16384
0.00.273.217 I llm_load_print_meta: n_expert         = 0
0.00.273.218 I llm_load_print_meta: n_expert_used    = 0
0.00.273.218 I llm_load_print_meta: causal attn      = 1
0.00.273.219 I llm_load_print_meta: pooling type     = 0
0.00.273.219 I llm_load_print_meta: rope type        = 2
0.00.273.220 I llm_load_print_meta: rope scaling     = linear
0.00.273.221 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.222 I llm_load_print_meta: freq_scale_train = 1
0.00.273.222 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.223 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.223 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.224 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.224 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.225 I llm_load_print_meta: model type       = 2B
0.00.273.226 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.226 I llm_load_print_meta: model params     = 2.51 B
0.00.273.227 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.227 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.229 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.231 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.231 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.231 I llm_load_print_meta: max token length = 93
0.00.331.872 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.879 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.880 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.880 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.881 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.882 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.001 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.007 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.007 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.008 I llama_new_context_with_model: n_batch       = 2048
0.00.337.008 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.009 I llama_new_context_with_model: flash_attn    = 0
0.00.337.011 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.012 I llama_new_context_with_model: freq_scale    = 1
0.00.337.013 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.146 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.158 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.251 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.467 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.474 I llama_new_context_with_model: graph nodes  = 601
0.00.352.474 I llama_new_context_with_model: graph splits = 1
0.00.352.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.077 I main: llama threadpool init, n_threads = 4
0.00.428.094 I 
0.00.428.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.428.176 I 
0.00.428.222 I sampler seed: 4278141456
0.00.428.232 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.236 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.237 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.239 I 
 encompates a broad range of topics, including the following:

**Business and Finance:**

* Investing
* Debt and credit
* Financial planning
*

0.02.002.430 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6465.52 tokens per second)
0.02.002.433 I llama_perf_context_print:        load time =     427.29 ms
0.02.002.434 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.002.435 I llama_perf_context_print:        eval time =    1555.04 ms /    32 runs   (   48.60 ms per token,    20.58 tokens per second)
0.02.002.436 I llama_perf_context_print:       total time =    1574.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4243 (33d7b70c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40168.52 ms
main:    total time = 40168.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.563 I build: 4243 (33d7b70c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.000.784 I main: load the model and apply lora adapter, if any
0.00.021.315 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.331 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.339 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.340 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.344 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.345 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.346 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.346 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.347 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.347 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.352 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.353 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.353 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.354 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.355 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.799 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.638 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.544 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.565 I llama_model_loader: - type  f32:   37 tensors
0.00.132.566 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.566 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.772 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.940 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.400 I llm_load_vocab: special tokens cache size = 5
0.00.262.182 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.197 I llm_load_print_meta: arch             = gemma
0.00.262.197 I llm_load_print_meta: vocab type       = SPM
0.00.262.198 I llm_load_print_meta: n_vocab          = 256000
0.00.262.198 I llm_load_print_meta: n_merges         = 0
0.00.262.199 I llm_load_print_meta: vocab_only       = 0
0.00.262.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.199 I llm_load_print_meta: n_embd           = 2048
0.00.262.200 I llm_load_print_meta: n_layer          = 18
0.00.262.211 I llm_load_print_meta: n_head           = 8
0.00.262.212 I llm_load_print_meta: n_head_kv        = 1
0.00.262.212 I llm_load_print_meta: n_rot            = 256
0.00.262.212 I llm_load_print_meta: n_swa            = 0
0.00.262.213 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.213 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.214 I llm_load_print_meta: n_gqa            = 8
0.00.262.215 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.216 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.217 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.218 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.218 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.219 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.219 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.220 I llm_load_print_meta: n_ff             = 16384
0.00.262.220 I llm_load_print_meta: n_expert         = 0
0.00.262.221 I llm_load_print_meta: n_expert_used    = 0
0.00.262.221 I llm_load_print_meta: causal attn      = 1
0.00.262.221 I llm_load_print_meta: pooling type     = 0
0.00.262.221 I llm_load_print_meta: rope type        = 2
0.00.262.222 I llm_load_print_meta: rope scaling     = linear
0.00.262.223 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.223 I llm_load_print_meta: freq_scale_train = 1
0.00.262.224 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.224 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.225 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.225 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.226 I llm_load_print_meta: model type       = 2B
0.00.262.226 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.227 I llm_load_print_meta: model params     = 2.51 B
0.00.262.228 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.228 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.229 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.230 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.231 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.231 I llm_load_print_meta: max token length = 93
0.00.318.362 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.447 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.452 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.453 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.454 I llama_new_context_with_model: n_batch       = 2048
0.00.323.454 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.455 I llama_new_context_with_model: flash_attn    = 0
0.00.323.457 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.458 I llama_new_context_with_model: freq_scale    = 1
0.00.323.458 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.762 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.775 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.864 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.128 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.339.134 I llama_new_context_with_model: graph nodes  = 601
0.00.339.134 I llama_new_context_with_model: graph splits = 1
0.00.339.136 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.230 I main: llama threadpool init, n_threads = 4
0.00.413.246 I 
0.00.413.322 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.413.326 I 
0.00.413.370 I sampler seed: 2131685048
0.00.413.381 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.385 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.385 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.385 I 
 squaRE, a leading provider of risk management software, announced today the launch of its AI-powered risk prediction model. This model leverages machine learning algorithms to

0.01.968.993 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6655.91 tokens per second)
0.01.968.996 I llama_perf_context_print:        load time =     412.43 ms
0.01.968.997 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.968.999 I llama_perf_context_print:        eval time =    1537.28 ms /    32 runs   (   48.04 ms per token,    20.82 tokens per second)
0.01.969.000 I llama_perf_context_print:       total time =    1555.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.167s
user	10m23.836s
sys	0m6.960s
