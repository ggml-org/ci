+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.584 I build: 4339 (227d7c5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.804 I main: llama backend init
0.00.000.811 I main: load the model and apply lora adapter, if any
0.00.021.545 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.556 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.567 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.577 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.581 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.584 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.585 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.586 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.587 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.588 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.437 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.121 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.041 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.047 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.048 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.048 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.049 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.051 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.052 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.055 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.057 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.058 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.059 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.060 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.064 I llama_model_loader: - type  f32:   37 tensors
0.00.133.064 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.182 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.650 I llm_load_vocab: special tokens cache size = 5
0.00.268.443 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.469 I llm_load_print_meta: arch             = gemma
0.00.268.470 I llm_load_print_meta: vocab type       = SPM
0.00.268.471 I llm_load_print_meta: n_vocab          = 256000
0.00.268.471 I llm_load_print_meta: n_merges         = 0
0.00.268.472 I llm_load_print_meta: vocab_only       = 0
0.00.268.472 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.472 I llm_load_print_meta: n_embd           = 2048
0.00.268.473 I llm_load_print_meta: n_layer          = 18
0.00.268.484 I llm_load_print_meta: n_head           = 8
0.00.268.485 I llm_load_print_meta: n_head_kv        = 1
0.00.268.486 I llm_load_print_meta: n_rot            = 256
0.00.268.486 I llm_load_print_meta: n_swa            = 0
0.00.268.486 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.487 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.487 I llm_load_print_meta: n_gqa            = 8
0.00.268.488 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.489 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.490 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.491 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.492 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.492 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.492 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.493 I llm_load_print_meta: n_ff             = 16384
0.00.268.493 I llm_load_print_meta: n_expert         = 0
0.00.268.494 I llm_load_print_meta: n_expert_used    = 0
0.00.268.494 I llm_load_print_meta: causal attn      = 1
0.00.268.494 I llm_load_print_meta: pooling type     = 0
0.00.268.494 I llm_load_print_meta: rope type        = 2
0.00.268.495 I llm_load_print_meta: rope scaling     = linear
0.00.268.496 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.497 I llm_load_print_meta: freq_scale_train = 1
0.00.268.497 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.497 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.498 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.498 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.498 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.498 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.499 I llm_load_print_meta: model type       = 2B
0.00.268.500 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.501 I llm_load_print_meta: model params     = 2.51 B
0.00.268.501 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.502 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.502 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.502 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.503 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.503 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.503 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.504 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.504 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.505 I llm_load_print_meta: max token length = 93
0.00.370.258 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.266 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.267 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.267 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.268 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.268 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.393 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.400 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.400 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.401 I llama_new_context_with_model: n_batch       = 2048
0.00.375.401 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.401 I llama_new_context_with_model: flash_attn    = 0
0.00.375.404 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.404 I llama_new_context_with_model: freq_scale    = 1
0.00.375.405 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.776 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.790 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.880 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.157 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.164 I llama_new_context_with_model: graph nodes  = 601
0.00.391.164 I llama_new_context_with_model: graph splits = 1
0.00.391.167 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.167 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.918 I main: llama threadpool init, n_threads = 4
0.00.476.935 I 
0.00.477.010 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.014 I 
0.00.477.056 I sampler seed: 2783717788
0.00.477.067 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.070 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.071 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.071 I 
 increasities.

I cannot find any evidence of this term anywhere in the internet. Is it a made-up term or a misspelling of something else?

0.02.715.372 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6488.40 tokens per second)
0.02.715.374 I llama_perf_context_print:        load time =     476.09 ms
0.02.715.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.376 I llama_perf_context_print:        eval time =    2219.76 ms /    32 runs   (   69.37 ms per token,    14.42 tokens per second)
0.02.715.377 I llama_perf_context_print:       total time =    2238.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.556 I build: 4339 (227d7c5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.022 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.036 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.045 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.047 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.053 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.057 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.058 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.058 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.059 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.059 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.063 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.064 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.072 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.072 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.073 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.315 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.657 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.616 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.626 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.628 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.629 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.631 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.632 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.633 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.634 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.635 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.639 I llama_model_loader: - type  f32:   37 tensors
0.00.132.640 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.111 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.991 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.643 I llm_load_vocab: special tokens cache size = 5
0.00.289.444 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.460 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.461 I llm_load_print_meta: arch             = gemma
0.00.289.461 I llm_load_print_meta: vocab type       = SPM
0.00.289.462 I llm_load_print_meta: n_vocab          = 256000
0.00.289.462 I llm_load_print_meta: n_merges         = 0
0.00.289.462 I llm_load_print_meta: vocab_only       = 0
0.00.289.463 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.463 I llm_load_print_meta: n_embd           = 2048
0.00.289.463 I llm_load_print_meta: n_layer          = 18
0.00.289.475 I llm_load_print_meta: n_head           = 8
0.00.289.476 I llm_load_print_meta: n_head_kv        = 1
0.00.289.476 I llm_load_print_meta: n_rot            = 256
0.00.289.476 I llm_load_print_meta: n_swa            = 0
0.00.289.476 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.477 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.477 I llm_load_print_meta: n_gqa            = 8
0.00.289.479 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.479 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.480 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.482 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.483 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.483 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.484 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.485 I llm_load_print_meta: n_ff             = 16384
0.00.289.485 I llm_load_print_meta: n_expert         = 0
0.00.289.485 I llm_load_print_meta: n_expert_used    = 0
0.00.289.486 I llm_load_print_meta: causal attn      = 1
0.00.289.486 I llm_load_print_meta: pooling type     = 0
0.00.289.486 I llm_load_print_meta: rope type        = 2
0.00.289.487 I llm_load_print_meta: rope scaling     = linear
0.00.289.488 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.489 I llm_load_print_meta: freq_scale_train = 1
0.00.289.489 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.489 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.489 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.490 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.490 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.490 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.491 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.491 I llm_load_print_meta: model type       = 2B
0.00.289.492 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.493 I llm_load_print_meta: model params     = 2.51 B
0.00.289.493 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.494 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.494 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.495 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.495 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.495 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.495 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.496 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.496 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.497 I llm_load_print_meta: max token length = 93
0.00.384.120 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.389.266 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.273 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.273 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.274 I llama_new_context_with_model: n_batch       = 2048
0.00.389.274 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.275 I llama_new_context_with_model: flash_attn    = 0
0.00.389.277 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.278 I llama_new_context_with_model: freq_scale    = 1
0.00.389.279 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.404.374 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.389 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.482 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.780 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.787 I llama_new_context_with_model: graph nodes  = 601
0.00.405.787 I llama_new_context_with_model: graph splits = 1
0.00.405.790 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.405.790 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.661 I main: llama threadpool init, n_threads = 4
0.00.487.675 I 
0.00.487.749 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.487.752 I 
0.00.487.794 I sampler seed: 2925875097
0.00.487.806 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.810 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.811 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.813 I 
 increasities.

I'm unable to generate the requested response as it contains sexually suggestive and inappropriate content. [end of text]


0.02.055.663 I llama_perf_sampler_print:    sampling time =       3.69 ms /    24 runs   (    0.15 ms per token,  6505.83 tokens per second)
0.02.055.665 I llama_perf_context_print:        load time =     486.89 ms
0.02.055.666 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.055.668 I llama_perf_context_print:        eval time =    1553.57 ms /    23 runs   (   67.55 ms per token,    14.80 tokens per second)
0.02.055.668 I llama_perf_context_print:       total time =    1568.01 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.183 I build: 4339 (227d7c5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.406 I main: llama backend init
0.00.000.413 I main: load the model and apply lora adapter, if any
0.00.020.694 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.706 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.714 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.721 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.722 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.727 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.727 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.728 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.729 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.729 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.730 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.737 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.738 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.740 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.742 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.204 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.542 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.567 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.573 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.574 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.575 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.576 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.577 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.578 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.581 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.582 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.583 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.584 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.586 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.591 I llama_model_loader: - type  f32:   37 tensors
0.00.133.593 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.078 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.622 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.303 I llm_load_vocab: special tokens cache size = 5
0.00.278.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.340 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.340 I llm_load_print_meta: arch             = gemma
0.00.278.341 I llm_load_print_meta: vocab type       = SPM
0.00.278.342 I llm_load_print_meta: n_vocab          = 256000
0.00.278.343 I llm_load_print_meta: n_merges         = 0
0.00.278.343 I llm_load_print_meta: vocab_only       = 0
0.00.278.343 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.343 I llm_load_print_meta: n_embd           = 2048
0.00.278.344 I llm_load_print_meta: n_layer          = 18
0.00.278.356 I llm_load_print_meta: n_head           = 8
0.00.278.357 I llm_load_print_meta: n_head_kv        = 1
0.00.278.357 I llm_load_print_meta: n_rot            = 256
0.00.278.358 I llm_load_print_meta: n_swa            = 0
0.00.278.358 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.359 I llm_load_print_meta: n_gqa            = 8
0.00.278.360 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.361 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.362 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.363 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.363 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.365 I llm_load_print_meta: n_ff             = 16384
0.00.278.366 I llm_load_print_meta: n_expert         = 0
0.00.278.366 I llm_load_print_meta: n_expert_used    = 0
0.00.278.366 I llm_load_print_meta: causal attn      = 1
0.00.278.366 I llm_load_print_meta: pooling type     = 0
0.00.278.366 I llm_load_print_meta: rope type        = 2
0.00.278.367 I llm_load_print_meta: rope scaling     = linear
0.00.278.368 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.368 I llm_load_print_meta: freq_scale_train = 1
0.00.278.369 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.369 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.370 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.370 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.370 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.371 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.371 I llm_load_print_meta: model type       = 2B
0.00.278.372 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.372 I llm_load_print_meta: model params     = 2.51 B
0.00.278.373 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.374 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.374 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.374 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.375 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.375 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.376 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.376 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.377 I llm_load_print_meta: max token length = 93
0.00.354.776 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.784 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.784 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.785 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.785 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.786 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.007 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.014 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.014 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.015 I llama_new_context_with_model: n_batch       = 2048
0.00.360.015 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.016 I llama_new_context_with_model: flash_attn    = 0
0.00.360.018 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.019 I llama_new_context_with_model: freq_scale    = 1
0.00.360.020 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.167 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.184 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.518 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.525 I llama_new_context_with_model: graph nodes  = 601
0.00.376.525 I llama_new_context_with_model: graph splits = 1
0.00.376.528 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.528 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.815 I main: llama threadpool init, n_threads = 4
0.00.464.829 I 
0.00.464.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.914 I 
0.00.464.965 I sampler seed: 1276534070
0.00.464.976 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.979 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.982 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.982 I 
 increasities:

* In what ways do the characters in this text exhibit narcissism and selfishness?
* How does the text portray the consequences of narcissistic behavior

0.02.769.207 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6934.23 tokens per second)
0.02.769.209 I llama_perf_context_print:        load time =     464.38 ms
0.02.769.210 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.769.212 I llama_perf_context_print:        eval time =    2285.81 ms /    32 runs   (   71.43 ms per token,    14.00 tokens per second)
0.02.769.213 I llama_perf_context_print:       total time =    2304.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.178 I build: 4339 (227d7c5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.387 I main: llama backend init
0.00.000.393 I main: load the model and apply lora adapter, if any
0.00.020.270 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.279 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.292 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.294 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.300 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.306 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.306 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.308 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.313 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.315 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.316 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.317 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.712 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.806 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.678 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.685 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.686 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.686 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.687 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.688 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.688 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.690 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.691 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.692 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.693 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.694 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.698 I llama_model_loader: - type  f32:   37 tensors
0.00.130.699 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.871 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.318 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.048 I llm_load_vocab: special tokens cache size = 5
0.00.265.044 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.065 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.065 I llm_load_print_meta: arch             = gemma
0.00.265.066 I llm_load_print_meta: vocab type       = SPM
0.00.265.066 I llm_load_print_meta: n_vocab          = 256000
0.00.265.067 I llm_load_print_meta: n_merges         = 0
0.00.265.067 I llm_load_print_meta: vocab_only       = 0
0.00.265.067 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.068 I llm_load_print_meta: n_embd           = 2048
0.00.265.068 I llm_load_print_meta: n_layer          = 18
0.00.265.080 I llm_load_print_meta: n_head           = 8
0.00.265.081 I llm_load_print_meta: n_head_kv        = 1
0.00.265.081 I llm_load_print_meta: n_rot            = 256
0.00.265.081 I llm_load_print_meta: n_swa            = 0
0.00.265.082 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.082 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.083 I llm_load_print_meta: n_gqa            = 8
0.00.265.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.086 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.087 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.087 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.088 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.089 I llm_load_print_meta: n_ff             = 16384
0.00.265.090 I llm_load_print_meta: n_expert         = 0
0.00.265.090 I llm_load_print_meta: n_expert_used    = 0
0.00.265.090 I llm_load_print_meta: causal attn      = 1
0.00.265.090 I llm_load_print_meta: pooling type     = 0
0.00.265.090 I llm_load_print_meta: rope type        = 2
0.00.265.091 I llm_load_print_meta: rope scaling     = linear
0.00.265.092 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.092 I llm_load_print_meta: freq_scale_train = 1
0.00.265.093 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.093 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.093 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.094 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.094 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.094 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.094 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.095 I llm_load_print_meta: model type       = 2B
0.00.265.095 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.096 I llm_load_print_meta: model params     = 2.51 B
0.00.265.097 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.097 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.097 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.098 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.098 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.098 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.099 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.099 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.100 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.100 I llm_load_print_meta: max token length = 93
0.00.336.512 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.518 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.629 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.635 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.636 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.636 I llama_new_context_with_model: n_batch       = 2048
0.00.341.637 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.637 I llama_new_context_with_model: flash_attn    = 0
0.00.341.639 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.640 I llama_new_context_with_model: freq_scale    = 1
0.00.341.641 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.053 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.067 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.164 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.420 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.427 I llama_new_context_with_model: graph nodes  = 601
0.00.357.428 I llama_new_context_with_model: graph splits = 1
0.00.357.430 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.430 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.065 I main: llama threadpool init, n_threads = 4
0.00.446.080 I 
0.00.446.166 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.170 I 
0.00.446.221 I sampler seed: 256729937
0.00.446.232 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.237 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.237 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.237 I 
 increably.

The correct response is:

I am unable to provide a response as I am unable to generate creative or figurative text. [end of text]


0.02.620.941 I llama_perf_sampler_print:    sampling time =       4.36 ms /    30 runs   (    0.15 ms per token,  6888.63 tokens per second)
0.02.620.944 I llama_perf_context_print:        load time =     445.66 ms
0.02.620.945 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.620.947 I llama_perf_context_print:        eval time =    2157.85 ms /    29 runs   (   74.41 ms per token,    13.44 tokens per second)
0.02.620.948 I llama_perf_context_print:       total time =    2174.88 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.661s
user	0m36.055s
sys	0m9.340s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4339 (227d7c5a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40247.33 ms
main:    total time = 40247.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 4339 (227d7c5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.691 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.701 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.714 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.718 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.721 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.726 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.726 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.727 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.728 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.729 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.730 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.734 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.734 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.735 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.736 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.737 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.308 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.601 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.418 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.424 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.425 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.426 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.426 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.427 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.428 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.430 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.431 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.431 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.433 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.434 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.438 I llama_model_loader: - type  f32:   37 tensors
0.00.132.441 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.442 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.546 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.192 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.756 I llm_load_vocab: special tokens cache size = 5
0.00.274.540 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.555 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.556 I llm_load_print_meta: arch             = gemma
0.00.274.556 I llm_load_print_meta: vocab type       = SPM
0.00.274.557 I llm_load_print_meta: n_vocab          = 256000
0.00.274.558 I llm_load_print_meta: n_merges         = 0
0.00.274.558 I llm_load_print_meta: vocab_only       = 0
0.00.274.559 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.559 I llm_load_print_meta: n_embd           = 2048
0.00.274.559 I llm_load_print_meta: n_layer          = 18
0.00.274.571 I llm_load_print_meta: n_head           = 8
0.00.274.572 I llm_load_print_meta: n_head_kv        = 1
0.00.274.572 I llm_load_print_meta: n_rot            = 256
0.00.274.573 I llm_load_print_meta: n_swa            = 0
0.00.274.573 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.573 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.574 I llm_load_print_meta: n_gqa            = 8
0.00.274.575 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.576 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.577 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.578 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.578 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.579 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.579 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.580 I llm_load_print_meta: n_ff             = 16384
0.00.274.580 I llm_load_print_meta: n_expert         = 0
0.00.274.580 I llm_load_print_meta: n_expert_used    = 0
0.00.274.581 I llm_load_print_meta: causal attn      = 1
0.00.274.581 I llm_load_print_meta: pooling type     = 0
0.00.274.581 I llm_load_print_meta: rope type        = 2
0.00.274.582 I llm_load_print_meta: rope scaling     = linear
0.00.274.583 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.583 I llm_load_print_meta: freq_scale_train = 1
0.00.274.584 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.584 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.584 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.585 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.585 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.585 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.585 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.586 I llm_load_print_meta: model type       = 2B
0.00.274.586 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.587 I llm_load_print_meta: model params     = 2.51 B
0.00.274.588 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.588 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.588 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.589 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.589 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.589 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.590 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.590 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.590 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.591 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.591 I llm_load_print_meta: max token length = 93
0.00.334.746 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.334.753 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.334.753 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.334.754 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.334.754 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.334.755 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.001 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.007 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.008 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.008 I llama_new_context_with_model: n_batch       = 2048
0.00.340.009 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.009 I llama_new_context_with_model: flash_attn    = 0
0.00.340.012 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.012 I llama_new_context_with_model: freq_scale    = 1
0.00.340.013 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.763 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.777 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.872 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.187 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.193 I llama_new_context_with_model: graph nodes  = 601
0.00.356.193 I llama_new_context_with_model: graph splits = 1
0.00.356.195 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.356.196 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.948 I main: llama threadpool init, n_threads = 4
0.00.431.964 I 
0.00.432.040 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.044 I 
0.00.432.089 I sampler seed: 1916731230
0.00.432.101 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.108 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.112 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.112 I 
 increasities?
I am unable to answer this question as it contains sexually suggestive and inappropriate content. I am not allowed to provide information or engage in conversations that

0.02.005.763 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6492.23 tokens per second)
0.02.005.766 I llama_perf_context_print:        load time =     431.16 ms
0.02.005.767 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.768 I llama_perf_context_print:        eval time =    1555.37 ms /    32 runs   (   48.61 ms per token,    20.57 tokens per second)
0.02.005.769 I llama_perf_context_print:       total time =    1573.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4339 (227d7c5a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40168.38 ms
main:    total time = 40168.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 4339 (227d7c5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.109 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.125 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.135 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.136 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.140 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.140 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.141 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.141 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.142 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.142 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.146 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.146 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.147 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.148 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.149 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.974 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.862 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.867 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.868 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.868 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.869 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.870 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.870 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.873 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.874 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.877 I llama_model_loader: - type  f32:   37 tensors
0.00.131.878 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.878 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.483 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.993 I llm_load_vocab: special tokens cache size = 5
0.00.265.706 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.725 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.726 I llm_load_print_meta: arch             = gemma
0.00.265.726 I llm_load_print_meta: vocab type       = SPM
0.00.265.727 I llm_load_print_meta: n_vocab          = 256000
0.00.265.728 I llm_load_print_meta: n_merges         = 0
0.00.265.728 I llm_load_print_meta: vocab_only       = 0
0.00.265.728 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.729 I llm_load_print_meta: n_embd           = 2048
0.00.265.729 I llm_load_print_meta: n_layer          = 18
0.00.265.741 I llm_load_print_meta: n_head           = 8
0.00.265.742 I llm_load_print_meta: n_head_kv        = 1
0.00.265.743 I llm_load_print_meta: n_rot            = 256
0.00.265.743 I llm_load_print_meta: n_swa            = 0
0.00.265.743 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.744 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.744 I llm_load_print_meta: n_gqa            = 8
0.00.265.745 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.746 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.747 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.749 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.749 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.750 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.750 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.751 I llm_load_print_meta: n_ff             = 16384
0.00.265.751 I llm_load_print_meta: n_expert         = 0
0.00.265.752 I llm_load_print_meta: n_expert_used    = 0
0.00.265.752 I llm_load_print_meta: causal attn      = 1
0.00.265.752 I llm_load_print_meta: pooling type     = 0
0.00.265.753 I llm_load_print_meta: rope type        = 2
0.00.265.753 I llm_load_print_meta: rope scaling     = linear
0.00.265.755 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.755 I llm_load_print_meta: freq_scale_train = 1
0.00.265.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.759 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.759 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.759 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.760 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.760 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.761 I llm_load_print_meta: model type       = 2B
0.00.265.761 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.762 I llm_load_print_meta: model params     = 2.51 B
0.00.265.763 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.764 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.764 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.765 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.765 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.765 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.766 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.766 I llm_load_print_meta: max token length = 93
0.00.323.052 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.277 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.282 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.283 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.283 I llama_new_context_with_model: n_batch       = 2048
0.00.328.283 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.284 I llama_new_context_with_model: flash_attn    = 0
0.00.328.286 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.287 I llama_new_context_with_model: freq_scale    = 1
0.00.328.288 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.111 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.126 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.224 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.523 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.529 I llama_new_context_with_model: graph nodes  = 601
0.00.344.529 I llama_new_context_with_model: graph splits = 1
0.00.344.532 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.532 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.989 I main: llama threadpool init, n_threads = 4
0.00.419.005 I 
0.00.419.080 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.083 I 
0.00.419.126 I sampler seed: 593142176
0.00.419.138 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.150 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.153 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.153 I 
 squared as the most dangerous animal in the world? While this claim is debatable, many sources consider it to be a widely accepted fact.

**Question:**

0.01.981.587 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6558.03 tokens per second)
0.01.981.590 I llama_perf_context_print:        load time =     418.23 ms
0.01.981.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.593 I llama_perf_context_print:        eval time =    1544.10 ms /    32 runs   (   48.25 ms per token,    20.72 tokens per second)
0.01.981.594 I llama_perf_context_print:       total time =    1562.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.220s
user	10m23.725s
sys	0m6.940s
