+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.464 I build: 4345 (2230786e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.654 I main: llama backend init
0.00.000.660 I main: load the model and apply lora adapter, if any
0.00.021.220 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.231 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.242 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.248 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.249 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.256 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.257 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.257 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.265 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.266 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.267 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.267 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.268 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.250 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.663 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.669 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.670 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.671 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.672 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.675 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.678 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.678 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.679 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.680 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.681 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.685 I llama_model_loader: - type  f32:   37 tensors
0.00.132.686 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.111 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.168 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.767 I llm_load_vocab: special tokens cache size = 5
0.00.270.534 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.553 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.554 I llm_load_print_meta: arch             = gemma
0.00.270.555 I llm_load_print_meta: vocab type       = SPM
0.00.270.555 I llm_load_print_meta: n_vocab          = 256000
0.00.270.555 I llm_load_print_meta: n_merges         = 0
0.00.270.556 I llm_load_print_meta: vocab_only       = 0
0.00.270.556 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.556 I llm_load_print_meta: n_embd           = 2048
0.00.270.557 I llm_load_print_meta: n_layer          = 18
0.00.270.569 I llm_load_print_meta: n_head           = 8
0.00.270.570 I llm_load_print_meta: n_head_kv        = 1
0.00.270.570 I llm_load_print_meta: n_rot            = 256
0.00.270.570 I llm_load_print_meta: n_swa            = 0
0.00.270.570 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.571 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.571 I llm_load_print_meta: n_gqa            = 8
0.00.270.572 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.573 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.574 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.576 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.576 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.577 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.577 I llm_load_print_meta: n_ff             = 16384
0.00.270.578 I llm_load_print_meta: n_expert         = 0
0.00.270.578 I llm_load_print_meta: n_expert_used    = 0
0.00.270.578 I llm_load_print_meta: causal attn      = 1
0.00.270.578 I llm_load_print_meta: pooling type     = 0
0.00.270.579 I llm_load_print_meta: rope type        = 2
0.00.270.579 I llm_load_print_meta: rope scaling     = linear
0.00.270.580 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.580 I llm_load_print_meta: freq_scale_train = 1
0.00.270.581 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.581 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.581 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.582 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.582 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.583 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.583 I llm_load_print_meta: model type       = 2B
0.00.270.583 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.584 I llm_load_print_meta: model params     = 2.51 B
0.00.270.585 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.586 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.587 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.587 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.588 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.588 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.588 I llm_load_print_meta: max token length = 93
0.00.371.295 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.303 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.303 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.304 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.304 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.305 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.376.612 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.618 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.618 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.619 I llama_new_context_with_model: n_batch       = 2048
0.00.376.619 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.619 I llama_new_context_with_model: flash_attn    = 0
0.00.376.622 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.623 I llama_new_context_with_model: freq_scale    = 1
0.00.376.624 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.391.178 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.190 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.287 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.612 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.616 I llama_new_context_with_model: graph nodes  = 601
0.00.392.617 I llama_new_context_with_model: graph splits = 1
0.00.392.619 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.619 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.734 I main: llama threadpool init, n_threads = 4
0.00.480.750 I 
0.00.480.824 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.828 I 
0.00.480.872 I sampler seed: 2610654314
0.00.480.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.891 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.894 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.894 I 
 increasities is a conspiracy theory that alleges that a group of elites is using their wealth and power to suppress or eliminate certain groups of people.

There is no

0.02.757.248 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6863.56 tokens per second)
0.02.757.251 I llama_perf_context_print:        load time =     480.06 ms
0.02.757.252 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.757.253 I llama_perf_context_print:        eval time =    2257.44 ms /    32 runs   (   70.55 ms per token,    14.18 tokens per second)
0.02.757.254 I llama_perf_context_print:       total time =    2276.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.535 I build: 4345 (2230786e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.041 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.072 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.073 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.078 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.082 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.083 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.084 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.084 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.089 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.090 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.091 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.091 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.092 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.264 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.758 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.642 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.648 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.649 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.650 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.650 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.651 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.652 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.654 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.655 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.655 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.656 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.657 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.661 I llama_model_loader: - type  f32:   37 tensors
0.00.132.662 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.312 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.099 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.663 I llm_load_vocab: special tokens cache size = 5
0.00.268.485 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.502 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.503 I llm_load_print_meta: arch             = gemma
0.00.268.504 I llm_load_print_meta: vocab type       = SPM
0.00.268.504 I llm_load_print_meta: n_vocab          = 256000
0.00.268.505 I llm_load_print_meta: n_merges         = 0
0.00.268.505 I llm_load_print_meta: vocab_only       = 0
0.00.268.505 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.505 I llm_load_print_meta: n_embd           = 2048
0.00.268.506 I llm_load_print_meta: n_layer          = 18
0.00.268.516 I llm_load_print_meta: n_head           = 8
0.00.268.517 I llm_load_print_meta: n_head_kv        = 1
0.00.268.518 I llm_load_print_meta: n_rot            = 256
0.00.268.518 I llm_load_print_meta: n_swa            = 0
0.00.268.518 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.518 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.519 I llm_load_print_meta: n_gqa            = 8
0.00.268.520 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.521 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.522 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.523 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.524 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.524 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.525 I llm_load_print_meta: n_ff             = 16384
0.00.268.526 I llm_load_print_meta: n_expert         = 0
0.00.268.526 I llm_load_print_meta: n_expert_used    = 0
0.00.268.526 I llm_load_print_meta: causal attn      = 1
0.00.268.526 I llm_load_print_meta: pooling type     = 0
0.00.268.527 I llm_load_print_meta: rope type        = 2
0.00.268.527 I llm_load_print_meta: rope scaling     = linear
0.00.268.528 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.529 I llm_load_print_meta: freq_scale_train = 1
0.00.268.530 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.530 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.531 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.532 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.533 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.533 I llm_load_print_meta: model type       = 2B
0.00.268.534 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.535 I llm_load_print_meta: model params     = 2.51 B
0.00.268.536 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.536 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.537 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.538 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.538 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.539 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.539 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.539 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.540 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.541 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.541 I llm_load_print_meta: max token length = 93
0.00.362.569 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.367.747 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.753 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.753 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.754 I llama_new_context_with_model: n_batch       = 2048
0.00.367.754 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.755 I llama_new_context_with_model: flash_attn    = 0
0.00.367.757 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.758 I llama_new_context_with_model: freq_scale    = 1
0.00.367.759 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.311 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.325 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.417 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.694 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.701 I llama_new_context_with_model: graph nodes  = 601
0.00.383.702 I llama_new_context_with_model: graph splits = 1
0.00.383.704 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.383.704 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.150 I main: llama threadpool init, n_threads = 4
0.00.467.167 I 
0.00.467.242 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.245 I 
0.00.467.286 I sampler seed: 510660891
0.00.467.298 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.308 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.311 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.312 I 
 increably.

I am unable to access the provided text. Therefore, I am unable to provide an analysis of the provided context. [end of text]


0.02.405.344 I llama_perf_sampler_print:    sampling time =       4.45 ms /    29 runs   (    0.15 ms per token,  6518.32 tokens per second)
0.02.405.346 I llama_perf_context_print:        load time =     466.38 ms
0.02.405.347 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.405.348 I llama_perf_context_print:        eval time =    1920.88 ms /    28 runs   (   68.60 ms per token,    14.58 tokens per second)
0.02.405.349 I llama_perf_context_print:       total time =    1938.20 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.452 I build: 4345 (2230786e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.643 I main: llama backend init
0.00.000.649 I main: load the model and apply lora adapter, if any
0.00.020.931 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.942 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.950 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.965 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.969 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.970 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.971 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.971 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.972 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.587 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.547 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.555 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.556 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.557 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.559 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.560 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.564 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.565 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.566 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.567 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.568 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.572 I llama_model_loader: - type  f32:   37 tensors
0.00.132.573 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.026 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.301 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.936 I llm_load_vocab: special tokens cache size = 5
0.00.283.194 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.213 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.214 I llm_load_print_meta: arch             = gemma
0.00.283.214 I llm_load_print_meta: vocab type       = SPM
0.00.283.215 I llm_load_print_meta: n_vocab          = 256000
0.00.283.215 I llm_load_print_meta: n_merges         = 0
0.00.283.216 I llm_load_print_meta: vocab_only       = 0
0.00.283.216 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.216 I llm_load_print_meta: n_embd           = 2048
0.00.283.217 I llm_load_print_meta: n_layer          = 18
0.00.283.227 I llm_load_print_meta: n_head           = 8
0.00.283.228 I llm_load_print_meta: n_head_kv        = 1
0.00.283.229 I llm_load_print_meta: n_rot            = 256
0.00.283.229 I llm_load_print_meta: n_swa            = 0
0.00.283.229 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.229 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.230 I llm_load_print_meta: n_gqa            = 8
0.00.283.231 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.232 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.233 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.234 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.235 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.235 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.236 I llm_load_print_meta: n_ff             = 16384
0.00.283.236 I llm_load_print_meta: n_expert         = 0
0.00.283.237 I llm_load_print_meta: n_expert_used    = 0
0.00.283.237 I llm_load_print_meta: causal attn      = 1
0.00.283.237 I llm_load_print_meta: pooling type     = 0
0.00.283.237 I llm_load_print_meta: rope type        = 2
0.00.283.238 I llm_load_print_meta: rope scaling     = linear
0.00.283.239 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.240 I llm_load_print_meta: freq_scale_train = 1
0.00.283.240 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.240 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.240 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.241 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.241 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.241 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.241 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.242 I llm_load_print_meta: model type       = 2B
0.00.283.242 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.243 I llm_load_print_meta: model params     = 2.51 B
0.00.283.244 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.245 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.245 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.245 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.246 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.246 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.246 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.247 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.247 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.247 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.248 I llm_load_print_meta: max token length = 93
0.00.359.690 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.700 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.701 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.701 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.702 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.702 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.974 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.980 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.981 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.981 I llama_new_context_with_model: n_batch       = 2048
0.00.364.982 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.982 I llama_new_context_with_model: flash_attn    = 0
0.00.364.986 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.987 I llama_new_context_with_model: freq_scale    = 1
0.00.364.988 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.195 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.208 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.308 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.584 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.591 I llama_new_context_with_model: graph nodes  = 601
0.00.382.592 I llama_new_context_with_model: graph splits = 1
0.00.382.594 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.594 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.551 I main: llama threadpool init, n_threads = 4
0.00.476.565 I 
0.00.476.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.641 I 
0.00.476.686 I sampler seed: 1174925928
0.00.476.697 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.710 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.713 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.713 I 
 increasities on social media, particularly with young audiences. 

**a) Explain the impact of social media on young audiences.**

**b) Discuss the

0.02.788.723 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6935.69 tokens per second)
0.02.788.725 I llama_perf_context_print:        load time =     475.88 ms
0.02.788.727 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.788.728 I llama_perf_context_print:        eval time =    2292.80 ms /    32 runs   (   71.65 ms per token,    13.96 tokens per second)
0.02.788.729 I llama_perf_context_print:       total time =    2312.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.560 I build: 4345 (2230786e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.110 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.121 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.133 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.138 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.139 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.140 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.141 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.142 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.142 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.147 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.148 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.149 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.149 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.150 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.787 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.190 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.110 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.118 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.119 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.119 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.120 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.121 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.122 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.125 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.126 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.126 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.127 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.130 I llama_model_loader: - type  f32:   37 tensors
0.00.132.131 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.027 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.099 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.739 I llm_load_vocab: special tokens cache size = 5
0.00.271.500 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.517 I llm_load_print_meta: arch             = gemma
0.00.271.518 I llm_load_print_meta: vocab type       = SPM
0.00.271.518 I llm_load_print_meta: n_vocab          = 256000
0.00.271.519 I llm_load_print_meta: n_merges         = 0
0.00.271.519 I llm_load_print_meta: vocab_only       = 0
0.00.271.519 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.520 I llm_load_print_meta: n_embd           = 2048
0.00.271.520 I llm_load_print_meta: n_layer          = 18
0.00.271.531 I llm_load_print_meta: n_head           = 8
0.00.271.532 I llm_load_print_meta: n_head_kv        = 1
0.00.271.533 I llm_load_print_meta: n_rot            = 256
0.00.271.533 I llm_load_print_meta: n_swa            = 0
0.00.271.533 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.533 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.534 I llm_load_print_meta: n_gqa            = 8
0.00.271.535 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.536 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.537 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.538 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.539 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.539 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.540 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.541 I llm_load_print_meta: n_ff             = 16384
0.00.271.541 I llm_load_print_meta: n_expert         = 0
0.00.271.541 I llm_load_print_meta: n_expert_used    = 0
0.00.271.542 I llm_load_print_meta: causal attn      = 1
0.00.271.542 I llm_load_print_meta: pooling type     = 0
0.00.271.542 I llm_load_print_meta: rope type        = 2
0.00.271.542 I llm_load_print_meta: rope scaling     = linear
0.00.271.544 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.544 I llm_load_print_meta: freq_scale_train = 1
0.00.271.545 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.545 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.545 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.546 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.546 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.546 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.546 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.547 I llm_load_print_meta: model type       = 2B
0.00.271.547 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.548 I llm_load_print_meta: model params     = 2.51 B
0.00.271.549 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.549 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.550 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.550 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.550 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.550 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.551 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.551 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.551 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.552 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.552 I llm_load_print_meta: max token length = 93
0.00.342.274 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.282 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.443 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.449 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.450 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.450 I llama_new_context_with_model: n_batch       = 2048
0.00.347.451 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.451 I llama_new_context_with_model: flash_attn    = 0
0.00.347.454 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.454 I llama_new_context_with_model: freq_scale    = 1
0.00.347.455 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.147 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.158 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.249 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.516 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.523 I llama_new_context_with_model: graph nodes  = 601
0.00.363.523 I llama_new_context_with_model: graph splits = 1
0.00.363.525 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.525 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.059 I main: llama threadpool init, n_threads = 4
0.00.463.073 I 
0.00.463.149 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.149 I 
0.00.463.194 I sampler seed: 1525430986
0.00.463.203 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.206 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.206 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.206 I 
 increasities with the following vocabulary:

**1. Narcissism:** Excessive self-absorption and admiration of oneself.
**2. Grandiose:** Exces

0.02.907.158 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6778.96 tokens per second)
0.02.907.161 I llama_perf_context_print:        load time =     462.26 ms
0.02.907.162 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.907.163 I llama_perf_context_print:        eval time =    2424.02 ms /    32 runs   (   75.75 ms per token,    13.20 tokens per second)
0.02.907.164 I llama_perf_context_print:       total time =    2444.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.482s
user	0m38.852s
sys	0m9.472s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4345 (2230786e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40225.32 ms
main:    total time = 40225.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4345 (2230786e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.470 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.481 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.490 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.495 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.496 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.501 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.501 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.502 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.502 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.503 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.507 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.508 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.508 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.509 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.410 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.346 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.353 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.353 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.354 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.355 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.355 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.356 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.359 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.360 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.361 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.361 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.362 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.366 I llama_model_loader: - type  f32:   37 tensors
0.00.132.368 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.369 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.633 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.621 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.223 I llm_load_vocab: special tokens cache size = 5
0.00.275.974 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.989 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.989 I llm_load_print_meta: arch             = gemma
0.00.275.990 I llm_load_print_meta: vocab type       = SPM
0.00.275.990 I llm_load_print_meta: n_vocab          = 256000
0.00.275.991 I llm_load_print_meta: n_merges         = 0
0.00.275.991 I llm_load_print_meta: vocab_only       = 0
0.00.275.991 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.992 I llm_load_print_meta: n_embd           = 2048
0.00.275.992 I llm_load_print_meta: n_layer          = 18
0.00.276.005 I llm_load_print_meta: n_head           = 8
0.00.276.006 I llm_load_print_meta: n_head_kv        = 1
0.00.276.007 I llm_load_print_meta: n_rot            = 256
0.00.276.007 I llm_load_print_meta: n_swa            = 0
0.00.276.007 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.008 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.009 I llm_load_print_meta: n_gqa            = 8
0.00.276.010 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.011 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.011 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.012 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.013 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.013 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.014 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.015 I llm_load_print_meta: n_ff             = 16384
0.00.276.015 I llm_load_print_meta: n_expert         = 0
0.00.276.015 I llm_load_print_meta: n_expert_used    = 0
0.00.276.015 I llm_load_print_meta: causal attn      = 1
0.00.276.016 I llm_load_print_meta: pooling type     = 0
0.00.276.016 I llm_load_print_meta: rope type        = 2
0.00.276.016 I llm_load_print_meta: rope scaling     = linear
0.00.276.017 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.018 I llm_load_print_meta: freq_scale_train = 1
0.00.276.018 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.018 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.019 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.019 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.019 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.020 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.020 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.021 I llm_load_print_meta: model type       = 2B
0.00.276.021 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.022 I llm_load_print_meta: model params     = 2.51 B
0.00.276.023 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.024 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.024 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.025 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.025 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.025 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.026 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.027 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.027 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.028 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.028 I llm_load_print_meta: max token length = 93
0.00.336.228 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.233 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.234 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.235 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.235 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.236 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.366 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.373 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.373 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.374 I llama_new_context_with_model: n_batch       = 2048
0.00.341.374 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.375 I llama_new_context_with_model: flash_attn    = 0
0.00.341.377 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.378 I llama_new_context_with_model: freq_scale    = 1
0.00.341.379 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.161 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.177 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.554 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.560 I llama_new_context_with_model: graph nodes  = 601
0.00.357.561 I llama_new_context_with_model: graph splits = 1
0.00.357.563 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.563 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.157 I main: llama threadpool init, n_threads = 4
0.00.434.174 I 
0.00.434.250 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.434.254 I 
0.00.434.301 I sampler seed: 1528942382
0.00.434.313 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.323 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.327 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.327 I 
 encompates a wide range of activities and has evolved significantly over time.

**What is the evolution of encompases?**

**A.)** Increased specialization

0.02.074.146 I llama_perf_sampler_print:    sampling time =       5.35 ms /    33 runs   (    0.16 ms per token,  6170.53 tokens per second)
0.02.074.149 I llama_perf_context_print:        load time =     433.41 ms
0.02.074.151 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.074.152 I llama_perf_context_print:        eval time =    1619.78 ms /    32 runs   (   50.62 ms per token,    19.76 tokens per second)
0.02.074.154 I llama_perf_context_print:       total time =    1640.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4345 (2230786e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40211.56 ms
main:    total time = 40211.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.573 I build: 4345 (2230786e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.781 I main: load the model and apply lora adapter, if any
0.00.021.013 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.028 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.035 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.035 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.040 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.041 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.042 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.043 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.049 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.051 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.405 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.409 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.416 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.416 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.417 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.417 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.418 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.420 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.422 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.422 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.426 I llama_model_loader: - type  f32:   37 tensors
0.00.132.427 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.427 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.877 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.176 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.768 I llm_load_vocab: special tokens cache size = 5
0.00.269.600 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.617 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.617 I llm_load_print_meta: arch             = gemma
0.00.269.618 I llm_load_print_meta: vocab type       = SPM
0.00.269.618 I llm_load_print_meta: n_vocab          = 256000
0.00.269.619 I llm_load_print_meta: n_merges         = 0
0.00.269.619 I llm_load_print_meta: vocab_only       = 0
0.00.269.620 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.620 I llm_load_print_meta: n_embd           = 2048
0.00.269.620 I llm_load_print_meta: n_layer          = 18
0.00.269.632 I llm_load_print_meta: n_head           = 8
0.00.269.633 I llm_load_print_meta: n_head_kv        = 1
0.00.269.633 I llm_load_print_meta: n_rot            = 256
0.00.269.633 I llm_load_print_meta: n_swa            = 0
0.00.269.634 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.634 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.635 I llm_load_print_meta: n_gqa            = 8
0.00.269.636 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.637 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.638 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.639 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.640 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.640 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.640 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.641 I llm_load_print_meta: n_ff             = 16384
0.00.269.641 I llm_load_print_meta: n_expert         = 0
0.00.269.642 I llm_load_print_meta: n_expert_used    = 0
0.00.269.643 I llm_load_print_meta: causal attn      = 1
0.00.269.643 I llm_load_print_meta: pooling type     = 0
0.00.269.643 I llm_load_print_meta: rope type        = 2
0.00.269.644 I llm_load_print_meta: rope scaling     = linear
0.00.269.645 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.645 I llm_load_print_meta: freq_scale_train = 1
0.00.269.646 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.646 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.647 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.647 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.648 I llm_load_print_meta: model type       = 2B
0.00.269.648 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.649 I llm_load_print_meta: model params     = 2.51 B
0.00.269.649 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.650 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.650 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.650 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.650 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.651 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.651 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.651 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.651 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.652 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.652 I llm_load_print_meta: max token length = 93
0.00.326.865 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.973 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.981 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.981 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.981 I llama_new_context_with_model: n_batch       = 2048
0.00.331.982 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.982 I llama_new_context_with_model: flash_attn    = 0
0.00.331.985 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.986 I llama_new_context_with_model: freq_scale    = 1
0.00.331.987 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.029 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.045 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.137 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.382 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.388 I llama_new_context_with_model: graph nodes  = 601
0.00.348.388 I llama_new_context_with_model: graph splits = 1
0.00.348.390 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.391 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.061 I main: llama threadpool init, n_threads = 4
0.00.426.077 I 
0.00.426.156 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.159 I 
0.00.426.203 I sampler seed: 210842017
0.00.426.214 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.227 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.231 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.231 I 
 increasities, and other forms of inappropriate behavior with minor children.

It is crucial that adults and professionals take immediate action to protect children from these dangers. This

0.02.054.576 I llama_perf_sampler_print:    sampling time =       5.33 ms /    33 runs   (    0.16 ms per token,  6197.18 tokens per second)
0.02.054.578 I llama_perf_context_print:        load time =     425.26 ms
0.02.054.579 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.054.580 I llama_perf_context_print:        eval time =    1609.03 ms /    32 runs   (   50.28 ms per token,    19.89 tokens per second)
0.02.054.581 I llama_perf_context_print:       total time =    1628.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.348s
user	10m24.289s
sys	0m7.324s
