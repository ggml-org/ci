+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 3921 (223c25a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.834 I main: load the model and apply lora adapter, if any
0.00.021.637 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.684 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.694 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.702 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.702 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.706 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.708 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.709 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.709 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.710 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.710 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.715 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.716 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.717 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.179 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.368 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.239 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.246 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.246 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.247 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.247 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.248 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.248 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.251 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.253 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.254 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.254 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.258 I llama_model_loader: - type  f32:   37 tensors
0.00.132.261 I llama_model_loader: - type q8_0:  127 tensors
0.00.223.717 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.921 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.262.621 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.267.988 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.279.367 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.280.122 I llm_load_vocab: special tokens cache size = 5
0.00.300.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.301.001 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.301.001 I llm_load_print_meta: arch             = gemma
0.00.301.002 I llm_load_print_meta: vocab type       = SPM
0.00.301.002 I llm_load_print_meta: n_vocab          = 256000
0.00.301.003 I llm_load_print_meta: n_merges         = 0
0.00.301.003 I llm_load_print_meta: vocab_only       = 0
0.00.301.003 I llm_load_print_meta: n_ctx_train      = 8192
0.00.301.004 I llm_load_print_meta: n_embd           = 2048
0.00.301.004 I llm_load_print_meta: n_layer          = 18
0.00.301.018 I llm_load_print_meta: n_head           = 8
0.00.301.019 I llm_load_print_meta: n_head_kv        = 1
0.00.301.020 I llm_load_print_meta: n_rot            = 256
0.00.301.020 I llm_load_print_meta: n_swa            = 0
0.00.301.020 I llm_load_print_meta: n_embd_head_k    = 256
0.00.301.021 I llm_load_print_meta: n_embd_head_v    = 256
0.00.301.021 I llm_load_print_meta: n_gqa            = 8
0.00.301.022 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.301.023 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.301.024 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.301.025 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.301.026 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.301.026 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.301.026 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.301.027 I llm_load_print_meta: n_ff             = 16384
0.00.301.027 I llm_load_print_meta: n_expert         = 0
0.00.301.028 I llm_load_print_meta: n_expert_used    = 0
0.00.301.028 I llm_load_print_meta: causal attn      = 1
0.00.301.028 I llm_load_print_meta: pooling type     = 0
0.00.301.029 I llm_load_print_meta: rope type        = 2
0.00.301.029 I llm_load_print_meta: rope scaling     = linear
0.00.301.030 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.301.031 I llm_load_print_meta: freq_scale_train = 1
0.00.301.031 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.301.032 I llm_load_print_meta: rope_finetuned   = unknown
0.00.301.032 I llm_load_print_meta: ssm_d_conv       = 0
0.00.301.032 I llm_load_print_meta: ssm_d_inner      = 0
0.00.301.033 I llm_load_print_meta: ssm_d_state      = 0
0.00.301.033 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.301.034 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.301.034 I llm_load_print_meta: model type       = 2B
0.00.301.035 I llm_load_print_meta: model ftype      = Q8_0
0.00.301.036 I llm_load_print_meta: model params     = 2.51 B
0.00.301.036 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.301.037 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.301.038 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.301.038 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.301.039 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.301.039 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.301.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.301.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.301.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.301.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.301.043 I llm_load_print_meta: max token length = 93
0.00.301.064 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.398.979 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.398.988 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.398.989 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.398.989 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.398.990 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.398.991 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.404.187 I llama_new_context_with_model: n_ctx      = 8192
0.00.404.195 I llama_new_context_with_model: n_batch    = 2048
0.00.404.195 I llama_new_context_with_model: n_ubatch   = 512
0.00.404.196 I llama_new_context_with_model: flash_attn = 0
0.00.404.200 I llama_new_context_with_model: freq_base  = 10000.0
0.00.404.200 I llama_new_context_with_model: freq_scale = 1
0.00.433.250 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.433.266 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.433.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.434.257 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.434.264 I llama_new_context_with_model: graph nodes  = 601
0.00.434.264 I llama_new_context_with_model: graph splits = 1
0.00.434.266 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.525.648 I main: llama threadpool init, n_threads = 4
0.00.525.661 I 
0.00.525.735 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.525.739 I 
0.00.525.780 I sampler seed: 2408913310
0.00.525.791 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.525.796 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.525.797 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.525.797 I 
 maneuvrability rules (1995) for the purpose of determining which factors are significant in the relationship between cognitive ability and personality traits.

I.

0.02.813.204 I llama_perf_sampler_print:    sampling time =       5.64 ms /    33 runs   (    0.17 ms per token,  5853.14 tokens per second)
0.02.813.207 I llama_perf_context_print:        load time =     523.79 ms
0.02.813.208 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.813.210 I llama_perf_context_print:        eval time =    2268.18 ms /    32 runs   (   70.88 ms per token,    14.11 tokens per second)
0.02.813.210 I llama_perf_context_print:       total time =    2287.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 3921 (223c25a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.834 I main: load the model and apply lora adapter, if any
0.00.021.841 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.855 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.862 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.865 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.869 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.870 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.871 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.871 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.872 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.872 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.876 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.878 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.878 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.879 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.137 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.794 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.715 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.722 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.723 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.724 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.727 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.728 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.729 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.730 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.732 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.735 I llama_model_loader: - type  f32:   37 tensors
0.00.131.738 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.604 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.348 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.244.687 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.248.911 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.257.938 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.571 I llm_load_vocab: special tokens cache size = 5
0.00.279.201 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.220 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.220 I llm_load_print_meta: arch             = gemma
0.00.279.221 I llm_load_print_meta: vocab type       = SPM
0.00.279.222 I llm_load_print_meta: n_vocab          = 256000
0.00.279.222 I llm_load_print_meta: n_merges         = 0
0.00.279.223 I llm_load_print_meta: vocab_only       = 0
0.00.279.223 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.223 I llm_load_print_meta: n_embd           = 2048
0.00.279.223 I llm_load_print_meta: n_layer          = 18
0.00.279.235 I llm_load_print_meta: n_head           = 8
0.00.279.236 I llm_load_print_meta: n_head_kv        = 1
0.00.279.237 I llm_load_print_meta: n_rot            = 256
0.00.279.237 I llm_load_print_meta: n_swa            = 0
0.00.279.237 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.238 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.239 I llm_load_print_meta: n_gqa            = 8
0.00.279.240 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.241 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.241 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.243 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.243 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.244 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.245 I llm_load_print_meta: n_ff             = 16384
0.00.279.245 I llm_load_print_meta: n_expert         = 0
0.00.279.245 I llm_load_print_meta: n_expert_used    = 0
0.00.279.246 I llm_load_print_meta: causal attn      = 1
0.00.279.246 I llm_load_print_meta: pooling type     = 0
0.00.279.246 I llm_load_print_meta: rope type        = 2
0.00.279.247 I llm_load_print_meta: rope scaling     = linear
0.00.279.249 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.249 I llm_load_print_meta: freq_scale_train = 1
0.00.279.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.250 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.250 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.250 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.251 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.251 I llm_load_print_meta: model type       = 2B
0.00.279.252 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.253 I llm_load_print_meta: model params     = 2.51 B
0.00.279.254 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.254 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.255 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.255 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.255 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.255 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.256 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.256 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.256 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.257 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.257 I llm_load_print_meta: max token length = 93
0.00.279.277 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.371.236 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.376.476 I llama_new_context_with_model: n_ctx      = 8192
0.00.376.482 I llama_new_context_with_model: n_batch    = 2048
0.00.376.483 I llama_new_context_with_model: n_ubatch   = 512
0.00.376.484 I llama_new_context_with_model: flash_attn = 0
0.00.376.487 I llama_new_context_with_model: freq_base  = 10000.0
0.00.376.487 I llama_new_context_with_model: freq_scale = 1
0.00.406.037 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.054 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.145 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.005 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.014 I llama_new_context_with_model: graph nodes  = 601
0.00.407.014 I llama_new_context_with_model: graph splits = 1
0.00.407.016 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.802 I main: llama threadpool init, n_threads = 4
0.00.495.813 I 
0.00.495.890 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.495.894 I 
0.00.495.933 I sampler seed: 1493555437
0.00.495.943 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.946 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.495.946 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.946 I 
 increably. [end of text]


0.00.774.124 I llama_perf_sampler_print:    sampling time =       0.71 ms /     5 runs   (    0.14 ms per token,  7022.47 tokens per second)
0.00.774.126 I llama_perf_context_print:        load time =     493.94 ms
0.00.774.127 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.774.129 I llama_perf_context_print:        eval time =     275.10 ms /     4 runs   (   68.77 ms per token,    14.54 tokens per second)
0.00.774.129 I llama_perf_context_print:       total time =     278.33 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.560 I build: 3921 (223c25a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.022.080 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.131 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.138 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.144 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.148 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.152 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.154 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.154 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.155 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.160 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.161 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.161 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.162 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.245 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.309 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.242 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.242 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.243 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.244 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.245 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.246 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.251 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.252 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.256 I llama_model_loader: - type  f32:   37 tensors
0.00.132.258 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.815 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.244.355 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.249.167 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.259.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.752 I llm_load_vocab: special tokens cache size = 5
0.00.280.627 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.645 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.646 I llm_load_print_meta: arch             = gemma
0.00.280.646 I llm_load_print_meta: vocab type       = SPM
0.00.280.647 I llm_load_print_meta: n_vocab          = 256000
0.00.280.648 I llm_load_print_meta: n_merges         = 0
0.00.280.648 I llm_load_print_meta: vocab_only       = 0
0.00.280.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.648 I llm_load_print_meta: n_embd           = 2048
0.00.280.649 I llm_load_print_meta: n_layer          = 18
0.00.280.660 I llm_load_print_meta: n_head           = 8
0.00.280.662 I llm_load_print_meta: n_head_kv        = 1
0.00.280.662 I llm_load_print_meta: n_rot            = 256
0.00.280.663 I llm_load_print_meta: n_swa            = 0
0.00.280.663 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.663 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.664 I llm_load_print_meta: n_gqa            = 8
0.00.280.665 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.670 I llm_load_print_meta: n_ff             = 16384
0.00.280.670 I llm_load_print_meta: n_expert         = 0
0.00.280.671 I llm_load_print_meta: n_expert_used    = 0
0.00.280.671 I llm_load_print_meta: causal attn      = 1
0.00.280.671 I llm_load_print_meta: pooling type     = 0
0.00.280.672 I llm_load_print_meta: rope type        = 2
0.00.280.672 I llm_load_print_meta: rope scaling     = linear
0.00.280.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.674 I llm_load_print_meta: freq_scale_train = 1
0.00.280.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.676 I llm_load_print_meta: model type       = 2B
0.00.280.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.677 I llm_load_print_meta: model params     = 2.51 B
0.00.280.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.680 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.680 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.681 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.682 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.682 I llm_load_print_meta: max token length = 93
0.00.280.710 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.356.137 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.356.144 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.356.145 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.356.145 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.356.146 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.356.147 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.361.249 I llama_new_context_with_model: n_ctx      = 8192
0.00.361.256 I llama_new_context_with_model: n_batch    = 2048
0.00.361.256 I llama_new_context_with_model: n_ubatch   = 512
0.00.361.257 I llama_new_context_with_model: flash_attn = 0
0.00.361.260 I llama_new_context_with_model: freq_base  = 10000.0
0.00.361.261 I llama_new_context_with_model: freq_scale = 1
0.00.390.486 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.390.500 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.390.589 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.456 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.391.463 I llama_new_context_with_model: graph nodes  = 601
0.00.391.463 I llama_new_context_with_model: graph splits = 1
0.00.391.465 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.077 I main: llama threadpool init, n_threads = 4
0.00.487.091 I 
0.00.487.168 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.172 I 
0.00.487.212 I sampler seed: 3264918730
0.00.487.222 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.225 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.487.225 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.226 I 
 increasities, and the resulting decline of the quality of life in the region. [end of text]


0.01.697.199 I llama_perf_sampler_print:    sampling time =       2.90 ms /    18 runs   (    0.16 ms per token,  6215.47 tokens per second)
0.01.697.202 I llama_perf_context_print:        load time =     485.21 ms
0.01.697.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.697.206 I llama_perf_context_print:        eval time =    1199.63 ms /    17 runs   (   70.57 ms per token,    14.17 tokens per second)
0.01.697.207 I llama_perf_context_print:       total time =    1210.13 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.583 I build: 3921 (223c25a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.862 I main: load the model and apply lora adapter, if any
0.00.022.631 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.682 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.689 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.698 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.699 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.704 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.705 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.713 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.714 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.715 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.715 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.716 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.375 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.760 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.741 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.742 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.743 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.743 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.744 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.745 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.749 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.750 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.750 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.751 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.755 I llama_model_loader: - type  f32:   37 tensors
0.00.133.758 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.610 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.570 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.257.112 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.262.074 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.272.930 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.610 I llm_load_vocab: special tokens cache size = 5
0.00.294.385 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.405 I llm_load_print_meta: arch             = gemma
0.00.294.406 I llm_load_print_meta: vocab type       = SPM
0.00.294.407 I llm_load_print_meta: n_vocab          = 256000
0.00.294.407 I llm_load_print_meta: n_merges         = 0
0.00.294.408 I llm_load_print_meta: vocab_only       = 0
0.00.294.408 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.408 I llm_load_print_meta: n_embd           = 2048
0.00.294.408 I llm_load_print_meta: n_layer          = 18
0.00.294.420 I llm_load_print_meta: n_head           = 8
0.00.294.421 I llm_load_print_meta: n_head_kv        = 1
0.00.294.422 I llm_load_print_meta: n_rot            = 256
0.00.294.422 I llm_load_print_meta: n_swa            = 0
0.00.294.423 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.423 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.424 I llm_load_print_meta: n_gqa            = 8
0.00.294.425 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.426 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.427 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.428 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.428 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.428 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.429 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.430 I llm_load_print_meta: n_ff             = 16384
0.00.294.430 I llm_load_print_meta: n_expert         = 0
0.00.294.430 I llm_load_print_meta: n_expert_used    = 0
0.00.294.431 I llm_load_print_meta: causal attn      = 1
0.00.294.431 I llm_load_print_meta: pooling type     = 0
0.00.294.431 I llm_load_print_meta: rope type        = 2
0.00.294.432 I llm_load_print_meta: rope scaling     = linear
0.00.294.433 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.434 I llm_load_print_meta: freq_scale_train = 1
0.00.294.434 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.434 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.435 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.435 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.435 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.435 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.436 I llm_load_print_meta: model type       = 2B
0.00.294.436 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.437 I llm_load_print_meta: model params     = 2.51 B
0.00.294.438 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.439 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.439 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.440 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.441 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.441 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.441 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.442 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.442 I llm_load_print_meta: max token length = 93
0.00.294.464 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.364.725 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.364.732 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.369.881 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.889 I llama_new_context_with_model: n_batch    = 2048
0.00.369.890 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.890 I llama_new_context_with_model: flash_attn = 0
0.00.369.894 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.895 I llama_new_context_with_model: freq_scale = 1
0.00.400.234 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.400.249 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.400.356 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.236 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.401.245 I llama_new_context_with_model: graph nodes  = 601
0.00.401.246 I llama_new_context_with_model: graph splits = 1
0.00.401.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.302 I main: llama threadpool init, n_threads = 4
0.00.500.315 I 
0.00.500.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.500.409 I 
0.00.500.449 I sampler seed: 2932336534
0.00.500.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.460 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.500.461 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.461 I 
 increasities in the 19th century that were rooted in class differences.

During this time, the middle class was characterized by:

a) Limited

0.02.970.894 I llama_perf_sampler_print:    sampling time =       5.54 ms /    33 runs   (    0.17 ms per token,  5953.45 tokens per second)
0.02.970.896 I llama_perf_context_print:        load time =     498.41 ms
0.02.970.898 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.970.899 I llama_perf_context_print:        eval time =    2451.51 ms /    32 runs   (   76.61 ms per token,    13.05 tokens per second)
0.02.970.900 I llama_perf_context_print:       total time =    2470.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.856s
user	0m28.018s
sys	0m9.529s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3921 (223c25a7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32027.67 ms
main:    total time = 32027.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 3921 (223c25a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.850 I main: load the model and apply lora adapter, if any
0.00.021.951 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.007 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.021 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.023 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.023 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.026 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.027 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.028 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.029 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.029 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.779 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.535 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.397 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.405 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.405 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.406 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.407 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.407 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.410 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.410 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.412 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.413 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.414 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.417 I llama_model_loader: - type  f32:   37 tensors
0.00.132.420 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.421 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.934 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.670 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.252.017 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.256.163 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.265.139 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.762 I llm_load_vocab: special tokens cache size = 5
0.00.286.491 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.510 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.511 I llm_load_print_meta: arch             = gemma
0.00.286.511 I llm_load_print_meta: vocab type       = SPM
0.00.286.512 I llm_load_print_meta: n_vocab          = 256000
0.00.286.513 I llm_load_print_meta: n_merges         = 0
0.00.286.513 I llm_load_print_meta: vocab_only       = 0
0.00.286.513 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.514 I llm_load_print_meta: n_embd           = 2048
0.00.286.514 I llm_load_print_meta: n_layer          = 18
0.00.286.526 I llm_load_print_meta: n_head           = 8
0.00.286.527 I llm_load_print_meta: n_head_kv        = 1
0.00.286.527 I llm_load_print_meta: n_rot            = 256
0.00.286.527 I llm_load_print_meta: n_swa            = 0
0.00.286.528 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.528 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.529 I llm_load_print_meta: n_gqa            = 8
0.00.286.530 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.531 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.531 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.533 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.535 I llm_load_print_meta: n_ff             = 16384
0.00.286.535 I llm_load_print_meta: n_expert         = 0
0.00.286.535 I llm_load_print_meta: n_expert_used    = 0
0.00.286.536 I llm_load_print_meta: causal attn      = 1
0.00.286.536 I llm_load_print_meta: pooling type     = 0
0.00.286.536 I llm_load_print_meta: rope type        = 2
0.00.286.537 I llm_load_print_meta: rope scaling     = linear
0.00.286.538 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.539 I llm_load_print_meta: freq_scale_train = 1
0.00.286.539 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.539 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.540 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.540 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.540 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.541 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.541 I llm_load_print_meta: model type       = 2B
0.00.286.542 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.543 I llm_load_print_meta: model params     = 2.51 B
0.00.286.544 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.544 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.545 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.545 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.545 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.546 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.546 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.546 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.547 I llm_load_print_meta: max token length = 93
0.00.286.567 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.345.740 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.345.749 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.345.750 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.345.750 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.345.751 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.345.751 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.350.770 I llama_new_context_with_model: n_ctx      = 8192
0.00.350.776 I llama_new_context_with_model: n_batch    = 2048
0.00.350.776 I llama_new_context_with_model: n_ubatch   = 512
0.00.350.777 I llama_new_context_with_model: flash_attn = 0
0.00.350.779 I llama_new_context_with_model: freq_base  = 10000.0
0.00.350.780 I llama_new_context_with_model: freq_scale = 1
0.00.379.404 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.379.430 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.379.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.373 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.380.380 I llama_new_context_with_model: graph nodes  = 601
0.00.380.380 I llama_new_context_with_model: graph splits = 1
0.00.380.383 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.547 I main: llama threadpool init, n_threads = 4
0.00.461.559 I 
0.00.461.634 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.638 I 
0.00.461.679 I sampler seed: 83741582
0.00.461.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.693 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.461.694 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.694 I 
 maneuvously. The sun was shining brightly, the birds were singing merrily, and the flowers were blooming in all their glory.

This idyllic scene seemed to

0.02.130.382 I llama_perf_sampler_print:    sampling time =       5.91 ms /    33 runs   (    0.18 ms per token,  5586.59 tokens per second)
0.02.130.384 I llama_perf_context_print:        load time =     459.67 ms
0.02.130.386 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.130.387 I llama_perf_context_print:        eval time =    1649.55 ms /    32 runs   (   51.55 ms per token,    19.40 tokens per second)
0.02.130.388 I llama_perf_context_print:       total time =    1668.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3921 (223c25a7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32119.08 ms
main:    total time = 32119.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 3921 (223c25a7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.001.835 I main: load the model and apply lora adapter, if any
0.00.021.849 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.861 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.872 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.873 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.877 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.878 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.879 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.879 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.880 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.880 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.884 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.884 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.885 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.886 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.886 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.267 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.403 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.414 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.415 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.416 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.420 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.421 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.424 I llama_model_loader: - type  f32:   37 tensors
0.00.132.427 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.428 I llama_model_loader: - type q6_K:   19 tensors
0.00.222.819 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.662 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.261.342 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.266.406 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.276.648 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.272 I llm_load_vocab: special tokens cache size = 5
0.00.297.994 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.298.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.298.010 I llm_load_print_meta: arch             = gemma
0.00.298.010 I llm_load_print_meta: vocab type       = SPM
0.00.298.011 I llm_load_print_meta: n_vocab          = 256000
0.00.298.011 I llm_load_print_meta: n_merges         = 0
0.00.298.011 I llm_load_print_meta: vocab_only       = 0
0.00.298.012 I llm_load_print_meta: n_ctx_train      = 8192
0.00.298.012 I llm_load_print_meta: n_embd           = 2048
0.00.298.013 I llm_load_print_meta: n_layer          = 18
0.00.298.024 I llm_load_print_meta: n_head           = 8
0.00.298.025 I llm_load_print_meta: n_head_kv        = 1
0.00.298.025 I llm_load_print_meta: n_rot            = 256
0.00.298.025 I llm_load_print_meta: n_swa            = 0
0.00.298.026 I llm_load_print_meta: n_embd_head_k    = 256
0.00.298.026 I llm_load_print_meta: n_embd_head_v    = 256
0.00.298.027 I llm_load_print_meta: n_gqa            = 8
0.00.298.028 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.298.029 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.298.029 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.298.031 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.298.031 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.298.031 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.298.031 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.298.032 I llm_load_print_meta: n_ff             = 16384
0.00.298.032 I llm_load_print_meta: n_expert         = 0
0.00.298.033 I llm_load_print_meta: n_expert_used    = 0
0.00.298.033 I llm_load_print_meta: causal attn      = 1
0.00.298.033 I llm_load_print_meta: pooling type     = 0
0.00.298.034 I llm_load_print_meta: rope type        = 2
0.00.298.034 I llm_load_print_meta: rope scaling     = linear
0.00.298.036 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.298.036 I llm_load_print_meta: freq_scale_train = 1
0.00.298.037 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.298.037 I llm_load_print_meta: rope_finetuned   = unknown
0.00.298.037 I llm_load_print_meta: ssm_d_conv       = 0
0.00.298.038 I llm_load_print_meta: ssm_d_inner      = 0
0.00.298.038 I llm_load_print_meta: ssm_d_state      = 0
0.00.298.038 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.298.038 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.298.039 I llm_load_print_meta: model type       = 2B
0.00.298.039 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.298.040 I llm_load_print_meta: model params     = 2.51 B
0.00.298.041 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.298.041 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.298.042 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.298.042 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.298.042 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.298.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.298.043 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.298.043 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.298.043 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.298.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.298.044 I llm_load_print_meta: max token length = 93
0.00.298.066 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.355.915 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.360.865 I llama_new_context_with_model: n_ctx      = 8192
0.00.360.871 I llama_new_context_with_model: n_batch    = 2048
0.00.360.872 I llama_new_context_with_model: n_ubatch   = 512
0.00.360.872 I llama_new_context_with_model: flash_attn = 0
0.00.360.875 I llama_new_context_with_model: freq_base  = 10000.0
0.00.360.876 I llama_new_context_with_model: freq_scale = 1
0.00.391.322 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.391.339 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.391.438 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.303 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.392.310 I llama_new_context_with_model: graph nodes  = 601
0.00.392.311 I llama_new_context_with_model: graph splits = 1
0.00.392.313 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.408 I main: llama threadpool init, n_threads = 4
0.00.473.420 I 
0.00.473.499 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.473.502 I 
0.00.473.542 I sampler seed: 992189175
0.00.473.552 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.555 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.473.555 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.555 I 
 encomporn by the devil himself.

This is the passage I am trying to analyze.

I am having trouble understanding the meaning of the phrase "spiritu

0.02.142.606 I llama_perf_sampler_print:    sampling time =       5.63 ms /    33 runs   (    0.17 ms per token,  5859.38 tokens per second)
0.02.142.609 I llama_perf_context_print:        load time =     471.55 ms
0.02.142.610 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.142.612 I llama_perf_context_print:        eval time =    1650.13 ms /    32 runs   (   51.57 ms per token,    19.39 tokens per second)
0.02.142.613 I llama_perf_context_print:       total time =    1669.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.399s
user	8m15.894s
sys	0m6.953s
