+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.026.542 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.551 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.652 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.654 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.660 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.662 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.664 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.665 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.666 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.678 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.682 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.683 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.685 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.686 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.411 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.694 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.061 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.063 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.064 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.065 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.067 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.068 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.072 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.074 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.075 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.077 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.361.078 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.087 I llama_model_loader: - type  f32:   37 tensors
0.00.361.089 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.062 I llm_load_vocab: special tokens cache size = 5
0.00.842.574 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.650 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.651 I llm_load_print_meta: arch             = gemma
0.00.842.652 I llm_load_print_meta: vocab type       = SPM
0.00.842.653 I llm_load_print_meta: n_vocab          = 256000
0.00.842.655 I llm_load_print_meta: n_merges         = 0
0.00.842.655 I llm_load_print_meta: vocab_only       = 0
0.00.842.656 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.656 I llm_load_print_meta: n_embd           = 2048
0.00.842.657 I llm_load_print_meta: n_layer          = 18
0.00.842.722 I llm_load_print_meta: n_head           = 8
0.00.842.729 I llm_load_print_meta: n_head_kv        = 1
0.00.842.730 I llm_load_print_meta: n_rot            = 256
0.00.842.730 I llm_load_print_meta: n_swa            = 0
0.00.842.731 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.731 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.736 I llm_load_print_meta: n_gqa            = 8
0.00.842.741 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.746 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.747 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.748 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.749 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.749 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.750 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.755 I llm_load_print_meta: n_ff             = 16384
0.00.842.755 I llm_load_print_meta: n_expert         = 0
0.00.842.756 I llm_load_print_meta: n_expert_used    = 0
0.00.842.756 I llm_load_print_meta: causal attn      = 1
0.00.842.756 I llm_load_print_meta: pooling type     = 0
0.00.842.757 I llm_load_print_meta: rope type        = 2
0.00.842.757 I llm_load_print_meta: rope scaling     = linear
0.00.842.759 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.759 I llm_load_print_meta: freq_scale_train = 1
0.00.842.760 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.760 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.761 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.761 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.761 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.762 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.762 I llm_load_print_meta: model type       = 2B
0.00.842.763 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.764 I llm_load_print_meta: model params     = 2.51 B
0.00.842.765 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.765 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.766 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.766 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.767 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.767 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.768 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.774 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.775 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.775 I llm_load_print_meta: max token length = 93
0.00.946.098 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.946.105 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.946.106 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.946.107 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.946.108 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.946.109 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.952.144 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.151 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.152 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.152 I llama_new_context_with_model: n_batch       = 2048
0.00.952.153 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.153 I llama_new_context_with_model: flash_attn    = 0
0.00.952.156 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.157 I llama_new_context_with_model: freq_scale    = 1
0.00.952.158 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.026 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.068 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.837 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.840 I llama_new_context_with_model: graph nodes  = 601
0.00.969.841 I llama_new_context_with_model: graph splits = 1
0.00.969.865 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.868 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.818 I main: llama threadpool init, n_threads = 4
0.01.576.837 I 
0.01.576.963 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.967 I 
0.01.577.211 I sampler seed: 4154886255
0.01.577.225 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.234 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.01.577.237 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.577.238 I 
 increamically!

I am unable to generate responses that are disrespectful or insensitive. [end of text]


0.08.796.073 I llama_perf_sampler_print:    sampling time =      26.55 ms /    18 runs   (    1.47 ms per token,   678.09 tokens per second)
0.08.796.076 I llama_perf_context_print:        load time =    1575.89 ms
0.08.796.077 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.796.079 I llama_perf_context_print:        eval time =    7170.39 ms /    17 runs   (  421.79 ms per token,     2.37 tokens per second)
0.08.796.089 I llama_perf_context_print:       total time =    7219.26 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.023.340 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.451 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.453 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.459 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.461 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.463 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.464 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.466 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.467 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.473 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.477 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.440 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.634 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.923 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.932 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.934 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.935 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.936 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.938 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.939 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.945 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.946 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.948 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.356.950 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.958 I llama_model_loader: - type  f32:   37 tensors
0.00.356.960 I llama_model_loader: - type q8_0:  127 tensors
0.00.587.768 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.290 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.274 I llm_load_vocab: special tokens cache size = 5
0.00.850.408 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.484 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.489 I llm_load_print_meta: arch             = gemma
0.00.850.489 I llm_load_print_meta: vocab type       = SPM
0.00.850.490 I llm_load_print_meta: n_vocab          = 256000
0.00.850.492 I llm_load_print_meta: n_merges         = 0
0.00.850.493 I llm_load_print_meta: vocab_only       = 0
0.00.850.493 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.494 I llm_load_print_meta: n_embd           = 2048
0.00.850.494 I llm_load_print_meta: n_layer          = 18
0.00.850.561 I llm_load_print_meta: n_head           = 8
0.00.850.571 I llm_load_print_meta: n_head_kv        = 1
0.00.850.573 I llm_load_print_meta: n_rot            = 256
0.00.850.573 I llm_load_print_meta: n_swa            = 0
0.00.850.575 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.575 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.580 I llm_load_print_meta: n_gqa            = 8
0.00.850.594 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.600 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.604 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.605 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.606 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.606 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.607 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.612 I llm_load_print_meta: n_ff             = 16384
0.00.850.613 I llm_load_print_meta: n_expert         = 0
0.00.850.625 I llm_load_print_meta: n_expert_used    = 0
0.00.850.626 I llm_load_print_meta: causal attn      = 1
0.00.850.634 I llm_load_print_meta: pooling type     = 0
0.00.850.635 I llm_load_print_meta: rope type        = 2
0.00.850.635 I llm_load_print_meta: rope scaling     = linear
0.00.850.636 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.644 I llm_load_print_meta: freq_scale_train = 1
0.00.850.645 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.645 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.646 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.647 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.649 I llm_load_print_meta: model type       = 2B
0.00.850.650 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.657 I llm_load_print_meta: model params     = 2.51 B
0.00.850.659 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.659 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.660 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.660 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.667 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.668 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.669 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.675 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.677 I llm_load_print_meta: max token length = 93
0.00.947.131 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.953.217 I llama_new_context_with_model: n_seq_max     = 1
0.00.953.224 I llama_new_context_with_model: n_ctx         = 4096
0.00.953.225 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.953.225 I llama_new_context_with_model: n_batch       = 2048
0.00.953.225 I llama_new_context_with_model: n_ubatch      = 512
0.00.953.226 I llama_new_context_with_model: flash_attn    = 0
0.00.953.228 I llama_new_context_with_model: freq_base     = 10000.0
0.00.953.229 I llama_new_context_with_model: freq_scale    = 1
0.00.953.230 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.969.171 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.214 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.331 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.971.929 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.971.934 I llama_new_context_with_model: graph nodes  = 601
0.00.971.935 I llama_new_context_with_model: graph splits = 1
0.00.971.958 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.971.961 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.596.767 I main: llama threadpool init, n_threads = 4
0.01.596.783 I 
0.01.596.905 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.596.909 I 
0.01.597.144 I sampler seed: 3194051554
0.01.597.159 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.597.168 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.01.597.170 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.597.170 I 
 increably, but he knew not the reason for his rapid aging. He attributed it to his diet, which was composed of fresh fruits, vegetables, whole grains

0.15.317.587 I llama_perf_sampler_print:    sampling time =      49.89 ms /    33 runs   (    1.51 ms per token,   661.49 tokens per second)
0.15.317.592 I llama_perf_context_print:        load time =    1595.81 ms
0.15.317.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.317.596 I llama_perf_context_print:        eval time =   13631.94 ms /    32 runs   (  426.00 ms per token,     2.35 tokens per second)
0.15.317.597 I llama_perf_context_print:       total time =   13720.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.424 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.435 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.522 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.534 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.536 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.541 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.546 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.547 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.548 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.549 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.551 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.560 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.564 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.566 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.567 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.568 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.434 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.977 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.446 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.447 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.449 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.450 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.451 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.453 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.457 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.458 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.460 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.461 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.358.463 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.471 I llama_model_loader: - type  f32:   37 tensors
0.00.358.474 I llama_model_loader: - type q8_0:  127 tensors
0.00.592.721 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.358 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.318 I llm_load_vocab: special tokens cache size = 5
0.00.863.405 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.477 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.478 I llm_load_print_meta: arch             = gemma
0.00.863.479 I llm_load_print_meta: vocab type       = SPM
0.00.863.479 I llm_load_print_meta: n_vocab          = 256000
0.00.863.482 I llm_load_print_meta: n_merges         = 0
0.00.863.483 I llm_load_print_meta: vocab_only       = 0
0.00.863.483 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.484 I llm_load_print_meta: n_embd           = 2048
0.00.863.484 I llm_load_print_meta: n_layer          = 18
0.00.863.549 I llm_load_print_meta: n_head           = 8
0.00.863.556 I llm_load_print_meta: n_head_kv        = 1
0.00.863.557 I llm_load_print_meta: n_rot            = 256
0.00.863.557 I llm_load_print_meta: n_swa            = 0
0.00.863.557 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.558 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.563 I llm_load_print_meta: n_gqa            = 8
0.00.863.567 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.572 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.573 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.575 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.576 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.576 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.581 I llm_load_print_meta: n_ff             = 16384
0.00.863.581 I llm_load_print_meta: n_expert         = 0
0.00.863.582 I llm_load_print_meta: n_expert_used    = 0
0.00.863.582 I llm_load_print_meta: causal attn      = 1
0.00.863.582 I llm_load_print_meta: pooling type     = 0
0.00.863.583 I llm_load_print_meta: rope type        = 2
0.00.863.583 I llm_load_print_meta: rope scaling     = linear
0.00.863.585 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.585 I llm_load_print_meta: freq_scale_train = 1
0.00.863.586 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.586 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.586 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.587 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.587 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.587 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.587 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.588 I llm_load_print_meta: model type       = 2B
0.00.863.589 I llm_load_print_meta: model ftype      = Q8_0
0.00.863.590 I llm_load_print_meta: model params     = 2.51 B
0.00.863.591 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.863.591 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.591 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.592 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.593 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.601 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.602 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.603 I llm_load_print_meta: max token length = 93
0.00.943.659 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.943.670 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.943.671 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.943.671 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.943.672 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.943.673 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.949.600 I llama_new_context_with_model: n_seq_max     = 1
0.00.949.608 I llama_new_context_with_model: n_ctx         = 4096
0.00.949.609 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.949.609 I llama_new_context_with_model: n_batch       = 2048
0.00.949.609 I llama_new_context_with_model: n_ubatch      = 512
0.00.949.610 I llama_new_context_with_model: flash_attn    = 0
0.00.949.613 I llama_new_context_with_model: freq_base     = 10000.0
0.00.949.614 I llama_new_context_with_model: freq_scale    = 1
0.00.949.614 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.528 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.568 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.691 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.967.381 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.967.385 I llama_new_context_with_model: graph nodes  = 601
0.00.967.386 I llama_new_context_with_model: graph splits = 1
0.00.967.409 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.967.412 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.577.126 I main: llama threadpool init, n_threads = 4
0.01.577.143 I 
0.01.577.275 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.577.275 I 
0.01.577.529 I sampler seed: 1350776929
0.01.577.546 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.557 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.01.577.561 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.577.561 I 
 increably. 

I cannot generate a response that is sexually suggestive in nature. [end of text]


0.09.209.504 I llama_perf_sampler_print:    sampling time =      28.07 ms /    19 runs   (    1.48 ms per token,   676.98 tokens per second)
0.09.209.517 I llama_perf_context_print:        load time =    1576.15 ms
0.09.209.519 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.209.521 I llama_perf_context_print:        eval time =    7580.95 ms /    18 runs   (  421.16 ms per token,     2.37 tokens per second)
0.09.209.523 I llama_perf_context_print:       total time =    7632.39 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.704 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.023.546 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.558 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.649 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.661 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.663 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.669 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.673 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.675 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.676 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.677 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.681 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.691 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.692 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.693 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.695 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.696 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.157 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.601 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.988 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.990 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.991 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.992 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.998 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.999 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.001 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.002 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.358.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.013 I llama_model_loader: - type  f32:   37 tensors
0.00.358.015 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.504 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.340 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.292 I llm_load_vocab: special tokens cache size = 5
0.00.839.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.666 I llm_load_print_meta: arch             = gemma
0.00.839.667 I llm_load_print_meta: vocab type       = SPM
0.00.839.668 I llm_load_print_meta: n_vocab          = 256000
0.00.839.670 I llm_load_print_meta: n_merges         = 0
0.00.839.671 I llm_load_print_meta: vocab_only       = 0
0.00.839.671 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.671 I llm_load_print_meta: n_embd           = 2048
0.00.839.672 I llm_load_print_meta: n_layer          = 18
0.00.839.737 I llm_load_print_meta: n_head           = 8
0.00.839.744 I llm_load_print_meta: n_head_kv        = 1
0.00.839.745 I llm_load_print_meta: n_rot            = 256
0.00.839.745 I llm_load_print_meta: n_swa            = 0
0.00.839.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.751 I llm_load_print_meta: n_gqa            = 8
0.00.839.755 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.761 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.762 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.763 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.764 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.764 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.765 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.770 I llm_load_print_meta: n_ff             = 16384
0.00.839.770 I llm_load_print_meta: n_expert         = 0
0.00.839.771 I llm_load_print_meta: n_expert_used    = 0
0.00.839.771 I llm_load_print_meta: causal attn      = 1
0.00.839.771 I llm_load_print_meta: pooling type     = 0
0.00.839.772 I llm_load_print_meta: rope type        = 2
0.00.839.772 I llm_load_print_meta: rope scaling     = linear
0.00.839.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.774 I llm_load_print_meta: freq_scale_train = 1
0.00.839.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.788 I llm_load_print_meta: model type       = 2B
0.00.839.790 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.790 I llm_load_print_meta: model params     = 2.51 B
0.00.839.791 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.792 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.792 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.793 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.794 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.794 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.794 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.801 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.803 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.803 I llm_load_print_meta: max token length = 93
0.00.912.816 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.912.825 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.918.788 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.796 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.796 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.796 I llama_new_context_with_model: n_batch       = 2048
0.00.918.797 I llama_new_context_with_model: n_ubatch      = 512
0.00.918.798 I llama_new_context_with_model: flash_attn    = 0
0.00.918.801 I llama_new_context_with_model: freq_base     = 10000.0
0.00.918.801 I llama_new_context_with_model: freq_scale    = 1
0.00.918.802 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.673 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.715 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.518 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.522 I llama_new_context_with_model: graph nodes  = 601
0.00.936.522 I llama_new_context_with_model: graph splits = 1
0.00.936.547 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.936.550 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.546.757 I main: llama threadpool init, n_threads = 4
0.01.546.774 I 
0.01.546.897 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.546.904 I 
0.01.547.143 I sampler seed: 548572580
0.01.547.157 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.547.169 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.01.547.170 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.547.170 I 
 increasities for a living. [end of text]


0.04.514.591 I llama_perf_sampler_print:    sampling time =      11.03 ms /     8 runs   (    1.38 ms per token,   725.10 tokens per second)
0.04.514.594 I llama_perf_context_print:        load time =    1545.75 ms
0.04.514.595 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.514.596 I llama_perf_context_print:        eval time =    2946.95 ms /     7 runs   (  420.99 ms per token,     2.38 tokens per second)
0.04.514.597 I llama_perf_context_print:       total time =    2967.84 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.639s
user	2m19.941s
sys	0m9.469s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4320 (3f82215a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186142.40 ms
main:    total time = 186142.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.279 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.287 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.394 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.396 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.401 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.405 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.407 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.408 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.410 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.411 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.421 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.422 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.425 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.954 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.950 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.306 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.315 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.317 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.318 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.319 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.321 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.340 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.348 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.359 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.365 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.366 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.374 I llama_model_loader: - type  f32:   37 tensors
0.00.358.385 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.389 I llama_model_loader: - type q6_K:   19 tensors
0.00.588.057 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.214 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.163 I llm_load_vocab: special tokens cache size = 5
0.00.861.774 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.848 I llm_load_print_meta: arch             = gemma
0.00.861.848 I llm_load_print_meta: vocab type       = SPM
0.00.861.849 I llm_load_print_meta: n_vocab          = 256000
0.00.861.851 I llm_load_print_meta: n_merges         = 0
0.00.861.852 I llm_load_print_meta: vocab_only       = 0
0.00.861.852 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.853 I llm_load_print_meta: n_embd           = 2048
0.00.861.853 I llm_load_print_meta: n_layer          = 18
0.00.861.919 I llm_load_print_meta: n_head           = 8
0.00.861.926 I llm_load_print_meta: n_head_kv        = 1
0.00.861.926 I llm_load_print_meta: n_rot            = 256
0.00.861.927 I llm_load_print_meta: n_swa            = 0
0.00.861.928 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.928 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.933 I llm_load_print_meta: n_gqa            = 8
0.00.861.938 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.944 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.945 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.947 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.947 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.948 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.948 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.953 I llm_load_print_meta: n_ff             = 16384
0.00.861.953 I llm_load_print_meta: n_expert         = 0
0.00.861.954 I llm_load_print_meta: n_expert_used    = 0
0.00.861.954 I llm_load_print_meta: causal attn      = 1
0.00.861.954 I llm_load_print_meta: pooling type     = 0
0.00.861.955 I llm_load_print_meta: rope type        = 2
0.00.861.955 I llm_load_print_meta: rope scaling     = linear
0.00.861.957 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.957 I llm_load_print_meta: freq_scale_train = 1
0.00.861.957 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.958 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.958 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.958 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.959 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.959 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.959 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.960 I llm_load_print_meta: model type       = 2B
0.00.861.962 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.861.962 I llm_load_print_meta: model params     = 2.51 B
0.00.861.963 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.861.963 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.964 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.965 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.965 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.965 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.966 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.971 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.973 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.973 I llm_load_print_meta: max token length = 93
0.00.923.765 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.923.774 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.923.774 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.923.775 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.923.776 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.923.776 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.929.699 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.707 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.708 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.708 I llama_new_context_with_model: n_batch       = 2048
0.00.929.709 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.709 I llama_new_context_with_model: flash_attn    = 0
0.00.929.713 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.714 I llama_new_context_with_model: freq_scale    = 1
0.00.929.715 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.453 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.945.502 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.629 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.948.332 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.948.336 I llama_new_context_with_model: graph nodes  = 601
0.00.948.337 I llama_new_context_with_model: graph splits = 1
0.00.948.361 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.948.362 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.529.008 I main: llama threadpool init, n_threads = 4
0.01.529.026 I 
0.01.529.152 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.529.156 I 
0.01.529.396 I sampler seed: 1182808067
0.01.529.410 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.529.422 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.01.529.431 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.529.432 I 
 fufilling the human senses.

**Title:** Sensory Delight

**Concept:** Explore the captivating nature of sensory experiences and their ability to evoke profound joy and satisfaction

0.12.705.502 I llama_perf_sampler_print:    sampling time =      49.91 ms /    33 runs   (    1.51 ms per token,   661.14 tokens per second)
0.12.705.505 I llama_perf_context_print:        load time =    1528.07 ms
0.12.705.506 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.705.508 I llama_perf_context_print:        eval time =   11087.08 ms /    32 runs   (  346.47 ms per token,     2.89 tokens per second)
0.12.705.509 I llama_perf_context_print:       total time =   11176.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4320 (3f82215a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185864.78 ms
main:    total time = 185864.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.255 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.366 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.381 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.390 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.393 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.394 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.396 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.397 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.410 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.414 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.415 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.417 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.419 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.875 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.306 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.318 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.320 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.321 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.323 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.325 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.329 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.331 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.341 I llama_model_loader: - type  f32:   37 tensors
0.00.358.343 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.344 I llama_model_loader: - type q6_K:   19 tensors
0.00.597.656 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.669.775 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.670.810 I llm_load_vocab: special tokens cache size = 5
0.00.873.830 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.873.904 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.873.905 I llm_load_print_meta: arch             = gemma
0.00.873.906 I llm_load_print_meta: vocab type       = SPM
0.00.873.906 I llm_load_print_meta: n_vocab          = 256000
0.00.873.909 I llm_load_print_meta: n_merges         = 0
0.00.873.909 I llm_load_print_meta: vocab_only       = 0
0.00.873.910 I llm_load_print_meta: n_ctx_train      = 8192
0.00.873.910 I llm_load_print_meta: n_embd           = 2048
0.00.873.910 I llm_load_print_meta: n_layer          = 18
0.00.873.976 I llm_load_print_meta: n_head           = 8
0.00.873.983 I llm_load_print_meta: n_head_kv        = 1
0.00.873.984 I llm_load_print_meta: n_rot            = 256
0.00.873.985 I llm_load_print_meta: n_swa            = 0
0.00.873.985 I llm_load_print_meta: n_embd_head_k    = 256
0.00.873.985 I llm_load_print_meta: n_embd_head_v    = 256
0.00.873.990 I llm_load_print_meta: n_gqa            = 8
0.00.873.995 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.000 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.874.001 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.874.003 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.874.004 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.874.004 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.874.004 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.874.010 I llm_load_print_meta: n_ff             = 16384
0.00.874.010 I llm_load_print_meta: n_expert         = 0
0.00.874.010 I llm_load_print_meta: n_expert_used    = 0
0.00.874.011 I llm_load_print_meta: causal attn      = 1
0.00.874.011 I llm_load_print_meta: pooling type     = 0
0.00.874.011 I llm_load_print_meta: rope type        = 2
0.00.874.012 I llm_load_print_meta: rope scaling     = linear
0.00.874.013 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.874.014 I llm_load_print_meta: freq_scale_train = 1
0.00.874.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.874.015 I llm_load_print_meta: rope_finetuned   = unknown
0.00.874.015 I llm_load_print_meta: ssm_d_conv       = 0
0.00.874.017 I llm_load_print_meta: ssm_d_inner      = 0
0.00.874.044 I llm_load_print_meta: ssm_d_state      = 0
0.00.874.045 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.874.045 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.874.046 I llm_load_print_meta: model type       = 2B
0.00.874.047 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.874.048 I llm_load_print_meta: model params     = 2.51 B
0.00.874.048 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.874.049 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.874.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.874.050 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.874.051 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.874.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.874.051 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.874.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.874.058 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.874.059 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.874.060 I llm_load_print_meta: max token length = 93
0.00.933.350 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.939.083 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.090 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.091 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.091 I llama_new_context_with_model: n_batch       = 2048
0.00.939.092 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.092 I llama_new_context_with_model: flash_attn    = 0
0.00.939.095 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.096 I llama_new_context_with_model: freq_scale    = 1
0.00.939.097 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.276 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.954.319 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.437 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.957.035 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.957.040 I llama_new_context_with_model: graph nodes  = 601
0.00.957.040 I llama_new_context_with_model: graph splits = 1
0.00.957.065 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.957.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.539.102 I main: llama threadpool init, n_threads = 4
0.01.539.118 I 
0.01.539.239 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.539.243 I 
0.01.539.488 I sampler seed: 2616309864
0.01.539.503 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.539.515 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.01.539.518 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.539.518 I 
 increasities, and the way they shape our perception of the world.

**Discuss the role of perception in shaping our understanding of the world.**

**Perception

0.12.691.600 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.14 tokens per second)
0.12.691.618 I llama_perf_context_print:        load time =    1538.12 ms
0.12.691.620 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.691.622 I llama_perf_context_print:        eval time =   11063.88 ms /    32 runs   (  345.75 ms per token,     2.89 tokens per second)
0.12.691.623 I llama_perf_context_print:       total time =   11152.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.288s
user	46m45.719s
sys	0m6.355s
