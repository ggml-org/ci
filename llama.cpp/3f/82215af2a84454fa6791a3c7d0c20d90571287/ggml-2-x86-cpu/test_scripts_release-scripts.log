+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.583 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.593 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.601 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.606 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.610 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.611 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.612 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.612 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.619 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.620 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.396 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.934 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.912 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.919 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.919 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.920 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.920 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.921 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.922 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.925 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.925 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.926 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.926 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.927 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.932 I llama_model_loader: - type  f32:   37 tensors
0.00.132.933 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.563 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.298 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.035 I llm_load_vocab: special tokens cache size = 5
0.00.281.203 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.225 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.225 I llm_load_print_meta: arch             = gemma
0.00.281.226 I llm_load_print_meta: vocab type       = SPM
0.00.281.227 I llm_load_print_meta: n_vocab          = 256000
0.00.281.227 I llm_load_print_meta: n_merges         = 0
0.00.281.227 I llm_load_print_meta: vocab_only       = 0
0.00.281.228 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.228 I llm_load_print_meta: n_embd           = 2048
0.00.281.228 I llm_load_print_meta: n_layer          = 18
0.00.281.241 I llm_load_print_meta: n_head           = 8
0.00.281.242 I llm_load_print_meta: n_head_kv        = 1
0.00.281.242 I llm_load_print_meta: n_rot            = 256
0.00.281.243 I llm_load_print_meta: n_swa            = 0
0.00.281.243 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.243 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.244 I llm_load_print_meta: n_gqa            = 8
0.00.281.246 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.246 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.247 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.249 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.249 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.249 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.250 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.250 I llm_load_print_meta: n_ff             = 16384
0.00.281.251 I llm_load_print_meta: n_expert         = 0
0.00.281.251 I llm_load_print_meta: n_expert_used    = 0
0.00.281.251 I llm_load_print_meta: causal attn      = 1
0.00.281.251 I llm_load_print_meta: pooling type     = 0
0.00.281.252 I llm_load_print_meta: rope type        = 2
0.00.281.252 I llm_load_print_meta: rope scaling     = linear
0.00.281.254 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.254 I llm_load_print_meta: freq_scale_train = 1
0.00.281.255 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.255 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.255 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.255 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.256 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.256 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.257 I llm_load_print_meta: model type       = 2B
0.00.281.257 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.258 I llm_load_print_meta: model params     = 2.51 B
0.00.281.259 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.259 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.259 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.260 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.260 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.260 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.261 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.261 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.261 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.262 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.262 I llm_load_print_meta: max token length = 93
0.00.381.044 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.381.054 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.381.054 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.381.055 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.381.056 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.381.056 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.386.438 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.445 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.446 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.446 I llama_new_context_with_model: n_batch       = 2048
0.00.386.446 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.447 I llama_new_context_with_model: flash_attn    = 0
0.00.386.451 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.451 I llama_new_context_with_model: freq_scale    = 1
0.00.386.453 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.401.220 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.401.236 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.401.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.553 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.402.559 I llama_new_context_with_model: graph nodes  = 601
0.00.402.560 I llama_new_context_with_model: graph splits = 1
0.00.402.562 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.402.563 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.274 I main: llama threadpool init, n_threads = 4
0.00.488.290 I 
0.00.488.361 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.488.364 I 
0.00.488.407 I sampler seed: 472594368
0.00.488.417 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.430 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.00.488.433 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.433 I 
 increasities, the act of seeking revenge or retribution.

**Synonyms:** retribution, vengeance, wrath, anger, animosity, hostility, vengeance, hatred, grudge

0.02.789.899 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7034.75 tokens per second)
0.02.789.901 I llama_perf_context_print:        load time =     487.52 ms
0.02.789.903 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.789.904 I llama_perf_context_print:        eval time =    2282.83 ms /    32 runs   (   71.34 ms per token,    14.02 tokens per second)
0.02.789.905 I llama_perf_context_print:       total time =    2301.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.575 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.270 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.294 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.295 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.301 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.303 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.303 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.304 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.304 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.305 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.309 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.310 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.311 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.311 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.311 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.267 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.784 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.756 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.757 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.758 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.758 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.759 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.760 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.765 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.769 I llama_model_loader: - type  f32:   37 tensors
0.00.132.771 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.288 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.272 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.999 I llm_load_vocab: special tokens cache size = 5
0.00.288.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.432 I llm_load_print_meta: arch             = gemma
0.00.288.433 I llm_load_print_meta: vocab type       = SPM
0.00.288.434 I llm_load_print_meta: n_vocab          = 256000
0.00.288.434 I llm_load_print_meta: n_merges         = 0
0.00.288.435 I llm_load_print_meta: vocab_only       = 0
0.00.288.435 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.435 I llm_load_print_meta: n_embd           = 2048
0.00.288.436 I llm_load_print_meta: n_layer          = 18
0.00.288.448 I llm_load_print_meta: n_head           = 8
0.00.288.449 I llm_load_print_meta: n_head_kv        = 1
0.00.288.449 I llm_load_print_meta: n_rot            = 256
0.00.288.449 I llm_load_print_meta: n_swa            = 0
0.00.288.450 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.450 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.451 I llm_load_print_meta: n_gqa            = 8
0.00.288.452 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.453 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.454 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.455 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.455 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.456 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.457 I llm_load_print_meta: n_ff             = 16384
0.00.288.457 I llm_load_print_meta: n_expert         = 0
0.00.288.457 I llm_load_print_meta: n_expert_used    = 0
0.00.288.457 I llm_load_print_meta: causal attn      = 1
0.00.288.458 I llm_load_print_meta: pooling type     = 0
0.00.288.458 I llm_load_print_meta: rope type        = 2
0.00.288.458 I llm_load_print_meta: rope scaling     = linear
0.00.288.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.460 I llm_load_print_meta: freq_scale_train = 1
0.00.288.461 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.462 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.462 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.462 I llm_load_print_meta: model type       = 2B
0.00.288.463 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.464 I llm_load_print_meta: model params     = 2.51 B
0.00.288.464 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.466 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.467 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.467 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.467 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.468 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.468 I llm_load_print_meta: max token length = 93
0.00.382.370 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.387.758 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.765 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.766 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.766 I llama_new_context_with_model: n_batch       = 2048
0.00.387.766 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.767 I llama_new_context_with_model: flash_attn    = 0
0.00.387.770 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.771 I llama_new_context_with_model: freq_scale    = 1
0.00.387.771 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.403.775 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.792 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.893 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.226 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.234 I llama_new_context_with_model: graph nodes  = 601
0.00.405.234 I llama_new_context_with_model: graph splits = 1
0.00.405.237 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.405.237 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.025 I main: llama threadpool init, n_threads = 4
0.00.489.041 I 
0.00.489.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.489.125 I 
0.00.489.173 I sampler seed: 3588112160
0.00.489.184 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.199 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.00.489.203 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.203 I 
 seconally, with proper use of headings and subheadings.

**The Importance of Education**

**Definition:** Education is the process of acquiring knowledge, skills

0.02.708.663 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6864.99 tokens per second)
0.02.708.665 I llama_perf_context_print:        load time =     488.20 ms
0.02.708.666 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.667 I llama_perf_context_print:        eval time =    2199.79 ms /    32 runs   (   68.74 ms per token,    14.55 tokens per second)
0.02.708.668 I llama_perf_context_print:       total time =    2219.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.393 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.403 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.410 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.419 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.420 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.424 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.425 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.425 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.426 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.427 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.428 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.432 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.432 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.433 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.433 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.434 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.587 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.089 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.023 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.030 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.030 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.031 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.031 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.032 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.033 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.036 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.037 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.037 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.038 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.040 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.042 I llama_model_loader: - type  f32:   37 tensors
0.00.133.044 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.712 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.412 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.099 I llm_load_vocab: special tokens cache size = 5
0.00.285.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.269 I llm_load_print_meta: arch             = gemma
0.00.285.269 I llm_load_print_meta: vocab type       = SPM
0.00.285.270 I llm_load_print_meta: n_vocab          = 256000
0.00.285.270 I llm_load_print_meta: n_merges         = 0
0.00.285.270 I llm_load_print_meta: vocab_only       = 0
0.00.285.271 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.271 I llm_load_print_meta: n_embd           = 2048
0.00.285.271 I llm_load_print_meta: n_layer          = 18
0.00.285.282 I llm_load_print_meta: n_head           = 8
0.00.285.283 I llm_load_print_meta: n_head_kv        = 1
0.00.285.284 I llm_load_print_meta: n_rot            = 256
0.00.285.284 I llm_load_print_meta: n_swa            = 0
0.00.285.284 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.285 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.285 I llm_load_print_meta: n_gqa            = 8
0.00.285.286 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.287 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.288 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.290 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.290 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.290 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.290 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.291 I llm_load_print_meta: n_ff             = 16384
0.00.285.292 I llm_load_print_meta: n_expert         = 0
0.00.285.292 I llm_load_print_meta: n_expert_used    = 0
0.00.285.292 I llm_load_print_meta: causal attn      = 1
0.00.285.292 I llm_load_print_meta: pooling type     = 0
0.00.285.293 I llm_load_print_meta: rope type        = 2
0.00.285.293 I llm_load_print_meta: rope scaling     = linear
0.00.285.295 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.295 I llm_load_print_meta: freq_scale_train = 1
0.00.285.295 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.296 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.296 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.297 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.297 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.297 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.297 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.298 I llm_load_print_meta: model type       = 2B
0.00.285.298 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.299 I llm_load_print_meta: model params     = 2.51 B
0.00.285.300 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.300 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.300 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.301 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.301 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.302 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.303 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.303 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.303 I llm_load_print_meta: max token length = 93
0.00.363.292 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.363.297 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.299 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.363.299 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.363.300 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.301 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.368.493 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.500 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.501 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.501 I llama_new_context_with_model: n_batch       = 2048
0.00.368.502 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.502 I llama_new_context_with_model: flash_attn    = 0
0.00.368.505 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.506 I llama_new_context_with_model: freq_scale    = 1
0.00.368.507 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.339 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.354 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.448 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.772 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.778 I llama_new_context_with_model: graph nodes  = 601
0.00.384.779 I llama_new_context_with_model: graph splits = 1
0.00.384.781 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.781 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.566 I main: llama threadpool init, n_threads = 4
0.00.470.584 I 
0.00.470.664 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.668 I 
0.00.470.719 I sampler seed: 2403372110
0.00.470.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.735 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.00.470.736 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.736 I 
 increamically.

I am sorry, but I am unable to generate a response that exaggerates or misrepresents the facts. My purpose is to provide accurate and

0.02.749.042 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6659.94 tokens per second)
0.02.749.045 I llama_perf_context_print:        load time =     469.81 ms
0.02.749.046 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.749.048 I llama_perf_context_print:        eval time =    2259.10 ms /    32 runs   (   70.60 ms per token,    14.16 tokens per second)
0.02.749.048 I llama_perf_context_print:       total time =    2278.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.572 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.791 I main: llama backend init
0.00.000.797 I main: load the model and apply lora adapter, if any
0.00.021.266 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.277 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.295 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.296 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.301 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.303 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.304 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.305 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.306 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.313 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.314 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.320 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.036 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.355 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.260 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.269 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.271 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.273 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.274 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.275 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.276 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.277 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.281 I llama_model_loader: - type  f32:   37 tensors
0.00.132.282 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.203 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.946 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.663 I llm_load_vocab: special tokens cache size = 5
0.00.282.649 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.669 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.670 I llm_load_print_meta: arch             = gemma
0.00.282.671 I llm_load_print_meta: vocab type       = SPM
0.00.282.672 I llm_load_print_meta: n_vocab          = 256000
0.00.282.672 I llm_load_print_meta: n_merges         = 0
0.00.282.672 I llm_load_print_meta: vocab_only       = 0
0.00.282.673 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.673 I llm_load_print_meta: n_embd           = 2048
0.00.282.674 I llm_load_print_meta: n_layer          = 18
0.00.282.688 I llm_load_print_meta: n_head           = 8
0.00.282.689 I llm_load_print_meta: n_head_kv        = 1
0.00.282.689 I llm_load_print_meta: n_rot            = 256
0.00.282.690 I llm_load_print_meta: n_swa            = 0
0.00.282.690 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.690 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.691 I llm_load_print_meta: n_gqa            = 8
0.00.282.693 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.694 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.696 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.698 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.699 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.700 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.702 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.703 I llm_load_print_meta: n_ff             = 16384
0.00.282.704 I llm_load_print_meta: n_expert         = 0
0.00.282.705 I llm_load_print_meta: n_expert_used    = 0
0.00.282.705 I llm_load_print_meta: causal attn      = 1
0.00.282.706 I llm_load_print_meta: pooling type     = 0
0.00.282.707 I llm_load_print_meta: rope type        = 2
0.00.282.707 I llm_load_print_meta: rope scaling     = linear
0.00.282.709 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.710 I llm_load_print_meta: freq_scale_train = 1
0.00.282.711 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.711 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.712 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.712 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.713 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.713 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.714 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.715 I llm_load_print_meta: model type       = 2B
0.00.282.715 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.717 I llm_load_print_meta: model params     = 2.51 B
0.00.282.718 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.719 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.720 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.720 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.721 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.721 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.722 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.722 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.723 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.724 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.724 I llm_load_print_meta: max token length = 93
0.00.354.654 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.661 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.965 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.972 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.972 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.973 I llama_new_context_with_model: n_batch       = 2048
0.00.359.973 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.974 I llama_new_context_with_model: flash_attn    = 0
0.00.359.976 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.977 I llama_new_context_with_model: freq_scale    = 1
0.00.359.978 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.484 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.499 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.601 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.867 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.874 I llama_new_context_with_model: graph nodes  = 601
0.00.375.874 I llama_new_context_with_model: graph splits = 1
0.00.375.876 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.877 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.812 I main: llama threadpool init, n_threads = 4
0.00.464.830 I 
0.00.464.916 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.920 I 
0.00.464.976 I sampler seed: 148098748
0.00.464.986 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.989 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.00.464.990 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.990 I 
 increasities. 

I cannot find any information regarding this question. [end of text]


0.01.621.922 I llama_perf_sampler_print:    sampling time =       2.38 ms /    16 runs   (    0.15 ms per token,  6719.87 tokens per second)
0.01.621.925 I llama_perf_context_print:        load time =     464.00 ms
0.01.621.926 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.621.927 I llama_perf_context_print:        eval time =    1146.88 ms /    15 runs   (   76.46 ms per token,    13.08 tokens per second)
0.01.621.928 I llama_perf_context_print:       total time =    1157.12 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.958s
user	0m34.820s
sys	0m9.462s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4320 (3f82215a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40423.64 ms
main:    total time = 40423.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.606 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.615 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.623 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.629 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.630 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.634 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.635 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.636 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.636 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.637 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.637 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.641 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.642 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.642 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.643 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.643 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.391 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.427 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.319 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.326 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.327 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.327 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.328 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.329 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.332 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.332 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.333 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.333 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.334 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.339 I llama_model_loader: - type  f32:   37 tensors
0.00.132.341 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.341 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.904 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.511 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.083 I llm_load_vocab: special tokens cache size = 5
0.00.276.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.311 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.312 I llm_load_print_meta: arch             = gemma
0.00.276.312 I llm_load_print_meta: vocab type       = SPM
0.00.276.313 I llm_load_print_meta: n_vocab          = 256000
0.00.276.313 I llm_load_print_meta: n_merges         = 0
0.00.276.313 I llm_load_print_meta: vocab_only       = 0
0.00.276.314 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.314 I llm_load_print_meta: n_embd           = 2048
0.00.276.315 I llm_load_print_meta: n_layer          = 18
0.00.276.326 I llm_load_print_meta: n_head           = 8
0.00.276.327 I llm_load_print_meta: n_head_kv        = 1
0.00.276.328 I llm_load_print_meta: n_rot            = 256
0.00.276.328 I llm_load_print_meta: n_swa            = 0
0.00.276.328 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.329 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.330 I llm_load_print_meta: n_gqa            = 8
0.00.276.331 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.332 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.332 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.334 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.334 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.334 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.334 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.335 I llm_load_print_meta: n_ff             = 16384
0.00.276.335 I llm_load_print_meta: n_expert         = 0
0.00.276.336 I llm_load_print_meta: n_expert_used    = 0
0.00.276.337 I llm_load_print_meta: causal attn      = 1
0.00.276.337 I llm_load_print_meta: pooling type     = 0
0.00.276.338 I llm_load_print_meta: rope type        = 2
0.00.276.340 I llm_load_print_meta: rope scaling     = linear
0.00.276.342 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.342 I llm_load_print_meta: freq_scale_train = 1
0.00.276.342 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.343 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.343 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.343 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.343 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.344 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.344 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.344 I llm_load_print_meta: model type       = 2B
0.00.276.345 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.346 I llm_load_print_meta: model params     = 2.51 B
0.00.276.346 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.347 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.347 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.349 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.349 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.349 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.349 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.350 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.350 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.351 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.351 I llm_load_print_meta: max token length = 93
0.00.335.177 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.186 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.187 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.187 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.188 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.188 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.474 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.482 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.482 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.482 I llama_new_context_with_model: n_batch       = 2048
0.00.340.483 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.483 I llama_new_context_with_model: flash_attn    = 0
0.00.340.486 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.487 I llama_new_context_with_model: freq_scale    = 1
0.00.340.488 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.841 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.854 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.218 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.226 I llama_new_context_with_model: graph nodes  = 601
0.00.357.226 I llama_new_context_with_model: graph splits = 1
0.00.357.228 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.228 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.514 I main: llama threadpool init, n_threads = 4
0.00.434.530 I 
0.00.434.605 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.434.609 I 
0.00.434.657 I sampler seed: 1345388641
0.00.434.669 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.685 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.00.434.689 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.689 I 
 seconally and then ask for her opinion on the matter.

I'm not sure how to proceed with this. I'm feeling overwhelmed and stressed.

0.02.072.059 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6744.33 tokens per second)
0.02.072.061 I llama_perf_context_print:        load time =     433.75 ms
0.02.072.062 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.072.064 I llama_perf_context_print:        eval time =    1618.51 ms /    32 runs   (   50.58 ms per token,    19.77 tokens per second)
0.02.072.064 I llama_perf_context_print:       total time =    1637.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4320 (3f82215a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40212.68 ms
main:    total time = 40212.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.175 I build: 4320 (3f82215a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.387 I main: load the model and apply lora adapter, if any
0.00.020.684 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.701 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.713 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.714 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.721 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.722 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.722 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.723 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.723 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.724 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.729 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.729 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.730 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.731 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.732 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.560 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.724 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.630 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.636 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.637 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.637 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.638 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.639 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.640 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.642 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.643 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.647 I llama_model_loader: - type  f32:   37 tensors
0.00.131.648 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.648 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.466 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.838 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.541 I llm_load_vocab: special tokens cache size = 5
0.00.281.790 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.812 I llm_load_print_meta: arch             = gemma
0.00.281.813 I llm_load_print_meta: vocab type       = SPM
0.00.281.813 I llm_load_print_meta: n_vocab          = 256000
0.00.281.814 I llm_load_print_meta: n_merges         = 0
0.00.281.814 I llm_load_print_meta: vocab_only       = 0
0.00.281.815 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.815 I llm_load_print_meta: n_embd           = 2048
0.00.281.815 I llm_load_print_meta: n_layer          = 18
0.00.281.829 I llm_load_print_meta: n_head           = 8
0.00.281.830 I llm_load_print_meta: n_head_kv        = 1
0.00.281.830 I llm_load_print_meta: n_rot            = 256
0.00.281.830 I llm_load_print_meta: n_swa            = 0
0.00.281.831 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.832 I llm_load_print_meta: n_gqa            = 8
0.00.281.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.835 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.836 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.837 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.838 I llm_load_print_meta: n_ff             = 16384
0.00.281.838 I llm_load_print_meta: n_expert         = 0
0.00.281.839 I llm_load_print_meta: n_expert_used    = 0
0.00.281.839 I llm_load_print_meta: causal attn      = 1
0.00.281.839 I llm_load_print_meta: pooling type     = 0
0.00.281.839 I llm_load_print_meta: rope type        = 2
0.00.281.840 I llm_load_print_meta: rope scaling     = linear
0.00.281.841 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.842 I llm_load_print_meta: freq_scale_train = 1
0.00.281.842 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.843 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.843 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.843 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.844 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.844 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.845 I llm_load_print_meta: model type       = 2B
0.00.281.845 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.846 I llm_load_print_meta: model params     = 2.51 B
0.00.281.846 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.847 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.847 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.848 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.848 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.849 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.849 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.850 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.850 I llm_load_print_meta: max token length = 93
0.00.339.336 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.344.453 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.461 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.461 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.462 I llama_new_context_with_model: n_batch       = 2048
0.00.344.462 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.463 I llama_new_context_with_model: flash_attn    = 0
0.00.344.466 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.467 I llama_new_context_with_model: freq_scale    = 1
0.00.344.468 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.009 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.023 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.118 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.356 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.363 I llama_new_context_with_model: graph nodes  = 601
0.00.361.363 I llama_new_context_with_model: graph splits = 1
0.00.361.366 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.361.366 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.866 I main: llama threadpool init, n_threads = 4
0.00.436.882 I 
0.00.436.960 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.436.963 I 
0.00.437.009 I sampler seed: 1146228394
0.00.437.022 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.035 I sampler chain: logits -> logit-bias -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> penalties -> dist 
0.00.437.037 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.037 I 
 maneupher.

## Introduction

The maneupher is a simple yet powerful tool for understanding and analyzing the relationships between different variables in a dataset. It allows users

0.02.030.427 I llama_perf_sampler_print:    sampling time =       5.33 ms /    33 runs   (    0.16 ms per token,  6193.69 tokens per second)
0.02.030.429 I llama_perf_context_print:        load time =     436.46 ms
0.02.030.430 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.030.431 I llama_perf_context_print:        eval time =    1573.92 ms /    32 runs   (   49.19 ms per token,    20.33 tokens per second)
0.02.030.432 I llama_perf_context_print:       total time =    1593.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.607s
user	10m24.559s
sys	0m7.146s
