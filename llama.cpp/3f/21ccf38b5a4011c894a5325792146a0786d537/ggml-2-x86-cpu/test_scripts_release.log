+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 4091 (3f21ccf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.753 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.763 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.770 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.776 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.778 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.782 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.783 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.783 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.784 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.784 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.786 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.791 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.791 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.792 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.793 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.793 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.882 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.954 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.275 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.282 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.283 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.284 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.285 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.285 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.288 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.288 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.289 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.290 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.292 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.296 I llama_model_loader: - type  f32:   37 tensors
0.00.133.297 I llama_model_loader: - type q8_0:  127 tensors
0.00.228.943 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.285.360 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.286.206 I llm_load_vocab: special tokens cache size = 5
0.00.307.510 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.307.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.307.533 I llm_load_print_meta: arch             = gemma
0.00.307.534 I llm_load_print_meta: vocab type       = SPM
0.00.307.535 I llm_load_print_meta: n_vocab          = 256000
0.00.307.535 I llm_load_print_meta: n_merges         = 0
0.00.307.535 I llm_load_print_meta: vocab_only       = 0
0.00.307.536 I llm_load_print_meta: n_ctx_train      = 8192
0.00.307.536 I llm_load_print_meta: n_embd           = 2048
0.00.307.536 I llm_load_print_meta: n_layer          = 18
0.00.307.548 I llm_load_print_meta: n_head           = 8
0.00.307.549 I llm_load_print_meta: n_head_kv        = 1
0.00.307.549 I llm_load_print_meta: n_rot            = 256
0.00.307.550 I llm_load_print_meta: n_swa            = 0
0.00.307.550 I llm_load_print_meta: n_embd_head_k    = 256
0.00.307.550 I llm_load_print_meta: n_embd_head_v    = 256
0.00.307.551 I llm_load_print_meta: n_gqa            = 8
0.00.307.552 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.307.553 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.307.554 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.307.556 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.307.556 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.307.557 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.307.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.307.558 I llm_load_print_meta: n_ff             = 16384
0.00.307.558 I llm_load_print_meta: n_expert         = 0
0.00.307.558 I llm_load_print_meta: n_expert_used    = 0
0.00.307.559 I llm_load_print_meta: causal attn      = 1
0.00.307.559 I llm_load_print_meta: pooling type     = 0
0.00.307.559 I llm_load_print_meta: rope type        = 2
0.00.307.560 I llm_load_print_meta: rope scaling     = linear
0.00.307.561 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.307.562 I llm_load_print_meta: freq_scale_train = 1
0.00.307.562 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.307.562 I llm_load_print_meta: rope_finetuned   = unknown
0.00.307.563 I llm_load_print_meta: ssm_d_conv       = 0
0.00.307.563 I llm_load_print_meta: ssm_d_inner      = 0
0.00.307.563 I llm_load_print_meta: ssm_d_state      = 0
0.00.307.563 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.307.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.307.564 I llm_load_print_meta: model type       = 2B
0.00.307.564 I llm_load_print_meta: model ftype      = Q8_0
0.00.307.565 I llm_load_print_meta: model params     = 2.51 B
0.00.307.566 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.307.566 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.307.567 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.307.568 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.307.568 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.307.568 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.307.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.307.569 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.307.569 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.307.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.307.570 I llm_load_print_meta: max token length = 93
0.00.406.068 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.406.076 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.406.077 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.406.077 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.406.078 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.406.079 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.411.407 I llama_new_context_with_model: n_seq_max     = 1
0.00.411.414 I llama_new_context_with_model: n_ctx         = 4096
0.00.411.414 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.411.414 I llama_new_context_with_model: n_batch       = 2048
0.00.411.415 I llama_new_context_with_model: n_ubatch      = 512
0.00.411.415 I llama_new_context_with_model: flash_attn    = 0
0.00.411.418 I llama_new_context_with_model: freq_base     = 10000.0
0.00.411.419 I llama_new_context_with_model: freq_scale    = 1
0.00.411.420 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.426.923 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.426.939 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.427.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.428.381 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.428.389 I llama_new_context_with_model: graph nodes  = 601
0.00.428.389 I llama_new_context_with_model: graph splits = 1
0.00.428.391 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.519.477 I main: llama threadpool init, n_threads = 4
0.00.519.493 I 
0.00.519.571 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.519.576 I 
0.00.519.636 I sampler seed: 623084333
0.00.519.647 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.519.652 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.519.652 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.519.652 I 
 increasities, but a child is not aware of the sexual nature of the situation.

What is the appropriate response from the adult?

a) Explain the

0.02.837.055 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6669.36 tokens per second)
0.02.837.057 I llama_perf_context_print:        load time =     518.68 ms
0.02.837.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.837.059 I llama_perf_context_print:        eval time =    2298.24 ms /    32 runs   (   71.82 ms per token,    13.92 tokens per second)
0.02.837.060 I llama_perf_context_print:       total time =    2317.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 4091 (3f21ccf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.561 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.586 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.587 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.593 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.595 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.596 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.597 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.598 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.599 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.605 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.606 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.607 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.608 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.610 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.310 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.580 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.456 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.464 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.465 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.465 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.466 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.467 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.468 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.471 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.472 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.472 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.473 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.478 I llama_model_loader: - type  f32:   37 tensors
0.00.132.479 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.282 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.849 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.641 I llm_load_vocab: special tokens cache size = 5
0.00.289.918 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.940 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.940 I llm_load_print_meta: arch             = gemma
0.00.289.941 I llm_load_print_meta: vocab type       = SPM
0.00.289.942 I llm_load_print_meta: n_vocab          = 256000
0.00.289.942 I llm_load_print_meta: n_merges         = 0
0.00.289.943 I llm_load_print_meta: vocab_only       = 0
0.00.289.943 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.943 I llm_load_print_meta: n_embd           = 2048
0.00.289.944 I llm_load_print_meta: n_layer          = 18
0.00.289.957 I llm_load_print_meta: n_head           = 8
0.00.289.958 I llm_load_print_meta: n_head_kv        = 1
0.00.289.959 I llm_load_print_meta: n_rot            = 256
0.00.289.959 I llm_load_print_meta: n_swa            = 0
0.00.289.960 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.960 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.961 I llm_load_print_meta: n_gqa            = 8
0.00.289.962 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.963 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.963 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.965 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.966 I llm_load_print_meta: n_ff             = 16384
0.00.289.967 I llm_load_print_meta: n_expert         = 0
0.00.289.967 I llm_load_print_meta: n_expert_used    = 0
0.00.289.967 I llm_load_print_meta: causal attn      = 1
0.00.289.968 I llm_load_print_meta: pooling type     = 0
0.00.289.968 I llm_load_print_meta: rope type        = 2
0.00.289.968 I llm_load_print_meta: rope scaling     = linear
0.00.289.970 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.970 I llm_load_print_meta: freq_scale_train = 1
0.00.289.971 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.971 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.971 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.972 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.972 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.972 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.972 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.973 I llm_load_print_meta: model type       = 2B
0.00.289.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.974 I llm_load_print_meta: model params     = 2.51 B
0.00.289.975 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.976 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.976 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.976 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.977 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.977 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.978 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.978 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.978 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.979 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.979 I llm_load_print_meta: max token length = 93
0.00.383.768 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.389.308 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.316 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.316 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.316 I llama_new_context_with_model: n_batch       = 2048
0.00.389.317 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.318 I llama_new_context_with_model: flash_attn    = 0
0.00.389.321 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.323 I llama_new_context_with_model: freq_scale    = 1
0.00.389.324 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.416 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.432 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.534 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.826 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.834 I llama_new_context_with_model: graph nodes  = 601
0.00.406.834 I llama_new_context_with_model: graph splits = 1
0.00.406.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.937 I main: llama threadpool init, n_threads = 4
0.00.489.952 I 
0.00.490.043 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.490.046 I 
0.00.490.109 I sampler seed: 4008766012
0.00.490.120 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.123 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.490.125 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.125 I 
 increabling, and pronouncements.

**Example:**
> "The rain is coming!"

**Answer:**
> "The rain is coming down!"

0.02.730.261 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6951.76 tokens per second)
0.02.730.263 I llama_perf_context_print:        load time =     489.12 ms
0.02.730.264 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.266 I llama_perf_context_print:        eval time =    2221.36 ms /    32 runs   (   69.42 ms per token,    14.41 tokens per second)
0.02.730.266 I llama_perf_context_print:       total time =    2240.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 4091 (3f21ccf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.021.462 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.476 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.484 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.489 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.490 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.503 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.504 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.504 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.505 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.156 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.252 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.083 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.090 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.091 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.092 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.093 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.094 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.095 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.099 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.099 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.100 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.101 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.102 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.106 I llama_model_loader: - type  f32:   37 tensors
0.00.132.107 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.122 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.877 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.653 I llm_load_vocab: special tokens cache size = 5
0.00.287.115 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.133 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.134 I llm_load_print_meta: arch             = gemma
0.00.287.134 I llm_load_print_meta: vocab type       = SPM
0.00.287.135 I llm_load_print_meta: n_vocab          = 256000
0.00.287.136 I llm_load_print_meta: n_merges         = 0
0.00.287.136 I llm_load_print_meta: vocab_only       = 0
0.00.287.136 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.137 I llm_load_print_meta: n_embd           = 2048
0.00.287.137 I llm_load_print_meta: n_layer          = 18
0.00.287.149 I llm_load_print_meta: n_head           = 8
0.00.287.150 I llm_load_print_meta: n_head_kv        = 1
0.00.287.151 I llm_load_print_meta: n_rot            = 256
0.00.287.151 I llm_load_print_meta: n_swa            = 0
0.00.287.151 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.152 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.153 I llm_load_print_meta: n_gqa            = 8
0.00.287.154 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.155 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.155 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.157 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.157 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.159 I llm_load_print_meta: n_ff             = 16384
0.00.287.159 I llm_load_print_meta: n_expert         = 0
0.00.287.159 I llm_load_print_meta: n_expert_used    = 0
0.00.287.160 I llm_load_print_meta: causal attn      = 1
0.00.287.160 I llm_load_print_meta: pooling type     = 0
0.00.287.160 I llm_load_print_meta: rope type        = 2
0.00.287.161 I llm_load_print_meta: rope scaling     = linear
0.00.287.162 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.163 I llm_load_print_meta: freq_scale_train = 1
0.00.287.163 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.163 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.164 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.164 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.164 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.165 I llm_load_print_meta: model type       = 2B
0.00.287.166 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.167 I llm_load_print_meta: model params     = 2.51 B
0.00.287.168 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.168 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.170 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.171 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.171 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.171 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.172 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.173 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.173 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.174 I llm_load_print_meta: max token length = 93
0.00.366.655 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.366.660 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.661 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.366.662 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.366.663 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.663 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.371.960 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.967 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.968 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.968 I llama_new_context_with_model: n_batch       = 2048
0.00.371.969 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.969 I llama_new_context_with_model: flash_attn    = 0
0.00.371.973 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.974 I llama_new_context_with_model: freq_scale    = 1
0.00.371.975 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.743 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.759 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.860 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.154 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.160 I llama_new_context_with_model: graph nodes  = 601
0.00.389.161 I llama_new_context_with_model: graph splits = 1
0.00.389.163 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.561 I main: llama threadpool init, n_threads = 4
0.00.475.576 I 
0.00.475.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.655 I 
0.00.475.697 I sampler seed: 1488124039
0.00.475.708 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.711 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.711 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.712 I 
 increasities. [end of text]


0.00.759.814 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7987.22 tokens per second)
0.00.759.816 I llama_perf_context_print:        load time =     474.79 ms
0.00.759.817 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.759.819 I llama_perf_context_print:        eval time =     280.78 ms /     4 runs   (   70.19 ms per token,    14.25 tokens per second)
0.00.759.819 I llama_perf_context_print:       total time =     284.26 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.607 I build: 4091 (3f21ccf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.850 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.021.179 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.187 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.195 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.200 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.201 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.205 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.206 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.207 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.212 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.212 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.213 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.214 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.679 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.405 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.310 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.318 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.319 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.319 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.320 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.321 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.322 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.324 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.325 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.326 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.326 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.327 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.331 I llama_model_loader: - type  f32:   37 tensors
0.00.132.332 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.871 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.955 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.540 I llm_load_vocab: special tokens cache size = 5
0.00.287.782 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.801 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.802 I llm_load_print_meta: arch             = gemma
0.00.287.802 I llm_load_print_meta: vocab type       = SPM
0.00.287.803 I llm_load_print_meta: n_vocab          = 256000
0.00.287.803 I llm_load_print_meta: n_merges         = 0
0.00.287.803 I llm_load_print_meta: vocab_only       = 0
0.00.287.804 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.804 I llm_load_print_meta: n_embd           = 2048
0.00.287.804 I llm_load_print_meta: n_layer          = 18
0.00.287.816 I llm_load_print_meta: n_head           = 8
0.00.287.817 I llm_load_print_meta: n_head_kv        = 1
0.00.287.817 I llm_load_print_meta: n_rot            = 256
0.00.287.817 I llm_load_print_meta: n_swa            = 0
0.00.287.818 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.818 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.819 I llm_load_print_meta: n_gqa            = 8
0.00.287.820 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.821 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.822 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.823 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.824 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.824 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.824 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.825 I llm_load_print_meta: n_ff             = 16384
0.00.287.825 I llm_load_print_meta: n_expert         = 0
0.00.287.826 I llm_load_print_meta: n_expert_used    = 0
0.00.287.826 I llm_load_print_meta: causal attn      = 1
0.00.287.827 I llm_load_print_meta: pooling type     = 0
0.00.287.827 I llm_load_print_meta: rope type        = 2
0.00.287.827 I llm_load_print_meta: rope scaling     = linear
0.00.287.829 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.829 I llm_load_print_meta: freq_scale_train = 1
0.00.287.829 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.830 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.830 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.830 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.830 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.831 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.831 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.832 I llm_load_print_meta: model type       = 2B
0.00.287.833 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.834 I llm_load_print_meta: model params     = 2.51 B
0.00.287.835 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.835 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.835 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.836 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.836 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.836 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.837 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.837 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.838 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.838 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.838 I llm_load_print_meta: max token length = 93
0.00.360.636 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.360.644 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.365.823 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.829 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.829 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.830 I llama_new_context_with_model: n_batch       = 2048
0.00.365.830 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.830 I llama_new_context_with_model: flash_attn    = 0
0.00.365.833 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.834 I llama_new_context_with_model: freq_scale    = 1
0.00.365.834 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.180 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.196 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.288 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.532 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.539 I llama_new_context_with_model: graph nodes  = 601
0.00.382.540 I llama_new_context_with_model: graph splits = 1
0.00.382.541 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.316 I main: llama threadpool init, n_threads = 4
0.00.469.329 I 
0.00.469.406 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.409 I 
0.00.469.450 I sampler seed: 958617199
0.00.469.461 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.465 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.465 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.465 I 
 increasities to a position of respect and admiration within the community. 

I believe this is a worthy goal, and I am committed to working towards it.

0.02.934.930 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6897.99 tokens per second)
0.02.934.932 I llama_perf_context_print:        load time =     468.44 ms
0.02.934.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.934.934 I llama_perf_context_print:        eval time =    2446.28 ms /    32 runs   (   76.45 ms per token,    13.08 tokens per second)
0.02.934.935 I llama_perf_context_print:       total time =    2465.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.005s
user	0m32.217s
sys	0m9.635s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4091 (3f21ccf3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40239.57 ms
main:    total time = 40239.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.562 I build: 4091 (3f21ccf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.501 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.513 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.521 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.527 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.528 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.532 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.533 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.534 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.534 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.535 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.535 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.540 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.541 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.541 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.542 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.543 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.119 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.485 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.671 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.677 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.679 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.681 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.684 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.684 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.685 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.685 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.686 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.690 I llama_model_loader: - type  f32:   37 tensors
0.00.132.690 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.691 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.583 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.668 I llm_load_vocab: special tokens cache size = 5
0.00.279.104 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.121 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.122 I llm_load_print_meta: arch             = gemma
0.00.279.123 I llm_load_print_meta: vocab type       = SPM
0.00.279.123 I llm_load_print_meta: n_vocab          = 256000
0.00.279.124 I llm_load_print_meta: n_merges         = 0
0.00.279.124 I llm_load_print_meta: vocab_only       = 0
0.00.279.124 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.125 I llm_load_print_meta: n_embd           = 2048
0.00.279.125 I llm_load_print_meta: n_layer          = 18
0.00.279.139 I llm_load_print_meta: n_head           = 8
0.00.279.140 I llm_load_print_meta: n_head_kv        = 1
0.00.279.140 I llm_load_print_meta: n_rot            = 256
0.00.279.141 I llm_load_print_meta: n_swa            = 0
0.00.279.141 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.141 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.142 I llm_load_print_meta: n_gqa            = 8
0.00.279.143 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.147 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.147 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.148 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.149 I llm_load_print_meta: n_ff             = 16384
0.00.279.149 I llm_load_print_meta: n_expert         = 0
0.00.279.149 I llm_load_print_meta: n_expert_used    = 0
0.00.279.150 I llm_load_print_meta: causal attn      = 1
0.00.279.150 I llm_load_print_meta: pooling type     = 0
0.00.279.150 I llm_load_print_meta: rope type        = 2
0.00.279.151 I llm_load_print_meta: rope scaling     = linear
0.00.279.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.153 I llm_load_print_meta: freq_scale_train = 1
0.00.279.154 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.154 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.155 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.156 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.156 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.156 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.157 I llm_load_print_meta: model type       = 2B
0.00.279.158 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.160 I llm_load_print_meta: model params     = 2.51 B
0.00.279.161 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.161 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.162 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.163 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.164 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.164 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.164 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.165 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.165 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.165 I llm_load_print_meta: max token length = 93
0.00.338.893 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.902 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.903 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.903 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.904 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.904 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.344.186 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.193 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.193 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.194 I llama_new_context_with_model: n_batch       = 2048
0.00.344.194 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.195 I llama_new_context_with_model: flash_attn    = 0
0.00.344.199 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.200 I llama_new_context_with_model: freq_scale    = 1
0.00.344.200 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.728 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.741 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.832 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.145 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.149 I llama_new_context_with_model: graph nodes  = 601
0.00.360.150 I llama_new_context_with_model: graph splits = 1
0.00.360.151 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.030 I main: llama threadpool init, n_threads = 4
0.00.437.044 I 
0.00.437.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.437.124 I 
0.00.437.165 I sampler seed: 321870408
0.00.437.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.179 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.180 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.180 I 
 susceptable, and assertive behavior.

**Supervisory Behavior:**

- Providing opportunities for employees to observe and learn from experienced professionals
- Facilitating knowledge

0.02.094.086 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6581.57 tokens per second)
0.02.094.088 I llama_perf_context_print:        load time =     436.24 ms
0.02.094.090 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.094.091 I llama_perf_context_print:        eval time =    1637.59 ms /    32 runs   (   51.17 ms per token,    19.54 tokens per second)
0.02.094.092 I llama_perf_context_print:       total time =    1657.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4091 (3f21ccf3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40220.30 ms
main:    total time = 40220.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4091 (3f21ccf3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.489 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.505 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.514 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.515 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.520 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.521 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.523 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.524 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.524 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.525 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.530 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.531 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.532 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.532 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.028 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.317 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.209 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.216 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.217 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.217 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.218 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.219 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.220 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.227 I llama_model_loader: - type  f32:   37 tensors
0.00.132.228 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.228 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.441 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.230 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.835 I llm_load_vocab: special tokens cache size = 5
0.00.282.018 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.037 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.038 I llm_load_print_meta: arch             = gemma
0.00.282.039 I llm_load_print_meta: vocab type       = SPM
0.00.282.040 I llm_load_print_meta: n_vocab          = 256000
0.00.282.040 I llm_load_print_meta: n_merges         = 0
0.00.282.041 I llm_load_print_meta: vocab_only       = 0
0.00.282.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.042 I llm_load_print_meta: n_embd           = 2048
0.00.282.042 I llm_load_print_meta: n_layer          = 18
0.00.282.053 I llm_load_print_meta: n_head           = 8
0.00.282.054 I llm_load_print_meta: n_head_kv        = 1
0.00.282.054 I llm_load_print_meta: n_rot            = 256
0.00.282.054 I llm_load_print_meta: n_swa            = 0
0.00.282.055 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.055 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.056 I llm_load_print_meta: n_gqa            = 8
0.00.282.057 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.058 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.059 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.061 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.061 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.062 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.063 I llm_load_print_meta: n_ff             = 16384
0.00.282.063 I llm_load_print_meta: n_expert         = 0
0.00.282.063 I llm_load_print_meta: n_expert_used    = 0
0.00.282.064 I llm_load_print_meta: causal attn      = 1
0.00.282.064 I llm_load_print_meta: pooling type     = 0
0.00.282.065 I llm_load_print_meta: rope type        = 2
0.00.282.068 I llm_load_print_meta: rope scaling     = linear
0.00.282.069 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.070 I llm_load_print_meta: freq_scale_train = 1
0.00.282.070 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.070 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.071 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.071 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.071 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.071 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.072 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.073 I llm_load_print_meta: model type       = 2B
0.00.282.073 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.075 I llm_load_print_meta: model params     = 2.51 B
0.00.282.076 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.077 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.077 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.078 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.078 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.079 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.079 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.080 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.081 I llm_load_print_meta: max token length = 93
0.00.340.380 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.345.541 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.548 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.548 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.549 I llama_new_context_with_model: n_batch       = 2048
0.00.345.549 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.550 I llama_new_context_with_model: flash_attn    = 0
0.00.345.553 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.554 I llama_new_context_with_model: freq_scale    = 1
0.00.345.555 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.653 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.669 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.763 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.026 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.032 I llama_new_context_with_model: graph nodes  = 601
0.00.362.032 I llama_new_context_with_model: graph splits = 1
0.00.362.034 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.835 I main: llama threadpool init, n_threads = 4
0.00.436.852 I 
0.00.436.934 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.937 I 
0.00.436.983 I sampler seed: 4039871530
0.00.436.994 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.999 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.000 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.000 I 
 seconded into the next sentence:

The authorities are investigating the cause of the fire at the old post office building. [end of text]


0.01.707.965 I llama_perf_sampler_print:    sampling time =       3.87 ms /    26 runs   (    0.15 ms per token,  6723.56 tokens per second)
0.01.707.967 I llama_perf_context_print:        load time =     436.07 ms
0.01.707.968 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.707.970 I llama_perf_context_print:        eval time =    1255.97 ms /    25 runs   (   50.24 ms per token,    19.90 tokens per second)
0.01.707.970 I llama_perf_context_print:       total time =    1271.14 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.199s
user	10m23.379s
sys	0m7.098s
