+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.652 I build: 3828 (95bc82fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.024.951 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.153 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.244 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.256 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.258 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.262 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.287 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.294 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.295 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.296 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.296 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.712 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.954 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.332 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.341 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.342 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.343 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.344 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.345 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.348 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.349 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.350 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.351 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.352 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.360 I llama_model_loader: - type  f32:   37 tensors
0.00.198.364 I llama_model_loader: - type q8_0:  127 tensors
0.00.485.796 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.645 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.658 I llm_load_vocab: special tokens cache size = 5
0.00.568.924 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.981 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.982 I llm_load_print_meta: arch             = gemma
0.00.568.983 I llm_load_print_meta: vocab type       = SPM
0.00.568.984 I llm_load_print_meta: n_vocab          = 256000
0.00.568.987 I llm_load_print_meta: n_merges         = 0
0.00.568.987 I llm_load_print_meta: vocab_only       = 0
0.00.568.988 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.988 I llm_load_print_meta: n_embd           = 2048
0.00.568.988 I llm_load_print_meta: n_layer          = 18
0.00.569.023 I llm_load_print_meta: n_head           = 8
0.00.569.030 I llm_load_print_meta: n_head_kv        = 1
0.00.569.030 I llm_load_print_meta: n_rot            = 256
0.00.569.031 I llm_load_print_meta: n_swa            = 0
0.00.569.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.569.032 I llm_load_print_meta: n_embd_head_v    = 256
0.00.569.037 I llm_load_print_meta: n_gqa            = 8
0.00.569.041 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.569.046 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.569.047 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.569.048 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.569.049 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.569.049 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.569.050 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.569.054 I llm_load_print_meta: n_ff             = 16384
0.00.569.055 I llm_load_print_meta: n_expert         = 0
0.00.569.055 I llm_load_print_meta: n_expert_used    = 0
0.00.569.056 I llm_load_print_meta: causal attn      = 1
0.00.569.056 I llm_load_print_meta: pooling type     = 0
0.00.569.057 I llm_load_print_meta: rope type        = 2
0.00.569.057 I llm_load_print_meta: rope scaling     = linear
0.00.569.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.569.059 I llm_load_print_meta: freq_scale_train = 1
0.00.569.059 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.569.060 I llm_load_print_meta: rope_finetuned   = unknown
0.00.569.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.569.060 I llm_load_print_meta: ssm_d_inner      = 0
0.00.569.061 I llm_load_print_meta: ssm_d_state      = 0
0.00.569.061 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.569.061 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.569.062 I llm_load_print_meta: model type       = 2B
0.00.569.063 I llm_load_print_meta: model ftype      = Q8_0
0.00.569.064 I llm_load_print_meta: model params     = 2.51 B
0.00.569.065 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.569.065 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.569.066 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.569.066 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.569.066 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.569.067 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.569.067 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.569.068 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.569.093 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.569.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.569.095 I llm_load_print_meta: max token length = 93
0.00.569.283 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.539 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.668.548 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.668.549 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.668.550 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.668.551 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.668.552 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.674.432 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.440 I llama_new_context_with_model: n_batch    = 2048
0.00.674.440 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.441 I llama_new_context_with_model: flash_attn = 0
0.00.674.443 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.444 I llama_new_context_with_model: freq_scale = 1
0.00.703.984 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.027 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.142 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.705.532 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.538 I llama_new_context_with_model: graph nodes  = 601
0.00.705.539 I llama_new_context_with_model: graph splits = 1
0.00.705.554 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.630 I main: llama threadpool init, n_threads = 4
0.01.322.642 I 
0.01.322.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.740 I 
0.01.322.937 I sampler seed: 1218920475
0.01.322.949 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.957 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.322.957 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.958 I 
 increably.

I am not able to generate text that is sexually suggestive in nature. [end of text]


0.09.382.458 I llama_perf_sampler_print:    sampling time =      29.19 ms /    20 runs   (    1.46 ms per token,   685.19 tokens per second)
0.09.382.462 I llama_perf_context_print:        load time =    1319.73 ms
0.09.382.463 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.382.476 I llama_perf_context_print:        eval time =    8010.32 ms /    19 runs   (  421.60 ms per token,     2.37 tokens per second)
0.09.382.477 I llama_perf_context_print:       total time =    8059.84 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.632 I build: 3828 (95bc82fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.752 I main: load the model and apply lora adapter, if any
0.00.024.725 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.819 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.833 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.835 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.839 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.840 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.841 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.842 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.842 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.843 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.850 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.850 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.851 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.852 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.853 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.091 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.957 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.393 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.401 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.402 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.403 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.404 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.405 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.406 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.408 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.409 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.410 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.411 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.412 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.420 I llama_model_loader: - type  f32:   37 tensors
0.00.197.424 I llama_model_loader: - type q8_0:  127 tensors
0.00.524.071 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.553.817 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.554.860 I llm_load_vocab: special tokens cache size = 5
0.00.612.166 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.225 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.226 I llm_load_print_meta: arch             = gemma
0.00.612.227 I llm_load_print_meta: vocab type       = SPM
0.00.612.228 I llm_load_print_meta: n_vocab          = 256000
0.00.612.230 I llm_load_print_meta: n_merges         = 0
0.00.612.231 I llm_load_print_meta: vocab_only       = 0
0.00.612.231 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.231 I llm_load_print_meta: n_embd           = 2048
0.00.612.232 I llm_load_print_meta: n_layer          = 18
0.00.612.268 I llm_load_print_meta: n_head           = 8
0.00.612.274 I llm_load_print_meta: n_head_kv        = 1
0.00.612.275 I llm_load_print_meta: n_rot            = 256
0.00.612.275 I llm_load_print_meta: n_swa            = 0
0.00.612.276 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.276 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.281 I llm_load_print_meta: n_gqa            = 8
0.00.612.287 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.292 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.293 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.294 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.295 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.295 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.296 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.300 I llm_load_print_meta: n_ff             = 16384
0.00.612.301 I llm_load_print_meta: n_expert         = 0
0.00.612.301 I llm_load_print_meta: n_expert_used    = 0
0.00.612.302 I llm_load_print_meta: causal attn      = 1
0.00.612.302 I llm_load_print_meta: pooling type     = 0
0.00.612.302 I llm_load_print_meta: rope type        = 2
0.00.612.303 I llm_load_print_meta: rope scaling     = linear
0.00.612.305 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.305 I llm_load_print_meta: freq_scale_train = 1
0.00.612.306 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.306 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.306 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.307 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.307 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.307 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.308 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.308 I llm_load_print_meta: model type       = 2B
0.00.612.309 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.310 I llm_load_print_meta: model params     = 2.51 B
0.00.612.311 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.311 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.312 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.312 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.312 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.313 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.315 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.315 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.322 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.324 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.335 I llm_load_print_meta: max token length = 93
0.00.612.523 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.707.075 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.712.800 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.807 I llama_new_context_with_model: n_batch    = 2048
0.00.712.808 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.809 I llama_new_context_with_model: flash_attn = 0
0.00.712.812 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.812 I llama_new_context_with_model: freq_scale = 1
0.00.741.978 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.021 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.742.133 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.743.510 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.516 I llama_new_context_with_model: graph nodes  = 601
0.00.743.516 I llama_new_context_with_model: graph splits = 1
0.00.743.533 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.773 I main: llama threadpool init, n_threads = 4
0.01.354.787 I 
0.01.354.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.883 I 
0.01.355.045 I sampler seed: 3887412784
0.01.355.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.060 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.355.061 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.062 I 
 increably.

**Assistant**

I understand. I will ensure that your request is fulfilled promptly and efficiently. [end of text]


0.11.422.408 I llama_perf_sampler_print:    sampling time =      36.78 ms /    25 runs   (    1.47 ms per token,   679.79 tokens per second)
0.11.422.411 I llama_perf_context_print:        load time =    1351.93 ms
0.11.422.413 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.422.414 I llama_perf_context_print:        eval time =   10006.26 ms /    24 runs   (  416.93 ms per token,     2.40 tokens per second)
0.11.422.415 I llama_perf_context_print:       total time =   10067.64 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.618 I build: 3828 (95bc82fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.868 I main: load the model and apply lora adapter, if any
0.00.024.862 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.069 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.162 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.175 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.176 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.181 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.184 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.185 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.187 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.188 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.189 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.198 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.200 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.202 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.203 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.204 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.665 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.125 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.746 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.755 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.756 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.757 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.758 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.759 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.760 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.765 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.775 I llama_model_loader: - type  f32:   37 tensors
0.00.198.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.492.924 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.240 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.302 I llm_load_vocab: special tokens cache size = 5
0.00.578.743 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.578.806 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.578.807 I llm_load_print_meta: arch             = gemma
0.00.578.808 I llm_load_print_meta: vocab type       = SPM
0.00.578.809 I llm_load_print_meta: n_vocab          = 256000
0.00.578.811 I llm_load_print_meta: n_merges         = 0
0.00.578.812 I llm_load_print_meta: vocab_only       = 0
0.00.578.812 I llm_load_print_meta: n_ctx_train      = 8192
0.00.578.812 I llm_load_print_meta: n_embd           = 2048
0.00.578.813 I llm_load_print_meta: n_layer          = 18
0.00.578.846 I llm_load_print_meta: n_head           = 8
0.00.578.854 I llm_load_print_meta: n_head_kv        = 1
0.00.578.854 I llm_load_print_meta: n_rot            = 256
0.00.578.854 I llm_load_print_meta: n_swa            = 0
0.00.578.855 I llm_load_print_meta: n_embd_head_k    = 256
0.00.578.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.578.860 I llm_load_print_meta: n_gqa            = 8
0.00.578.865 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.578.870 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.578.871 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.578.872 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.578.873 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.578.873 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.578.874 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.578.878 I llm_load_print_meta: n_ff             = 16384
0.00.578.879 I llm_load_print_meta: n_expert         = 0
0.00.578.879 I llm_load_print_meta: n_expert_used    = 0
0.00.578.879 I llm_load_print_meta: causal attn      = 1
0.00.578.880 I llm_load_print_meta: pooling type     = 0
0.00.578.881 I llm_load_print_meta: rope type        = 2
0.00.578.882 I llm_load_print_meta: rope scaling     = linear
0.00.578.883 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.578.884 I llm_load_print_meta: freq_scale_train = 1
0.00.578.884 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.578.885 I llm_load_print_meta: rope_finetuned   = unknown
0.00.578.894 I llm_load_print_meta: ssm_d_conv       = 0
0.00.578.895 I llm_load_print_meta: ssm_d_inner      = 0
0.00.578.896 I llm_load_print_meta: ssm_d_state      = 0
0.00.578.896 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.578.896 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.578.897 I llm_load_print_meta: model type       = 2B
0.00.578.898 I llm_load_print_meta: model ftype      = Q8_0
0.00.578.899 I llm_load_print_meta: model params     = 2.51 B
0.00.578.900 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.578.900 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.578.901 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.578.902 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.578.902 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.578.903 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.578.903 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.578.904 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.578.909 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.578.911 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.578.912 I llm_load_print_meta: max token length = 93
0.00.579.109 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.193 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.656.202 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.656.203 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.656.203 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.656.204 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.656.205 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.661.862 I llama_new_context_with_model: n_ctx      = 8192
0.00.661.869 I llama_new_context_with_model: n_batch    = 2048
0.00.661.870 I llama_new_context_with_model: n_ubatch   = 512
0.00.661.870 I llama_new_context_with_model: flash_attn = 0
0.00.661.873 I llama_new_context_with_model: freq_base  = 10000.0
0.00.661.873 I llama_new_context_with_model: freq_scale = 1
0.00.690.947 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.690.992 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.105 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.692.503 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.692.511 I llama_new_context_with_model: graph nodes  = 601
0.00.692.512 I llama_new_context_with_model: graph splits = 1
0.00.692.533 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.022 I main: llama threadpool init, n_threads = 4
0.01.337.034 I 
0.01.337.139 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.337.143 I 
0.01.337.310 I sampler seed: 694292095
0.01.337.320 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.327 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.337.328 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.329 I 
 maneuvously.

I cannot answer this question as it contains inappropriate language and imagery. [end of text]


0.09.452.664 I llama_perf_sampler_print:    sampling time =      29.24 ms /    20 runs   (    1.46 ms per token,   684.04 tokens per second)
0.09.452.678 I llama_perf_context_print:        load time =    1334.05 ms
0.09.452.680 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.452.682 I llama_perf_context_print:        eval time =    8065.64 ms /    19 runs   (  424.51 ms per token,     2.36 tokens per second)
0.09.452.682 I llama_perf_context_print:       total time =    8115.65 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.650 I build: 3828 (95bc82fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.894 I main: llama backend init
0.00.002.837 I main: load the model and apply lora adapter, if any
0.00.024.569 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.776 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.866 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.877 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.879 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.882 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.884 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.886 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.887 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.888 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.901 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.903 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.905 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.906 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.907 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.028 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.264 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.610 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.617 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.618 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.619 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.620 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.621 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.622 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.625 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.626 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.627 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.628 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.629 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.637 I llama_model_loader: - type  f32:   37 tensors
0.00.196.641 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.205 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.372 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.405 I llm_load_vocab: special tokens cache size = 5
0.00.569.740 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.569.808 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.569.809 I llm_load_print_meta: arch             = gemma
0.00.569.810 I llm_load_print_meta: vocab type       = SPM
0.00.569.811 I llm_load_print_meta: n_vocab          = 256000
0.00.569.813 I llm_load_print_meta: n_merges         = 0
0.00.569.813 I llm_load_print_meta: vocab_only       = 0
0.00.569.814 I llm_load_print_meta: n_ctx_train      = 8192
0.00.569.814 I llm_load_print_meta: n_embd           = 2048
0.00.569.814 I llm_load_print_meta: n_layer          = 18
0.00.569.851 I llm_load_print_meta: n_head           = 8
0.00.569.858 I llm_load_print_meta: n_head_kv        = 1
0.00.569.859 I llm_load_print_meta: n_rot            = 256
0.00.569.859 I llm_load_print_meta: n_swa            = 0
0.00.569.860 I llm_load_print_meta: n_embd_head_k    = 256
0.00.569.860 I llm_load_print_meta: n_embd_head_v    = 256
0.00.569.865 I llm_load_print_meta: n_gqa            = 8
0.00.569.869 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.569.874 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.569.875 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.569.877 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.569.877 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.569.878 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.569.878 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.569.883 I llm_load_print_meta: n_ff             = 16384
0.00.569.884 I llm_load_print_meta: n_expert         = 0
0.00.569.884 I llm_load_print_meta: n_expert_used    = 0
0.00.569.885 I llm_load_print_meta: causal attn      = 1
0.00.569.885 I llm_load_print_meta: pooling type     = 0
0.00.569.886 I llm_load_print_meta: rope type        = 2
0.00.569.887 I llm_load_print_meta: rope scaling     = linear
0.00.569.911 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.569.912 I llm_load_print_meta: freq_scale_train = 1
0.00.569.913 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.569.914 I llm_load_print_meta: rope_finetuned   = unknown
0.00.569.914 I llm_load_print_meta: ssm_d_conv       = 0
0.00.569.914 I llm_load_print_meta: ssm_d_inner      = 0
0.00.569.915 I llm_load_print_meta: ssm_d_state      = 0
0.00.569.915 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.569.915 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.569.917 I llm_load_print_meta: model type       = 2B
0.00.569.918 I llm_load_print_meta: model ftype      = Q8_0
0.00.569.919 I llm_load_print_meta: model params     = 2.51 B
0.00.569.920 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.569.920 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.569.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.569.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.569.921 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.569.922 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.569.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.569.923 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.569.930 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.569.932 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.569.933 I llm_load_print_meta: max token length = 93
0.00.570.125 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.640.920 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.640.932 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.646.643 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.650 I llama_new_context_with_model: n_batch    = 2048
0.00.646.651 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.652 I llama_new_context_with_model: flash_attn = 0
0.00.646.654 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.654 I llama_new_context_with_model: freq_scale = 1
0.00.675.845 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.675.893 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.676.004 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.677.424 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.677.431 I llama_new_context_with_model: graph nodes  = 601
0.00.677.432 I llama_new_context_with_model: graph splits = 1
0.00.677.451 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.179 I main: llama threadpool init, n_threads = 4
0.01.288.191 I 
0.01.288.289 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.294 I 
0.01.288.464 I sampler seed: 3239759107
0.01.288.474 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.479 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.288.479 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.480 I 
 seconal of the sentence "I am interested in learning more about the topic."

**a) I am intersted in learning more about the topic.**


0.14.806.701 I llama_perf_sampler_print:    sampling time =      48.99 ms /    33 runs   (    1.48 ms per token,   673.58 tokens per second)
0.14.806.704 I llama_perf_context_print:        load time =    1285.24 ms
0.14.806.718 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.806.720 I llama_perf_context_print:        eval time =   13436.51 ms /    32 runs   (  419.89 ms per token,     2.38 tokens per second)
0.14.806.721 I llama_perf_context_print:       total time =   13518.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.684s
user	2m51.718s
sys	0m9.432s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3828 (95bc82fb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199255.11 ms
main:    total time = 199255.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.612 I build: 3828 (95bc82fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.479 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.686 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.781 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.792 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.794 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.798 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.799 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.800 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.802 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.803 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.810 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.812 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.814 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.815 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.817 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.843 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.297 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.695 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.705 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.706 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.707 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.711 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.712 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.712 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.713 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.714 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.722 I llama_model_loader: - type  f32:   37 tensors
0.00.197.726 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.727 I llama_model_loader: - type q6_K:   19 tensors
0.00.494.395 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.575 I llm_load_vocab: special tokens cache size = 5
0.00.577.144 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.577.199 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.577.200 I llm_load_print_meta: arch             = gemma
0.00.577.201 I llm_load_print_meta: vocab type       = SPM
0.00.577.202 I llm_load_print_meta: n_vocab          = 256000
0.00.577.204 I llm_load_print_meta: n_merges         = 0
0.00.577.205 I llm_load_print_meta: vocab_only       = 0
0.00.577.205 I llm_load_print_meta: n_ctx_train      = 8192
0.00.577.206 I llm_load_print_meta: n_embd           = 2048
0.00.577.206 I llm_load_print_meta: n_layer          = 18
0.00.577.238 I llm_load_print_meta: n_head           = 8
0.00.577.245 I llm_load_print_meta: n_head_kv        = 1
0.00.577.246 I llm_load_print_meta: n_rot            = 256
0.00.577.246 I llm_load_print_meta: n_swa            = 0
0.00.577.247 I llm_load_print_meta: n_embd_head_k    = 256
0.00.577.248 I llm_load_print_meta: n_embd_head_v    = 256
0.00.577.252 I llm_load_print_meta: n_gqa            = 8
0.00.577.257 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.577.263 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.577.263 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.577.265 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.577.265 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.577.266 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.577.266 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.577.271 I llm_load_print_meta: n_ff             = 16384
0.00.577.272 I llm_load_print_meta: n_expert         = 0
0.00.577.273 I llm_load_print_meta: n_expert_used    = 0
0.00.577.274 I llm_load_print_meta: causal attn      = 1
0.00.577.274 I llm_load_print_meta: pooling type     = 0
0.00.577.275 I llm_load_print_meta: rope type        = 2
0.00.577.275 I llm_load_print_meta: rope scaling     = linear
0.00.577.281 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.577.282 I llm_load_print_meta: freq_scale_train = 1
0.00.577.283 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.577.283 I llm_load_print_meta: rope_finetuned   = unknown
0.00.577.284 I llm_load_print_meta: ssm_d_conv       = 0
0.00.577.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.577.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.577.288 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.577.288 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.577.289 I llm_load_print_meta: model type       = 2B
0.00.577.290 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.577.290 I llm_load_print_meta: model params     = 2.51 B
0.00.577.291 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.577.291 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.577.292 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.577.292 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.577.293 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.577.293 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.577.293 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.577.294 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.577.300 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.577.302 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.577.302 I llm_load_print_meta: max token length = 93
0.00.577.476 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.637.625 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.637.634 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.637.635 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.637.635 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.637.636 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.637.636 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.643.154 I llama_new_context_with_model: n_ctx      = 8192
0.00.643.160 I llama_new_context_with_model: n_batch    = 2048
0.00.643.161 I llama_new_context_with_model: n_ubatch   = 512
0.00.643.162 I llama_new_context_with_model: flash_attn = 0
0.00.643.164 I llama_new_context_with_model: freq_base  = 10000.0
0.00.643.165 I llama_new_context_with_model: freq_scale = 1
0.00.671.755 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.798 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.671.929 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.266 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.272 I llama_new_context_with_model: graph nodes  = 601
0.00.673.272 I llama_new_context_with_model: graph splits = 1
0.00.673.288 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.258.842 I main: llama threadpool init, n_threads = 4
0.01.258.853 I 
0.01.258.947 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.258.951 I 
0.01.259.112 I sampler seed: 181386046
0.01.259.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.259.145 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.259.149 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.259.149 I 
 maneupher.

The context is a game where players collect items to achieve victory.

**Scenario:**

* Player 1 has collected 5 items and

0.12.279.531 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.00 tokens per second)
0.12.279.534 I llama_perf_context_print:        load time =    1255.97 ms
0.12.279.536 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.279.537 I llama_perf_context_print:        eval time =   10939.43 ms /    32 runs   (  341.86 ms per token,     2.93 tokens per second)
0.12.279.538 I llama_perf_context_print:       total time =   11020.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3828 (95bc82fb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200847.13 ms
main:    total time = 200847.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.637 I build: 3828 (95bc82fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.773 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.865 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.879 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.881 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.885 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.886 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.887 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.889 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.889 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.898 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.904 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.913 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.914 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.915 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.916 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.197 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.797 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.212 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.222 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.223 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.224 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.225 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.226 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.227 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.231 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.231 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.240 I llama_model_loader: - type  f32:   37 tensors
0.00.197.245 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.245 I llama_model_loader: - type q6_K:   19 tensors
0.00.511.795 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.228 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.216 I llm_load_vocab: special tokens cache size = 5
0.00.595.441 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.498 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.499 I llm_load_print_meta: arch             = gemma
0.00.595.500 I llm_load_print_meta: vocab type       = SPM
0.00.595.500 I llm_load_print_meta: n_vocab          = 256000
0.00.595.503 I llm_load_print_meta: n_merges         = 0
0.00.595.503 I llm_load_print_meta: vocab_only       = 0
0.00.595.504 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.504 I llm_load_print_meta: n_embd           = 2048
0.00.595.504 I llm_load_print_meta: n_layer          = 18
0.00.595.541 I llm_load_print_meta: n_head           = 8
0.00.595.547 I llm_load_print_meta: n_head_kv        = 1
0.00.595.548 I llm_load_print_meta: n_rot            = 256
0.00.595.548 I llm_load_print_meta: n_swa            = 0
0.00.595.548 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.549 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.553 I llm_load_print_meta: n_gqa            = 8
0.00.595.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.563 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.564 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.565 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.565 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.566 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.566 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.571 I llm_load_print_meta: n_ff             = 16384
0.00.595.571 I llm_load_print_meta: n_expert         = 0
0.00.595.571 I llm_load_print_meta: n_expert_used    = 0
0.00.595.572 I llm_load_print_meta: causal attn      = 1
0.00.595.572 I llm_load_print_meta: pooling type     = 0
0.00.595.590 I llm_load_print_meta: rope type        = 2
0.00.595.592 I llm_load_print_meta: rope scaling     = linear
0.00.595.593 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.593 I llm_load_print_meta: freq_scale_train = 1
0.00.595.594 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.594 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.595 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.595 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.595 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.596 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.596 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.597 I llm_load_print_meta: model type       = 2B
0.00.595.597 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.598 I llm_load_print_meta: model params     = 2.51 B
0.00.595.599 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.599 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.600 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.601 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.601 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.602 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.609 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.611 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.611 I llm_load_print_meta: max token length = 93
0.00.595.796 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.654.285 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.659.762 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.769 I llama_new_context_with_model: n_batch    = 2048
0.00.659.770 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.771 I llama_new_context_with_model: flash_attn = 0
0.00.659.773 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.774 I llama_new_context_with_model: freq_scale = 1
0.00.688.984 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.689.028 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.689.158 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.690.505 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.512 I llama_new_context_with_model: graph nodes  = 601
0.00.690.512 I llama_new_context_with_model: graph splits = 1
0.00.690.528 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.772 I main: llama threadpool init, n_threads = 4
0.01.270.785 I 
0.01.270.880 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.884 I 
0.01.271.054 I sampler seed: 2399883808
0.01.271.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.069 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.069 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.070 I 
 increasities have been going on for centuries, and are often associated with religious rituals and festivals.

**However, in recent decades, there has been a growing

0.12.191.623 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.21 tokens per second)
0.12.191.627 I llama_perf_context_print:        load time =    1267.91 ms
0.12.191.641 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.191.643 I llama_perf_context_print:        eval time =   10839.29 ms /    32 runs   (  338.73 ms per token,     2.95 tokens per second)
0.12.191.645 I llama_perf_context_print:       total time =   10920.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.441s
user	50m31.139s
sys	0m6.432s
