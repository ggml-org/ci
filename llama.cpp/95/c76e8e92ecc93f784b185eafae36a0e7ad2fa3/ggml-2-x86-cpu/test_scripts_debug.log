+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.820 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.110 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.121 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.124 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.130 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.132 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.133 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.148 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.151 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.152 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.156 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.697 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.440 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.449 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.450 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.451 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.452 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.454 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.455 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.458 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.459 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.461 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.461 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.463 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.472 I llama_model_loader: - type  f32:   37 tensors
0.00.269.476 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.866 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.530 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.555 I llm_load_vocab: special tokens cache size = 5
0.00.599.965 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.034 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.035 I llm_load_print_meta: arch             = gemma
0.00.600.036 I llm_load_print_meta: vocab type       = SPM
0.00.600.037 I llm_load_print_meta: n_vocab          = 256000
0.00.600.039 I llm_load_print_meta: n_merges         = 0
0.00.600.040 I llm_load_print_meta: vocab_only       = 0
0.00.600.040 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.040 I llm_load_print_meta: n_embd           = 2048
0.00.600.041 I llm_load_print_meta: n_layer          = 18
0.00.600.100 I llm_load_print_meta: n_head           = 8
0.00.600.108 I llm_load_print_meta: n_head_kv        = 1
0.00.600.109 I llm_load_print_meta: n_rot            = 256
0.00.600.113 I llm_load_print_meta: n_swa            = 0
0.00.600.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.115 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.122 I llm_load_print_meta: n_gqa            = 8
0.00.600.129 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.135 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.141 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.143 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.143 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.144 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.145 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.153 I llm_load_print_meta: n_ff             = 16384
0.00.600.154 I llm_load_print_meta: n_expert         = 0
0.00.600.155 I llm_load_print_meta: n_expert_used    = 0
0.00.600.156 I llm_load_print_meta: causal attn      = 1
0.00.600.157 I llm_load_print_meta: pooling type     = 0
0.00.600.160 I llm_load_print_meta: rope type        = 2
0.00.600.161 I llm_load_print_meta: rope scaling     = linear
0.00.600.164 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.165 I llm_load_print_meta: freq_scale_train = 1
0.00.600.166 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.166 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.167 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.168 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.168 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.169 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.170 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.171 I llm_load_print_meta: model type       = 2B
0.00.600.173 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.174 I llm_load_print_meta: model params     = 2.51 B
0.00.600.175 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.176 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.180 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.181 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.182 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.190 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.192 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.193 I llm_load_print_meta: max token length = 93
0.00.600.367 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.701.161 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.701.173 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.701.174 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.701.175 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.701.175 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.701.176 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.706.989 I llama_new_context_with_model: n_ctx      = 8192
0.00.706.996 I llama_new_context_with_model: n_batch    = 2048
0.00.706.997 I llama_new_context_with_model: n_ubatch   = 512
0.00.706.997 I llama_new_context_with_model: flash_attn = 0
0.00.707.000 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.000 I llama_new_context_with_model: freq_scale = 1
0.00.736.094 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.137 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.255 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.676 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.737.682 I llama_new_context_with_model: graph nodes  = 601
0.00.737.682 I llama_new_context_with_model: graph splits = 1
0.00.737.700 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.697 I main: llama threadpool init, n_threads = 4
0.01.350.708 I 
0.01.350.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.832 I 
0.01.351.008 I sampler seed: 1880342467
0.01.351.020 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.027 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.351.028 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.028 I 
 increasements, and the impact of social comparison on self-esteem.

**Social Comparison and Self-esteem: A Meta-Analysis**

**Abstract:**

0.14.949.550 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.50 tokens per second)
0.14.949.554 I llama_perf_context_print:        load time =    1347.82 ms
0.14.949.556 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.949.558 I llama_perf_context_print:        eval time =   13516.26 ms /    32 runs   (  422.38 ms per token,     2.37 tokens per second)
0.14.949.562 I llama_perf_context_print:       total time =   13598.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.002.885 I main: load the model and apply lora adapter, if any
0.00.025.292 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.394 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.411 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.416 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.423 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.425 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.427 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.429 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.430 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.432 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.441 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.446 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.448 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.453 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.156 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.002 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.011 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.012 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.013 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.014 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.016 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.017 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.021 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.022 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.024 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.026 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.028 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.037 I llama_model_loader: - type  f32:   37 tensors
0.00.270.043 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.113 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.859 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.487.878 I llm_load_vocab: special tokens cache size = 5
0.00.582.761 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.582.837 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.582.838 I llm_load_print_meta: arch             = gemma
0.00.582.838 I llm_load_print_meta: vocab type       = SPM
0.00.582.839 I llm_load_print_meta: n_vocab          = 256000
0.00.582.841 I llm_load_print_meta: n_merges         = 0
0.00.582.842 I llm_load_print_meta: vocab_only       = 0
0.00.582.842 I llm_load_print_meta: n_ctx_train      = 8192
0.00.582.842 I llm_load_print_meta: n_embd           = 2048
0.00.582.843 I llm_load_print_meta: n_layer          = 18
0.00.582.910 I llm_load_print_meta: n_head           = 8
0.00.582.919 I llm_load_print_meta: n_head_kv        = 1
0.00.582.922 I llm_load_print_meta: n_rot            = 256
0.00.582.922 I llm_load_print_meta: n_swa            = 0
0.00.582.923 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.924 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.930 I llm_load_print_meta: n_gqa            = 8
0.00.582.938 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.948 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.950 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.952 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.953 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.954 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.955 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.962 I llm_load_print_meta: n_ff             = 16384
0.00.582.966 I llm_load_print_meta: n_expert         = 0
0.00.582.967 I llm_load_print_meta: n_expert_used    = 0
0.00.582.967 I llm_load_print_meta: causal attn      = 1
0.00.582.968 I llm_load_print_meta: pooling type     = 0
0.00.582.969 I llm_load_print_meta: rope type        = 2
0.00.582.969 I llm_load_print_meta: rope scaling     = linear
0.00.582.971 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.973 I llm_load_print_meta: freq_scale_train = 1
0.00.582.974 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.974 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.976 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.977 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.977 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.978 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.979 I llm_load_print_meta: model type       = 2B
0.00.582.990 I llm_load_print_meta: model ftype      = Q8_0
0.00.582.993 I llm_load_print_meta: model params     = 2.51 B
0.00.582.994 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.582.995 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.996 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.997 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.998 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.999 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.583.000 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.583.002 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.583.010 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.583.012 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.583.013 I llm_load_print_meta: max token length = 93
0.00.583.186 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.678.418 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.684.234 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.241 I llama_new_context_with_model: n_batch    = 2048
0.00.684.242 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.242 I llama_new_context_with_model: flash_attn = 0
0.00.684.244 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.246 I llama_new_context_with_model: freq_scale = 1
0.00.713.313 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.713.360 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.713.475 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.846 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.714.848 I llama_new_context_with_model: graph nodes  = 601
0.00.714.849 I llama_new_context_with_model: graph splits = 1
0.00.714.864 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.328.938 I main: llama threadpool init, n_threads = 4
0.01.328.949 I 
0.01.329.076 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.080 I 
0.01.329.249 I sampler seed: 564720537
0.01.329.259 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.329.267 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.329.271 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.329.271 I 
 increasities that have been resolved or are unresolved. [end of text]


0.05.996.704 I llama_perf_sampler_print:    sampling time =      17.03 ms /    12 runs   (    1.42 ms per token,   704.60 tokens per second)
0.05.996.708 I llama_perf_context_print:        load time =    1325.95 ms
0.05.996.710 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.996.711 I llama_perf_context_print:        eval time =    4637.98 ms /    11 runs   (  421.63 ms per token,     2.37 tokens per second)
0.05.996.712 I llama_perf_context_print:       total time =    4667.77 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.024.771 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.979 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.078 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.091 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.093 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.098 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.102 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.103 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.104 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.105 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.106 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.113 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.114 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.116 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.117 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.119 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.936 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.421 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.426 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.429 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.448 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.450 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.451 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.452 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.460 I llama_model_loader: - type  f32:   37 tensors
0.00.270.465 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.658 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.628 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.638 I llm_load_vocab: special tokens cache size = 5
0.00.592.536 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.607 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.608 I llm_load_print_meta: arch             = gemma
0.00.592.609 I llm_load_print_meta: vocab type       = SPM
0.00.592.610 I llm_load_print_meta: n_vocab          = 256000
0.00.592.612 I llm_load_print_meta: n_merges         = 0
0.00.592.613 I llm_load_print_meta: vocab_only       = 0
0.00.592.613 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.614 I llm_load_print_meta: n_embd           = 2048
0.00.592.614 I llm_load_print_meta: n_layer          = 18
0.00.592.678 I llm_load_print_meta: n_head           = 8
0.00.592.685 I llm_load_print_meta: n_head_kv        = 1
0.00.592.686 I llm_load_print_meta: n_rot            = 256
0.00.592.686 I llm_load_print_meta: n_swa            = 0
0.00.592.687 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.687 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.693 I llm_load_print_meta: n_gqa            = 8
0.00.592.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.708 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.712 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.714 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.715 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.715 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.716 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.722 I llm_load_print_meta: n_ff             = 16384
0.00.592.723 I llm_load_print_meta: n_expert         = 0
0.00.592.724 I llm_load_print_meta: n_expert_used    = 0
0.00.592.724 I llm_load_print_meta: causal attn      = 1
0.00.592.725 I llm_load_print_meta: pooling type     = 0
0.00.592.726 I llm_load_print_meta: rope type        = 2
0.00.592.727 I llm_load_print_meta: rope scaling     = linear
0.00.592.729 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.730 I llm_load_print_meta: freq_scale_train = 1
0.00.592.731 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.731 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.734 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.736 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.736 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.738 I llm_load_print_meta: model type       = 2B
0.00.592.739 I llm_load_print_meta: model ftype      = Q8_0
0.00.592.740 I llm_load_print_meta: model params     = 2.51 B
0.00.592.742 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.592.742 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.744 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.744 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.745 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.746 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.748 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.755 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.757 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.757 I llm_load_print_meta: max token length = 93
0.00.592.935 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.810 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.670.818 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.819 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.670.819 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.670.820 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.821 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.676.576 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.583 I llama_new_context_with_model: n_batch    = 2048
0.00.676.584 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.584 I llama_new_context_with_model: flash_attn = 0
0.00.676.587 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.588 I llama_new_context_with_model: freq_scale = 1
0.00.705.761 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.803 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.918 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.311 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.707.316 I llama_new_context_with_model: graph nodes  = 601
0.00.707.316 I llama_new_context_with_model: graph splits = 1
0.00.707.331 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.249 I main: llama threadpool init, n_threads = 4
0.01.352.262 I 
0.01.352.389 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.394 I 
0.01.352.571 I sampler seed: 2854084619
0.01.352.582 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.590 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.352.590 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.591 I 
 maneuvously. [end of text]


0.03.507.332 I llama_perf_sampler_print:    sampling time =       7.80 ms /     6 runs   (    1.30 ms per token,   769.63 tokens per second)
0.03.507.346 I llama_perf_context_print:        load time =    1349.35 ms
0.03.507.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.507.349 I llama_perf_context_print:        eval time =    2140.72 ms /     5 runs   (  428.14 ms per token,     2.34 tokens per second)
0.03.507.350 I llama_perf_context_print:       total time =    2155.09 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.024.520 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.717 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.802 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.812 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.813 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.817 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.818 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.822 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.823 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.824 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.826 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.832 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.834 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.836 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.836 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.994 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.766 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.934 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.942 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.944 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.945 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.946 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.947 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.949 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.952 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.953 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.954 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.955 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.956 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.964 I llama_model_loader: - type  f32:   37 tensors
0.00.268.967 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.029 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.262 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.264 I llm_load_vocab: special tokens cache size = 5
0.00.594.048 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.119 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.120 I llm_load_print_meta: arch             = gemma
0.00.594.121 I llm_load_print_meta: vocab type       = SPM
0.00.594.121 I llm_load_print_meta: n_vocab          = 256000
0.00.594.124 I llm_load_print_meta: n_merges         = 0
0.00.594.124 I llm_load_print_meta: vocab_only       = 0
0.00.594.125 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.125 I llm_load_print_meta: n_embd           = 2048
0.00.594.125 I llm_load_print_meta: n_layer          = 18
0.00.594.187 I llm_load_print_meta: n_head           = 8
0.00.594.194 I llm_load_print_meta: n_head_kv        = 1
0.00.594.196 I llm_load_print_meta: n_rot            = 256
0.00.594.196 I llm_load_print_meta: n_swa            = 0
0.00.594.197 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.197 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.210 I llm_load_print_meta: n_gqa            = 8
0.00.594.214 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.220 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.222 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.223 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.224 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.225 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.225 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.230 I llm_load_print_meta: n_ff             = 16384
0.00.594.231 I llm_load_print_meta: n_expert         = 0
0.00.594.231 I llm_load_print_meta: n_expert_used    = 0
0.00.594.231 I llm_load_print_meta: causal attn      = 1
0.00.594.231 I llm_load_print_meta: pooling type     = 0
0.00.594.233 I llm_load_print_meta: rope type        = 2
0.00.594.233 I llm_load_print_meta: rope scaling     = linear
0.00.594.235 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.236 I llm_load_print_meta: freq_scale_train = 1
0.00.594.236 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.237 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.238 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.238 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.238 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.239 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.239 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.243 I llm_load_print_meta: model type       = 2B
0.00.594.244 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.244 I llm_load_print_meta: model params     = 2.51 B
0.00.594.245 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.246 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.248 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.249 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.250 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.251 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.252 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.252 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.260 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.280 I llm_load_print_meta: max token length = 93
0.00.594.443 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.010 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.666.023 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.671.571 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.577 I llama_new_context_with_model: n_batch    = 2048
0.00.671.578 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.579 I llama_new_context_with_model: flash_attn = 0
0.00.671.581 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.582 I llama_new_context_with_model: freq_scale = 1
0.00.702.240 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.283 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.397 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.785 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.790 I llama_new_context_with_model: graph nodes  = 601
0.00.703.790 I llama_new_context_with_model: graph splits = 1
0.00.703.806 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.684 I main: llama threadpool init, n_threads = 4
0.01.315.695 I 
0.01.315.803 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.803 I 
0.01.315.975 I sampler seed: 3871291644
0.01.315.987 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.992 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.315.993 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.993 I 
 increasities, the young woman with fiery hair, a defiant spirit, and a longing for justice, stands at the center of the storm.

The wind whistles

0.14.818.347 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.79 tokens per second)
0.14.818.350 I llama_perf_context_print:        load time =    1312.76 ms
0.14.818.352 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.818.353 I llama_perf_context_print:        eval time =   13421.07 ms /    32 runs   (  419.41 ms per token,     2.38 tokens per second)
0.14.818.365 I llama_perf_context_print:       total time =   13502.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.782s
user	2m28.468s
sys	0m9.337s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3910 (95c76e8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198296.87 ms
main:    total time = 198296.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.616 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.781 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.989 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.087 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.099 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.104 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.105 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.106 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.117 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.123 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.125 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.412 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.669 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.688 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.709 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.711 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.713 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.722 I llama_model_loader: - type  f32:   37 tensors
0.00.271.727 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.727 I llama_model_loader: - type q6_K:   19 tensors
0.00.431.413 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.005 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.479.989 I llm_load_vocab: special tokens cache size = 5
0.00.580.243 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.580.312 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.580.313 I llm_load_print_meta: arch             = gemma
0.00.580.314 I llm_load_print_meta: vocab type       = SPM
0.00.580.315 I llm_load_print_meta: n_vocab          = 256000
0.00.580.317 I llm_load_print_meta: n_merges         = 0
0.00.580.318 I llm_load_print_meta: vocab_only       = 0
0.00.580.318 I llm_load_print_meta: n_ctx_train      = 8192
0.00.580.319 I llm_load_print_meta: n_embd           = 2048
0.00.580.319 I llm_load_print_meta: n_layer          = 18
0.00.580.383 I llm_load_print_meta: n_head           = 8
0.00.580.390 I llm_load_print_meta: n_head_kv        = 1
0.00.580.392 I llm_load_print_meta: n_rot            = 256
0.00.580.393 I llm_load_print_meta: n_swa            = 0
0.00.580.394 I llm_load_print_meta: n_embd_head_k    = 256
0.00.580.394 I llm_load_print_meta: n_embd_head_v    = 256
0.00.580.399 I llm_load_print_meta: n_gqa            = 8
0.00.580.404 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.580.417 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.580.419 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.580.420 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.580.421 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.580.422 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.580.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.580.427 I llm_load_print_meta: n_ff             = 16384
0.00.580.428 I llm_load_print_meta: n_expert         = 0
0.00.580.429 I llm_load_print_meta: n_expert_used    = 0
0.00.580.429 I llm_load_print_meta: causal attn      = 1
0.00.580.429 I llm_load_print_meta: pooling type     = 0
0.00.580.430 I llm_load_print_meta: rope type        = 2
0.00.580.431 I llm_load_print_meta: rope scaling     = linear
0.00.580.433 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.580.434 I llm_load_print_meta: freq_scale_train = 1
0.00.580.435 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.580.435 I llm_load_print_meta: rope_finetuned   = unknown
0.00.580.435 I llm_load_print_meta: ssm_d_conv       = 0
0.00.580.436 I llm_load_print_meta: ssm_d_inner      = 0
0.00.580.437 I llm_load_print_meta: ssm_d_state      = 0
0.00.580.437 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.580.437 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.580.438 I llm_load_print_meta: model type       = 2B
0.00.580.439 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.580.440 I llm_load_print_meta: model params     = 2.51 B
0.00.580.441 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.580.442 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.580.443 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.580.443 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.580.444 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.580.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.580.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.580.445 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.580.451 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.580.452 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.580.453 I llm_load_print_meta: max token length = 93
0.00.580.620 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.639.783 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.639.795 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.639.796 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.639.797 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.639.797 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.639.798 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.645.522 I llama_new_context_with_model: n_ctx      = 8192
0.00.645.531 I llama_new_context_with_model: n_batch    = 2048
0.00.645.532 I llama_new_context_with_model: n_ubatch   = 512
0.00.645.532 I llama_new_context_with_model: flash_attn = 0
0.00.645.536 I llama_new_context_with_model: freq_base  = 10000.0
0.00.645.537 I llama_new_context_with_model: freq_scale = 1
0.00.674.824 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.674.868 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.674.985 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.676.374 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.676.378 I llama_new_context_with_model: graph nodes  = 601
0.00.676.379 I llama_new_context_with_model: graph splits = 1
0.00.676.395 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.255.985 I main: llama threadpool init, n_threads = 4
0.01.255.998 I 
0.01.256.104 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.256.108 I 
0.01.256.274 I sampler seed: 682563755
0.01.256.285 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.256.293 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.256.294 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.256.294 I 
 maneutruing. The sentence is: "The world is a dangerous place, and it's getting worse."

**Analysis:**

- The sentence expresses

0.12.197.368 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.91 tokens per second)
0.12.197.371 I llama_perf_context_print:        load time =    1253.12 ms
0.12.197.383 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.197.386 I llama_perf_context_print:        eval time =   10859.37 ms /    32 runs   (  339.36 ms per token,     2.95 tokens per second)
0.12.197.387 I llama_perf_context_print:       total time =   10941.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3910 (95c76e8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198343.09 ms
main:    total time = 198343.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.769 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.873 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.887 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.889 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.892 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.893 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.895 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.897 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.898 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.899 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.905 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.907 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.908 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.909 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.910 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.516 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.893 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.001 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.008 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.010 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.011 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.012 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.013 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.014 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.027 I llama_model_loader: - type  f32:   37 tensors
0.00.269.031 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.031 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.633 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.050 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.081 I llm_load_vocab: special tokens cache size = 5
0.00.592.073 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.143 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.144 I llm_load_print_meta: arch             = gemma
0.00.592.145 I llm_load_print_meta: vocab type       = SPM
0.00.592.145 I llm_load_print_meta: n_vocab          = 256000
0.00.592.148 I llm_load_print_meta: n_merges         = 0
0.00.592.149 I llm_load_print_meta: vocab_only       = 0
0.00.592.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.150 I llm_load_print_meta: n_embd           = 2048
0.00.592.150 I llm_load_print_meta: n_layer          = 18
0.00.592.214 I llm_load_print_meta: n_head           = 8
0.00.592.222 I llm_load_print_meta: n_head_kv        = 1
0.00.592.223 I llm_load_print_meta: n_rot            = 256
0.00.592.223 I llm_load_print_meta: n_swa            = 0
0.00.592.224 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.224 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.229 I llm_load_print_meta: n_gqa            = 8
0.00.592.234 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.260 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.262 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.263 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.264 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.264 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.264 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.271 I llm_load_print_meta: n_ff             = 16384
0.00.592.272 I llm_load_print_meta: n_expert         = 0
0.00.592.272 I llm_load_print_meta: n_expert_used    = 0
0.00.592.272 I llm_load_print_meta: causal attn      = 1
0.00.592.273 I llm_load_print_meta: pooling type     = 0
0.00.592.273 I llm_load_print_meta: rope type        = 2
0.00.592.274 I llm_load_print_meta: rope scaling     = linear
0.00.592.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.276 I llm_load_print_meta: freq_scale_train = 1
0.00.592.277 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.277 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.277 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.278 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.278 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.282 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.282 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.283 I llm_load_print_meta: model type       = 2B
0.00.592.284 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.592.285 I llm_load_print_meta: model params     = 2.51 B
0.00.592.286 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.592.286 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.287 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.288 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.288 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.289 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.301 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.303 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.304 I llm_load_print_meta: max token length = 93
0.00.592.472 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.662 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.657.321 I llama_new_context_with_model: n_ctx      = 8192
0.00.657.328 I llama_new_context_with_model: n_batch    = 2048
0.00.657.328 I llama_new_context_with_model: n_ubatch   = 512
0.00.657.329 I llama_new_context_with_model: flash_attn = 0
0.00.657.331 I llama_new_context_with_model: freq_base  = 10000.0
0.00.657.332 I llama_new_context_with_model: freq_scale = 1
0.00.687.503 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.551 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.689.040 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.045 I llama_new_context_with_model: graph nodes  = 601
0.00.689.045 I llama_new_context_with_model: graph splits = 1
0.00.689.061 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.268.280 I main: llama threadpool init, n_threads = 4
0.01.268.291 I 
0.01.268.396 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.268.400 I 
0.01.268.568 I sampler seed: 1115070208
0.01.268.578 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.585 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.268.586 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.587 I 
 fufilling melodies.

(Verse 1)
Sun shines bright, skies are blue
Birds sing sweet, a gentle hue
Warm breeze whispers secrets untold

0.12.245.910 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.07 tokens per second)
0.12.245.914 I llama_perf_context_print:        load time =    1265.42 ms
0.12.245.915 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.245.918 I llama_perf_context_print:        eval time =   10895.57 ms /    32 runs   (  340.49 ms per token,     2.94 tokens per second)
0.12.245.919 I llama_perf_context_print:       total time =   10977.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.895s
user	50m6.208s
sys	0m6.323s
