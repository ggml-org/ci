+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.578 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.001.859 I main: load the model and apply lora adapter, if any
0.00.021.912 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.960 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.967 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.973 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.975 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.979 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.980 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.980 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.981 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.982 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.982 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.987 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.988 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.988 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.989 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.990 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.888 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.883 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.889 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.890 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.891 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.891 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.893 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.895 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.896 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.896 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.897 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.898 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.901 I llama_model_loader: - type  f32:   37 tensors
0.00.131.904 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.142 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.712 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.361 I llm_load_vocab: special tokens cache size = 5
0.00.263.235 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.250 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.251 I llm_load_print_meta: arch             = gemma
0.00.263.251 I llm_load_print_meta: vocab type       = SPM
0.00.263.252 I llm_load_print_meta: n_vocab          = 256000
0.00.263.253 I llm_load_print_meta: n_merges         = 0
0.00.263.253 I llm_load_print_meta: vocab_only       = 0
0.00.263.253 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.253 I llm_load_print_meta: n_embd           = 2048
0.00.263.254 I llm_load_print_meta: n_layer          = 18
0.00.263.264 I llm_load_print_meta: n_head           = 8
0.00.263.265 I llm_load_print_meta: n_head_kv        = 1
0.00.263.266 I llm_load_print_meta: n_rot            = 256
0.00.263.266 I llm_load_print_meta: n_swa            = 0
0.00.263.266 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.267 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.268 I llm_load_print_meta: n_gqa            = 8
0.00.263.269 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.270 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.271 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.272 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.272 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.273 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.273 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.274 I llm_load_print_meta: n_ff             = 16384
0.00.263.274 I llm_load_print_meta: n_expert         = 0
0.00.263.274 I llm_load_print_meta: n_expert_used    = 0
0.00.263.275 I llm_load_print_meta: causal attn      = 1
0.00.263.275 I llm_load_print_meta: pooling type     = 0
0.00.263.275 I llm_load_print_meta: rope type        = 2
0.00.263.276 I llm_load_print_meta: rope scaling     = linear
0.00.263.277 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.278 I llm_load_print_meta: freq_scale_train = 1
0.00.263.278 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.279 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.279 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.279 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.280 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.280 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.280 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.281 I llm_load_print_meta: model type       = 2B
0.00.263.281 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.282 I llm_load_print_meta: model params     = 2.51 B
0.00.263.283 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.284 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.284 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.284 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.285 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.285 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.285 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.286 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.286 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.287 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.287 I llm_load_print_meta: max token length = 93
0.00.263.310 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.647 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.363.656 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.363.657 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.363.658 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.363.658 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.363.659 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.368.631 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.636 I llama_new_context_with_model: n_batch    = 2048
0.00.368.637 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.637 I llama_new_context_with_model: flash_attn = 0
0.00.368.640 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.640 I llama_new_context_with_model: freq_scale = 1
0.00.397.414 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.397.430 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.397.528 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.421 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.398.429 I llama_new_context_with_model: graph nodes  = 601
0.00.398.429 I llama_new_context_with_model: graph splits = 1
0.00.398.431 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.742 I main: llama threadpool init, n_threads = 4
0.00.489.754 I 
0.00.489.832 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.835 I 
0.00.489.873 I sampler seed: 1139035631
0.00.489.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.885 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.489.886 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.886 I 
 seconal of a neuron.

**Functions:**

* Facilitates the transmission of electrical signals along the axon.
* Regulates the release of neurotransmitters

0.02.738.278 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6691.00 tokens per second)
0.02.738.281 I llama_perf_context_print:        load time =     487.86 ms
0.02.738.282 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.738.283 I llama_perf_context_print:        eval time =    2230.34 ms /    32 runs   (   69.70 ms per token,    14.35 tokens per second)
0.02.738.284 I llama_perf_context_print:       total time =    2248.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.548 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.001.843 I main: load the model and apply lora adapter, if any
0.00.021.957 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.968 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.975 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.976 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.981 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.982 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.983 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.984 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.986 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.991 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.991 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.992 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.993 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.993 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.778 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.697 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.572 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.578 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.579 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.580 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.580 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.582 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.583 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.585 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.586 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.586 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.587 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.588 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.591 I llama_model_loader: - type  f32:   37 tensors
0.00.131.595 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.851 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.766 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.474 I llm_load_vocab: special tokens cache size = 5
0.00.265.318 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.333 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.333 I llm_load_print_meta: arch             = gemma
0.00.265.334 I llm_load_print_meta: vocab type       = SPM
0.00.265.334 I llm_load_print_meta: n_vocab          = 256000
0.00.265.335 I llm_load_print_meta: n_merges         = 0
0.00.265.335 I llm_load_print_meta: vocab_only       = 0
0.00.265.336 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.336 I llm_load_print_meta: n_embd           = 2048
0.00.265.336 I llm_load_print_meta: n_layer          = 18
0.00.265.348 I llm_load_print_meta: n_head           = 8
0.00.265.349 I llm_load_print_meta: n_head_kv        = 1
0.00.265.349 I llm_load_print_meta: n_rot            = 256
0.00.265.349 I llm_load_print_meta: n_swa            = 0
0.00.265.350 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.350 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.351 I llm_load_print_meta: n_gqa            = 8
0.00.265.352 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.353 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.354 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.355 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.355 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.356 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.356 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.357 I llm_load_print_meta: n_ff             = 16384
0.00.265.357 I llm_load_print_meta: n_expert         = 0
0.00.265.357 I llm_load_print_meta: n_expert_used    = 0
0.00.265.358 I llm_load_print_meta: causal attn      = 1
0.00.265.358 I llm_load_print_meta: pooling type     = 0
0.00.265.358 I llm_load_print_meta: rope type        = 2
0.00.265.359 I llm_load_print_meta: rope scaling     = linear
0.00.265.360 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.361 I llm_load_print_meta: freq_scale_train = 1
0.00.265.361 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.361 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.362 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.362 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.362 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.362 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.363 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.363 I llm_load_print_meta: model type       = 2B
0.00.265.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.364 I llm_load_print_meta: model params     = 2.51 B
0.00.265.365 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.366 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.366 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.367 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.367 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.368 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.368 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.368 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.369 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.369 I llm_load_print_meta: max token length = 93
0.00.265.387 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.359.712 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.364.729 I llama_new_context_with_model: n_ctx      = 8192
0.00.364.735 I llama_new_context_with_model: n_batch    = 2048
0.00.364.736 I llama_new_context_with_model: n_ubatch   = 512
0.00.364.736 I llama_new_context_with_model: flash_attn = 0
0.00.364.739 I llama_new_context_with_model: freq_base  = 10000.0
0.00.364.739 I llama_new_context_with_model: freq_scale = 1
0.00.393.443 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.393.459 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.393.551 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.397 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.394.405 I llama_new_context_with_model: graph nodes  = 601
0.00.394.406 I llama_new_context_with_model: graph splits = 1
0.00.394.407 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.161 I main: llama threadpool init, n_threads = 4
0.00.482.173 I 
0.00.482.249 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.252 I 
0.00.482.289 I sampler seed: 3901083762
0.00.482.299 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.301 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.482.302 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.302 I 
 increasities?

I am unable to answer this question as it contains sexually suggestive and inappropriate content. I am programmed to uphold ethical guidelines and am unable to provide

0.02.648.968 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6645.19 tokens per second)
0.02.648.971 I llama_perf_context_print:        load time =     480.30 ms
0.02.648.972 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.648.973 I llama_perf_context_print:        eval time =    2148.19 ms /    32 runs   (   67.13 ms per token,    14.90 tokens per second)
0.02.648.974 I llama_perf_context_print:       total time =    2166.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.001.891 I main: load the model and apply lora adapter, if any
0.00.021.992 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.049 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.058 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.065 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.077 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.085 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.086 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.093 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.094 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.100 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.101 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.102 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.103 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.802 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.000 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.963 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.974 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.974 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.975 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.976 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.978 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.980 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.981 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.981 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.982 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.987 I llama_model_loader: - type  f32:   37 tensors
0.00.133.990 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.790 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.322 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.231 I llm_load_vocab: special tokens cache size = 5
0.00.269.501 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.519 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.519 I llm_load_print_meta: arch             = gemma
0.00.269.520 I llm_load_print_meta: vocab type       = SPM
0.00.269.521 I llm_load_print_meta: n_vocab          = 256000
0.00.269.521 I llm_load_print_meta: n_merges         = 0
0.00.269.522 I llm_load_print_meta: vocab_only       = 0
0.00.269.522 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.523 I llm_load_print_meta: n_embd           = 2048
0.00.269.523 I llm_load_print_meta: n_layer          = 18
0.00.269.535 I llm_load_print_meta: n_head           = 8
0.00.269.536 I llm_load_print_meta: n_head_kv        = 1
0.00.269.537 I llm_load_print_meta: n_rot            = 256
0.00.269.537 I llm_load_print_meta: n_swa            = 0
0.00.269.537 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.538 I llm_load_print_meta: n_gqa            = 8
0.00.269.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.540 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.542 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.543 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.543 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.544 I llm_load_print_meta: n_ff             = 16384
0.00.269.545 I llm_load_print_meta: n_expert         = 0
0.00.269.545 I llm_load_print_meta: n_expert_used    = 0
0.00.269.545 I llm_load_print_meta: causal attn      = 1
0.00.269.545 I llm_load_print_meta: pooling type     = 0
0.00.269.546 I llm_load_print_meta: rope type        = 2
0.00.269.546 I llm_load_print_meta: rope scaling     = linear
0.00.269.548 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.548 I llm_load_print_meta: freq_scale_train = 1
0.00.269.549 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.549 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.550 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.550 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.550 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.551 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.551 I llm_load_print_meta: model type       = 2B
0.00.269.551 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.552 I llm_load_print_meta: model params     = 2.51 B
0.00.269.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.553 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.554 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.554 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.555 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.555 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.556 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.556 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.556 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.557 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.557 I llm_load_print_meta: max token length = 93
0.00.269.587 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.345.723 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.345.730 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.345.731 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.345.732 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.345.733 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.345.733 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.350.858 I llama_new_context_with_model: n_ctx      = 8192
0.00.350.865 I llama_new_context_with_model: n_batch    = 2048
0.00.350.865 I llama_new_context_with_model: n_ubatch   = 512
0.00.350.866 I llama_new_context_with_model: flash_attn = 0
0.00.350.868 I llama_new_context_with_model: freq_base  = 10000.0
0.00.350.869 I llama_new_context_with_model: freq_scale = 1
0.00.379.700 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.379.714 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.379.824 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.711 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.380.719 I llama_new_context_with_model: graph nodes  = 601
0.00.380.720 I llama_new_context_with_model: graph splits = 1
0.00.380.722 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.799 I main: llama threadpool init, n_threads = 4
0.00.473.811 I 
0.00.473.901 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.473.905 I 
0.00.473.945 I sampler seed: 344755713
0.00.473.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.957 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.473.958 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.958 I 
 increasels and other fairy tales, are replete with magic and enchantment. However, the real world, with all its limitations, can never fully replicate the wonder and

0.02.722.443 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6978.22 tokens per second)
0.02.722.446 I llama_perf_context_print:        load time =     471.88 ms
0.02.722.447 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.722.448 I llama_perf_context_print:        eval time =    2230.15 ms /    32 runs   (   69.69 ms per token,    14.35 tokens per second)
0.02.722.449 I llama_perf_context_print:       total time =    2248.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.569 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.917 I main: load the model and apply lora adapter, if any
0.00.022.191 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.247 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.256 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.263 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.264 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.270 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.271 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.272 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.273 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.274 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.275 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.281 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.282 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.283 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.284 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.285 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.172 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.076 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.082 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.083 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.084 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.084 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.086 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.090 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.090 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.091 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.092 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.096 I llama_model_loader: - type  f32:   37 tensors
0.00.133.099 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.628 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.629 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.387 I llm_load_vocab: special tokens cache size = 5
0.00.266.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.385 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.385 I llm_load_print_meta: arch             = gemma
0.00.266.386 I llm_load_print_meta: vocab type       = SPM
0.00.266.387 I llm_load_print_meta: n_vocab          = 256000
0.00.266.387 I llm_load_print_meta: n_merges         = 0
0.00.266.388 I llm_load_print_meta: vocab_only       = 0
0.00.266.389 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.390 I llm_load_print_meta: n_embd           = 2048
0.00.266.390 I llm_load_print_meta: n_layer          = 18
0.00.266.403 I llm_load_print_meta: n_head           = 8
0.00.266.406 I llm_load_print_meta: n_head_kv        = 1
0.00.266.407 I llm_load_print_meta: n_rot            = 256
0.00.266.407 I llm_load_print_meta: n_swa            = 0
0.00.266.408 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.409 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.411 I llm_load_print_meta: n_gqa            = 8
0.00.266.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.414 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.416 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.417 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.418 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.419 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.419 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.421 I llm_load_print_meta: n_ff             = 16384
0.00.266.421 I llm_load_print_meta: n_expert         = 0
0.00.266.422 I llm_load_print_meta: n_expert_used    = 0
0.00.266.422 I llm_load_print_meta: causal attn      = 1
0.00.266.423 I llm_load_print_meta: pooling type     = 0
0.00.266.423 I llm_load_print_meta: rope type        = 2
0.00.266.424 I llm_load_print_meta: rope scaling     = linear
0.00.266.426 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.427 I llm_load_print_meta: freq_scale_train = 1
0.00.266.428 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.429 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.429 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.430 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.430 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.431 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.431 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.432 I llm_load_print_meta: model type       = 2B
0.00.266.433 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.434 I llm_load_print_meta: model params     = 2.51 B
0.00.266.436 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.436 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.437 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.438 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.439 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.439 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.440 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.440 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.441 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.442 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.442 I llm_load_print_meta: max token length = 93
0.00.266.469 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.336.330 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.336.338 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.341.370 I llama_new_context_with_model: n_ctx      = 8192
0.00.341.376 I llama_new_context_with_model: n_batch    = 2048
0.00.341.376 I llama_new_context_with_model: n_ubatch   = 512
0.00.341.376 I llama_new_context_with_model: flash_attn = 0
0.00.341.379 I llama_new_context_with_model: freq_base  = 10000.0
0.00.341.380 I llama_new_context_with_model: freq_scale = 1
0.00.369.981 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.369.995 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.967 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.370.975 I llama_new_context_with_model: graph nodes  = 601
0.00.370.976 I llama_new_context_with_model: graph splits = 1
0.00.370.977 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.060 I main: llama threadpool init, n_threads = 4
0.00.469.072 I 
0.00.469.170 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.174 I 
0.00.469.221 I sampler seed: 3045805664
0.00.469.231 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.235 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.469.236 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.236 I 
 increasities. [end of text]


0.00.774.166 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8103.73 tokens per second)
0.00.774.169 I llama_perf_context_print:        load time =     467.12 ms
0.00.774.170 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.774.173 I llama_perf_context_print:        eval time =     302.03 ms /     4 runs   (   75.51 ms per token,    13.24 tokens per second)
0.00.774.178 I llama_perf_context_print:       total time =     305.11 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.196s
user	0m30.746s
sys	0m9.388s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3910 (95c76e8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32089.92 ms
main:    total time = 32089.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.526 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.001.835 I main: load the model and apply lora adapter, if any
0.00.021.949 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.997 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.012 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.018 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.024 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.025 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.025 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.026 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.026 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.027 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.030 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.030 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.031 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.031 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.032 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.688 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.134 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.136 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.137 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.139 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.139 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.143 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.143 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.144 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.145 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.146 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.150 I llama_model_loader: - type  f32:   37 tensors
0.00.132.153 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.154 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.984 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.304 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.050 I llm_load_vocab: special tokens cache size = 5
0.00.267.096 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.113 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.114 I llm_load_print_meta: arch             = gemma
0.00.267.114 I llm_load_print_meta: vocab type       = SPM
0.00.267.115 I llm_load_print_meta: n_vocab          = 256000
0.00.267.115 I llm_load_print_meta: n_merges         = 0
0.00.267.116 I llm_load_print_meta: vocab_only       = 0
0.00.267.116 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.116 I llm_load_print_meta: n_embd           = 2048
0.00.267.117 I llm_load_print_meta: n_layer          = 18
0.00.267.130 I llm_load_print_meta: n_head           = 8
0.00.267.131 I llm_load_print_meta: n_head_kv        = 1
0.00.267.132 I llm_load_print_meta: n_rot            = 256
0.00.267.132 I llm_load_print_meta: n_swa            = 0
0.00.267.133 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.134 I llm_load_print_meta: n_gqa            = 8
0.00.267.136 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.137 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.140 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.141 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.142 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.142 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.142 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.143 I llm_load_print_meta: n_ff             = 16384
0.00.267.143 I llm_load_print_meta: n_expert         = 0
0.00.267.143 I llm_load_print_meta: n_expert_used    = 0
0.00.267.144 I llm_load_print_meta: causal attn      = 1
0.00.267.144 I llm_load_print_meta: pooling type     = 0
0.00.267.147 I llm_load_print_meta: rope type        = 2
0.00.267.147 I llm_load_print_meta: rope scaling     = linear
0.00.267.149 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.149 I llm_load_print_meta: freq_scale_train = 1
0.00.267.150 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.150 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.150 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.151 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.151 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.151 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.151 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.152 I llm_load_print_meta: model type       = 2B
0.00.267.152 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.153 I llm_load_print_meta: model params     = 2.51 B
0.00.267.154 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.154 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.155 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.155 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.156 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.156 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.156 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.156 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.157 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.157 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.158 I llm_load_print_meta: max token length = 93
0.00.267.178 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.324.988 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.324.995 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.324.996 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.324.997 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.324.997 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.324.998 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.329.978 I llama_new_context_with_model: n_ctx      = 8192
0.00.329.985 I llama_new_context_with_model: n_batch    = 2048
0.00.329.985 I llama_new_context_with_model: n_ubatch   = 512
0.00.329.986 I llama_new_context_with_model: flash_attn = 0
0.00.329.988 I llama_new_context_with_model: freq_base  = 10000.0
0.00.329.989 I llama_new_context_with_model: freq_scale = 1
0.00.358.439 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.358.452 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.358.540 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.390 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.359.398 I llama_new_context_with_model: graph nodes  = 601
0.00.359.399 I llama_new_context_with_model: graph splits = 1
0.00.359.401 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.792 I main: llama threadpool init, n_threads = 4
0.00.440.803 I 
0.00.440.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.882 I 
0.00.440.918 I sampler seed: 1523520570
0.00.440.929 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.936 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.440.936 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.936 I 
 seconded sentences and used transition words in this answer.

The recent advancements in technology have revolutionized the way we live, work, and interact with the world

0.02.025.684 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7122.81 tokens per second)
0.02.025.686 I llama_perf_context_print:        load time =     438.94 ms
0.02.025.687 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.025.689 I llama_perf_context_print:        eval time =    1566.99 ms /    32 runs   (   48.97 ms per token,    20.42 tokens per second)
0.02.025.690 I llama_perf_context_print:       total time =    1584.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3910 (95c76e8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32032.49 ms
main:    total time = 32032.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.526 I build: 3910 (95c76e8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.001.849 I main: load the model and apply lora adapter, if any
0.00.021.846 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.858 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.865 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.866 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.870 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.871 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.872 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.872 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.873 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.873 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.877 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.878 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.878 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.879 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.422 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.496 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.415 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.422 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.427 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.432 I llama_model_loader: - type  f32:   37 tensors
0.00.132.434 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.435 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.188 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.599 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.328 I llm_load_vocab: special tokens cache size = 5
0.00.267.388 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.405 I llm_load_print_meta: arch             = gemma
0.00.267.406 I llm_load_print_meta: vocab type       = SPM
0.00.267.406 I llm_load_print_meta: n_vocab          = 256000
0.00.267.407 I llm_load_print_meta: n_merges         = 0
0.00.267.407 I llm_load_print_meta: vocab_only       = 0
0.00.267.408 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.408 I llm_load_print_meta: n_embd           = 2048
0.00.267.409 I llm_load_print_meta: n_layer          = 18
0.00.267.421 I llm_load_print_meta: n_head           = 8
0.00.267.422 I llm_load_print_meta: n_head_kv        = 1
0.00.267.422 I llm_load_print_meta: n_rot            = 256
0.00.267.423 I llm_load_print_meta: n_swa            = 0
0.00.267.423 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.423 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.424 I llm_load_print_meta: n_gqa            = 8
0.00.267.425 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.426 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.427 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.428 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.428 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.429 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.429 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.430 I llm_load_print_meta: n_ff             = 16384
0.00.267.430 I llm_load_print_meta: n_expert         = 0
0.00.267.431 I llm_load_print_meta: n_expert_used    = 0
0.00.267.431 I llm_load_print_meta: causal attn      = 1
0.00.267.432 I llm_load_print_meta: pooling type     = 0
0.00.267.432 I llm_load_print_meta: rope type        = 2
0.00.267.433 I llm_load_print_meta: rope scaling     = linear
0.00.267.435 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.435 I llm_load_print_meta: freq_scale_train = 1
0.00.267.436 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.437 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.437 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.438 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.438 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.438 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.439 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.440 I llm_load_print_meta: model type       = 2B
0.00.267.441 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.441 I llm_load_print_meta: model params     = 2.51 B
0.00.267.442 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.442 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.443 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.443 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.444 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.446 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.447 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.447 I llm_load_print_meta: max token length = 93
0.00.267.473 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.324.952 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.330.044 I llama_new_context_with_model: n_ctx      = 8192
0.00.330.050 I llama_new_context_with_model: n_batch    = 2048
0.00.330.050 I llama_new_context_with_model: n_ubatch   = 512
0.00.330.050 I llama_new_context_with_model: flash_attn = 0
0.00.330.053 I llama_new_context_with_model: freq_base  = 10000.0
0.00.330.054 I llama_new_context_with_model: freq_scale = 1
0.00.360.176 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.360.191 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.360.284 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.131 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.361.139 I llama_new_context_with_model: graph nodes  = 601
0.00.361.140 I llama_new_context_with_model: graph splits = 1
0.00.361.142 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.746 I main: llama threadpool init, n_threads = 4
0.00.441.758 I 
0.00.441.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.836 I 
0.00.441.872 I sampler seed: 142133903
0.00.441.881 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.883 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.884 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.884 I 
 maneuvously, a riddle whispered through the wind: "Where can you find the biggest collection of knowledge, if you have no memory of where it is?"

0.02.021.829 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6877.87 tokens per second)
0.02.021.831 I llama_perf_context_print:        load time =     439.88 ms
0.02.021.833 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.021.835 I llama_perf_context_print:        eval time =    1561.62 ms /    32 runs   (   48.80 ms per token,    20.49 tokens per second)
0.02.021.836 I llama_perf_context_print:       total time =    1580.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.102s
user	8m14.869s
sys	0m6.762s
