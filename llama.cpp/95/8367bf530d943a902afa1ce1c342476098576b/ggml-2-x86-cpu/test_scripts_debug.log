+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3974 (958367bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.872 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.087 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.181 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.194 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.196 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.202 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.203 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.215 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.216 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.217 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.219 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.220 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.642 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.951 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.962 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.963 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.964 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.965 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.966 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.968 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.972 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.973 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.974 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.975 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.976 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.985 I llama_model_loader: - type  f32:   37 tensors
0.00.271.989 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.447 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.415 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.503 I llm_load_vocab: special tokens cache size = 5
0.00.651.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.651.672 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.651.673 I llm_load_print_meta: arch             = gemma
0.00.651.674 I llm_load_print_meta: vocab type       = SPM
0.00.651.675 I llm_load_print_meta: n_vocab          = 256000
0.00.651.677 I llm_load_print_meta: n_merges         = 0
0.00.651.678 I llm_load_print_meta: vocab_only       = 0
0.00.651.678 I llm_load_print_meta: n_ctx_train      = 8192
0.00.651.678 I llm_load_print_meta: n_embd           = 2048
0.00.651.679 I llm_load_print_meta: n_layer          = 18
0.00.651.742 I llm_load_print_meta: n_head           = 8
0.00.651.749 I llm_load_print_meta: n_head_kv        = 1
0.00.651.750 I llm_load_print_meta: n_rot            = 256
0.00.651.751 I llm_load_print_meta: n_swa            = 0
0.00.651.752 I llm_load_print_meta: n_embd_head_k    = 256
0.00.651.752 I llm_load_print_meta: n_embd_head_v    = 256
0.00.651.757 I llm_load_print_meta: n_gqa            = 8
0.00.651.762 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.651.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.651.768 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.651.774 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.651.775 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.651.776 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.651.776 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.651.781 I llm_load_print_meta: n_ff             = 16384
0.00.651.782 I llm_load_print_meta: n_expert         = 0
0.00.651.785 I llm_load_print_meta: n_expert_used    = 0
0.00.651.785 I llm_load_print_meta: causal attn      = 1
0.00.651.786 I llm_load_print_meta: pooling type     = 0
0.00.651.786 I llm_load_print_meta: rope type        = 2
0.00.651.787 I llm_load_print_meta: rope scaling     = linear
0.00.651.788 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.651.789 I llm_load_print_meta: freq_scale_train = 1
0.00.651.789 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.651.789 I llm_load_print_meta: rope_finetuned   = unknown
0.00.651.790 I llm_load_print_meta: ssm_d_conv       = 0
0.00.651.790 I llm_load_print_meta: ssm_d_inner      = 0
0.00.651.790 I llm_load_print_meta: ssm_d_state      = 0
0.00.651.790 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.651.791 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.651.792 I llm_load_print_meta: model type       = 2B
0.00.651.793 I llm_load_print_meta: model ftype      = Q8_0
0.00.651.794 I llm_load_print_meta: model params     = 2.51 B
0.00.651.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.651.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.651.796 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.651.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.651.797 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.651.799 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.651.799 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.651.800 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.651.806 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.651.808 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.651.809 I llm_load_print_meta: max token length = 93
0.00.651.970 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.751.749 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.751.760 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.751.761 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.751.762 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.751.762 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.751.763 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.757.508 I llama_new_context_with_model: n_ctx      = 8192
0.00.757.517 I llama_new_context_with_model: n_batch    = 2048
0.00.757.518 I llama_new_context_with_model: n_ubatch   = 512
0.00.757.518 I llama_new_context_with_model: flash_attn = 0
0.00.757.522 I llama_new_context_with_model: freq_base  = 10000.0
0.00.757.523 I llama_new_context_with_model: freq_scale = 1
0.00.789.374 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.789.419 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.789.537 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.790.991 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.790.996 I llama_new_context_with_model: graph nodes  = 601
0.00.790.996 I llama_new_context_with_model: graph splits = 1
0.00.791.013 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.405.214 I main: llama threadpool init, n_threads = 4
0.01.405.228 I 
0.01.405.338 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.405.342 I 
0.01.405.522 I sampler seed: 4223732644
0.01.405.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.405.540 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.405.541 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.405.541 I 
 secon.

I cannot find the requested information in the provided context. Please provide additional context or search for the information yourself. [end of text]


0.12.374.566 I llama_perf_sampler_print:    sampling time =      39.79 ms /    27 runs   (    1.47 ms per token,   678.60 tokens per second)
0.12.374.569 I llama_perf_context_print:        load time =    1402.31 ms
0.12.374.571 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.374.595 I llama_perf_context_print:        eval time =   10891.84 ms /    26 runs   (  418.92 ms per token,     2.39 tokens per second)
0.12.374.597 I llama_perf_context_print:       total time =   10969.36 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 3974 (958367bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.781 I main: load the model and apply lora adapter, if any
0.00.024.778 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.875 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.890 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.894 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.898 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.900 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.901 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.903 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.904 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.906 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.917 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.918 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.919 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.920 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.401 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.268.813 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.883 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.884 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.885 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.886 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.887 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.888 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.892 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.893 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.895 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.286.896 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.286.897 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.286.905 I llama_model_loader: - type  f32:   37 tensors
0.00.286.911 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.871 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.540.468 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.541.437 I llm_load_vocab: special tokens cache size = 5
0.00.636.528 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.597 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.598 I llm_load_print_meta: arch             = gemma
0.00.636.599 I llm_load_print_meta: vocab type       = SPM
0.00.636.599 I llm_load_print_meta: n_vocab          = 256000
0.00.636.602 I llm_load_print_meta: n_merges         = 0
0.00.636.602 I llm_load_print_meta: vocab_only       = 0
0.00.636.602 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.603 I llm_load_print_meta: n_embd           = 2048
0.00.636.603 I llm_load_print_meta: n_layer          = 18
0.00.636.667 I llm_load_print_meta: n_head           = 8
0.00.636.674 I llm_load_print_meta: n_head_kv        = 1
0.00.636.676 I llm_load_print_meta: n_rot            = 256
0.00.636.676 I llm_load_print_meta: n_swa            = 0
0.00.636.676 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.676 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.681 I llm_load_print_meta: n_gqa            = 8
0.00.636.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.692 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.693 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.694 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.695 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.695 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.695 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.700 I llm_load_print_meta: n_ff             = 16384
0.00.636.702 I llm_load_print_meta: n_expert         = 0
0.00.636.702 I llm_load_print_meta: n_expert_used    = 0
0.00.636.703 I llm_load_print_meta: causal attn      = 1
0.00.636.704 I llm_load_print_meta: pooling type     = 0
0.00.636.704 I llm_load_print_meta: rope type        = 2
0.00.636.705 I llm_load_print_meta: rope scaling     = linear
0.00.636.706 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.707 I llm_load_print_meta: freq_scale_train = 1
0.00.636.707 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.717 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.721 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.722 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.722 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.722 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.723 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.736 I llm_load_print_meta: model type       = 2B
0.00.636.737 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.738 I llm_load_print_meta: model params     = 2.51 B
0.00.636.747 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.748 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.749 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.749 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.749 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.757 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.764 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.765 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.770 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.772 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.772 I llm_load_print_meta: max token length = 93
0.00.636.938 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.730.804 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.736.526 I llama_new_context_with_model: n_ctx      = 8192
0.00.736.533 I llama_new_context_with_model: n_batch    = 2048
0.00.736.534 I llama_new_context_with_model: n_ubatch   = 512
0.00.736.534 I llama_new_context_with_model: flash_attn = 0
0.00.736.538 I llama_new_context_with_model: freq_base  = 10000.0
0.00.736.539 I llama_new_context_with_model: freq_scale = 1
0.00.766.226 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.766.271 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.766.389 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.767.780 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.767.785 I llama_new_context_with_model: graph nodes  = 601
0.00.767.785 I llama_new_context_with_model: graph splits = 1
0.00.767.801 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.347 I main: llama threadpool init, n_threads = 4
0.01.378.360 I 
0.01.378.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.468 I 
0.01.378.646 I sampler seed: 3486495224
0.01.378.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.378.664 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.378.664 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.378.665 I 
 increasities? [end of text]


0.03.062.478 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.98 tokens per second)
0.03.062.482 I llama_perf_context_print:        load time =    1375.48 ms
0.03.062.495 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.062.497 I llama_perf_context_print:        eval time =    1670.88 ms /     4 runs   (  417.72 ms per token,     2.39 tokens per second)
0.03.062.499 I llama_perf_context_print:       total time =    1684.14 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3974 (958367bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.025.142 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.360 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.458 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.471 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.473 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.478 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.482 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.484 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.485 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.487 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.489 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.498 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.500 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.501 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.354 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.684 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.696 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.697 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.698 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.699 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.700 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.701 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.705 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.706 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.726 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.728 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.276.730 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.740 I llama_model_loader: - type  f32:   37 tensors
0.00.276.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.243 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.316 I llm_load_vocab: special tokens cache size = 5
0.00.631.836 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.911 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.912 I llm_load_print_meta: arch             = gemma
0.00.631.912 I llm_load_print_meta: vocab type       = SPM
0.00.631.913 I llm_load_print_meta: n_vocab          = 256000
0.00.631.915 I llm_load_print_meta: n_merges         = 0
0.00.631.916 I llm_load_print_meta: vocab_only       = 0
0.00.631.917 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.917 I llm_load_print_meta: n_embd           = 2048
0.00.631.917 I llm_load_print_meta: n_layer          = 18
0.00.631.987 I llm_load_print_meta: n_head           = 8
0.00.631.994 I llm_load_print_meta: n_head_kv        = 1
0.00.631.996 I llm_load_print_meta: n_rot            = 256
0.00.631.997 I llm_load_print_meta: n_swa            = 0
0.00.631.997 I llm_load_print_meta: n_embd_head_k    = 256
0.00.631.998 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.003 I llm_load_print_meta: n_gqa            = 8
0.00.632.007 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.013 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.014 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.015 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.016 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.017 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.017 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.022 I llm_load_print_meta: n_ff             = 16384
0.00.632.023 I llm_load_print_meta: n_expert         = 0
0.00.632.024 I llm_load_print_meta: n_expert_used    = 0
0.00.632.024 I llm_load_print_meta: causal attn      = 1
0.00.632.025 I llm_load_print_meta: pooling type     = 0
0.00.632.025 I llm_load_print_meta: rope type        = 2
0.00.632.026 I llm_load_print_meta: rope scaling     = linear
0.00.632.031 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.032 I llm_load_print_meta: freq_scale_train = 1
0.00.632.032 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.033 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.033 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.033 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.033 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.034 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.034 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.035 I llm_load_print_meta: model type       = 2B
0.00.632.035 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.036 I llm_load_print_meta: model params     = 2.51 B
0.00.632.037 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.038 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.039 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.047 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.049 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.050 I llm_load_print_meta: max token length = 93
0.00.632.226 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.710.329 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.710.337 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.338 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.710.338 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.710.339 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.339 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.716.164 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.173 I llama_new_context_with_model: n_batch    = 2048
0.00.716.173 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.174 I llama_new_context_with_model: flash_attn = 0
0.00.716.176 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.177 I llama_new_context_with_model: freq_scale = 1
0.00.746.474 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.518 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.632 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.059 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.064 I llama_new_context_with_model: graph nodes  = 601
0.00.748.065 I llama_new_context_with_model: graph splits = 1
0.00.748.080 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.713 I main: llama threadpool init, n_threads = 4
0.01.357.727 I 
0.01.357.859 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.864 I 
0.01.358.053 I sampler seed: 135679636
0.01.358.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.071 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.075 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.075 I 
 increasities and use the following scenario to illustrate the concept:

**Scenario:**

A company has a large database of customer information, including personally identifiable information (

0.14.886.672 I llama_perf_sampler_print:    sampling time =      50.73 ms /    33 runs   (    1.54 ms per token,   650.49 tokens per second)
0.14.886.675 I llama_perf_context_print:        load time =    1354.82 ms
0.14.886.676 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.886.698 I llama_perf_context_print:        eval time =   13431.39 ms /    32 runs   (  419.73 ms per token,     2.38 tokens per second)
0.14.886.699 I llama_perf_context_print:       total time =   13528.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 3974 (958367bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.918 I main: llama backend init
0.00.002.899 I main: load the model and apply lora adapter, if any
0.00.024.660 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.960 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.972 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.974 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.979 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.980 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.982 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.983 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.984 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.996 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.998 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.000 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.002 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.918 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.230 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.240 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.243 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.245 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.251 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.253 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.262 I llama_model_loader: - type  f32:   37 tensors
0.00.270.265 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.721 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.604 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.594 I llm_load_vocab: special tokens cache size = 5
0.00.616.000 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.075 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.080 I llm_load_print_meta: arch             = gemma
0.00.616.081 I llm_load_print_meta: vocab type       = SPM
0.00.616.082 I llm_load_print_meta: n_vocab          = 256000
0.00.616.084 I llm_load_print_meta: n_merges         = 0
0.00.616.085 I llm_load_print_meta: vocab_only       = 0
0.00.616.085 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.086 I llm_load_print_meta: n_embd           = 2048
0.00.616.086 I llm_load_print_meta: n_layer          = 18
0.00.616.163 I llm_load_print_meta: n_head           = 8
0.00.616.173 I llm_load_print_meta: n_head_kv        = 1
0.00.616.174 I llm_load_print_meta: n_rot            = 256
0.00.616.175 I llm_load_print_meta: n_swa            = 0
0.00.616.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.176 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.180 I llm_load_print_meta: n_gqa            = 8
0.00.616.185 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.191 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.196 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.198 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.199 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.199 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.200 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.208 I llm_load_print_meta: n_ff             = 16384
0.00.616.209 I llm_load_print_meta: n_expert         = 0
0.00.616.210 I llm_load_print_meta: n_expert_used    = 0
0.00.616.210 I llm_load_print_meta: causal attn      = 1
0.00.616.219 I llm_load_print_meta: pooling type     = 0
0.00.616.219 I llm_load_print_meta: rope type        = 2
0.00.616.220 I llm_load_print_meta: rope scaling     = linear
0.00.616.222 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.223 I llm_load_print_meta: freq_scale_train = 1
0.00.616.224 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.225 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.227 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.228 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.229 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.229 I llm_load_print_meta: model type       = 2B
0.00.616.231 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.232 I llm_load_print_meta: model params     = 2.51 B
0.00.616.234 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.237 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.238 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.238 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.239 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.240 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.240 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.241 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.249 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.252 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.261 I llm_load_print_meta: max token length = 93
0.00.616.449 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.478 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.687.490 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.693.254 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.262 I llama_new_context_with_model: n_batch    = 2048
0.00.693.262 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.263 I llama_new_context_with_model: flash_attn = 0
0.00.693.265 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.266 I llama_new_context_with_model: freq_scale = 1
0.00.722.212 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.258 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.368 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.735 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.739 I llama_new_context_with_model: graph nodes  = 601
0.00.723.740 I llama_new_context_with_model: graph splits = 1
0.00.723.756 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.334.678 I main: llama threadpool init, n_threads = 4
0.01.334.691 I 
0.01.334.810 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.334.814 I 
0.01.334.998 I sampler seed: 462198252
0.01.335.010 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.019 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.335.020 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.020 I 
 increasities that can arise in different contexts, particularly in the realm of Artificial Intelligence and Machine Learning.

**1. Explainable AI:**

- Definition:

0.14.861.774 I llama_perf_sampler_print:    sampling time =      51.40 ms /    33 runs   (    1.56 ms per token,   641.97 tokens per second)
0.14.861.792 I llama_perf_context_print:        load time =    1331.69 ms
0.14.861.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.861.796 I llama_perf_context_print:        eval time =   13430.24 ms /    32 runs   (  419.69 ms per token,     2.38 tokens per second)
0.14.861.796 I llama_perf_context_print:       total time =   13527.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.953s
user	2m51.582s
sys	0m9.542s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3974 (958367bf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199212.16 ms
main:    total time = 199212.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.552 I build: 3974 (958367bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.749 I main: llama backend init
0.00.002.683 I main: load the model and apply lora adapter, if any
0.00.024.696 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.899 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.992 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.016 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.017 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.021 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.026 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.027 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.028 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.029 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.030 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.601 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.486 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.899 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.907 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.908 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.910 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.911 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.912 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.914 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.919 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.920 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.921 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.922 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.923 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.932 I llama_model_loader: - type  f32:   37 tensors
0.00.272.937 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.938 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.227 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.251 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.306 I llm_load_vocab: special tokens cache size = 5
0.00.620.484 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.559 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.560 I llm_load_print_meta: arch             = gemma
0.00.620.561 I llm_load_print_meta: vocab type       = SPM
0.00.620.561 I llm_load_print_meta: n_vocab          = 256000
0.00.620.563 I llm_load_print_meta: n_merges         = 0
0.00.620.564 I llm_load_print_meta: vocab_only       = 0
0.00.620.564 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.565 I llm_load_print_meta: n_embd           = 2048
0.00.620.565 I llm_load_print_meta: n_layer          = 18
0.00.620.630 I llm_load_print_meta: n_head           = 8
0.00.620.637 I llm_load_print_meta: n_head_kv        = 1
0.00.620.638 I llm_load_print_meta: n_rot            = 256
0.00.620.638 I llm_load_print_meta: n_swa            = 0
0.00.620.639 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.639 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.643 I llm_load_print_meta: n_gqa            = 8
0.00.620.648 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.654 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.679 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.680 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.681 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.681 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.689 I llm_load_print_meta: n_ff             = 16384
0.00.620.689 I llm_load_print_meta: n_expert         = 0
0.00.620.699 I llm_load_print_meta: n_expert_used    = 0
0.00.620.699 I llm_load_print_meta: causal attn      = 1
0.00.620.707 I llm_load_print_meta: pooling type     = 0
0.00.620.709 I llm_load_print_meta: rope type        = 2
0.00.620.709 I llm_load_print_meta: rope scaling     = linear
0.00.620.711 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.712 I llm_load_print_meta: freq_scale_train = 1
0.00.620.712 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.713 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.713 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.713 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.714 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.714 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.715 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.716 I llm_load_print_meta: model type       = 2B
0.00.620.717 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.620.718 I llm_load_print_meta: model params     = 2.51 B
0.00.620.719 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.620.719 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.720 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.720 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.721 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.721 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.721 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.722 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.727 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.730 I llm_load_print_meta: max token length = 93
0.00.620.902 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.737 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.680.748 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.680.749 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.680.750 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.680.750 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.680.751 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.686.257 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.263 I llama_new_context_with_model: n_batch    = 2048
0.00.686.264 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.264 I llama_new_context_with_model: flash_attn = 0
0.00.686.268 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.269 I llama_new_context_with_model: freq_scale = 1
0.00.715.509 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.552 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.670 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.054 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.059 I llama_new_context_with_model: graph nodes  = 601
0.00.717.059 I llama_new_context_with_model: graph splits = 1
0.00.717.075 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.207 I main: llama threadpool init, n_threads = 4
0.01.295.222 I 
0.01.295.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.295.344 I 
0.01.295.522 I sampler seed: 1916829896
0.01.295.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.548 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.295.550 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.295.551 I 
 increamically. [end of text]


0.02.664.996 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   803.47 tokens per second)
0.02.664.999 I llama_perf_context_print:        load time =    1292.44 ms
0.02.665.000 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.665.002 I llama_perf_context_print:        eval time =    1356.32 ms /     4 runs   (  339.08 ms per token,     2.95 tokens per second)
0.02.665.003 I llama_perf_context_print:       total time =    1369.80 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3974 (958367bf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199177.02 ms
main:    total time = 199177.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3974 (958367bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.952 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.043 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.057 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.063 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.065 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.076 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.082 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.086 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.087 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.088 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.089 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.076 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.730 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.039 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.048 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.049 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.050 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.051 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.054 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.058 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.059 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.067 I llama_model_loader: - type  f32:   37 tensors
0.00.270.071 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.072 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.393 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.402 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.428 I llm_load_vocab: special tokens cache size = 5
0.00.611.253 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.326 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.327 I llm_load_print_meta: arch             = gemma
0.00.611.327 I llm_load_print_meta: vocab type       = SPM
0.00.611.328 I llm_load_print_meta: n_vocab          = 256000
0.00.611.330 I llm_load_print_meta: n_merges         = 0
0.00.611.330 I llm_load_print_meta: vocab_only       = 0
0.00.611.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.331 I llm_load_print_meta: n_embd           = 2048
0.00.611.331 I llm_load_print_meta: n_layer          = 18
0.00.611.398 I llm_load_print_meta: n_head           = 8
0.00.611.406 I llm_load_print_meta: n_head_kv        = 1
0.00.611.406 I llm_load_print_meta: n_rot            = 256
0.00.611.406 I llm_load_print_meta: n_swa            = 0
0.00.611.407 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.407 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.412 I llm_load_print_meta: n_gqa            = 8
0.00.611.417 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.423 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.426 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.427 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.428 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.433 I llm_load_print_meta: n_ff             = 16384
0.00.611.433 I llm_load_print_meta: n_expert         = 0
0.00.611.433 I llm_load_print_meta: n_expert_used    = 0
0.00.611.434 I llm_load_print_meta: causal attn      = 1
0.00.611.446 I llm_load_print_meta: pooling type     = 0
0.00.611.451 I llm_load_print_meta: rope type        = 2
0.00.611.451 I llm_load_print_meta: rope scaling     = linear
0.00.611.453 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.468 I llm_load_print_meta: freq_scale_train = 1
0.00.611.470 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.472 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.472 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.472 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.473 I llm_load_print_meta: model type       = 2B
0.00.611.477 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.478 I llm_load_print_meta: model params     = 2.51 B
0.00.611.479 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.480 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.480 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.481 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.481 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.481 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.482 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.488 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.498 I llm_load_print_meta: max token length = 93
0.00.611.664 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.308 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.674.935 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.941 I llama_new_context_with_model: n_batch    = 2048
0.00.674.942 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.942 I llama_new_context_with_model: flash_attn = 0
0.00.674.946 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.947 I llama_new_context_with_model: freq_scale = 1
0.00.704.008 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.055 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.183 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.549 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.554 I llama_new_context_with_model: graph nodes  = 601
0.00.705.554 I llama_new_context_with_model: graph splits = 1
0.00.705.569 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.569 I main: llama threadpool init, n_threads = 4
0.01.283.582 I 
0.01.283.693 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.698 I 
0.01.283.875 I sampler seed: 1640291564
0.01.283.887 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.894 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.283.895 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.895 I 
 seconded, the sentence reads: "We need to focus on the things that truly matter, and let go of the distractions that hold us back."

**

0.12.211.004 I llama_perf_sampler_print:    sampling time =      49.92 ms /    33 runs   (    1.51 ms per token,   661.10 tokens per second)
0.12.211.007 I llama_perf_context_print:        load time =    1280.72 ms
0.12.211.008 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.211.023 I llama_perf_context_print:        eval time =   10832.21 ms /    32 runs   (  338.51 ms per token,     2.95 tokens per second)
0.12.211.024 I llama_perf_context_print:       total time =   10927.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m56.181s
user	49m33.097s
sys	0m6.335s
