+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4229 (3e0ba0e6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.000.724 I main: load the model and apply lora adapter, if any
0.00.021.677 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.686 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.693 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.701 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.702 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.705 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.705 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.708 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.713 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.714 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.714 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.715 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.188 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.579 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.414 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.421 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.422 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.429 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.429 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.430 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.431 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.436 I llama_model_loader: - type  f32:   37 tensors
0.00.130.437 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.125 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.201 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.862 I llm_load_vocab: special tokens cache size = 5
0.00.270.001 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.019 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.020 I llm_load_print_meta: arch             = gemma
0.00.270.021 I llm_load_print_meta: vocab type       = SPM
0.00.270.021 I llm_load_print_meta: n_vocab          = 256000
0.00.270.022 I llm_load_print_meta: n_merges         = 0
0.00.270.022 I llm_load_print_meta: vocab_only       = 0
0.00.270.022 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.023 I llm_load_print_meta: n_embd           = 2048
0.00.270.023 I llm_load_print_meta: n_layer          = 18
0.00.270.035 I llm_load_print_meta: n_head           = 8
0.00.270.036 I llm_load_print_meta: n_head_kv        = 1
0.00.270.037 I llm_load_print_meta: n_rot            = 256
0.00.270.037 I llm_load_print_meta: n_swa            = 0
0.00.270.038 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.038 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.039 I llm_load_print_meta: n_gqa            = 8
0.00.270.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.041 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.043 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.043 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.044 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.046 I llm_load_print_meta: n_ff             = 16384
0.00.270.046 I llm_load_print_meta: n_expert         = 0
0.00.270.046 I llm_load_print_meta: n_expert_used    = 0
0.00.270.047 I llm_load_print_meta: causal attn      = 1
0.00.270.047 I llm_load_print_meta: pooling type     = 0
0.00.270.048 I llm_load_print_meta: rope type        = 2
0.00.270.048 I llm_load_print_meta: rope scaling     = linear
0.00.270.050 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.051 I llm_load_print_meta: freq_scale_train = 1
0.00.270.051 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.052 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.052 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.053 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.053 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.054 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.054 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.055 I llm_load_print_meta: model type       = 2B
0.00.270.065 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.067 I llm_load_print_meta: model params     = 2.51 B
0.00.270.068 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.069 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.069 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.071 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.072 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.072 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.072 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.074 I llm_load_print_meta: max token length = 93
0.00.372.951 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.958 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.959 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.960 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.961 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.961 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.378.225 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.232 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.233 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.233 I llama_new_context_with_model: n_batch       = 2048
0.00.378.234 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.234 I llama_new_context_with_model: flash_attn    = 0
0.00.378.236 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.237 I llama_new_context_with_model: freq_scale    = 1
0.00.378.238 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.471 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.485 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.574 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.828 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.835 I llama_new_context_with_model: graph nodes  = 601
0.00.393.835 I llama_new_context_with_model: graph splits = 1
0.00.393.837 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.032 I main: llama threadpool init, n_threads = 4
0.00.479.047 I 
0.00.479.120 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.479.123 I 
0.00.479.167 I sampler seed: 409461862
0.00.479.178 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.189 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.192 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.193 I 
 increasities!

I cannot answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.01.813.011 I llama_perf_sampler_print:    sampling time =       2.98 ms /    20 runs   (    0.15 ms per token,  6722.69 tokens per second)
0.01.813.013 I llama_perf_context_print:        load time =     478.29 ms
0.01.813.015 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.813.016 I llama_perf_context_print:        eval time =    1321.99 ms /    19 runs   (   69.58 ms per token,    14.37 tokens per second)
0.01.813.017 I llama_perf_context_print:       total time =    1333.99 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.611 I build: 4229 (3e0ba0e6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.810 I main: llama backend init
0.00.000.817 I main: load the model and apply lora adapter, if any
0.00.021.177 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.199 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.200 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.204 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.206 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.207 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.213 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.217 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.218 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.219 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.219 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.950 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.490 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.288 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.294 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.295 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.296 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.296 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.297 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.298 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.300 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.301 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.301 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.302 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.303 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.308 I llama_model_loader: - type  f32:   37 tensors
0.00.132.309 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.086 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.272 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.854 I llm_load_vocab: special tokens cache size = 5
0.00.269.737 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.751 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.752 I llm_load_print_meta: arch             = gemma
0.00.269.752 I llm_load_print_meta: vocab type       = SPM
0.00.269.753 I llm_load_print_meta: n_vocab          = 256000
0.00.269.753 I llm_load_print_meta: n_merges         = 0
0.00.269.754 I llm_load_print_meta: vocab_only       = 0
0.00.269.754 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.754 I llm_load_print_meta: n_embd           = 2048
0.00.269.754 I llm_load_print_meta: n_layer          = 18
0.00.269.766 I llm_load_print_meta: n_head           = 8
0.00.269.767 I llm_load_print_meta: n_head_kv        = 1
0.00.269.768 I llm_load_print_meta: n_rot            = 256
0.00.269.768 I llm_load_print_meta: n_swa            = 0
0.00.269.768 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.769 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.769 I llm_load_print_meta: n_gqa            = 8
0.00.269.771 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.771 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.772 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.773 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.774 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.774 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.774 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.775 I llm_load_print_meta: n_ff             = 16384
0.00.269.776 I llm_load_print_meta: n_expert         = 0
0.00.269.776 I llm_load_print_meta: n_expert_used    = 0
0.00.269.776 I llm_load_print_meta: causal attn      = 1
0.00.269.777 I llm_load_print_meta: pooling type     = 0
0.00.269.777 I llm_load_print_meta: rope type        = 2
0.00.269.778 I llm_load_print_meta: rope scaling     = linear
0.00.269.780 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.780 I llm_load_print_meta: freq_scale_train = 1
0.00.269.780 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.781 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.781 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.781 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.782 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.782 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.782 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.783 I llm_load_print_meta: model type       = 2B
0.00.269.783 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.784 I llm_load_print_meta: model params     = 2.51 B
0.00.269.785 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.785 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.786 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.786 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.786 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.787 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.787 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.787 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.788 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.788 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.788 I llm_load_print_meta: max token length = 93
0.00.364.810 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.889 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.895 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.895 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.896 I llama_new_context_with_model: n_batch       = 2048
0.00.369.896 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.897 I llama_new_context_with_model: flash_attn    = 0
0.00.369.899 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.899 I llama_new_context_with_model: freq_scale    = 1
0.00.369.900 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.232 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.248 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.334 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.587 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.593 I llama_new_context_with_model: graph nodes  = 601
0.00.385.594 I llama_new_context_with_model: graph splits = 1
0.00.385.596 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.392 I main: llama threadpool init, n_threads = 4
0.00.466.406 I 
0.00.466.475 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.466.478 I 
0.00.466.522 I sampler seed: 465689727
0.00.466.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.540 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.543 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.544 I 
 secon.png
The provided image is a screenshot of a game interface showing the character's stats.

**Questions:**

1. What are the stats

0.02.642.273 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6715.51 tokens per second)
0.02.642.276 I llama_perf_context_print:        load time =     465.56 ms
0.02.642.277 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.642.278 I llama_perf_context_print:        eval time =    2156.94 ms /    32 runs   (   67.40 ms per token,    14.84 tokens per second)
0.02.642.278 I llama_perf_context_print:       total time =    2175.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 4229 (3e0ba0e6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.020.860 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.871 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.879 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.884 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.886 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.892 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.893 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.894 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.895 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.896 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.896 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.900 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.901 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.901 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.902 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.902 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.856 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.601 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.458 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.464 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.465 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.465 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.466 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.466 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.467 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.469 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.470 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.471 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.472 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.473 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.477 I llama_model_loader: - type  f32:   37 tensors
0.00.130.478 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.453 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.137 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.746 I llm_load_vocab: special tokens cache size = 5
0.00.266.752 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.768 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.769 I llm_load_print_meta: arch             = gemma
0.00.266.770 I llm_load_print_meta: vocab type       = SPM
0.00.266.770 I llm_load_print_meta: n_vocab          = 256000
0.00.266.771 I llm_load_print_meta: n_merges         = 0
0.00.266.771 I llm_load_print_meta: vocab_only       = 0
0.00.266.772 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.772 I llm_load_print_meta: n_embd           = 2048
0.00.266.772 I llm_load_print_meta: n_layer          = 18
0.00.266.785 I llm_load_print_meta: n_head           = 8
0.00.266.786 I llm_load_print_meta: n_head_kv        = 1
0.00.266.786 I llm_load_print_meta: n_rot            = 256
0.00.266.787 I llm_load_print_meta: n_swa            = 0
0.00.266.787 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.787 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.788 I llm_load_print_meta: n_gqa            = 8
0.00.266.789 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.790 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.791 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.792 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.792 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.793 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.793 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.794 I llm_load_print_meta: n_ff             = 16384
0.00.266.794 I llm_load_print_meta: n_expert         = 0
0.00.266.795 I llm_load_print_meta: n_expert_used    = 0
0.00.266.795 I llm_load_print_meta: causal attn      = 1
0.00.266.795 I llm_load_print_meta: pooling type     = 0
0.00.266.796 I llm_load_print_meta: rope type        = 2
0.00.266.796 I llm_load_print_meta: rope scaling     = linear
0.00.266.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.798 I llm_load_print_meta: freq_scale_train = 1
0.00.266.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.798 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.799 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.799 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.799 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.799 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.800 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.800 I llm_load_print_meta: model type       = 2B
0.00.266.801 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.802 I llm_load_print_meta: model params     = 2.51 B
0.00.266.803 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.804 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.804 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.804 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.805 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.805 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.806 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.806 I llm_load_print_meta: max token length = 93
0.00.340.713 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.722 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.723 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.724 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.724 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.725 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.963 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.971 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.971 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.972 I llama_new_context_with_model: n_batch       = 2048
0.00.345.972 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.973 I llama_new_context_with_model: flash_attn    = 0
0.00.345.976 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.977 I llama_new_context_with_model: freq_scale    = 1
0.00.345.978 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.084 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.099 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.197 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.586 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.591 I llama_new_context_with_model: graph nodes  = 601
0.00.362.591 I llama_new_context_with_model: graph splits = 1
0.00.362.593 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.793 I main: llama threadpool init, n_threads = 4
0.00.451.809 I 
0.00.451.884 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.451.888 I 
0.00.451.931 I sampler seed: 4036302216
0.00.451.942 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.949 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.950 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.950 I 
 increasities to create a more efficient and manageable system.

**a) Discuss the advantages of using a structured approach in creating a system.**

**b)

0.02.749.492 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6931.32 tokens per second)
0.02.749.494 I llama_perf_context_print:        load time =     451.02 ms
0.02.749.496 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.749.498 I llama_perf_context_print:        eval time =    2278.08 ms /    32 runs   (   71.19 ms per token,    14.05 tokens per second)
0.02.749.499 I llama_perf_context_print:       total time =    2297.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.681 I build: 4229 (3e0ba0e6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.907 I main: llama backend init
0.00.000.913 I main: load the model and apply lora adapter, if any
0.00.021.036 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.045 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.063 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.068 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.072 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.074 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.076 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.077 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.082 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.082 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.083 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.085 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.683 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.260 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.100 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.108 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.109 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.110 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.110 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.111 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.112 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.114 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.115 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.116 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.116 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.117 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.121 I llama_model_loader: - type  f32:   37 tensors
0.00.130.123 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.807 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.691 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.213 I llm_load_vocab: special tokens cache size = 5
0.00.265.035 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.051 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.051 I llm_load_print_meta: arch             = gemma
0.00.265.052 I llm_load_print_meta: vocab type       = SPM
0.00.265.053 I llm_load_print_meta: n_vocab          = 256000
0.00.265.053 I llm_load_print_meta: n_merges         = 0
0.00.265.054 I llm_load_print_meta: vocab_only       = 0
0.00.265.056 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.056 I llm_load_print_meta: n_embd           = 2048
0.00.265.057 I llm_load_print_meta: n_layer          = 18
0.00.265.071 I llm_load_print_meta: n_head           = 8
0.00.265.072 I llm_load_print_meta: n_head_kv        = 1
0.00.265.072 I llm_load_print_meta: n_rot            = 256
0.00.265.073 I llm_load_print_meta: n_swa            = 0
0.00.265.073 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.073 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.075 I llm_load_print_meta: n_gqa            = 8
0.00.265.077 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.078 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.080 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.082 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.083 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.084 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.085 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.087 I llm_load_print_meta: n_ff             = 16384
0.00.265.088 I llm_load_print_meta: n_expert         = 0
0.00.265.088 I llm_load_print_meta: n_expert_used    = 0
0.00.265.088 I llm_load_print_meta: causal attn      = 1
0.00.265.089 I llm_load_print_meta: pooling type     = 0
0.00.265.090 I llm_load_print_meta: rope type        = 2
0.00.265.091 I llm_load_print_meta: rope scaling     = linear
0.00.265.092 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.093 I llm_load_print_meta: freq_scale_train = 1
0.00.265.093 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.094 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.094 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.095 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.095 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.096 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.096 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.097 I llm_load_print_meta: model type       = 2B
0.00.265.098 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.099 I llm_load_print_meta: model params     = 2.51 B
0.00.265.100 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.100 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.101 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.101 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.102 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.102 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.103 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.103 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.104 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.105 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.105 I llm_load_print_meta: max token length = 93
0.00.335.752 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.759 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.887 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.893 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.894 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.894 I llama_new_context_with_model: n_batch       = 2048
0.00.340.895 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.895 I llama_new_context_with_model: flash_attn    = 0
0.00.340.898 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.899 I llama_new_context_with_model: freq_scale    = 1
0.00.340.900 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.870 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.884 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.985 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.240 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.246 I llama_new_context_with_model: graph nodes  = 601
0.00.357.247 I llama_new_context_with_model: graph splits = 1
0.00.357.249 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.918 I main: llama threadpool init, n_threads = 4
0.00.443.933 I 
0.00.444.014 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.018 I 
0.00.444.071 I sampler seed: 36977318
0.00.444.082 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.086 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.086 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.087 I 
 increasively. 

I cannot answer the question as it contains inappropriate and sexually suggestive content. [end of text]


0.01.959.253 I llama_perf_sampler_print:    sampling time =       3.58 ms /    21 runs   (    0.17 ms per token,  5857.74 tokens per second)
0.01.959.257 I llama_perf_context_print:        load time =     442.99 ms
0.01.959.258 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.959.261 I llama_perf_context_print:        eval time =    1502.17 ms /    20 runs   (   75.11 ms per token,    13.31 tokens per second)
0.01.959.262 I llama_perf_context_print:       total time =    1515.34 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.840s
user	0m32.112s
sys	0m9.366s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4229 (3e0ba0e6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40234.82 ms
main:    total time = 40234.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.169 I build: 4229 (3e0ba0e6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.386 I main: llama backend init
0.00.000.392 I main: load the model and apply lora adapter, if any
0.00.020.711 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.720 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.729 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.737 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.738 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.741 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.743 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.743 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.744 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.745 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.745 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.749 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.750 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.751 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.751 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.752 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.807 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.615 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.621 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.622 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.623 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.624 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.625 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.626 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.629 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.630 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.631 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.632 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.633 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.636 I llama_model_loader: - type  f32:   37 tensors
0.00.129.637 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.637 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.031 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.601 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.202 I llm_load_vocab: special tokens cache size = 5
0.00.262.096 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.112 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.113 I llm_load_print_meta: arch             = gemma
0.00.262.114 I llm_load_print_meta: vocab type       = SPM
0.00.262.114 I llm_load_print_meta: n_vocab          = 256000
0.00.262.114 I llm_load_print_meta: n_merges         = 0
0.00.262.115 I llm_load_print_meta: vocab_only       = 0
0.00.262.115 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.115 I llm_load_print_meta: n_embd           = 2048
0.00.262.116 I llm_load_print_meta: n_layer          = 18
0.00.262.128 I llm_load_print_meta: n_head           = 8
0.00.262.129 I llm_load_print_meta: n_head_kv        = 1
0.00.262.129 I llm_load_print_meta: n_rot            = 256
0.00.262.129 I llm_load_print_meta: n_swa            = 0
0.00.262.130 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.130 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.131 I llm_load_print_meta: n_gqa            = 8
0.00.262.132 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.133 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.134 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.135 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.135 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.136 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.136 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.137 I llm_load_print_meta: n_ff             = 16384
0.00.262.138 I llm_load_print_meta: n_expert         = 0
0.00.262.138 I llm_load_print_meta: n_expert_used    = 0
0.00.262.138 I llm_load_print_meta: causal attn      = 1
0.00.262.139 I llm_load_print_meta: pooling type     = 0
0.00.262.139 I llm_load_print_meta: rope type        = 2
0.00.262.139 I llm_load_print_meta: rope scaling     = linear
0.00.262.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.141 I llm_load_print_meta: freq_scale_train = 1
0.00.262.141 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.142 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.142 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.142 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.142 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.143 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.143 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.143 I llm_load_print_meta: model type       = 2B
0.00.262.144 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.145 I llm_load_print_meta: model params     = 2.51 B
0.00.262.145 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.146 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.146 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.147 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.147 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.148 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.148 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.149 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.149 I llm_load_print_meta: max token length = 93
0.00.321.783 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.792 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.792 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.793 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.794 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.794 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.062 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.070 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.071 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.071 I llama_new_context_with_model: n_batch       = 2048
0.00.327.072 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.072 I llama_new_context_with_model: flash_attn    = 0
0.00.327.076 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.077 I llama_new_context_with_model: freq_scale    = 1
0.00.327.078 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.885 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.902 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.998 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.339 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.344 I llama_new_context_with_model: graph nodes  = 601
0.00.344.344 I llama_new_context_with_model: graph splits = 1
0.00.344.346 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.300 I main: llama threadpool init, n_threads = 4
0.00.422.320 I 
0.00.422.395 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.398 I 
0.00.422.440 I sampler seed: 268994854
0.00.422.451 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.463 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.467 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.467 I 
 seconals!

I'm sorry, I'm not supposed to generate responses that are sexually suggestive in nature. Would you like me to try generating something

0.02.000.124 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6447.83 tokens per second)
0.02.000.127 I llama_perf_context_print:        load time =     421.89 ms
0.02.000.128 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.000.130 I llama_perf_context_print:        eval time =    1559.31 ms /    32 runs   (   48.73 ms per token,    20.52 tokens per second)
0.02.000.130 I llama_perf_context_print:       total time =    1577.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4229 (3e0ba0e6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40164.97 ms
main:    total time = 40164.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.554 I build: 4229 (3e0ba0e6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.021.253 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.267 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.273 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.280 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.281 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.282 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.282 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.285 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.286 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.287 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.308 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.320 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.173 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.180 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.181 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.182 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.183 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.184 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.187 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.188 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.192 I llama_model_loader: - type  f32:   37 tensors
0.00.131.193 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.194 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.462 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.118 I llm_load_vocab: special tokens cache size = 5
0.00.265.039 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.055 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.056 I llm_load_print_meta: arch             = gemma
0.00.265.056 I llm_load_print_meta: vocab type       = SPM
0.00.265.057 I llm_load_print_meta: n_vocab          = 256000
0.00.265.058 I llm_load_print_meta: n_merges         = 0
0.00.265.058 I llm_load_print_meta: vocab_only       = 0
0.00.265.058 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.059 I llm_load_print_meta: n_embd           = 2048
0.00.265.059 I llm_load_print_meta: n_layer          = 18
0.00.265.071 I llm_load_print_meta: n_head           = 8
0.00.265.072 I llm_load_print_meta: n_head_kv        = 1
0.00.265.072 I llm_load_print_meta: n_rot            = 256
0.00.265.072 I llm_load_print_meta: n_swa            = 0
0.00.265.073 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.073 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.074 I llm_load_print_meta: n_gqa            = 8
0.00.265.075 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.076 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.077 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.078 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.079 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.079 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.080 I llm_load_print_meta: n_ff             = 16384
0.00.265.080 I llm_load_print_meta: n_expert         = 0
0.00.265.081 I llm_load_print_meta: n_expert_used    = 0
0.00.265.081 I llm_load_print_meta: causal attn      = 1
0.00.265.081 I llm_load_print_meta: pooling type     = 0
0.00.265.082 I llm_load_print_meta: rope type        = 2
0.00.265.082 I llm_load_print_meta: rope scaling     = linear
0.00.265.083 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.084 I llm_load_print_meta: freq_scale_train = 1
0.00.265.085 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.086 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.086 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.086 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.086 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.088 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.088 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.089 I llm_load_print_meta: model type       = 2B
0.00.265.089 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.090 I llm_load_print_meta: model params     = 2.51 B
0.00.265.091 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.092 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.093 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.093 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.094 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.094 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.094 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.095 I llm_load_print_meta: max token length = 93
0.00.319.852 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.016 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.022 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.022 I llama_new_context_with_model: n_batch       = 2048
0.00.325.023 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.023 I llama_new_context_with_model: flash_attn    = 0
0.00.325.026 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.026 I llama_new_context_with_model: freq_scale    = 1
0.00.325.027 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.866 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.883 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.979 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.301 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.306 I llama_new_context_with_model: graph nodes  = 601
0.00.341.306 I llama_new_context_with_model: graph splits = 1
0.00.341.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.071 I main: llama threadpool init, n_threads = 4
0.00.418.087 I 
0.00.418.164 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.418.167 I 
0.00.418.218 I sampler seed: 3230428782
0.00.418.230 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.243 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.247 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.247 I 
 increasities, and other forms of sexual harassment.

Title IX protects individuals from sexual harassment in education. However, there is confusion about the scope of Title IX

0.01.977.632 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6296.51 tokens per second)
0.01.977.635 I llama_perf_context_print:        load time =     417.30 ms
0.01.977.636 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.977.638 I llama_perf_context_print:        eval time =    1540.28 ms /    32 runs   (   48.13 ms per token,    20.78 tokens per second)
0.01.977.638 I llama_perf_context_print:       total time =    1559.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.197s
user	10m24.202s
sys	0m6.922s
