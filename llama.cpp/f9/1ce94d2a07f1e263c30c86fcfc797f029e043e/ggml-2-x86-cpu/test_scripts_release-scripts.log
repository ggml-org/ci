+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 3920 (f91ce94d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.001.873 I main: load the model and apply lora adapter, if any
0.00.021.955 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.011 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.018 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.025 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.025 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.026 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.027 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.027 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.032 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.033 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.713 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.583 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.588 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.589 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.589 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.590 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.591 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.591 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.594 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.594 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.595 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.596 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.597 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.599 I llama_model_loader: - type  f32:   37 tensors
0.00.131.602 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.651 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.233.673 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.234.732 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.237.958 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.244.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.771 I llm_load_vocab: special tokens cache size = 5
0.00.265.719 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.742 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.742 I llm_load_print_meta: arch             = gemma
0.00.265.743 I llm_load_print_meta: vocab type       = SPM
0.00.265.744 I llm_load_print_meta: n_vocab          = 256000
0.00.265.744 I llm_load_print_meta: n_merges         = 0
0.00.265.744 I llm_load_print_meta: vocab_only       = 0
0.00.265.745 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.745 I llm_load_print_meta: n_embd           = 2048
0.00.265.745 I llm_load_print_meta: n_layer          = 18
0.00.265.758 I llm_load_print_meta: n_head           = 8
0.00.265.759 I llm_load_print_meta: n_head_kv        = 1
0.00.265.760 I llm_load_print_meta: n_rot            = 256
0.00.265.760 I llm_load_print_meta: n_swa            = 0
0.00.265.760 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.761 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.762 I llm_load_print_meta: n_gqa            = 8
0.00.265.763 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.764 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.765 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.767 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.767 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.767 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.768 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.769 I llm_load_print_meta: n_ff             = 16384
0.00.265.769 I llm_load_print_meta: n_expert         = 0
0.00.265.769 I llm_load_print_meta: n_expert_used    = 0
0.00.265.770 I llm_load_print_meta: causal attn      = 1
0.00.265.770 I llm_load_print_meta: pooling type     = 0
0.00.265.770 I llm_load_print_meta: rope type        = 2
0.00.265.771 I llm_load_print_meta: rope scaling     = linear
0.00.265.772 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.773 I llm_load_print_meta: freq_scale_train = 1
0.00.265.773 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.774 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.774 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.775 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.775 I llm_load_print_meta: model type       = 2B
0.00.265.776 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.777 I llm_load_print_meta: model params     = 2.51 B
0.00.265.778 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.778 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.779 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.779 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.779 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.780 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.780 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.780 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.781 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.781 I llm_load_print_meta: max token length = 93
0.00.265.799 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.545 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.363.553 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.363.554 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.363.555 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.363.555 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.363.556 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.368.763 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.769 I llama_new_context_with_model: n_batch    = 2048
0.00.368.770 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.770 I llama_new_context_with_model: flash_attn = 0
0.00.368.772 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.773 I llama_new_context_with_model: freq_scale = 1
0.00.397.502 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.397.518 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.397.609 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.489 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.398.497 I llama_new_context_with_model: graph nodes  = 601
0.00.398.497 I llama_new_context_with_model: graph splits = 1
0.00.398.499 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.645 I main: llama threadpool init, n_threads = 4
0.00.489.657 I 
0.00.489.751 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.756 I 
0.00.489.790 I sampler seed: 4233179510
0.00.489.797 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.804 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.489.805 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.805 I 
 increasities and her struggles in the face of adversity.

**Summary:**

In the novel "The Girl with the Louding Voice," we encounter Leila Kaur

0.02.732.955 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7010.83 tokens per second)
0.02.732.958 I llama_perf_context_print:        load time =     487.75 ms
0.02.732.959 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.732.960 I llama_perf_context_print:        eval time =    2225.53 ms /    32 runs   (   69.55 ms per token,    14.38 tokens per second)
0.02.732.961 I llama_perf_context_print:       total time =    2243.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.522 I build: 3920 (f91ce94d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.001.804 I main: load the model and apply lora adapter, if any
0.00.022.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.081 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.088 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.089 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.093 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.096 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.096 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.097 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.097 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.103 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.104 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.105 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.105 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.637 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.624 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.609 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.616 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.616 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.617 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.618 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.618 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.619 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.622 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.622 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.623 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.623 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.624 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.628 I llama_model_loader: - type  f32:   37 tensors
0.00.132.631 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.675 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.178 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.264 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.525 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.247.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.527 I llm_load_vocab: special tokens cache size = 5
0.00.268.356 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.371 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.372 I llm_load_print_meta: arch             = gemma
0.00.268.372 I llm_load_print_meta: vocab type       = SPM
0.00.268.373 I llm_load_print_meta: n_vocab          = 256000
0.00.268.373 I llm_load_print_meta: n_merges         = 0
0.00.268.373 I llm_load_print_meta: vocab_only       = 0
0.00.268.374 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.374 I llm_load_print_meta: n_embd           = 2048
0.00.268.375 I llm_load_print_meta: n_layer          = 18
0.00.268.386 I llm_load_print_meta: n_head           = 8
0.00.268.388 I llm_load_print_meta: n_head_kv        = 1
0.00.268.388 I llm_load_print_meta: n_rot            = 256
0.00.268.388 I llm_load_print_meta: n_swa            = 0
0.00.268.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.389 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.390 I llm_load_print_meta: n_gqa            = 8
0.00.268.391 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.392 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.393 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.394 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.394 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.394 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.395 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.396 I llm_load_print_meta: n_ff             = 16384
0.00.268.396 I llm_load_print_meta: n_expert         = 0
0.00.268.396 I llm_load_print_meta: n_expert_used    = 0
0.00.268.396 I llm_load_print_meta: causal attn      = 1
0.00.268.397 I llm_load_print_meta: pooling type     = 0
0.00.268.397 I llm_load_print_meta: rope type        = 2
0.00.268.398 I llm_load_print_meta: rope scaling     = linear
0.00.268.399 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.400 I llm_load_print_meta: freq_scale_train = 1
0.00.268.400 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.400 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.401 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.401 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.401 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.401 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.402 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.402 I llm_load_print_meta: model type       = 2B
0.00.268.403 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.404 I llm_load_print_meta: model params     = 2.51 B
0.00.268.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.405 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.405 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.405 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.406 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.406 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.406 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.407 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.407 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.408 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.408 I llm_load_print_meta: max token length = 93
0.00.268.426 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.362.920 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.367.979 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.985 I llama_new_context_with_model: n_batch    = 2048
0.00.367.985 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.986 I llama_new_context_with_model: flash_attn = 0
0.00.367.988 I llama_new_context_with_model: freq_base  = 10000.0
0.00.367.988 I llama_new_context_with_model: freq_scale = 1
0.00.396.408 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.396.422 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.396.513 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.359 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.367 I llama_new_context_with_model: graph nodes  = 601
0.00.397.367 I llama_new_context_with_model: graph splits = 1
0.00.397.369 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.000 I main: llama threadpool init, n_threads = 4
0.00.485.014 I 
0.00.485.090 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.485.094 I 
0.00.485.130 I sampler seed: 116791713
0.00.485.140 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.143 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.485.143 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.143 I 
 maneuvously.

I am unable to access the internet at present, therefore I am unable to retrieve or transmit data.

I apologize for any inconvenience this

0.02.663.041 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7033.25 tokens per second)
0.02.663.044 I llama_perf_context_print:        load time =     483.17 ms
0.02.663.045 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.663.047 I llama_perf_context_print:        eval time =    2160.36 ms /    32 runs   (   67.51 ms per token,    14.81 tokens per second)
0.02.663.048 I llama_perf_context_print:       total time =    2178.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.541 I build: 3920 (f91ce94d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.021.585 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.635 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.647 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.653 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.656 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.661 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.661 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.662 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.663 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.664 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.664 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.669 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.669 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.670 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.671 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.627 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.026 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.952 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.958 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.959 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.960 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.961 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.962 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.962 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.965 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.966 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.967 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.968 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.968 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.972 I llama_model_loader: - type  f32:   37 tensors
0.00.133.974 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.069 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.093 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.239.242 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.242.692 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.249.622 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.107 I llm_load_vocab: special tokens cache size = 5
0.00.270.889 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.905 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.906 I llm_load_print_meta: arch             = gemma
0.00.270.906 I llm_load_print_meta: vocab type       = SPM
0.00.270.907 I llm_load_print_meta: n_vocab          = 256000
0.00.270.907 I llm_load_print_meta: n_merges         = 0
0.00.270.907 I llm_load_print_meta: vocab_only       = 0
0.00.270.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.908 I llm_load_print_meta: n_embd           = 2048
0.00.270.908 I llm_load_print_meta: n_layer          = 18
0.00.270.920 I llm_load_print_meta: n_head           = 8
0.00.270.921 I llm_load_print_meta: n_head_kv        = 1
0.00.270.922 I llm_load_print_meta: n_rot            = 256
0.00.270.922 I llm_load_print_meta: n_swa            = 0
0.00.270.922 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.923 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.924 I llm_load_print_meta: n_gqa            = 8
0.00.270.925 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.927 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.929 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.929 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.930 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.931 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.932 I llm_load_print_meta: n_ff             = 16384
0.00.270.932 I llm_load_print_meta: n_expert         = 0
0.00.270.932 I llm_load_print_meta: n_expert_used    = 0
0.00.270.933 I llm_load_print_meta: causal attn      = 1
0.00.270.933 I llm_load_print_meta: pooling type     = 0
0.00.270.934 I llm_load_print_meta: rope type        = 2
0.00.270.934 I llm_load_print_meta: rope scaling     = linear
0.00.270.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.936 I llm_load_print_meta: freq_scale_train = 1
0.00.270.937 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.941 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.941 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.941 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.942 I llm_load_print_meta: model type       = 2B
0.00.270.942 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.944 I llm_load_print_meta: model params     = 2.51 B
0.00.270.945 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.946 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.948 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.948 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.949 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.949 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.950 I llm_load_print_meta: max token length = 93
0.00.270.969 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.347.132 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.347.139 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.347.140 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.347.141 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.347.141 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.347.142 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.352.182 I llama_new_context_with_model: n_ctx      = 8192
0.00.352.189 I llama_new_context_with_model: n_batch    = 2048
0.00.352.189 I llama_new_context_with_model: n_ubatch   = 512
0.00.352.190 I llama_new_context_with_model: flash_attn = 0
0.00.352.192 I llama_new_context_with_model: freq_base  = 10000.0
0.00.352.193 I llama_new_context_with_model: freq_scale = 1
0.00.380.398 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.380.414 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.380.507 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.367 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.381.374 I llama_new_context_with_model: graph nodes  = 601
0.00.381.375 I llama_new_context_with_model: graph splits = 1
0.00.381.377 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.907 I main: llama threadpool init, n_threads = 4
0.00.475.919 I 
0.00.475.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.997 I 
0.00.476.038 I sampler seed: 1098352268
0.00.476.048 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.050 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.476.051 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.051 I 
 increamically.

I'm unable to answer this question as it is requesting me to generate text that is inappropriate or sexually suggestive in nature. [end of text]


0.02.589.704 I llama_perf_sampler_print:    sampling time =       4.60 ms /    31 runs   (    0.15 ms per token,  6733.28 tokens per second)
0.02.589.707 I llama_perf_context_print:        load time =     474.05 ms
0.02.589.708 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.589.709 I llama_perf_context_print:        eval time =    2097.05 ms /    30 runs   (   69.90 ms per token,    14.31 tokens per second)
0.02.589.710 I llama_perf_context_print:       total time =    2113.80 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.640 I build: 3920 (f91ce94d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.851 I main: llama backend init
0.00.001.953 I main: load the model and apply lora adapter, if any
0.00.021.675 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.722 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.728 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.734 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.735 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.739 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.739 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.754 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.758 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.759 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.759 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.760 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.760 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.241 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.962 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.968 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.969 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.970 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.971 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.972 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.973 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.977 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.978 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.979 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.136.980 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.983 I llama_model_loader: - type  f32:   37 tensors
0.00.136.986 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.658 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.703 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.245.971 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.249.833 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.257.559 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.121 I llm_load_vocab: special tokens cache size = 5
0.00.278.889 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.905 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.906 I llm_load_print_meta: arch             = gemma
0.00.278.907 I llm_load_print_meta: vocab type       = SPM
0.00.278.907 I llm_load_print_meta: n_vocab          = 256000
0.00.278.907 I llm_load_print_meta: n_merges         = 0
0.00.278.908 I llm_load_print_meta: vocab_only       = 0
0.00.278.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.908 I llm_load_print_meta: n_embd           = 2048
0.00.278.909 I llm_load_print_meta: n_layer          = 18
0.00.278.921 I llm_load_print_meta: n_head           = 8
0.00.278.922 I llm_load_print_meta: n_head_kv        = 1
0.00.278.922 I llm_load_print_meta: n_rot            = 256
0.00.278.922 I llm_load_print_meta: n_swa            = 0
0.00.278.923 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.923 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.924 I llm_load_print_meta: n_gqa            = 8
0.00.278.925 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.928 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.928 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.929 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.929 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.930 I llm_load_print_meta: n_ff             = 16384
0.00.278.930 I llm_load_print_meta: n_expert         = 0
0.00.278.930 I llm_load_print_meta: n_expert_used    = 0
0.00.278.931 I llm_load_print_meta: causal attn      = 1
0.00.278.931 I llm_load_print_meta: pooling type     = 0
0.00.278.931 I llm_load_print_meta: rope type        = 2
0.00.278.932 I llm_load_print_meta: rope scaling     = linear
0.00.278.933 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.933 I llm_load_print_meta: freq_scale_train = 1
0.00.278.934 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.934 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.934 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.934 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.935 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.935 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.936 I llm_load_print_meta: model type       = 2B
0.00.278.936 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.937 I llm_load_print_meta: model params     = 2.51 B
0.00.278.938 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.939 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.939 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.940 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.940 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.940 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.941 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.941 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.941 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.942 I llm_load_print_meta: max token length = 93
0.00.278.966 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.353.178 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.353.185 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.358.060 I llama_new_context_with_model: n_ctx      = 8192
0.00.358.066 I llama_new_context_with_model: n_batch    = 2048
0.00.358.067 I llama_new_context_with_model: n_ubatch   = 512
0.00.358.067 I llama_new_context_with_model: flash_attn = 0
0.00.358.069 I llama_new_context_with_model: freq_base  = 10000.0
0.00.358.070 I llama_new_context_with_model: freq_scale = 1
0.00.386.657 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.386.678 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.386.778 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.824 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.387.834 I llama_new_context_with_model: graph nodes  = 601
0.00.387.835 I llama_new_context_with_model: graph splits = 1
0.00.387.837 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.799 I main: llama threadpool init, n_threads = 4
0.00.482.811 I 
0.00.482.890 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.893 I 
0.00.482.929 I sampler seed: 3839577978
0.00.482.938 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.941 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.482.942 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.943 I 
 increasively.

I am unable to generate a response because the requested information is outside the scope of my knowledge and capabilities. [end of text]


0.02.450.802 I llama_perf_sampler_print:    sampling time =       3.97 ms /    27 runs   (    0.15 ms per token,  6802.72 tokens per second)
0.02.450.804 I llama_perf_context_print:        load time =     480.82 ms
0.02.450.805 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.450.807 I llama_perf_context_print:        eval time =    1953.01 ms /    26 runs   (   75.12 ms per token,    13.31 tokens per second)
0.02.450.807 I llama_perf_context_print:       total time =    1968.01 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.937s
user	0m36.856s
sys	0m9.444s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3920 (f91ce94d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32034.31 ms
main:    total time = 32034.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 3920 (f91ce94d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.001.926 I main: load the model and apply lora adapter, if any
0.00.022.217 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.291 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.309 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.318 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.322 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.329 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.330 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.335 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.716 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.238 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.080 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.081 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.081 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.082 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.083 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.086 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.087 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.088 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.091 I llama_model_loader: - type  f32:   37 tensors
0.00.132.093 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.093 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.439 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.233.257 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.234.301 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.237.396 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.243.601 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.048 I llm_load_vocab: special tokens cache size = 5
0.00.265.092 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.110 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.111 I llm_load_print_meta: arch             = gemma
0.00.265.111 I llm_load_print_meta: vocab type       = SPM
0.00.265.112 I llm_load_print_meta: n_vocab          = 256000
0.00.265.112 I llm_load_print_meta: n_merges         = 0
0.00.265.112 I llm_load_print_meta: vocab_only       = 0
0.00.265.113 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.113 I llm_load_print_meta: n_embd           = 2048
0.00.265.114 I llm_load_print_meta: n_layer          = 18
0.00.265.125 I llm_load_print_meta: n_head           = 8
0.00.265.126 I llm_load_print_meta: n_head_kv        = 1
0.00.265.126 I llm_load_print_meta: n_rot            = 256
0.00.265.127 I llm_load_print_meta: n_swa            = 0
0.00.265.127 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.127 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.128 I llm_load_print_meta: n_gqa            = 8
0.00.265.129 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.130 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.131 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.132 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.132 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.133 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.133 I llm_load_print_meta: n_ff             = 16384
0.00.265.134 I llm_load_print_meta: n_expert         = 0
0.00.265.134 I llm_load_print_meta: n_expert_used    = 0
0.00.265.135 I llm_load_print_meta: causal attn      = 1
0.00.265.135 I llm_load_print_meta: pooling type     = 0
0.00.265.135 I llm_load_print_meta: rope type        = 2
0.00.265.136 I llm_load_print_meta: rope scaling     = linear
0.00.265.137 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.138 I llm_load_print_meta: freq_scale_train = 1
0.00.265.138 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.138 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.138 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.139 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.139 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.139 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.139 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.140 I llm_load_print_meta: model type       = 2B
0.00.265.140 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.141 I llm_load_print_meta: model params     = 2.51 B
0.00.265.142 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.142 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.143 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.143 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.143 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.144 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.144 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.144 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.145 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.145 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.145 I llm_load_print_meta: max token length = 93
0.00.265.172 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.323.569 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.323.576 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.323.576 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.323.577 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.323.578 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.323.578 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.328.667 I llama_new_context_with_model: n_ctx      = 8192
0.00.328.674 I llama_new_context_with_model: n_batch    = 2048
0.00.328.674 I llama_new_context_with_model: n_ubatch   = 512
0.00.328.675 I llama_new_context_with_model: flash_attn = 0
0.00.328.678 I llama_new_context_with_model: freq_base  = 10000.0
0.00.328.679 I llama_new_context_with_model: freq_scale = 1
0.00.359.377 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.359.394 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.359.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.386 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.360.394 I llama_new_context_with_model: graph nodes  = 601
0.00.360.394 I llama_new_context_with_model: graph splits = 1
0.00.360.397 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.443 I main: llama threadpool init, n_threads = 4
0.00.442.455 I 
0.00.442.549 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.552 I 
0.00.442.595 I sampler seed: 3278654727
0.00.442.604 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.606 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.442.607 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.607 I 
 increamically in the human population over the past century. Why do you think this has happened?

**Answer:**

**The rapid increase in the human population

0.02.045.423 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6811.15 tokens per second)
0.02.045.426 I llama_perf_context_print:        load time =     440.49 ms
0.02.045.428 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.045.430 I llama_perf_context_print:        eval time =    1585.28 ms /    32 runs   (   49.54 ms per token,    20.19 tokens per second)
0.02.045.431 I llama_perf_context_print:       total time =    1602.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3920 (f91ce94d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32084.29 ms
main:    total time = 32084.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.536 I build: 3920 (f91ce94d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.834 I main: load the model and apply lora adapter, if any
0.00.021.916 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.940 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.941 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.942 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.942 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.946 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.946 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.947 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.293 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.139 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.140 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.141 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.142 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.142 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.143 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.146 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.146 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.149 I llama_model_loader: - type  f32:   37 tensors
0.00.131.151 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.152 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.999 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.229 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.236.778 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.241.503 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.251.042 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.631 I llm_load_vocab: special tokens cache size = 5
0.00.272.622 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.638 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.639 I llm_load_print_meta: arch             = gemma
0.00.272.639 I llm_load_print_meta: vocab type       = SPM
0.00.272.640 I llm_load_print_meta: n_vocab          = 256000
0.00.272.640 I llm_load_print_meta: n_merges         = 0
0.00.272.641 I llm_load_print_meta: vocab_only       = 0
0.00.272.641 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.641 I llm_load_print_meta: n_embd           = 2048
0.00.272.642 I llm_load_print_meta: n_layer          = 18
0.00.272.653 I llm_load_print_meta: n_head           = 8
0.00.272.654 I llm_load_print_meta: n_head_kv        = 1
0.00.272.654 I llm_load_print_meta: n_rot            = 256
0.00.272.654 I llm_load_print_meta: n_swa            = 0
0.00.272.655 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.655 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.656 I llm_load_print_meta: n_gqa            = 8
0.00.272.657 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.658 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.659 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.660 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.660 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.661 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.661 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.662 I llm_load_print_meta: n_ff             = 16384
0.00.272.662 I llm_load_print_meta: n_expert         = 0
0.00.272.662 I llm_load_print_meta: n_expert_used    = 0
0.00.272.662 I llm_load_print_meta: causal attn      = 1
0.00.272.663 I llm_load_print_meta: pooling type     = 0
0.00.272.663 I llm_load_print_meta: rope type        = 2
0.00.272.663 I llm_load_print_meta: rope scaling     = linear
0.00.272.665 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.665 I llm_load_print_meta: freq_scale_train = 1
0.00.272.666 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.667 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.668 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.668 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.669 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.670 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.671 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.671 I llm_load_print_meta: model type       = 2B
0.00.272.672 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.673 I llm_load_print_meta: model params     = 2.51 B
0.00.272.674 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.674 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.675 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.675 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.676 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.677 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.677 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.678 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.678 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.679 I llm_load_print_meta: max token length = 93
0.00.272.705 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.659 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.335.628 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.634 I llama_new_context_with_model: n_batch    = 2048
0.00.335.635 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.635 I llama_new_context_with_model: flash_attn = 0
0.00.335.637 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.638 I llama_new_context_with_model: freq_scale = 1
0.00.364.992 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.009 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.105 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.960 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.365.968 I llama_new_context_with_model: graph nodes  = 601
0.00.365.968 I llama_new_context_with_model: graph splits = 1
0.00.365.970 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.839 I main: llama threadpool init, n_threads = 4
0.00.447.849 I 
0.00.447.926 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.930 I 
0.00.447.966 I sampler seed: 2226896426
0.00.447.974 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.977 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.447.977 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.978 I 
 seconally to the following statement:

"The question is whether or not the Supreme Court can strike down laws that violate the Constitution."

This question is a

0.02.051.649 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6890.79 tokens per second)
0.02.051.652 I llama_perf_context_print:        load time =     445.98 ms
0.02.051.653 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.051.654 I llama_perf_context_print:        eval time =    1586.18 ms /    32 runs   (   49.57 ms per token,    20.17 tokens per second)
0.02.051.654 I llama_perf_context_print:       total time =    1603.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.963s
user	8m14.469s
sys	0m6.958s
