+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.564 I build: 4144 (f95caa79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.515 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.527 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.535 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.540 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.541 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.546 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.546 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.547 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.548 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.548 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.549 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.553 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.554 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.554 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.555 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.555 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.331 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.985 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.880 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.888 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.888 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.889 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.890 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.891 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.891 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.894 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.894 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.895 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.896 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.898 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.902 I llama_model_loader: - type  f32:   37 tensors
0.00.131.904 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.571 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.989 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.773 I llm_load_vocab: special tokens cache size = 5
0.00.294.973 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.994 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.995 I llm_load_print_meta: arch             = gemma
0.00.294.995 I llm_load_print_meta: vocab type       = SPM
0.00.294.996 I llm_load_print_meta: n_vocab          = 256000
0.00.294.996 I llm_load_print_meta: n_merges         = 0
0.00.294.997 I llm_load_print_meta: vocab_only       = 0
0.00.294.997 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.997 I llm_load_print_meta: n_embd           = 2048
0.00.294.998 I llm_load_print_meta: n_layer          = 18
0.00.295.010 I llm_load_print_meta: n_head           = 8
0.00.295.011 I llm_load_print_meta: n_head_kv        = 1
0.00.295.011 I llm_load_print_meta: n_rot            = 256
0.00.295.012 I llm_load_print_meta: n_swa            = 0
0.00.295.012 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.012 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.013 I llm_load_print_meta: n_gqa            = 8
0.00.295.014 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.015 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.016 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.017 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.018 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.018 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.019 I llm_load_print_meta: n_ff             = 16384
0.00.295.020 I llm_load_print_meta: n_expert         = 0
0.00.295.020 I llm_load_print_meta: n_expert_used    = 0
0.00.295.020 I llm_load_print_meta: causal attn      = 1
0.00.295.020 I llm_load_print_meta: pooling type     = 0
0.00.295.021 I llm_load_print_meta: rope type        = 2
0.00.295.021 I llm_load_print_meta: rope scaling     = linear
0.00.295.023 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.023 I llm_load_print_meta: freq_scale_train = 1
0.00.295.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.024 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.026 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.026 I llm_load_print_meta: model type       = 2B
0.00.295.027 I llm_load_print_meta: model ftype      = Q8_0
0.00.295.028 I llm_load_print_meta: model params     = 2.51 B
0.00.295.029 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.295.029 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.030 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.032 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.033 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.033 I llm_load_print_meta: max token length = 93
0.00.394.207 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.394.216 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.394.217 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.394.218 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.394.218 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.394.219 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.399.626 I llama_new_context_with_model: n_seq_max     = 1
0.00.399.634 I llama_new_context_with_model: n_ctx         = 4096
0.00.399.634 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.399.635 I llama_new_context_with_model: n_batch       = 2048
0.00.399.635 I llama_new_context_with_model: n_ubatch      = 512
0.00.399.636 I llama_new_context_with_model: flash_attn    = 0
0.00.399.638 I llama_new_context_with_model: freq_base     = 10000.0
0.00.399.639 I llama_new_context_with_model: freq_scale    = 1
0.00.399.640 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.414.604 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.414.619 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.414.719 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.416.001 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.416.007 I llama_new_context_with_model: graph nodes  = 601
0.00.416.008 I llama_new_context_with_model: graph splits = 1
0.00.416.010 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.504.711 I main: llama threadpool init, n_threads = 4
0.00.504.726 I 
0.00.504.800 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.504.803 I 
0.00.504.846 I sampler seed: 1566634007
0.00.504.857 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.504.868 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.504.870 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.504.870 I 
 increably!

I am unable to process your query due to the lack of sufficient information. Please provide more context or specify your query so that I can assist

0.02.790.439 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7051.28 tokens per second)
0.02.790.441 I llama_perf_context_print:        load time =     503.92 ms
0.02.790.443 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.790.444 I llama_perf_context_print:        eval time =    2266.84 ms /    32 runs   (   70.84 ms per token,    14.12 tokens per second)
0.02.790.445 I llama_perf_context_print:       total time =    2285.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.600 I build: 4144 (f95caa79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.797 I main: llama backend init
0.00.000.805 I main: load the model and apply lora adapter, if any
0.00.021.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.617 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.625 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.626 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.630 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.634 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.634 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.635 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.635 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.636 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.641 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.641 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.642 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.642 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.643 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.060 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.058 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.911 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.917 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.918 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.919 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.919 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.920 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.922 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.923 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.924 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.924 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.929 I llama_model_loader: - type  f32:   37 tensors
0.00.130.930 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.096 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.128 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.758 I llm_load_vocab: special tokens cache size = 5
0.00.269.655 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.675 I llm_load_print_meta: arch             = gemma
0.00.269.675 I llm_load_print_meta: vocab type       = SPM
0.00.269.676 I llm_load_print_meta: n_vocab          = 256000
0.00.269.676 I llm_load_print_meta: n_merges         = 0
0.00.269.677 I llm_load_print_meta: vocab_only       = 0
0.00.269.677 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.677 I llm_load_print_meta: n_embd           = 2048
0.00.269.678 I llm_load_print_meta: n_layer          = 18
0.00.269.689 I llm_load_print_meta: n_head           = 8
0.00.269.690 I llm_load_print_meta: n_head_kv        = 1
0.00.269.691 I llm_load_print_meta: n_rot            = 256
0.00.269.691 I llm_load_print_meta: n_swa            = 0
0.00.269.691 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.692 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.693 I llm_load_print_meta: n_gqa            = 8
0.00.269.694 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.694 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.696 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.697 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.697 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.698 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.698 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.699 I llm_load_print_meta: n_ff             = 16384
0.00.269.699 I llm_load_print_meta: n_expert         = 0
0.00.269.700 I llm_load_print_meta: n_expert_used    = 0
0.00.269.700 I llm_load_print_meta: causal attn      = 1
0.00.269.700 I llm_load_print_meta: pooling type     = 0
0.00.269.700 I llm_load_print_meta: rope type        = 2
0.00.269.701 I llm_load_print_meta: rope scaling     = linear
0.00.269.702 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.703 I llm_load_print_meta: freq_scale_train = 1
0.00.269.703 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.704 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.704 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.705 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.705 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.705 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.706 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.706 I llm_load_print_meta: model type       = 2B
0.00.269.707 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.707 I llm_load_print_meta: model params     = 2.51 B
0.00.269.708 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.709 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.709 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.709 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.710 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.710 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.710 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.710 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.711 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.711 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.712 I llm_load_print_meta: max token length = 93
0.00.363.652 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.031 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.039 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.039 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.040 I llama_new_context_with_model: n_batch       = 2048
0.00.369.040 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.041 I llama_new_context_with_model: flash_attn    = 0
0.00.369.044 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.045 I llama_new_context_with_model: freq_scale    = 1
0.00.369.046 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.852 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.867 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.963 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.214 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.220 I llama_new_context_with_model: graph nodes  = 601
0.00.386.221 I llama_new_context_with_model: graph splits = 1
0.00.386.223 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.843 I main: llama threadpool init, n_threads = 4
0.00.469.857 I 
0.00.469.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.936 I 
0.00.469.985 I sampler seed: 800562209
0.00.469.996 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.999 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.000 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.000 I 
 increasities, and a demonstrably superior intellect. [end of text]


0.01.224.371 I llama_perf_sampler_print:    sampling time =       1.79 ms /    12 runs   (    0.15 ms per token,  6692.69 tokens per second)
0.01.224.373 I llama_perf_context_print:        load time =     469.02 ms
0.01.224.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.224.377 I llama_perf_context_print:        eval time =     746.78 ms /    11 runs   (   67.89 ms per token,    14.73 tokens per second)
0.01.224.378 I llama_perf_context_print:       total time =     754.53 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.546 I build: 4144 (f95caa79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.816 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.026.723 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.734 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.741 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.747 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.749 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.754 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.754 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.755 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.756 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.757 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.759 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.768 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.769 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.770 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.771 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.774 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.053.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.135.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.891 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.892 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.892 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.893 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.894 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.894 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.897 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.898 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.898 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.899 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.142.900 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.142.903 I llama_model_loader: - type  f32:   37 tensors
0.00.142.905 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.105 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.043 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.805 I llm_load_vocab: special tokens cache size = 5
0.00.298.821 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.298.843 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.298.844 I llm_load_print_meta: arch             = gemma
0.00.298.845 I llm_load_print_meta: vocab type       = SPM
0.00.298.846 I llm_load_print_meta: n_vocab          = 256000
0.00.298.846 I llm_load_print_meta: n_merges         = 0
0.00.298.847 I llm_load_print_meta: vocab_only       = 0
0.00.298.847 I llm_load_print_meta: n_ctx_train      = 8192
0.00.298.847 I llm_load_print_meta: n_embd           = 2048
0.00.298.848 I llm_load_print_meta: n_layer          = 18
0.00.298.860 I llm_load_print_meta: n_head           = 8
0.00.298.861 I llm_load_print_meta: n_head_kv        = 1
0.00.298.862 I llm_load_print_meta: n_rot            = 256
0.00.298.862 I llm_load_print_meta: n_swa            = 0
0.00.298.863 I llm_load_print_meta: n_embd_head_k    = 256
0.00.298.863 I llm_load_print_meta: n_embd_head_v    = 256
0.00.298.864 I llm_load_print_meta: n_gqa            = 8
0.00.298.865 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.298.866 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.298.866 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.298.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.298.868 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.298.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.298.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.298.869 I llm_load_print_meta: n_ff             = 16384
0.00.298.870 I llm_load_print_meta: n_expert         = 0
0.00.298.870 I llm_load_print_meta: n_expert_used    = 0
0.00.298.873 I llm_load_print_meta: causal attn      = 1
0.00.298.873 I llm_load_print_meta: pooling type     = 0
0.00.298.873 I llm_load_print_meta: rope type        = 2
0.00.298.874 I llm_load_print_meta: rope scaling     = linear
0.00.298.875 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.298.876 I llm_load_print_meta: freq_scale_train = 1
0.00.298.876 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.298.877 I llm_load_print_meta: rope_finetuned   = unknown
0.00.298.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.298.877 I llm_load_print_meta: ssm_d_inner      = 0
0.00.298.877 I llm_load_print_meta: ssm_d_state      = 0
0.00.298.878 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.298.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.298.878 I llm_load_print_meta: model type       = 2B
0.00.298.879 I llm_load_print_meta: model ftype      = Q8_0
0.00.298.880 I llm_load_print_meta: model params     = 2.51 B
0.00.298.881 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.298.881 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.298.881 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.298.882 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.298.882 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.298.882 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.298.883 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.298.883 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.298.883 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.298.884 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.298.885 I llm_load_print_meta: max token length = 93
0.00.377.444 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.377.453 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.377.454 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.377.454 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.377.455 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.377.455 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.382.924 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.931 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.931 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.932 I llama_new_context_with_model: n_batch       = 2048
0.00.382.932 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.933 I llama_new_context_with_model: flash_attn    = 0
0.00.382.936 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.937 I llama_new_context_with_model: freq_scale    = 1
0.00.382.938 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.043 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.065 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.173 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.003 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.011 I llama_new_context_with_model: graph nodes  = 601
0.00.401.012 I llama_new_context_with_model: graph splits = 1
0.00.401.015 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.956 I main: llama threadpool init, n_threads = 4
0.00.490.969 I 
0.00.491.048 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.051 I 
0.00.491.099 I sampler seed: 1008757141
0.00.491.110 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.112 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.114 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.114 I 
 increasities with the audacity to reimagine the very essence of a genre. 

**Answer:** Cyberpunk. [end of text]


0.02.214.307 I llama_perf_sampler_print:    sampling time =       3.79 ms /    24 runs   (    0.16 ms per token,  6332.45 tokens per second)
0.02.214.310 I llama_perf_context_print:        load time =     490.11 ms
0.02.214.311 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.214.312 I llama_perf_context_print:        eval time =    1708.72 ms /    23 runs   (   74.29 ms per token,    13.46 tokens per second)
0.02.214.314 I llama_perf_context_print:       total time =    1723.36 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.512 I build: 4144 (f95caa79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.021.134 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.146 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.154 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.160 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.161 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.165 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.166 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.168 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.168 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.169 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.174 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.174 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.175 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.175 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.544 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.970 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.836 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.843 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.844 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.845 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.846 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.847 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.848 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.851 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.852 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.853 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.853 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.855 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.859 I llama_model_loader: - type  f32:   37 tensors
0.00.130.860 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.845 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.821 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.531 I llm_load_vocab: special tokens cache size = 5
0.00.286.729 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.748 I llm_load_print_meta: arch             = gemma
0.00.286.748 I llm_load_print_meta: vocab type       = SPM
0.00.286.749 I llm_load_print_meta: n_vocab          = 256000
0.00.286.750 I llm_load_print_meta: n_merges         = 0
0.00.286.750 I llm_load_print_meta: vocab_only       = 0
0.00.286.751 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.751 I llm_load_print_meta: n_embd           = 2048
0.00.286.751 I llm_load_print_meta: n_layer          = 18
0.00.286.762 I llm_load_print_meta: n_head           = 8
0.00.286.763 I llm_load_print_meta: n_head_kv        = 1
0.00.286.764 I llm_load_print_meta: n_rot            = 256
0.00.286.764 I llm_load_print_meta: n_swa            = 0
0.00.286.765 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.766 I llm_load_print_meta: n_gqa            = 8
0.00.286.767 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.768 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.770 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.771 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.771 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.772 I llm_load_print_meta: n_ff             = 16384
0.00.286.773 I llm_load_print_meta: n_expert         = 0
0.00.286.773 I llm_load_print_meta: n_expert_used    = 0
0.00.286.773 I llm_load_print_meta: causal attn      = 1
0.00.286.774 I llm_load_print_meta: pooling type     = 0
0.00.286.774 I llm_load_print_meta: rope type        = 2
0.00.286.774 I llm_load_print_meta: rope scaling     = linear
0.00.286.776 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.776 I llm_load_print_meta: freq_scale_train = 1
0.00.286.776 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.777 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.777 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.777 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.777 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.778 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.778 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.779 I llm_load_print_meta: model type       = 2B
0.00.286.779 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.780 I llm_load_print_meta: model params     = 2.51 B
0.00.286.781 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.782 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.783 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.783 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.784 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.785 I llm_load_print_meta: max token length = 93
0.00.357.894 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.357.902 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.363.224 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.230 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.231 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.231 I llama_new_context_with_model: n_batch       = 2048
0.00.363.232 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.233 I llama_new_context_with_model: flash_attn    = 0
0.00.363.235 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.236 I llama_new_context_with_model: freq_scale    = 1
0.00.363.237 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.045 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.063 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.164 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.878 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.885 I llama_new_context_with_model: graph nodes  = 601
0.00.380.885 I llama_new_context_with_model: graph splits = 1
0.00.380.888 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.911 I main: llama threadpool init, n_threads = 4
0.00.482.931 I 
0.00.483.024 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.483.028 I 
0.00.483.080 I sampler seed: 2111739601
0.00.483.096 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.105 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.109 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.109 I 
 increably! [end of text]


0.00.807.356 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8130.08 tokens per second)
0.00.807.359 I llama_perf_context_print:        load time =     482.16 ms
0.00.807.360 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.807.362 I llama_perf_context_print:        eval time =     321.10 ms /     4 runs   (   80.28 ms per token,    12.46 tokens per second)
0.00.807.362 I llama_perf_context_print:       total time =     324.45 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.968s
user	0m23.412s
sys	0m9.538s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4144 (f95caa79)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40216.01 ms
main:    total time = 40216.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4144 (f95caa79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.020.991 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.018 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.022 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.025 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.025 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.026 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.026 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.027 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.030 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.030 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.031 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.032 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.033 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.135 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.201 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.081 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.087 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.088 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.089 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.091 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.094 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.095 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.096 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.097 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.098 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.101 I llama_model_loader: - type  f32:   37 tensors
0.00.130.102 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.102 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.289 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.498 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.168 I llm_load_vocab: special tokens cache size = 5
0.00.279.098 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.120 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.121 I llm_load_print_meta: arch             = gemma
0.00.279.121 I llm_load_print_meta: vocab type       = SPM
0.00.279.122 I llm_load_print_meta: n_vocab          = 256000
0.00.279.122 I llm_load_print_meta: n_merges         = 0
0.00.279.123 I llm_load_print_meta: vocab_only       = 0
0.00.279.123 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.123 I llm_load_print_meta: n_embd           = 2048
0.00.279.124 I llm_load_print_meta: n_layer          = 18
0.00.279.136 I llm_load_print_meta: n_head           = 8
0.00.279.137 I llm_load_print_meta: n_head_kv        = 1
0.00.279.137 I llm_load_print_meta: n_rot            = 256
0.00.279.137 I llm_load_print_meta: n_swa            = 0
0.00.279.137 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.138 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.139 I llm_load_print_meta: n_gqa            = 8
0.00.279.140 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.141 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.142 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.143 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.144 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.144 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.144 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.145 I llm_load_print_meta: n_ff             = 16384
0.00.279.146 I llm_load_print_meta: n_expert         = 0
0.00.279.146 I llm_load_print_meta: n_expert_used    = 0
0.00.279.146 I llm_load_print_meta: causal attn      = 1
0.00.279.146 I llm_load_print_meta: pooling type     = 0
0.00.279.147 I llm_load_print_meta: rope type        = 2
0.00.279.147 I llm_load_print_meta: rope scaling     = linear
0.00.279.148 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.149 I llm_load_print_meta: freq_scale_train = 1
0.00.279.149 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.150 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.150 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.150 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.150 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.150 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.151 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.151 I llm_load_print_meta: model type       = 2B
0.00.279.152 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.153 I llm_load_print_meta: model params     = 2.51 B
0.00.279.153 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.154 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.154 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.154 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.155 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.155 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.155 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.156 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.156 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.157 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.157 I llm_load_print_meta: max token length = 93
0.00.337.289 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.337.296 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.337.297 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.337.298 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.337.298 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.337.299 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.491 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.498 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.498 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.498 I llama_new_context_with_model: n_batch       = 2048
0.00.342.499 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.499 I llama_new_context_with_model: flash_attn    = 0
0.00.342.502 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.502 I llama_new_context_with_model: freq_scale    = 1
0.00.342.503 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.418 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.433 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.526 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.809 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.815 I llama_new_context_with_model: graph nodes  = 601
0.00.358.816 I llama_new_context_with_model: graph splits = 1
0.00.358.818 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.557 I main: llama threadpool init, n_threads = 4
0.00.435.569 I 
0.00.435.643 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.435.646 I 
0.00.435.687 I sampler seed: 2512329052
0.00.435.698 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.703 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.704 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.704 I 
 increasities
I am unable to generate sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information within the boundaries of ethical and legal considerations

0.02.058.012 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6623.85 tokens per second)
0.02.058.015 I llama_perf_context_print:        load time =     434.81 ms
0.02.058.016 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.058.017 I llama_perf_context_print:        eval time =    1603.04 ms /    32 runs   (   50.09 ms per token,    19.96 tokens per second)
0.02.058.018 I llama_perf_context_print:       total time =    1622.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4144 (f95caa79)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.50 ms
main:    total time = 40198.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.570 I build: 4144 (f95caa79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.262 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.288 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.292 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.293 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.294 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.294 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.295 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.295 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.301 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.302 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.303 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.303 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.304 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.834 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.954 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.955 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.955 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.956 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.957 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.966 I llama_model_loader: - type  f32:   37 tensors
0.00.130.967 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.968 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.382 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.348 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.942 I llm_load_vocab: special tokens cache size = 5
0.00.276.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.849 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.849 I llm_load_print_meta: arch             = gemma
0.00.276.850 I llm_load_print_meta: vocab type       = SPM
0.00.276.851 I llm_load_print_meta: n_vocab          = 256000
0.00.276.852 I llm_load_print_meta: n_merges         = 0
0.00.276.852 I llm_load_print_meta: vocab_only       = 0
0.00.276.852 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.853 I llm_load_print_meta: n_embd           = 2048
0.00.276.853 I llm_load_print_meta: n_layer          = 18
0.00.276.866 I llm_load_print_meta: n_head           = 8
0.00.276.868 I llm_load_print_meta: n_head_kv        = 1
0.00.276.868 I llm_load_print_meta: n_rot            = 256
0.00.276.868 I llm_load_print_meta: n_swa            = 0
0.00.276.868 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.869 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.870 I llm_load_print_meta: n_gqa            = 8
0.00.276.871 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.872 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.873 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.874 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.874 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.875 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.876 I llm_load_print_meta: n_ff             = 16384
0.00.276.876 I llm_load_print_meta: n_expert         = 0
0.00.276.877 I llm_load_print_meta: n_expert_used    = 0
0.00.276.877 I llm_load_print_meta: causal attn      = 1
0.00.276.877 I llm_load_print_meta: pooling type     = 0
0.00.276.878 I llm_load_print_meta: rope type        = 2
0.00.276.878 I llm_load_print_meta: rope scaling     = linear
0.00.276.880 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.880 I llm_load_print_meta: freq_scale_train = 1
0.00.276.880 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.881 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.881 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.881 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.882 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.882 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.882 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.883 I llm_load_print_meta: model type       = 2B
0.00.276.883 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.884 I llm_load_print_meta: model params     = 2.51 B
0.00.276.885 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.885 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.886 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.886 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.887 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.887 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.887 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.888 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.888 I llm_load_print_meta: max token length = 93
0.00.329.924 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.113 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.120 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.121 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.121 I llama_new_context_with_model: n_batch       = 2048
0.00.335.122 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.122 I llama_new_context_with_model: flash_attn    = 0
0.00.335.126 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.127 I llama_new_context_with_model: freq_scale    = 1
0.00.335.128 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.158 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.174 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.268 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.551 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.557 I llama_new_context_with_model: graph nodes  = 601
0.00.351.557 I llama_new_context_with_model: graph splits = 1
0.00.351.559 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.295 I main: llama threadpool init, n_threads = 4
0.00.427.309 I 
0.00.427.388 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.427.391 I 
0.00.427.441 I sampler seed: 250372398
0.00.427.454 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.457 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.458 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.458 I 
 increasities. [end of text]


0.00.630.838 I llama_perf_sampler_print:    sampling time =       0.72 ms /     5 runs   (    0.14 ms per token,  6954.10 tokens per second)
0.00.630.840 I llama_perf_context_print:        load time =     426.50 ms
0.00.630.841 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.630.843 I llama_perf_context_print:        eval time =     200.12 ms /     4 runs   (   50.03 ms per token,    19.99 tokens per second)
0.00.630.843 I llama_perf_context_print:       total time =     203.55 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.892s
user	10m18.749s
sys	0m7.096s
