+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.178 I build: 4416 (f922a9c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.363 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.625 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.634 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.642 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.647 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.651 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.654 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.655 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.656 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.656 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.658 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.658 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.663 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.663 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.664 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.664 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.665 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.418 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.567 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.372 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.379 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.379 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.380 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.381 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.382 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.384 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.385 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.386 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.387 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.389 I llama_model_loader: - type  f32:   37 tensors
0.00.130.390 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.336 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.856 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.365 I llm_load_vocab: special tokens cache size = 5
0.00.264.231 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.248 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.249 I llm_load_print_meta: arch             = gemma
0.00.264.250 I llm_load_print_meta: vocab type       = SPM
0.00.264.251 I llm_load_print_meta: n_vocab          = 256000
0.00.264.251 I llm_load_print_meta: n_merges         = 0
0.00.264.251 I llm_load_print_meta: vocab_only       = 0
0.00.264.252 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.252 I llm_load_print_meta: n_embd           = 2048
0.00.264.253 I llm_load_print_meta: n_layer          = 18
0.00.264.263 I llm_load_print_meta: n_head           = 8
0.00.264.266 I llm_load_print_meta: n_head_kv        = 1
0.00.264.266 I llm_load_print_meta: n_rot            = 256
0.00.264.267 I llm_load_print_meta: n_swa            = 0
0.00.264.267 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.267 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.269 I llm_load_print_meta: n_gqa            = 8
0.00.264.271 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.272 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.273 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.274 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.275 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.275 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.275 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.277 I llm_load_print_meta: n_ff             = 16384
0.00.264.277 I llm_load_print_meta: n_expert         = 0
0.00.264.278 I llm_load_print_meta: n_expert_used    = 0
0.00.264.278 I llm_load_print_meta: causal attn      = 1
0.00.264.278 I llm_load_print_meta: pooling type     = 0
0.00.264.278 I llm_load_print_meta: rope type        = 2
0.00.264.279 I llm_load_print_meta: rope scaling     = linear
0.00.264.281 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.281 I llm_load_print_meta: freq_scale_train = 1
0.00.264.282 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.282 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.282 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.283 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.283 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.283 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.283 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.285 I llm_load_print_meta: model type       = 2B
0.00.264.287 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.287 I llm_load_print_meta: model params     = 2.51 B
0.00.264.288 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.288 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.289 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.289 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.290 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.290 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.290 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.291 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.291 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.291 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.292 I llm_load_print_meta: max token length = 93
0.00.362.529 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.362.537 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.362.538 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.362.539 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.362.539 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.362.540 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.367.756 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.763 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.764 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.764 I llama_new_context_with_model: n_batch       = 2048
0.00.367.765 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.766 I llama_new_context_with_model: flash_attn    = 0
0.00.367.769 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.769 I llama_new_context_with_model: freq_scale    = 1
0.00.367.770 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.792 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.383.102 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.116 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.214 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.513 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.517 I llama_new_context_with_model: graph nodes  = 601
0.00.384.517 I llama_new_context_with_model: graph splits = 1
0.00.384.521 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.522 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.156 I main: llama threadpool init, n_threads = 4
0.00.469.171 I 
0.00.469.241 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.244 I 
0.00.469.277 I sampler seed: 2397857104
0.00.469.288 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.301 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.305 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.305 I 
 increasities in the history of Western civilization.

**Answer:**

**The history of Western civilization is replete with examples of remarkable advancements and innovations that have had

0.02.714.712 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6934.23 tokens per second)
0.02.714.714 I llama_perf_context_print:        load time =     468.77 ms
0.02.714.715 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.716 I llama_perf_context_print:        eval time =    2226.54 ms /    32 runs   (   69.58 ms per token,    14.37 tokens per second)
0.02.714.717 I llama_perf_context_print:       total time =    2245.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.577 I build: 4416 (f922a9c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.462 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.477 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.486 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.490 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.491 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.491 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.492 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.492 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.498 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.498 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.499 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.499 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.500 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.808 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.645 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.654 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.663 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.664 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.665 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.676 I llama_model_loader: - type  f32:   37 tensors
0.00.131.677 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.099 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.148 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.635 I llm_load_vocab: special tokens cache size = 5
0.00.269.592 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.612 I llm_load_print_meta: arch             = gemma
0.00.269.612 I llm_load_print_meta: vocab type       = SPM
0.00.269.613 I llm_load_print_meta: n_vocab          = 256000
0.00.269.613 I llm_load_print_meta: n_merges         = 0
0.00.269.613 I llm_load_print_meta: vocab_only       = 0
0.00.269.614 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.614 I llm_load_print_meta: n_embd           = 2048
0.00.269.614 I llm_load_print_meta: n_layer          = 18
0.00.269.625 I llm_load_print_meta: n_head           = 8
0.00.269.627 I llm_load_print_meta: n_head_kv        = 1
0.00.269.628 I llm_load_print_meta: n_rot            = 256
0.00.269.628 I llm_load_print_meta: n_swa            = 0
0.00.269.628 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.629 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.630 I llm_load_print_meta: n_gqa            = 8
0.00.269.632 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.634 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.635 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.636 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.636 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.637 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.637 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.639 I llm_load_print_meta: n_ff             = 16384
0.00.269.639 I llm_load_print_meta: n_expert         = 0
0.00.269.640 I llm_load_print_meta: n_expert_used    = 0
0.00.269.640 I llm_load_print_meta: causal attn      = 1
0.00.269.640 I llm_load_print_meta: pooling type     = 0
0.00.269.641 I llm_load_print_meta: rope type        = 2
0.00.269.641 I llm_load_print_meta: rope scaling     = linear
0.00.269.643 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.643 I llm_load_print_meta: freq_scale_train = 1
0.00.269.643 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.644 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.644 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.644 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.645 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.645 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.647 I llm_load_print_meta: model type       = 2B
0.00.269.648 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.649 I llm_load_print_meta: model params     = 2.51 B
0.00.269.649 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.650 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.650 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.651 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.651 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.651 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.651 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.652 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.652 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.653 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.653 I llm_load_print_meta: max token length = 93
0.00.366.006 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.184 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.190 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.190 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.191 I llama_new_context_with_model: n_batch       = 2048
0.00.371.191 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.192 I llama_new_context_with_model: flash_attn    = 0
0.00.371.194 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.195 I llama_new_context_with_model: freq_scale    = 1
0.00.371.196 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.216 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.385.766 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.779 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.871 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.116 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.122 I llama_new_context_with_model: graph nodes  = 601
0.00.387.123 I llama_new_context_with_model: graph splits = 1
0.00.387.126 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.126 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.057 I main: llama threadpool init, n_threads = 4
0.00.468.073 I 
0.00.468.148 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.151 I 
0.00.468.183 I sampler seed: 4089409583
0.00.468.195 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.197 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.198 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.198 I 
 increasities, and anxieties about the future.

**Answer:** Life is a complex tapestry woven with a myriad of emotions, experiences, and challenges. It is

0.02.654.921 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6685.58 tokens per second)
0.02.654.924 I llama_perf_context_print:        load time =     467.25 ms
0.02.654.925 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.654.926 I llama_perf_context_print:        eval time =    2168.26 ms /    32 runs   (   67.76 ms per token,    14.76 tokens per second)
0.02.654.927 I llama_perf_context_print:       total time =    2186.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.562 I build: 4416 (f922a9c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.331 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.341 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.349 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.355 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.356 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.359 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.359 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.360 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.360 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.361 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.365 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.366 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.367 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.368 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.299 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.807 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.648 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.656 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.657 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.659 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.660 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.660 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.661 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.663 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.666 I llama_model_loader: - type  f32:   37 tensors
0.00.131.667 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.290 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.614 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.184 I llm_load_vocab: special tokens cache size = 5
0.00.274.301 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.317 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.319 I llm_load_print_meta: arch             = gemma
0.00.274.319 I llm_load_print_meta: vocab type       = SPM
0.00.274.320 I llm_load_print_meta: n_vocab          = 256000
0.00.274.321 I llm_load_print_meta: n_merges         = 0
0.00.274.321 I llm_load_print_meta: vocab_only       = 0
0.00.274.322 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.322 I llm_load_print_meta: n_embd           = 2048
0.00.274.322 I llm_load_print_meta: n_layer          = 18
0.00.274.333 I llm_load_print_meta: n_head           = 8
0.00.274.335 I llm_load_print_meta: n_head_kv        = 1
0.00.274.335 I llm_load_print_meta: n_rot            = 256
0.00.274.335 I llm_load_print_meta: n_swa            = 0
0.00.274.336 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.336 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.338 I llm_load_print_meta: n_gqa            = 8
0.00.274.339 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.341 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.342 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.343 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.344 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.346 I llm_load_print_meta: n_ff             = 16384
0.00.274.346 I llm_load_print_meta: n_expert         = 0
0.00.274.346 I llm_load_print_meta: n_expert_used    = 0
0.00.274.347 I llm_load_print_meta: causal attn      = 1
0.00.274.347 I llm_load_print_meta: pooling type     = 0
0.00.274.347 I llm_load_print_meta: rope type        = 2
0.00.274.348 I llm_load_print_meta: rope scaling     = linear
0.00.274.349 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.349 I llm_load_print_meta: freq_scale_train = 1
0.00.274.350 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.350 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.351 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.351 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.351 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.351 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.352 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.353 I llm_load_print_meta: model type       = 2B
0.00.274.354 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.355 I llm_load_print_meta: model params     = 2.51 B
0.00.274.356 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.356 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.357 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.357 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.357 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.358 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.358 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.358 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.358 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.359 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.359 I llm_load_print_meta: max token length = 93
0.00.352.150 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.155 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.155 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.156 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.157 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.157 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.357.353 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.359 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.359 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.360 I llama_new_context_with_model: n_batch       = 2048
0.00.357.360 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.361 I llama_new_context_with_model: flash_attn    = 0
0.00.357.363 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.364 I llama_new_context_with_model: freq_scale    = 1
0.00.357.365 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.390 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.371.576 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.587 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.675 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.907 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.915 I llama_new_context_with_model: graph nodes  = 601
0.00.372.915 I llama_new_context_with_model: graph splits = 1
0.00.372.918 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.372.918 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.546 I main: llama threadpool init, n_threads = 4
0.00.456.561 I 
0.00.456.632 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.636 I 
0.00.456.677 I sampler seed: 3803264498
0.00.456.688 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.690 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.691 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.691 I 
 increasities that occur in the life of a child.

Answer: Developmental transitions. [end of text]


0.01.723.456 I llama_perf_sampler_print:    sampling time =       2.71 ms /    19 runs   (    0.14 ms per token,  7000.74 tokens per second)
0.01.723.459 I llama_perf_context_print:        load time =     455.78 ms
0.01.723.460 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.723.461 I llama_perf_context_print:        eval time =    1256.06 ms /    18 runs   (   69.78 ms per token,    14.33 tokens per second)
0.01.723.462 I llama_perf_context_print:       total time =    1266.92 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.175 I build: 4416 (f922a9c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.362 I main: llama backend init
0.00.000.369 I main: load the model and apply lora adapter, if any
0.00.020.298 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.309 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.317 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.327 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.331 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.332 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.332 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.333 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.333 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.337 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.338 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.339 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.340 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.340 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.399 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.553 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.366 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.372 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.373 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.374 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.374 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.376 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.377 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.380 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.380 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.381 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.382 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.383 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.386 I llama_model_loader: - type  f32:   37 tensors
0.00.130.388 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.723 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.688 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.230 I llm_load_vocab: special tokens cache size = 5
0.00.265.187 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.206 I llm_load_print_meta: arch             = gemma
0.00.265.206 I llm_load_print_meta: vocab type       = SPM
0.00.265.207 I llm_load_print_meta: n_vocab          = 256000
0.00.265.207 I llm_load_print_meta: n_merges         = 0
0.00.265.208 I llm_load_print_meta: vocab_only       = 0
0.00.265.208 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.208 I llm_load_print_meta: n_embd           = 2048
0.00.265.209 I llm_load_print_meta: n_layer          = 18
0.00.265.220 I llm_load_print_meta: n_head           = 8
0.00.265.222 I llm_load_print_meta: n_head_kv        = 1
0.00.265.222 I llm_load_print_meta: n_rot            = 256
0.00.265.222 I llm_load_print_meta: n_swa            = 0
0.00.265.223 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.223 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.225 I llm_load_print_meta: n_gqa            = 8
0.00.265.227 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.229 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.229 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.231 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.231 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.231 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.231 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.233 I llm_load_print_meta: n_ff             = 16384
0.00.265.233 I llm_load_print_meta: n_expert         = 0
0.00.265.234 I llm_load_print_meta: n_expert_used    = 0
0.00.265.234 I llm_load_print_meta: causal attn      = 1
0.00.265.234 I llm_load_print_meta: pooling type     = 0
0.00.265.235 I llm_load_print_meta: rope type        = 2
0.00.265.235 I llm_load_print_meta: rope scaling     = linear
0.00.265.236 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.237 I llm_load_print_meta: freq_scale_train = 1
0.00.265.237 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.238 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.238 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.238 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.238 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.239 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.239 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.241 I llm_load_print_meta: model type       = 2B
0.00.265.242 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.243 I llm_load_print_meta: model params     = 2.51 B
0.00.265.243 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.244 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.244 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.244 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.245 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.245 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.245 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.245 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.246 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.246 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.247 I llm_load_print_meta: max token length = 93
0.00.336.507 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.514 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.543 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.550 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.550 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.550 I llama_new_context_with_model: n_batch       = 2048
0.00.341.551 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.551 I llama_new_context_with_model: flash_attn    = 0
0.00.341.554 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.554 I llama_new_context_with_model: freq_scale    = 1
0.00.341.555 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.577 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.355.909 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.922 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.007 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.223 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.229 I llama_new_context_with_model: graph nodes  = 601
0.00.357.230 I llama_new_context_with_model: graph splits = 1
0.00.357.233 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.233 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.906 I main: llama threadpool init, n_threads = 4
0.00.445.921 I 
0.00.445.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.995 I 
0.00.446.027 I sampler seed: 552585131
0.00.446.036 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.039 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.039 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.040 I 
 increably!

I'm not sure what the meaning of "incredibly" is in this context. Can you please explain?

[Answer]



0.02.852.501 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6852.16 tokens per second)
0.02.852.504 I llama_perf_context_print:        load time =     445.52 ms
0.02.852.505 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.852.506 I llama_perf_context_print:        eval time =    2387.72 ms /    32 runs   (   74.62 ms per token,    13.40 tokens per second)
0.02.852.507 I llama_perf_context_print:       total time =    2406.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.587s
user	0m35.315s
sys	0m9.290s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4416 (f922a9c5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40290.35 ms
main:    total time = 40290.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.583 I build: 4416 (f922a9c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.000.783 I main: load the model and apply lora adapter, if any
0.00.021.666 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.676 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.684 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.691 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.693 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.695 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.696 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.697 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.697 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.698 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.699 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.703 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.703 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.704 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.704 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.705 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.539 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.646 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.448 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.455 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.455 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.456 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.457 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.458 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.458 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.461 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.461 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.462 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.462 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.468 I llama_model_loader: - type  f32:   37 tensors
0.00.131.469 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.470 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.105 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.234 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.807 I llm_load_vocab: special tokens cache size = 5
0.00.272.143 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.162 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.164 I llm_load_print_meta: arch             = gemma
0.00.272.164 I llm_load_print_meta: vocab type       = SPM
0.00.272.165 I llm_load_print_meta: n_vocab          = 256000
0.00.272.165 I llm_load_print_meta: n_merges         = 0
0.00.272.166 I llm_load_print_meta: vocab_only       = 0
0.00.272.166 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.167 I llm_load_print_meta: n_embd           = 2048
0.00.272.167 I llm_load_print_meta: n_layer          = 18
0.00.272.180 I llm_load_print_meta: n_head           = 8
0.00.272.182 I llm_load_print_meta: n_head_kv        = 1
0.00.272.182 I llm_load_print_meta: n_rot            = 256
0.00.272.182 I llm_load_print_meta: n_swa            = 0
0.00.272.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.184 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.186 I llm_load_print_meta: n_gqa            = 8
0.00.272.188 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.189 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.190 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.191 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.192 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.192 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.194 I llm_load_print_meta: n_ff             = 16384
0.00.272.194 I llm_load_print_meta: n_expert         = 0
0.00.272.195 I llm_load_print_meta: n_expert_used    = 0
0.00.272.195 I llm_load_print_meta: causal attn      = 1
0.00.272.196 I llm_load_print_meta: pooling type     = 0
0.00.272.197 I llm_load_print_meta: rope type        = 2
0.00.272.198 I llm_load_print_meta: rope scaling     = linear
0.00.272.200 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.200 I llm_load_print_meta: freq_scale_train = 1
0.00.272.200 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.201 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.201 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.201 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.203 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.203 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.205 I llm_load_print_meta: model type       = 2B
0.00.272.206 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.207 I llm_load_print_meta: model params     = 2.51 B
0.00.272.208 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.208 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.209 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.210 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.210 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.210 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.211 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.211 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.212 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.212 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.213 I llm_load_print_meta: max token length = 93
0.00.334.546 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.334.553 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.334.554 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.334.554 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.334.555 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.334.556 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.339.593 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.599 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.599 I llama_new_context_with_model: n_batch       = 2048
0.00.339.600 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.600 I llama_new_context_with_model: flash_attn    = 0
0.00.339.603 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.604 I llama_new_context_with_model: freq_scale    = 1
0.00.339.605 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.623 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.354.467 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.482 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.581 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.818 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.823 I llama_new_context_with_model: graph nodes  = 601
0.00.355.824 I llama_new_context_with_model: graph splits = 1
0.00.355.827 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.827 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.523 I main: llama threadpool init, n_threads = 4
0.00.431.540 I 
0.00.431.619 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.431.622 I 
0.00.431.656 I sampler seed: 92982026
0.00.431.668 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.680 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.683 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.683 I 
 maneutruely.

I have a bag of sweets, and I want to share them equally with my friends. However, I want to ensure that each friend

0.02.025.306 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6630.50 tokens per second)
0.02.025.309 I llama_perf_context_print:        load time =     430.72 ms
0.02.025.311 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.025.313 I llama_perf_context_print:        eval time =    1575.23 ms /    32 runs   (   49.23 ms per token,    20.31 tokens per second)
0.02.025.314 I llama_perf_context_print:       total time =    1593.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4416 (f922a9c5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40230.88 ms
main:    total time = 40230.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 4416 (f922a9c5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.168 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.184 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.191 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.195 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.198 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.199 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.200 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.200 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.201 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.204 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.204 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.205 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.206 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.112 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.444 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.251 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.257 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.258 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.259 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.260 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.261 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.264 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.265 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.269 I llama_model_loader: - type  f32:   37 tensors
0.00.131.270 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.271 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.799 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.631 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.149 I llm_load_vocab: special tokens cache size = 5
0.00.269.009 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.027 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.028 I llm_load_print_meta: arch             = gemma
0.00.269.029 I llm_load_print_meta: vocab type       = SPM
0.00.269.030 I llm_load_print_meta: n_vocab          = 256000
0.00.269.030 I llm_load_print_meta: n_merges         = 0
0.00.269.030 I llm_load_print_meta: vocab_only       = 0
0.00.269.031 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.031 I llm_load_print_meta: n_embd           = 2048
0.00.269.031 I llm_load_print_meta: n_layer          = 18
0.00.269.042 I llm_load_print_meta: n_head           = 8
0.00.269.044 I llm_load_print_meta: n_head_kv        = 1
0.00.269.044 I llm_load_print_meta: n_rot            = 256
0.00.269.045 I llm_load_print_meta: n_swa            = 0
0.00.269.045 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.045 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.047 I llm_load_print_meta: n_gqa            = 8
0.00.269.048 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.053 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.055 I llm_load_print_meta: n_ff             = 16384
0.00.269.055 I llm_load_print_meta: n_expert         = 0
0.00.269.055 I llm_load_print_meta: n_expert_used    = 0
0.00.269.055 I llm_load_print_meta: causal attn      = 1
0.00.269.056 I llm_load_print_meta: pooling type     = 0
0.00.269.057 I llm_load_print_meta: rope type        = 2
0.00.269.057 I llm_load_print_meta: rope scaling     = linear
0.00.269.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.059 I llm_load_print_meta: freq_scale_train = 1
0.00.269.059 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.060 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.060 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.060 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.061 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.061 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.063 I llm_load_print_meta: model type       = 2B
0.00.269.064 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.064 I llm_load_print_meta: model params     = 2.51 B
0.00.269.065 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.066 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.066 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.066 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.067 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.067 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.067 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.068 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.068 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.068 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.068 I llm_load_print_meta: max token length = 93
0.00.328.148 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.266 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.272 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.273 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.273 I llama_new_context_with_model: n_batch       = 2048
0.00.333.273 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.274 I llama_new_context_with_model: flash_attn    = 0
0.00.333.276 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.277 I llama_new_context_with_model: freq_scale    = 1
0.00.333.278 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.298 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.348.198 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.211 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.300 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.553 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.559 I llama_new_context_with_model: graph nodes  = 601
0.00.349.559 I llama_new_context_with_model: graph splits = 1
0.00.349.563 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.563 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.751 I main: llama threadpool init, n_threads = 4
0.00.423.766 I 
0.00.423.837 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.841 I 
0.00.423.872 I sampler seed: 3775099810
0.00.423.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.894 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.898 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.898 I 
 squaRED, the world's largest marketplace for creative goods, has announced the launch of its first-ever NFT marketplace.

**Key Features of SQUA

0.01.984.154 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6542.43 tokens per second)
0.01.984.156 I llama_perf_context_print:        load time =     422.99 ms
0.01.984.157 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.159 I llama_perf_context_print:        eval time =    1542.24 ms /    32 runs   (   48.19 ms per token,    20.75 tokens per second)
0.01.984.159 I llama_perf_context_print:       total time =    1560.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.309s
user	10m23.675s
sys	0m6.950s
