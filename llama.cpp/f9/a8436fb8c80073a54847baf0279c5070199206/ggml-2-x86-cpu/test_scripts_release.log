+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 3920 (f9a8436f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.001.861 I main: load the model and apply lora adapter, if any
0.00.023.382 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.432 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.451 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.453 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.454 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.454 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.455 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.459 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.460 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.460 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.461 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.462 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.434 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.908 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.914 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.915 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.916 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.917 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.918 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.919 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.923 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.925 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.925 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.927 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.930 I llama_model_loader: - type  f32:   37 tensors
0.00.133.932 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.044 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.260 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.239.405 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.242.918 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.250.676 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.294 I llm_load_vocab: special tokens cache size = 5
0.00.272.267 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.284 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.285 I llm_load_print_meta: arch             = gemma
0.00.272.285 I llm_load_print_meta: vocab type       = SPM
0.00.272.286 I llm_load_print_meta: n_vocab          = 256000
0.00.272.286 I llm_load_print_meta: n_merges         = 0
0.00.272.287 I llm_load_print_meta: vocab_only       = 0
0.00.272.287 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.287 I llm_load_print_meta: n_embd           = 2048
0.00.272.288 I llm_load_print_meta: n_layer          = 18
0.00.272.299 I llm_load_print_meta: n_head           = 8
0.00.272.300 I llm_load_print_meta: n_head_kv        = 1
0.00.272.300 I llm_load_print_meta: n_rot            = 256
0.00.272.301 I llm_load_print_meta: n_swa            = 0
0.00.272.301 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.301 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.302 I llm_load_print_meta: n_gqa            = 8
0.00.272.303 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.304 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.305 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.306 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.306 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.307 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.307 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.308 I llm_load_print_meta: n_ff             = 16384
0.00.272.308 I llm_load_print_meta: n_expert         = 0
0.00.272.308 I llm_load_print_meta: n_expert_used    = 0
0.00.272.309 I llm_load_print_meta: causal attn      = 1
0.00.272.309 I llm_load_print_meta: pooling type     = 0
0.00.272.309 I llm_load_print_meta: rope type        = 2
0.00.272.310 I llm_load_print_meta: rope scaling     = linear
0.00.272.311 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.312 I llm_load_print_meta: freq_scale_train = 1
0.00.272.312 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.312 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.312 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.313 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.313 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.313 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.313 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.314 I llm_load_print_meta: model type       = 2B
0.00.272.314 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.315 I llm_load_print_meta: model params     = 2.51 B
0.00.272.316 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.316 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.317 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.317 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.318 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.318 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.318 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.319 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.319 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.319 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.320 I llm_load_print_meta: max token length = 93
0.00.272.341 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.373.083 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.373.090 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.373.091 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.373.091 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.373.092 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.373.093 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.378.236 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.241 I llama_new_context_with_model: n_batch    = 2048
0.00.378.241 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.242 I llama_new_context_with_model: flash_attn = 0
0.00.378.244 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.245 I llama_new_context_with_model: freq_scale = 1
0.00.407.006 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.407.020 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.407.109 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.957 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.965 I llama_new_context_with_model: graph nodes  = 601
0.00.407.966 I llama_new_context_with_model: graph splits = 1
0.00.407.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.090 I main: llama threadpool init, n_threads = 4
0.00.499.101 I 
0.00.499.176 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.179 I 
0.00.499.214 I sampler seed: 3427329570
0.00.499.224 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.226 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.499.227 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.227 I 
 increasements in the text?

I am unable to locate the requested information.

The requested information could not be found.

The requested information is not available

0.02.744.669 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6919.69 tokens per second)
0.02.744.672 I llama_perf_context_print:        load time =     497.21 ms
0.02.744.674 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.744.676 I llama_perf_context_print:        eval time =    2227.76 ms /    32 runs   (   69.62 ms per token,    14.36 tokens per second)
0.02.744.676 I llama_perf_context_print:       total time =    2245.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.560 I build: 3920 (f9a8436f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.001.859 I main: load the model and apply lora adapter, if any
0.00.021.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.883 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.884 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.888 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.888 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.889 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.889 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.890 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.895 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.895 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.896 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.896 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.897 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.692 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.231 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.100 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.108 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.108 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.109 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.109 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.111 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.111 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.114 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.118 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.118 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.119 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.123 I llama_model_loader: - type  f32:   37 tensors
0.00.132.125 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.785 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.233.633 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.234.707 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.237.927 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.244.299 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.777 I llm_load_vocab: special tokens cache size = 5
0.00.265.653 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.667 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.668 I llm_load_print_meta: arch             = gemma
0.00.265.668 I llm_load_print_meta: vocab type       = SPM
0.00.265.669 I llm_load_print_meta: n_vocab          = 256000
0.00.265.669 I llm_load_print_meta: n_merges         = 0
0.00.265.670 I llm_load_print_meta: vocab_only       = 0
0.00.265.670 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.671 I llm_load_print_meta: n_embd           = 2048
0.00.265.671 I llm_load_print_meta: n_layer          = 18
0.00.265.682 I llm_load_print_meta: n_head           = 8
0.00.265.683 I llm_load_print_meta: n_head_kv        = 1
0.00.265.683 I llm_load_print_meta: n_rot            = 256
0.00.265.683 I llm_load_print_meta: n_swa            = 0
0.00.265.683 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.684 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.685 I llm_load_print_meta: n_gqa            = 8
0.00.265.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.687 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.687 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.689 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.689 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.690 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.690 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.691 I llm_load_print_meta: n_ff             = 16384
0.00.265.691 I llm_load_print_meta: n_expert         = 0
0.00.265.691 I llm_load_print_meta: n_expert_used    = 0
0.00.265.691 I llm_load_print_meta: causal attn      = 1
0.00.265.692 I llm_load_print_meta: pooling type     = 0
0.00.265.692 I llm_load_print_meta: rope type        = 2
0.00.265.693 I llm_load_print_meta: rope scaling     = linear
0.00.265.694 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.695 I llm_load_print_meta: freq_scale_train = 1
0.00.265.695 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.695 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.695 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.696 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.696 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.696 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.696 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.697 I llm_load_print_meta: model type       = 2B
0.00.265.697 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.699 I llm_load_print_meta: model params     = 2.51 B
0.00.265.699 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.700 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.701 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.701 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.701 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.702 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.702 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.702 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.703 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.703 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.703 I llm_load_print_meta: max token length = 93
0.00.265.728 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.359.374 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.364.492 I llama_new_context_with_model: n_ctx      = 8192
0.00.364.499 I llama_new_context_with_model: n_batch    = 2048
0.00.364.499 I llama_new_context_with_model: n_ubatch   = 512
0.00.364.500 I llama_new_context_with_model: flash_attn = 0
0.00.364.502 I llama_new_context_with_model: freq_base  = 10000.0
0.00.364.503 I llama_new_context_with_model: freq_scale = 1
0.00.393.696 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.393.708 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.393.804 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.652 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.394.661 I llama_new_context_with_model: graph nodes  = 601
0.00.394.661 I llama_new_context_with_model: graph splits = 1
0.00.394.663 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.245 I main: llama threadpool init, n_threads = 4
0.00.482.256 I 
0.00.482.331 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.334 I 
0.00.482.370 I sampler seed: 2044323986
0.00.482.383 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.386 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.482.387 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.387 I 
 increasements in her speech.

**Assistant**

I am unable to access real-time information, therefore I am unable to provide an analysis of Hillary Clinton

0.02.651.878 I llama_perf_sampler_print:    sampling time =       4.60 ms /    33 runs   (    0.14 ms per token,  7177.03 tokens per second)
0.02.651.880 I llama_perf_context_print:        load time =     480.36 ms
0.02.651.882 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.651.883 I llama_perf_context_print:        eval time =    2151.61 ms /    32 runs   (   67.24 ms per token,    14.87 tokens per second)
0.02.651.884 I llama_perf_context_print:       total time =    2169.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.525 I build: 3920 (f9a8436f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.001.873 I main: load the model and apply lora adapter, if any
0.00.021.902 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.949 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.956 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.962 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.966 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.966 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.967 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.968 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.968 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.972 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.973 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.974 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.119 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.735 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.663 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.670 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.671 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.672 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.673 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.674 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.676 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.677 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.677 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.678 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.679 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.682 I llama_model_loader: - type  f32:   37 tensors
0.00.133.684 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.861 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.239.016 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.242.830 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.251.590 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.220 I llm_load_vocab: special tokens cache size = 5
0.00.273.290 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.307 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.307 I llm_load_print_meta: arch             = gemma
0.00.273.308 I llm_load_print_meta: vocab type       = SPM
0.00.273.309 I llm_load_print_meta: n_vocab          = 256000
0.00.273.309 I llm_load_print_meta: n_merges         = 0
0.00.273.309 I llm_load_print_meta: vocab_only       = 0
0.00.273.310 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.310 I llm_load_print_meta: n_embd           = 2048
0.00.273.311 I llm_load_print_meta: n_layer          = 18
0.00.273.324 I llm_load_print_meta: n_head           = 8
0.00.273.325 I llm_load_print_meta: n_head_kv        = 1
0.00.273.325 I llm_load_print_meta: n_rot            = 256
0.00.273.325 I llm_load_print_meta: n_swa            = 0
0.00.273.326 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.326 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.327 I llm_load_print_meta: n_gqa            = 8
0.00.273.328 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.329 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.330 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.332 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.332 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.332 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.332 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.333 I llm_load_print_meta: n_ff             = 16384
0.00.273.334 I llm_load_print_meta: n_expert         = 0
0.00.273.334 I llm_load_print_meta: n_expert_used    = 0
0.00.273.334 I llm_load_print_meta: causal attn      = 1
0.00.273.335 I llm_load_print_meta: pooling type     = 0
0.00.273.335 I llm_load_print_meta: rope type        = 2
0.00.273.335 I llm_load_print_meta: rope scaling     = linear
0.00.273.337 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.337 I llm_load_print_meta: freq_scale_train = 1
0.00.273.338 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.339 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.339 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.339 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.339 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.340 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.340 I llm_load_print_meta: model type       = 2B
0.00.273.341 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.341 I llm_load_print_meta: model params     = 2.51 B
0.00.273.342 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.343 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.343 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.343 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.344 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.344 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.345 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.345 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.346 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.346 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.346 I llm_load_print_meta: max token length = 93
0.00.273.370 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.351.262 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.351.269 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.351.270 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.351.271 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.351.272 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.351.272 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.356.327 I llama_new_context_with_model: n_ctx      = 8192
0.00.356.333 I llama_new_context_with_model: n_batch    = 2048
0.00.356.334 I llama_new_context_with_model: n_ubatch   = 512
0.00.356.335 I llama_new_context_with_model: flash_attn = 0
0.00.356.337 I llama_new_context_with_model: freq_base  = 10000.0
0.00.356.338 I llama_new_context_with_model: freq_scale = 1
0.00.386.065 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.386.082 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.386.174 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.024 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.387.032 I llama_new_context_with_model: graph nodes  = 601
0.00.387.032 I llama_new_context_with_model: graph splits = 1
0.00.387.035 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.437 I main: llama threadpool init, n_threads = 4
0.00.489.450 I 
0.00.489.541 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.550 I 
0.00.489.594 I sampler seed: 224173738
0.00.489.605 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.608 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.489.609 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.610 I 
 increasities in their efforts to promote their political agendas.

**Answer:** Political campaigns often engage in various tactics to promote their political agendas, including advertising, voter

0.02.739.128 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6449.09 tokens per second)
0.02.739.131 I llama_perf_context_print:        load time =     487.54 ms
0.02.739.132 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.739.133 I llama_perf_context_print:        eval time =    2231.48 ms /    32 runs   (   69.73 ms per token,    14.34 tokens per second)
0.02.739.134 I llama_perf_context_print:       total time =    2249.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 3920 (f9a8436f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.021.760 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.806 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.813 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.819 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.820 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.825 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.826 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.827 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.827 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.828 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.828 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.832 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.834 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.834 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.621 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.089 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.013 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.021 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.022 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.023 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.024 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.025 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.026 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.029 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.030 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.031 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.032 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.033 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.037 I llama_model_loader: - type  f32:   37 tensors
0.00.132.039 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.031 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.234.753 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.235.849 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.239.156 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.245.916 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.432 I llm_load_vocab: special tokens cache size = 5
0.00.267.346 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.364 I llm_load_print_meta: arch             = gemma
0.00.267.365 I llm_load_print_meta: vocab type       = SPM
0.00.267.365 I llm_load_print_meta: n_vocab          = 256000
0.00.267.366 I llm_load_print_meta: n_merges         = 0
0.00.267.366 I llm_load_print_meta: vocab_only       = 0
0.00.267.366 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.367 I llm_load_print_meta: n_embd           = 2048
0.00.267.367 I llm_load_print_meta: n_layer          = 18
0.00.267.379 I llm_load_print_meta: n_head           = 8
0.00.267.380 I llm_load_print_meta: n_head_kv        = 1
0.00.267.381 I llm_load_print_meta: n_rot            = 256
0.00.267.381 I llm_load_print_meta: n_swa            = 0
0.00.267.381 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.382 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.383 I llm_load_print_meta: n_gqa            = 8
0.00.267.384 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.385 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.386 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.387 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.387 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.388 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.389 I llm_load_print_meta: n_ff             = 16384
0.00.267.389 I llm_load_print_meta: n_expert         = 0
0.00.267.390 I llm_load_print_meta: n_expert_used    = 0
0.00.267.390 I llm_load_print_meta: causal attn      = 1
0.00.267.390 I llm_load_print_meta: pooling type     = 0
0.00.267.391 I llm_load_print_meta: rope type        = 2
0.00.267.391 I llm_load_print_meta: rope scaling     = linear
0.00.267.392 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.393 I llm_load_print_meta: freq_scale_train = 1
0.00.267.393 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.393 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.394 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.394 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.394 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.394 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.395 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.395 I llm_load_print_meta: model type       = 2B
0.00.267.396 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.397 I llm_load_print_meta: model params     = 2.51 B
0.00.267.399 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.403 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.404 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.404 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.404 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.405 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.405 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.406 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.407 I llm_load_print_meta: max token length = 93
0.00.267.427 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.337.510 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.337.518 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.342.637 I llama_new_context_with_model: n_ctx      = 8192
0.00.342.643 I llama_new_context_with_model: n_batch    = 2048
0.00.342.644 I llama_new_context_with_model: n_ubatch   = 512
0.00.342.644 I llama_new_context_with_model: flash_attn = 0
0.00.342.648 I llama_new_context_with_model: freq_base  = 10000.0
0.00.342.649 I llama_new_context_with_model: freq_scale = 1
0.00.371.662 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.371.679 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.371.770 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.627 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.372.635 I llama_new_context_with_model: graph nodes  = 601
0.00.372.636 I llama_new_context_with_model: graph splits = 1
0.00.372.637 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.922 I main: llama threadpool init, n_threads = 4
0.00.467.934 I 
0.00.468.010 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.013 I 
0.00.468.050 I sampler seed: 2187116931
0.00.468.059 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.061 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.468.062 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.062 I 
 increasities. [end of text]


0.00.770.513 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7704.16 tokens per second)
0.00.770.515 I llama_perf_context_print:        load time =     466.04 ms
0.00.770.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.770.517 I llama_perf_context_print:        eval time =     299.16 ms /     4 runs   (   74.79 ms per token,    13.37 tokens per second)
0.00.770.518 I llama_perf_context_print:       total time =     302.60 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.233s
user	0m30.783s
sys	0m9.395s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3920 (f9a8436f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32091.44 ms
main:    total time = 32091.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 3920 (f9a8436f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.817 I main: load the model and apply lora adapter, if any
0.00.022.093 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.141 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.149 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.155 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.156 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.159 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.160 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.161 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.161 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.162 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.162 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.169 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.169 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.755 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.712 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.720 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.721 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.722 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.723 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.726 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.726 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.727 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.727 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.728 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.732 I llama_model_loader: - type  f32:   37 tensors
0.00.132.734 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.735 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.200 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.833 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.240.084 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.243.885 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.251.496 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.029 I llm_load_vocab: special tokens cache size = 5
0.00.272.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.886 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.886 I llm_load_print_meta: arch             = gemma
0.00.272.887 I llm_load_print_meta: vocab type       = SPM
0.00.272.888 I llm_load_print_meta: n_vocab          = 256000
0.00.272.888 I llm_load_print_meta: n_merges         = 0
0.00.272.888 I llm_load_print_meta: vocab_only       = 0
0.00.272.889 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.889 I llm_load_print_meta: n_embd           = 2048
0.00.272.889 I llm_load_print_meta: n_layer          = 18
0.00.272.901 I llm_load_print_meta: n_head           = 8
0.00.272.902 I llm_load_print_meta: n_head_kv        = 1
0.00.272.902 I llm_load_print_meta: n_rot            = 256
0.00.272.902 I llm_load_print_meta: n_swa            = 0
0.00.272.903 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.903 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.904 I llm_load_print_meta: n_gqa            = 8
0.00.272.905 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.906 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.906 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.908 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.908 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.908 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.909 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.910 I llm_load_print_meta: n_ff             = 16384
0.00.272.910 I llm_load_print_meta: n_expert         = 0
0.00.272.910 I llm_load_print_meta: n_expert_used    = 0
0.00.272.911 I llm_load_print_meta: causal attn      = 1
0.00.272.911 I llm_load_print_meta: pooling type     = 0
0.00.272.911 I llm_load_print_meta: rope type        = 2
0.00.272.912 I llm_load_print_meta: rope scaling     = linear
0.00.272.913 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.914 I llm_load_print_meta: freq_scale_train = 1
0.00.272.914 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.914 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.914 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.915 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.915 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.915 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.915 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.916 I llm_load_print_meta: model type       = 2B
0.00.272.917 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.918 I llm_load_print_meta: model params     = 2.51 B
0.00.272.919 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.919 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.919 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.920 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.920 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.920 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.921 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.921 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.922 I llm_load_print_meta: max token length = 93
0.00.272.950 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.932 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.330.939 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.330.940 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.330.941 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.330.941 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.330.942 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.335.969 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.975 I llama_new_context_with_model: n_batch    = 2048
0.00.335.975 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.976 I llama_new_context_with_model: flash_attn = 0
0.00.335.978 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.979 I llama_new_context_with_model: freq_scale = 1
0.00.365.080 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.095 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.197 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.110 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.366.116 I llama_new_context_with_model: graph nodes  = 601
0.00.366.117 I llama_new_context_with_model: graph splits = 1
0.00.366.119 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.631 I main: llama threadpool init, n_threads = 4
0.00.447.643 I 
0.00.447.722 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.726 I 
0.00.447.762 I sampler seed: 2291580622
0.00.447.771 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.774 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.447.774 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.774 I 
 squaRED text is a message displayed in a chat window. It is typically used to convey a message to other users.

**Instructions:**

* Write a

0.02.054.106 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6602.64 tokens per second)
0.02.054.108 I llama_perf_context_print:        load time =     445.79 ms
0.02.054.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.054.112 I llama_perf_context_print:        eval time =    1587.75 ms /    32 runs   (   49.62 ms per token,    20.15 tokens per second)
0.02.054.113 I llama_perf_context_print:       total time =    1606.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3920 (f9a8436f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32028.82 ms
main:    total time = 32028.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.535 I build: 3920 (f9a8436f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.001.854 I main: load the model and apply lora adapter, if any
0.00.022.004 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.016 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.022 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.034 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.036 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.139 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.977 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.983 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.984 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.984 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.985 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.986 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.986 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.989 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.990 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.992 I llama_model_loader: - type  f32:   37 tensors
0.00.131.994 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.995 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.190 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.114 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.245.467 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.249.519 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.257.643 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.186 I llm_load_vocab: special tokens cache size = 5
0.00.278.960 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.976 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.977 I llm_load_print_meta: arch             = gemma
0.00.278.977 I llm_load_print_meta: vocab type       = SPM
0.00.278.978 I llm_load_print_meta: n_vocab          = 256000
0.00.278.978 I llm_load_print_meta: n_merges         = 0
0.00.278.979 I llm_load_print_meta: vocab_only       = 0
0.00.278.979 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.979 I llm_load_print_meta: n_embd           = 2048
0.00.278.980 I llm_load_print_meta: n_layer          = 18
0.00.278.992 I llm_load_print_meta: n_head           = 8
0.00.278.993 I llm_load_print_meta: n_head_kv        = 1
0.00.278.994 I llm_load_print_meta: n_rot            = 256
0.00.278.994 I llm_load_print_meta: n_swa            = 0
0.00.278.995 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.996 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.998 I llm_load_print_meta: n_gqa            = 8
0.00.278.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.001 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.003 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.005 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.007 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.008 I llm_load_print_meta: n_ff             = 16384
0.00.279.009 I llm_load_print_meta: n_expert         = 0
0.00.279.009 I llm_load_print_meta: n_expert_used    = 0
0.00.279.010 I llm_load_print_meta: causal attn      = 1
0.00.279.011 I llm_load_print_meta: pooling type     = 0
0.00.279.011 I llm_load_print_meta: rope type        = 2
0.00.279.012 I llm_load_print_meta: rope scaling     = linear
0.00.279.014 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.015 I llm_load_print_meta: freq_scale_train = 1
0.00.279.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.016 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.017 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.018 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.018 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.019 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.019 I llm_load_print_meta: model type       = 2B
0.00.279.021 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.022 I llm_load_print_meta: model params     = 2.51 B
0.00.279.023 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.024 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.025 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.028 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.029 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.029 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.030 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.031 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.032 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.033 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.033 I llm_load_print_meta: max token length = 93
0.00.279.067 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.335.914 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.340.955 I llama_new_context_with_model: n_ctx      = 8192
0.00.340.961 I llama_new_context_with_model: n_batch    = 2048
0.00.340.962 I llama_new_context_with_model: n_ubatch   = 512
0.00.340.962 I llama_new_context_with_model: flash_attn = 0
0.00.340.965 I llama_new_context_with_model: freq_base  = 10000.0
0.00.340.966 I llama_new_context_with_model: freq_scale = 1
0.00.369.805 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.369.821 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.369.912 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.770 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.370.779 I llama_new_context_with_model: graph nodes  = 601
0.00.370.779 I llama_new_context_with_model: graph splits = 1
0.00.370.781 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.019 I main: llama threadpool init, n_threads = 4
0.00.451.030 I 
0.00.451.117 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.121 I 
0.00.451.176 I sampler seed: 4270689019
0.00.451.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.197 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.451.197 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.198 I 
 seconally.

I'm not sure if I'm expressing myself clearly, but I'm trying to describe a situation where someone has done something that

0.02.055.611 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6668.01 tokens per second)
0.02.055.613 I llama_perf_context_print:        load time =     449.14 ms
0.02.055.615 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.055.616 I llama_perf_context_print:        eval time =    1586.56 ms /    32 runs   (   49.58 ms per token,    20.17 tokens per second)
0.02.055.617 I llama_perf_context_print:       total time =    1604.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.446s
user	8m14.776s
sys	0m6.731s
