+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.525 I build: 4428 (011baa40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.021.358 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.377 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.383 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.384 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.387 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.388 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.389 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.390 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.395 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.668 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.620 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.916 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.922 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.923 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.923 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.926 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.928 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.929 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.930 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.930 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.931 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.935 I llama_model_loader: - type  f32:   37 tensors
0.00.131.936 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.481 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.618 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.122 I llm_load_vocab: special tokens cache size = 5
0.00.266.830 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.848 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.849 I llm_load_print_meta: arch             = gemma
0.00.266.849 I llm_load_print_meta: vocab type       = SPM
0.00.266.850 I llm_load_print_meta: n_vocab          = 256000
0.00.266.850 I llm_load_print_meta: n_merges         = 0
0.00.266.851 I llm_load_print_meta: vocab_only       = 0
0.00.266.851 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.852 I llm_load_print_meta: n_embd           = 2048
0.00.266.852 I llm_load_print_meta: n_layer          = 18
0.00.266.862 I llm_load_print_meta: n_head           = 8
0.00.266.864 I llm_load_print_meta: n_head_kv        = 1
0.00.266.864 I llm_load_print_meta: n_rot            = 256
0.00.266.865 I llm_load_print_meta: n_swa            = 0
0.00.266.865 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.865 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.867 I llm_load_print_meta: n_gqa            = 8
0.00.266.869 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.870 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.871 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.872 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.873 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.873 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.873 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.875 I llm_load_print_meta: n_ff             = 16384
0.00.266.875 I llm_load_print_meta: n_expert         = 0
0.00.266.876 I llm_load_print_meta: n_expert_used    = 0
0.00.266.876 I llm_load_print_meta: causal attn      = 1
0.00.266.876 I llm_load_print_meta: pooling type     = 0
0.00.266.876 I llm_load_print_meta: rope type        = 2
0.00.266.877 I llm_load_print_meta: rope scaling     = linear
0.00.266.878 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.878 I llm_load_print_meta: freq_scale_train = 1
0.00.266.879 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.879 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.879 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.880 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.880 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.880 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.880 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.882 I llm_load_print_meta: model type       = 2B
0.00.266.883 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.884 I llm_load_print_meta: model params     = 2.51 B
0.00.266.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.885 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.885 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.886 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.886 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.886 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.887 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.887 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.888 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.888 I llm_load_print_meta: max token length = 93
0.00.368.231 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.238 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.239 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.240 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.240 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.241 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.404 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.410 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.410 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.411 I llama_new_context_with_model: n_batch       = 2048
0.00.373.411 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.412 I llama_new_context_with_model: flash_attn    = 0
0.00.373.414 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.415 I llama_new_context_with_model: freq_scale    = 1
0.00.373.416 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.435 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.880 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.892 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.981 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.221 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.227 I llama_new_context_with_model: graph nodes  = 601
0.00.389.227 I llama_new_context_with_model: graph splits = 1
0.00.389.231 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.231 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.895 I main: llama threadpool init, n_threads = 4
0.00.473.911 I 
0.00.473.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.987 I 
0.00.474.020 I sampler seed: 837663634
0.00.474.031 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.033 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.034 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.034 I 
 increadibly and without any pauses. [end of text]


0.01.039.318 I llama_perf_sampler_print:    sampling time =       1.25 ms /     9 runs   (    0.14 ms per token,  7228.92 tokens per second)
0.01.039.321 I llama_perf_context_print:        load time =     473.15 ms
0.01.039.322 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.039.323 I llama_perf_context_print:        eval time =     559.94 ms /     8 runs   (   69.99 ms per token,    14.29 tokens per second)
0.01.039.323 I llama_perf_context_print:       total time =     565.43 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.179 I build: 4428 (011baa40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.401 I main: llama backend init
0.00.000.408 I main: load the model and apply lora adapter, if any
0.00.020.564 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.586 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.589 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.592 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.593 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.593 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.594 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.595 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.599 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.599 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.600 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.600 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.601 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.455 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.059 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.862 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.868 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.868 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.869 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.869 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.870 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.871 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.873 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.874 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.874 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.875 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.876 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.878 I llama_model_loader: - type  f32:   37 tensors
0.00.129.879 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.708 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.933 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.441 I llm_load_vocab: special tokens cache size = 5
0.00.266.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.349 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.350 I llm_load_print_meta: arch             = gemma
0.00.266.351 I llm_load_print_meta: vocab type       = SPM
0.00.266.351 I llm_load_print_meta: n_vocab          = 256000
0.00.266.352 I llm_load_print_meta: n_merges         = 0
0.00.266.352 I llm_load_print_meta: vocab_only       = 0
0.00.266.353 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.353 I llm_load_print_meta: n_embd           = 2048
0.00.266.353 I llm_load_print_meta: n_layer          = 18
0.00.266.366 I llm_load_print_meta: n_head           = 8
0.00.266.368 I llm_load_print_meta: n_head_kv        = 1
0.00.266.368 I llm_load_print_meta: n_rot            = 256
0.00.266.368 I llm_load_print_meta: n_swa            = 0
0.00.266.369 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.369 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.371 I llm_load_print_meta: n_gqa            = 8
0.00.266.372 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.374 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.375 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.376 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.376 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.377 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.380 I llm_load_print_meta: n_ff             = 16384
0.00.266.380 I llm_load_print_meta: n_expert         = 0
0.00.266.380 I llm_load_print_meta: n_expert_used    = 0
0.00.266.381 I llm_load_print_meta: causal attn      = 1
0.00.266.382 I llm_load_print_meta: pooling type     = 0
0.00.266.382 I llm_load_print_meta: rope type        = 2
0.00.266.382 I llm_load_print_meta: rope scaling     = linear
0.00.266.383 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.385 I llm_load_print_meta: freq_scale_train = 1
0.00.266.385 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.385 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.388 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.389 I llm_load_print_meta: model type       = 2B
0.00.266.390 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.395 I llm_load_print_meta: model params     = 2.51 B
0.00.266.396 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.396 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.396 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.396 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.397 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.397 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.398 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.398 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.399 I llm_load_print_meta: max token length = 93
0.00.363.257 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.357 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.364 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.364 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.364 I llama_new_context_with_model: n_batch       = 2048
0.00.368.365 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.365 I llama_new_context_with_model: flash_attn    = 0
0.00.368.367 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.368 I llama_new_context_with_model: freq_scale    = 1
0.00.368.369 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.397 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.383.368 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.381 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.472 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.722 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.727 I llama_new_context_with_model: graph nodes  = 601
0.00.384.728 I llama_new_context_with_model: graph splits = 1
0.00.384.731 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.732 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.308 I main: llama threadpool init, n_threads = 4
0.00.466.324 I 
0.00.466.398 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.401 I 
0.00.466.443 I sampler seed: 2698309843
0.00.466.453 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.456 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.457 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.457 I 
 increably.

**Answer:** I am so sorry, but I am unable to provide an answer to that question as it contains inappropriate and sexually suggestive content.

0.02.662.860 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6821.00 tokens per second)
0.02.662.862 I llama_perf_context_print:        load time =     465.88 ms
0.02.662.863 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.662.864 I llama_perf_context_print:        eval time =    2177.08 ms /    32 runs   (   68.03 ms per token,    14.70 tokens per second)
0.02.662.865 I llama_perf_context_print:       total time =    2196.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.533 I build: 4428 (011baa40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.021.303 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.311 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.319 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.325 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.326 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.329 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.330 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.330 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.331 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.332 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.335 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.336 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.394 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.320 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.135 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.141 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.142 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.143 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.143 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.144 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.145 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.147 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.148 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.149 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.149 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.150 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.154 I llama_model_loader: - type  f32:   37 tensors
0.00.131.154 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.316 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.088 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.619 I llm_load_vocab: special tokens cache size = 5
0.00.273.333 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.350 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.352 I llm_load_print_meta: arch             = gemma
0.00.273.352 I llm_load_print_meta: vocab type       = SPM
0.00.273.353 I llm_load_print_meta: n_vocab          = 256000
0.00.273.353 I llm_load_print_meta: n_merges         = 0
0.00.273.354 I llm_load_print_meta: vocab_only       = 0
0.00.273.355 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.355 I llm_load_print_meta: n_embd           = 2048
0.00.273.355 I llm_load_print_meta: n_layer          = 18
0.00.273.368 I llm_load_print_meta: n_head           = 8
0.00.273.370 I llm_load_print_meta: n_head_kv        = 1
0.00.273.370 I llm_load_print_meta: n_rot            = 256
0.00.273.370 I llm_load_print_meta: n_swa            = 0
0.00.273.371 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.371 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.373 I llm_load_print_meta: n_gqa            = 8
0.00.273.375 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.376 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.377 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.379 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.379 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.380 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.380 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.382 I llm_load_print_meta: n_ff             = 16384
0.00.273.382 I llm_load_print_meta: n_expert         = 0
0.00.273.383 I llm_load_print_meta: n_expert_used    = 0
0.00.273.383 I llm_load_print_meta: causal attn      = 1
0.00.273.383 I llm_load_print_meta: pooling type     = 0
0.00.273.383 I llm_load_print_meta: rope type        = 2
0.00.273.384 I llm_load_print_meta: rope scaling     = linear
0.00.273.385 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.385 I llm_load_print_meta: freq_scale_train = 1
0.00.273.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.388 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.389 I llm_load_print_meta: model type       = 2B
0.00.273.391 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.392 I llm_load_print_meta: model params     = 2.51 B
0.00.273.393 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.393 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.394 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.394 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.394 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.395 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.395 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.395 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.396 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.396 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.396 I llm_load_print_meta: max token length = 93
0.00.351.644 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.652 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.653 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.654 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.654 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.655 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.903 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.910 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.910 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.911 I llama_new_context_with_model: n_batch       = 2048
0.00.356.911 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.912 I llama_new_context_with_model: flash_attn    = 0
0.00.356.914 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.914 I llama_new_context_with_model: freq_scale    = 1
0.00.356.915 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.935 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.371.234 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.249 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.349 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.627 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.634 I llama_new_context_with_model: graph nodes  = 601
0.00.372.634 I llama_new_context_with_model: graph splits = 1
0.00.372.638 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.372.639 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.974 I main: llama threadpool init, n_threads = 4
0.00.456.991 I 
0.00.457.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.457.069 I 
0.00.457.102 I sampler seed: 543474787
0.00.457.112 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.115 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.116 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.116 I 
 increasities

The provided text contains a claim about "incredibility". Please ensure your answer aligns with the provided information.

I am unable to provide an

0.02.721.272 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6653.23 tokens per second)
0.02.721.274 I llama_perf_context_print:        load time =     456.23 ms
0.02.721.276 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.278 I llama_perf_context_print:        eval time =    2245.23 ms /    32 runs   (   70.16 ms per token,    14.25 tokens per second)
0.02.721.279 I llama_perf_context_print:       total time =    2264.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.536 I build: 4428 (011baa40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.813 I main: llama backend init
0.00.000.822 I main: load the model and apply lora adapter, if any
0.00.021.220 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.230 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.238 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.245 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.249 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.253 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.254 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.256 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.256 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.257 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.258 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.918 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.734 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.493 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.502 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.503 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.507 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.507 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.511 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.513 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.514 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.515 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.138.517 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.520 I llama_model_loader: - type  f32:   37 tensors
0.00.138.522 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.879 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.497 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.136 I llm_load_vocab: special tokens cache size = 5
0.00.287.977 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.997 I llm_load_print_meta: arch             = gemma
0.00.287.998 I llm_load_print_meta: vocab type       = SPM
0.00.287.998 I llm_load_print_meta: n_vocab          = 256000
0.00.287.999 I llm_load_print_meta: n_merges         = 0
0.00.287.999 I llm_load_print_meta: vocab_only       = 0
0.00.288.000 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.000 I llm_load_print_meta: n_embd           = 2048
0.00.288.000 I llm_load_print_meta: n_layer          = 18
0.00.288.013 I llm_load_print_meta: n_head           = 8
0.00.288.016 I llm_load_print_meta: n_head_kv        = 1
0.00.288.016 I llm_load_print_meta: n_rot            = 256
0.00.288.016 I llm_load_print_meta: n_swa            = 0
0.00.288.017 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.018 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.020 I llm_load_print_meta: n_gqa            = 8
0.00.288.024 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.026 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.027 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.028 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.028 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.029 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.032 I llm_load_print_meta: n_ff             = 16384
0.00.288.032 I llm_load_print_meta: n_expert         = 0
0.00.288.032 I llm_load_print_meta: n_expert_used    = 0
0.00.288.033 I llm_load_print_meta: causal attn      = 1
0.00.288.033 I llm_load_print_meta: pooling type     = 0
0.00.288.033 I llm_load_print_meta: rope type        = 2
0.00.288.034 I llm_load_print_meta: rope scaling     = linear
0.00.288.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.035 I llm_load_print_meta: freq_scale_train = 1
0.00.288.036 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.036 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.037 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.037 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.038 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.038 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.040 I llm_load_print_meta: model type       = 2B
0.00.288.041 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.042 I llm_load_print_meta: model params     = 2.51 B
0.00.288.043 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.044 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.045 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.046 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.046 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.047 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.047 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.047 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.048 I llm_load_print_meta: max token length = 93
0.00.365.095 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.365.103 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.370.325 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.332 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.333 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.333 I llama_new_context_with_model: n_batch       = 2048
0.00.370.333 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.334 I llama_new_context_with_model: flash_attn    = 0
0.00.370.336 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.337 I llama_new_context_with_model: freq_scale    = 1
0.00.370.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.358 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.385.419 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.434 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.529 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.791 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.798 I llama_new_context_with_model: graph nodes  = 601
0.00.386.798 I llama_new_context_with_model: graph splits = 1
0.00.386.802 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.386.802 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.096 I main: llama threadpool init, n_threads = 4
0.00.476.111 I 
0.00.476.189 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.192 I 
0.00.476.225 I sampler seed: 2802153098
0.00.476.236 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.248 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.251 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.252 I 
 increasively. [end of text]


0.00.781.763 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7751.94 tokens per second)
0.00.781.766 I llama_perf_context_print:        load time =     475.25 ms
0.00.781.768 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.781.770 I llama_perf_context_print:        eval time =     302.35 ms /     4 runs   (   75.59 ms per token,    13.23 tokens per second)
0.00.781.771 I llama_perf_context_print:       total time =     305.68 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.301s
user	0m24.229s
sys	0m9.420s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4428 (011baa40)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40392.61 ms
main:    total time = 40392.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4428 (011baa40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.022.451 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.461 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.469 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.474 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.475 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.477 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.478 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.479 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.479 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.480 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.480 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.484 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.485 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.485 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.486 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.352 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.877 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.878 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.881 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.882 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.885 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.886 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.887 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.888 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.889 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.892 I llama_model_loader: - type  f32:   37 tensors
0.00.131.893 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.894 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.188 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.717 I llm_load_vocab: special tokens cache size = 5
0.00.271.286 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.303 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.305 I llm_load_print_meta: arch             = gemma
0.00.271.305 I llm_load_print_meta: vocab type       = SPM
0.00.271.306 I llm_load_print_meta: n_vocab          = 256000
0.00.271.306 I llm_load_print_meta: n_merges         = 0
0.00.271.306 I llm_load_print_meta: vocab_only       = 0
0.00.271.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.307 I llm_load_print_meta: n_embd           = 2048
0.00.271.307 I llm_load_print_meta: n_layer          = 18
0.00.271.318 I llm_load_print_meta: n_head           = 8
0.00.271.321 I llm_load_print_meta: n_head_kv        = 1
0.00.271.321 I llm_load_print_meta: n_rot            = 256
0.00.271.321 I llm_load_print_meta: n_swa            = 0
0.00.271.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.322 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.323 I llm_load_print_meta: n_gqa            = 8
0.00.271.325 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.327 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.327 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.329 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.329 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.329 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.330 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.332 I llm_load_print_meta: n_ff             = 16384
0.00.271.332 I llm_load_print_meta: n_expert         = 0
0.00.271.332 I llm_load_print_meta: n_expert_used    = 0
0.00.271.332 I llm_load_print_meta: causal attn      = 1
0.00.271.333 I llm_load_print_meta: pooling type     = 0
0.00.271.333 I llm_load_print_meta: rope type        = 2
0.00.271.333 I llm_load_print_meta: rope scaling     = linear
0.00.271.335 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.335 I llm_load_print_meta: freq_scale_train = 1
0.00.271.336 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.336 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.336 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.337 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.337 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.337 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.337 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.340 I llm_load_print_meta: model type       = 2B
0.00.271.341 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.342 I llm_load_print_meta: model params     = 2.51 B
0.00.271.343 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.343 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.343 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.344 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.344 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.344 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.345 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.345 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.346 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.346 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.346 I llm_load_print_meta: max token length = 93
0.00.331.909 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.914 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.915 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.916 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.916 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.917 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.284 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.290 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.291 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.291 I llama_new_context_with_model: n_batch       = 2048
0.00.337.291 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.292 I llama_new_context_with_model: flash_attn    = 0
0.00.337.294 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.295 I llama_new_context_with_model: freq_scale    = 1
0.00.337.296 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.315 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.351.417 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.429 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.766 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.772 I llama_new_context_with_model: graph nodes  = 601
0.00.352.773 I llama_new_context_with_model: graph splits = 1
0.00.352.776 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.776 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.337 I main: llama threadpool init, n_threads = 4
0.00.428.354 I 
0.00.428.428 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.431 I 
0.00.428.463 I sampler seed: 959021366
0.00.428.474 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.477 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.477 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.478 I 
 encompases an extensive collection of tools and functionalities tailored to the needs of data scientists and machine learning engineers.

**Features and functionalities:**

* **Exploratory

0.02.020.504 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6699.15 tokens per second)
0.02.020.507 I llama_perf_context_print:        load time =     427.59 ms
0.02.020.508 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.020.509 I llama_perf_context_print:        eval time =    1573.77 ms /    32 runs   (   49.18 ms per token,    20.33 tokens per second)
0.02.020.510 I llama_perf_context_print:       total time =    1592.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4428 (011baa40)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40208.44 ms
main:    total time = 40208.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 4428 (011baa40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.543 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.560 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.567 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.568 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.571 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.572 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.572 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.573 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.573 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.574 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.577 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.578 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.578 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.579 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.579 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.625 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.328 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.094 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.100 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.101 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.102 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.102 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.103 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.104 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.107 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.110 I llama_model_loader: - type  f32:   37 tensors
0.00.131.111 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.112 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.018 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.491 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.990 I llm_load_vocab: special tokens cache size = 5
0.00.263.593 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.609 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.610 I llm_load_print_meta: arch             = gemma
0.00.263.610 I llm_load_print_meta: vocab type       = SPM
0.00.263.611 I llm_load_print_meta: n_vocab          = 256000
0.00.263.611 I llm_load_print_meta: n_merges         = 0
0.00.263.612 I llm_load_print_meta: vocab_only       = 0
0.00.263.612 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.612 I llm_load_print_meta: n_embd           = 2048
0.00.263.613 I llm_load_print_meta: n_layer          = 18
0.00.263.624 I llm_load_print_meta: n_head           = 8
0.00.263.627 I llm_load_print_meta: n_head_kv        = 1
0.00.263.627 I llm_load_print_meta: n_rot            = 256
0.00.263.627 I llm_load_print_meta: n_swa            = 0
0.00.263.628 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.628 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.630 I llm_load_print_meta: n_gqa            = 8
0.00.263.631 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.633 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.633 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.635 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.635 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.636 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.636 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.638 I llm_load_print_meta: n_ff             = 16384
0.00.263.638 I llm_load_print_meta: n_expert         = 0
0.00.263.638 I llm_load_print_meta: n_expert_used    = 0
0.00.263.639 I llm_load_print_meta: causal attn      = 1
0.00.263.639 I llm_load_print_meta: pooling type     = 0
0.00.263.639 I llm_load_print_meta: rope type        = 2
0.00.263.640 I llm_load_print_meta: rope scaling     = linear
0.00.263.641 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.641 I llm_load_print_meta: freq_scale_train = 1
0.00.263.642 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.642 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.642 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.642 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.643 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.643 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.643 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.645 I llm_load_print_meta: model type       = 2B
0.00.263.646 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.647 I llm_load_print_meta: model params     = 2.51 B
0.00.263.648 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.648 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.649 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.649 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.650 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.650 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.650 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.651 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.651 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.652 I llm_load_print_meta: max token length = 93
0.00.322.081 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.274 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.279 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.279 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.280 I llama_new_context_with_model: n_batch       = 2048
0.00.327.280 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.280 I llama_new_context_with_model: flash_attn    = 0
0.00.327.282 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.283 I llama_new_context_with_model: freq_scale    = 1
0.00.327.284 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.311 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.342.549 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.563 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.655 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.920 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.927 I llama_new_context_with_model: graph nodes  = 601
0.00.343.927 I llama_new_context_with_model: graph splits = 1
0.00.343.931 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.932 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.688 I main: llama threadpool init, n_threads = 4
0.00.418.704 I 
0.00.418.781 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.784 I 
0.00.418.827 I sampler seed: 793409958
0.00.418.840 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.856 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.860 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.860 I 
 seconded
The provided context does not contain information regarding the specific actions or decisions made by the individual or group. Therefore, I am unable to extract the requested

0.01.981.872 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6381.74 tokens per second)
0.01.981.874 I llama_perf_context_print:        load time =     417.94 ms
0.01.981.875 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.876 I llama_perf_context_print:        eval time =    1543.56 ms /    32 runs   (   48.24 ms per token,    20.73 tokens per second)
0.01.981.877 I llama_perf_context_print:       total time =    1563.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.409s
user	10m23.901s
sys	0m6.940s
