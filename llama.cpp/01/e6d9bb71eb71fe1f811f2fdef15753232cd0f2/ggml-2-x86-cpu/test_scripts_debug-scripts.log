+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4256 (01e6d9bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.023.593 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.603 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.693 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.705 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.718 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.719 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.732 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.733 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.734 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.736 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.737 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.400 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.557 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.711 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.719 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.721 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.722 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.723 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.725 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.752 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.758 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.760 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.769 I llama_model_loader: - type  f32:   37 tensors
0.00.349.771 I llama_model_loader: - type q8_0:  127 tensors
0.00.629.924 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.750.859 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.751.777 I llm_load_vocab: special tokens cache size = 5
0.00.937.283 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.937.356 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.937.357 I llm_load_print_meta: arch             = gemma
0.00.937.358 I llm_load_print_meta: vocab type       = SPM
0.00.937.360 I llm_load_print_meta: n_vocab          = 256000
0.00.937.362 I llm_load_print_meta: n_merges         = 0
0.00.937.362 I llm_load_print_meta: vocab_only       = 0
0.00.937.363 I llm_load_print_meta: n_ctx_train      = 8192
0.00.937.363 I llm_load_print_meta: n_embd           = 2048
0.00.937.364 I llm_load_print_meta: n_layer          = 18
0.00.937.430 I llm_load_print_meta: n_head           = 8
0.00.937.437 I llm_load_print_meta: n_head_kv        = 1
0.00.937.438 I llm_load_print_meta: n_rot            = 256
0.00.937.438 I llm_load_print_meta: n_swa            = 0
0.00.937.439 I llm_load_print_meta: n_embd_head_k    = 256
0.00.937.439 I llm_load_print_meta: n_embd_head_v    = 256
0.00.937.444 I llm_load_print_meta: n_gqa            = 8
0.00.937.449 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.937.454 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.937.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.937.458 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.937.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.937.458 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.937.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.937.465 I llm_load_print_meta: n_ff             = 16384
0.00.937.466 I llm_load_print_meta: n_expert         = 0
0.00.937.467 I llm_load_print_meta: n_expert_used    = 0
0.00.937.467 I llm_load_print_meta: causal attn      = 1
0.00.937.467 I llm_load_print_meta: pooling type     = 0
0.00.937.468 I llm_load_print_meta: rope type        = 2
0.00.937.469 I llm_load_print_meta: rope scaling     = linear
0.00.937.471 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.937.471 I llm_load_print_meta: freq_scale_train = 1
0.00.937.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.937.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.937.473 I llm_load_print_meta: ssm_d_conv       = 0
0.00.937.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.937.473 I llm_load_print_meta: ssm_d_state      = 0
0.00.937.473 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.937.474 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.937.475 I llm_load_print_meta: model type       = 2B
0.00.937.476 I llm_load_print_meta: model ftype      = Q8_0
0.00.937.477 I llm_load_print_meta: model params     = 2.51 B
0.00.937.478 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.937.478 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.937.479 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.937.480 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.937.480 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.937.481 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.937.481 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.937.482 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.937.497 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.937.499 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.937.503 I llm_load_print_meta: max token length = 93
0.01.044.223 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.044.229 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.044.230 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.044.231 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.044.232 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.044.232 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.050.101 I llama_new_context_with_model: n_seq_max     = 1
0.01.050.108 I llama_new_context_with_model: n_ctx         = 4096
0.01.050.108 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.050.108 I llama_new_context_with_model: n_batch       = 2048
0.01.050.109 I llama_new_context_with_model: n_ubatch      = 512
0.01.050.109 I llama_new_context_with_model: flash_attn    = 0
0.01.050.111 I llama_new_context_with_model: freq_base     = 10000.0
0.01.050.112 I llama_new_context_with_model: freq_scale    = 1
0.01.050.113 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.064.644 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.064.685 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.064.801 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.067.378 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.067.382 I llama_new_context_with_model: graph nodes  = 601
0.01.067.383 I llama_new_context_with_model: graph splits = 1
0.01.067.406 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.678.544 I main: llama threadpool init, n_threads = 4
0.01.678.561 I 
0.01.678.698 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.678.702 I 
0.01.678.947 I sampler seed: 3255666067
0.01.678.962 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.678.972 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.678.975 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.678.976 I 
 increasels, the ones who are not able to move on from their past.

The Narrator introduces the concept of "Past Lives" and how they intertw

0.15.260.868 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.21 tokens per second)
0.15.260.871 I llama_perf_context_print:        load time =    1677.62 ms
0.15.260.873 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.260.874 I llama_perf_context_print:        eval time =   13493.19 ms /    32 runs   (  421.66 ms per token,     2.37 tokens per second)
0.15.260.875 I llama_perf_context_print:       total time =   13582.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4256 (01e6d9bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.366 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.371 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.377 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.378 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.390 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.393 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.395 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.397 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.490 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.576 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.584 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.585 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.587 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.588 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.589 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.591 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.596 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.597 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.598 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.599 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.361.601 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.611 I llama_model_loader: - type  f32:   37 tensors
0.00.361.614 I llama_model_loader: - type q8_0:  127 tensors
0.00.627.188 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.750.451 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.751.444 I llm_load_vocab: special tokens cache size = 5
0.00.951.909 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.951.983 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.951.985 I llm_load_print_meta: arch             = gemma
0.00.951.985 I llm_load_print_meta: vocab type       = SPM
0.00.951.986 I llm_load_print_meta: n_vocab          = 256000
0.00.951.989 I llm_load_print_meta: n_merges         = 0
0.00.951.989 I llm_load_print_meta: vocab_only       = 0
0.00.951.990 I llm_load_print_meta: n_ctx_train      = 8192
0.00.951.990 I llm_load_print_meta: n_embd           = 2048
0.00.951.991 I llm_load_print_meta: n_layer          = 18
0.00.952.058 I llm_load_print_meta: n_head           = 8
0.00.952.065 I llm_load_print_meta: n_head_kv        = 1
0.00.952.070 I llm_load_print_meta: n_rot            = 256
0.00.952.070 I llm_load_print_meta: n_swa            = 0
0.00.952.071 I llm_load_print_meta: n_embd_head_k    = 256
0.00.952.071 I llm_load_print_meta: n_embd_head_v    = 256
0.00.952.076 I llm_load_print_meta: n_gqa            = 8
0.00.952.081 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.952.086 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.952.088 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.952.089 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.952.090 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.952.090 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.952.090 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.952.095 I llm_load_print_meta: n_ff             = 16384
0.00.952.096 I llm_load_print_meta: n_expert         = 0
0.00.952.097 I llm_load_print_meta: n_expert_used    = 0
0.00.952.097 I llm_load_print_meta: causal attn      = 1
0.00.952.098 I llm_load_print_meta: pooling type     = 0
0.00.952.099 I llm_load_print_meta: rope type        = 2
0.00.952.110 I llm_load_print_meta: rope scaling     = linear
0.00.952.115 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.952.115 I llm_load_print_meta: freq_scale_train = 1
0.00.952.116 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.952.116 I llm_load_print_meta: rope_finetuned   = unknown
0.00.952.116 I llm_load_print_meta: ssm_d_conv       = 0
0.00.952.117 I llm_load_print_meta: ssm_d_inner      = 0
0.00.952.117 I llm_load_print_meta: ssm_d_state      = 0
0.00.952.117 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.952.118 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.952.118 I llm_load_print_meta: model type       = 2B
0.00.952.119 I llm_load_print_meta: model ftype      = Q8_0
0.00.952.120 I llm_load_print_meta: model params     = 2.51 B
0.00.952.121 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.952.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.952.122 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.952.122 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.952.123 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.952.123 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.952.124 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.952.124 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.952.131 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.952.132 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.952.133 I llm_load_print_meta: max token length = 93
0.01.048.955 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.055.117 I llama_new_context_with_model: n_seq_max     = 1
0.01.055.124 I llama_new_context_with_model: n_ctx         = 4096
0.01.055.125 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.055.125 I llama_new_context_with_model: n_batch       = 2048
0.01.055.126 I llama_new_context_with_model: n_ubatch      = 512
0.01.055.126 I llama_new_context_with_model: flash_attn    = 0
0.01.055.129 I llama_new_context_with_model: freq_base     = 10000.0
0.01.055.130 I llama_new_context_with_model: freq_scale    = 1
0.01.055.131 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.070.343 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.070.383 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.070.501 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.073.094 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.073.098 I llama_new_context_with_model: graph nodes  = 601
0.01.073.099 I llama_new_context_with_model: graph splits = 1
0.01.073.121 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.681.731 I main: llama threadpool init, n_threads = 4
0.01.681.747 I 
0.01.681.868 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.681.872 I 
0.01.682.110 I sampler seed: 387474816
0.01.682.125 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.682.147 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.682.148 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.682.149 I 
 increably. [end of text]


0.03.379.351 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.28 tokens per second)
0.03.379.354 I llama_perf_context_print:        load time =    1680.80 ms
0.03.379.371 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.379.372 I llama_perf_context_print:        eval time =    1684.65 ms /     4 runs   (  421.16 ms per token,     2.37 tokens per second)
0.03.379.374 I llama_perf_context_print:       total time =    1697.63 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4256 (01e6d9bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.279 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.291 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.380 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.392 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.394 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.400 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.404 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.405 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.407 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.409 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.410 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.421 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.423 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.426 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.838 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.316 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.422 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.430 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.431 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.433 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.434 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.436 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.437 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.441 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.442 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.443 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.445 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.350.447 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.455 I llama_model_loader: - type  f32:   37 tensors
0.00.350.458 I llama_model_loader: - type q8_0:  127 tensors
0.00.613.901 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.739.055 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.740.027 I llm_load_vocab: special tokens cache size = 5
0.00.941.537 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.941.609 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.941.610 I llm_load_print_meta: arch             = gemma
0.00.941.611 I llm_load_print_meta: vocab type       = SPM
0.00.941.612 I llm_load_print_meta: n_vocab          = 256000
0.00.941.615 I llm_load_print_meta: n_merges         = 0
0.00.941.615 I llm_load_print_meta: vocab_only       = 0
0.00.941.615 I llm_load_print_meta: n_ctx_train      = 8192
0.00.941.616 I llm_load_print_meta: n_embd           = 2048
0.00.941.616 I llm_load_print_meta: n_layer          = 18
0.00.941.681 I llm_load_print_meta: n_head           = 8
0.00.941.688 I llm_load_print_meta: n_head_kv        = 1
0.00.941.688 I llm_load_print_meta: n_rot            = 256
0.00.941.689 I llm_load_print_meta: n_swa            = 0
0.00.941.689 I llm_load_print_meta: n_embd_head_k    = 256
0.00.941.689 I llm_load_print_meta: n_embd_head_v    = 256
0.00.941.694 I llm_load_print_meta: n_gqa            = 8
0.00.941.699 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.941.705 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.941.707 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.941.709 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.941.710 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.941.710 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.941.710 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.941.715 I llm_load_print_meta: n_ff             = 16384
0.00.941.716 I llm_load_print_meta: n_expert         = 0
0.00.941.716 I llm_load_print_meta: n_expert_used    = 0
0.00.941.717 I llm_load_print_meta: causal attn      = 1
0.00.941.717 I llm_load_print_meta: pooling type     = 0
0.00.941.717 I llm_load_print_meta: rope type        = 2
0.00.941.717 I llm_load_print_meta: rope scaling     = linear
0.00.941.719 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.941.720 I llm_load_print_meta: freq_scale_train = 1
0.00.941.720 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.941.720 I llm_load_print_meta: rope_finetuned   = unknown
0.00.941.721 I llm_load_print_meta: ssm_d_conv       = 0
0.00.941.721 I llm_load_print_meta: ssm_d_inner      = 0
0.00.941.721 I llm_load_print_meta: ssm_d_state      = 0
0.00.941.722 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.941.722 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.941.723 I llm_load_print_meta: model type       = 2B
0.00.941.723 I llm_load_print_meta: model ftype      = Q8_0
0.00.941.724 I llm_load_print_meta: model params     = 2.51 B
0.00.941.725 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.941.725 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.941.726 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.941.726 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.941.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.941.727 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.941.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.941.741 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.941.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.941.749 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.941.749 I llm_load_print_meta: max token length = 93
0.01.019.526 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.019.536 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.019.537 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.019.538 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.019.538 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.019.539 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.025.298 I llama_new_context_with_model: n_seq_max     = 1
0.01.025.305 I llama_new_context_with_model: n_ctx         = 4096
0.01.025.305 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.025.305 I llama_new_context_with_model: n_batch       = 2048
0.01.025.306 I llama_new_context_with_model: n_ubatch      = 512
0.01.025.306 I llama_new_context_with_model: flash_attn    = 0
0.01.025.308 I llama_new_context_with_model: freq_base     = 10000.0
0.01.025.309 I llama_new_context_with_model: freq_scale    = 1
0.01.025.310 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.039.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.039.606 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.039.723 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.042.301 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.042.304 I llama_new_context_with_model: graph nodes  = 601
0.01.042.305 I llama_new_context_with_model: graph splits = 1
0.01.042.327 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.651.401 I main: llama threadpool init, n_threads = 4
0.01.651.419 I 
0.01.651.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.651.539 I 
0.01.651.776 I sampler seed: 1795664596
0.01.651.788 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.651.797 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.651.800 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.651.801 I 
 increasities?

The provided text does not contain any information regarding "reciprocations" or "interplay", so I am unable to answer this question from

0.15.304.591 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.87 tokens per second)
0.15.304.595 I llama_perf_context_print:        load time =    1650.44 ms
0.15.304.597 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.304.600 I llama_perf_context_print:        eval time =   13564.16 ms /    32 runs   (  423.88 ms per token,     2.36 tokens per second)
0.15.304.601 I llama_perf_context_print:       total time =   13653.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4256 (01e6d9bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.252 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.262 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.356 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.358 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.363 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.367 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.369 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.371 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.372 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.374 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.379 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.381 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.390 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.394 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.395 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.122 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.373 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.432 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.440 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.441 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.443 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.444 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.446 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.447 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.451 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.453 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.454 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.455 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.457 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.465 I llama_model_loader: - type  f32:   37 tensors
0.00.349.467 I llama_model_loader: - type q8_0:  127 tensors
0.00.619.542 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.743.166 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.744.129 I llm_load_vocab: special tokens cache size = 5
0.00.935.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.935.900 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.935.904 I llm_load_print_meta: arch             = gemma
0.00.935.905 I llm_load_print_meta: vocab type       = SPM
0.00.935.906 I llm_load_print_meta: n_vocab          = 256000
0.00.935.908 I llm_load_print_meta: n_merges         = 0
0.00.935.908 I llm_load_print_meta: vocab_only       = 0
0.00.935.909 I llm_load_print_meta: n_ctx_train      = 8192
0.00.935.909 I llm_load_print_meta: n_embd           = 2048
0.00.935.909 I llm_load_print_meta: n_layer          = 18
0.00.935.973 I llm_load_print_meta: n_head           = 8
0.00.935.982 I llm_load_print_meta: n_head_kv        = 1
0.00.935.983 I llm_load_print_meta: n_rot            = 256
0.00.935.983 I llm_load_print_meta: n_swa            = 0
0.00.935.984 I llm_load_print_meta: n_embd_head_k    = 256
0.00.935.984 I llm_load_print_meta: n_embd_head_v    = 256
0.00.935.988 I llm_load_print_meta: n_gqa            = 8
0.00.935.993 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.935.998 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.936.000 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.936.001 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.936.002 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.936.002 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.936.003 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.936.009 I llm_load_print_meta: n_ff             = 16384
0.00.936.009 I llm_load_print_meta: n_expert         = 0
0.00.936.018 I llm_load_print_meta: n_expert_used    = 0
0.00.936.019 I llm_load_print_meta: causal attn      = 1
0.00.936.031 I llm_load_print_meta: pooling type     = 0
0.00.936.033 I llm_load_print_meta: rope type        = 2
0.00.936.033 I llm_load_print_meta: rope scaling     = linear
0.00.936.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.936.036 I llm_load_print_meta: freq_scale_train = 1
0.00.936.037 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.936.037 I llm_load_print_meta: rope_finetuned   = unknown
0.00.936.040 I llm_load_print_meta: ssm_d_conv       = 0
0.00.936.040 I llm_load_print_meta: ssm_d_inner      = 0
0.00.936.041 I llm_load_print_meta: ssm_d_state      = 0
0.00.936.041 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.936.041 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.936.049 I llm_load_print_meta: model type       = 2B
0.00.936.051 I llm_load_print_meta: model ftype      = Q8_0
0.00.936.051 I llm_load_print_meta: model params     = 2.51 B
0.00.936.052 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.936.053 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.936.053 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.936.054 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.936.055 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.936.055 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.936.056 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.936.056 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.936.063 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.936.065 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.936.065 I llm_load_print_meta: max token length = 93
0.01.008.705 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.008.714 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.014.695 I llama_new_context_with_model: n_seq_max     = 1
0.01.014.701 I llama_new_context_with_model: n_ctx         = 4096
0.01.014.701 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.014.702 I llama_new_context_with_model: n_batch       = 2048
0.01.014.702 I llama_new_context_with_model: n_ubatch      = 512
0.01.014.703 I llama_new_context_with_model: flash_attn    = 0
0.01.014.706 I llama_new_context_with_model: freq_base     = 10000.0
0.01.014.706 I llama_new_context_with_model: freq_scale    = 1
0.01.014.707 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.029.134 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.029.175 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.029.291 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.031.875 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.031.878 I llama_new_context_with_model: graph nodes  = 601
0.01.031.879 I llama_new_context_with_model: graph splits = 1
0.01.031.903 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.640.678 I main: llama threadpool init, n_threads = 4
0.01.640.694 I 
0.01.640.810 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.640.813 I 
0.01.641.053 I sampler seed: 1993029304
0.01.641.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.641.078 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.641.079 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.641.079 I 
 increasities, the story of how they came to be and how they have impacted the world.

**Part 1: The Birth of the Crescendo**

0.15.336.498 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.84 tokens per second)
0.15.336.501 I llama_perf_context_print:        load time =    1639.73 ms
0.15.336.523 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.336.525 I llama_perf_context_print:        eval time =   13606.73 ms /    32 runs   (  425.21 ms per token,     2.35 tokens per second)
0.15.336.526 I llama_perf_context_print:       total time =   13695.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.893s
user	3m4.569s
sys	0m9.322s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4256 (01e6d9bb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186858.70 ms
main:    total time = 186858.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4256 (01e6d9bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.000.834 I main: load the model and apply lora adapter, if any
0.00.023.556 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.662 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.686 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.688 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.689 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.690 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.701 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.703 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.705 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.707 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.708 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.018 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.271 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.444 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.454 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.455 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.456 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.458 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.459 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.465 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.466 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.467 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.469 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.478 I llama_model_loader: - type  f32:   37 tensors
0.00.350.481 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.481 I llama_model_loader: - type q6_K:   19 tensors
0.00.628.133 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.757.341 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.758.330 I llm_load_vocab: special tokens cache size = 5
0.00.962.162 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.962.235 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.962.236 I llm_load_print_meta: arch             = gemma
0.00.962.237 I llm_load_print_meta: vocab type       = SPM
0.00.962.238 I llm_load_print_meta: n_vocab          = 256000
0.00.962.240 I llm_load_print_meta: n_merges         = 0
0.00.962.240 I llm_load_print_meta: vocab_only       = 0
0.00.962.241 I llm_load_print_meta: n_ctx_train      = 8192
0.00.962.241 I llm_load_print_meta: n_embd           = 2048
0.00.962.242 I llm_load_print_meta: n_layer          = 18
0.00.962.307 I llm_load_print_meta: n_head           = 8
0.00.962.314 I llm_load_print_meta: n_head_kv        = 1
0.00.962.314 I llm_load_print_meta: n_rot            = 256
0.00.962.315 I llm_load_print_meta: n_swa            = 0
0.00.962.315 I llm_load_print_meta: n_embd_head_k    = 256
0.00.962.315 I llm_load_print_meta: n_embd_head_v    = 256
0.00.962.320 I llm_load_print_meta: n_gqa            = 8
0.00.962.325 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.962.330 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.962.332 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.962.335 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.962.335 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.962.336 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.962.337 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.962.342 I llm_load_print_meta: n_ff             = 16384
0.00.962.342 I llm_load_print_meta: n_expert         = 0
0.00.962.343 I llm_load_print_meta: n_expert_used    = 0
0.00.962.343 I llm_load_print_meta: causal attn      = 1
0.00.962.343 I llm_load_print_meta: pooling type     = 0
0.00.962.343 I llm_load_print_meta: rope type        = 2
0.00.962.344 I llm_load_print_meta: rope scaling     = linear
0.00.962.346 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.962.346 I llm_load_print_meta: freq_scale_train = 1
0.00.962.347 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.962.347 I llm_load_print_meta: rope_finetuned   = unknown
0.00.962.348 I llm_load_print_meta: ssm_d_conv       = 0
0.00.962.348 I llm_load_print_meta: ssm_d_inner      = 0
0.00.962.349 I llm_load_print_meta: ssm_d_state      = 0
0.00.962.349 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.962.350 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.962.351 I llm_load_print_meta: model type       = 2B
0.00.962.352 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.962.352 I llm_load_print_meta: model params     = 2.51 B
0.00.962.354 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.962.354 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.962.355 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.962.365 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.962.366 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.962.367 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.962.368 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.962.368 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.962.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.962.376 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.962.377 I llm_load_print_meta: max token length = 93
0.01.026.008 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.026.015 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.026.016 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.026.017 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.026.018 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.026.018 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.031.847 I llama_new_context_with_model: n_seq_max     = 1
0.01.031.855 I llama_new_context_with_model: n_ctx         = 4096
0.01.031.855 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.031.856 I llama_new_context_with_model: n_batch       = 2048
0.01.031.856 I llama_new_context_with_model: n_ubatch      = 512
0.01.031.857 I llama_new_context_with_model: flash_attn    = 0
0.01.031.859 I llama_new_context_with_model: freq_base     = 10000.0
0.01.031.860 I llama_new_context_with_model: freq_scale    = 1
0.01.031.861 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.046.993 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.047.035 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.047.152 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.049.720 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.049.724 I llama_new_context_with_model: graph nodes  = 601
0.01.049.725 I llama_new_context_with_model: graph splits = 1
0.01.049.747 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.637.266 I main: llama threadpool init, n_threads = 4
0.01.637.283 I 
0.01.637.418 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.637.422 I 
0.01.637.677 I sampler seed: 1932530998
0.01.637.692 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.637.713 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.637.716 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.637.717 I 
 strick with a mournful melody.

**Verse 1:**
A winter's day, frosted ground,
The wind whispers secrets untold.
A lonely

0.12.841.791 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.37 tokens per second)
0.12.841.794 I llama_perf_context_print:        load time =    1636.34 ms
0.12.841.796 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.841.798 I llama_perf_context_print:        eval time =   11115.35 ms /    32 runs   (  347.35 ms per token,     2.88 tokens per second)
0.12.841.799 I llama_perf_context_print:       total time =   11204.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4256 (01e6d9bb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186835.75 ms
main:    total time = 186835.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4256 (01e6d9bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.023.381 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.493 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.509 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.514 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.521 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.523 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.528 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.529 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.541 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.542 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.543 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.544 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.546 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.777 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.685 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.758 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.759 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.761 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.762 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.763 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.779 I llama_model_loader: - type  f32:   37 tensors
0.00.354.781 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.782 I llama_model_loader: - type q6_K:   19 tensors
0.00.619.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.743.065 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.744.010 I llm_load_vocab: special tokens cache size = 5
0.00.941.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.941.139 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.941.140 I llm_load_print_meta: arch             = gemma
0.00.941.141 I llm_load_print_meta: vocab type       = SPM
0.00.941.142 I llm_load_print_meta: n_vocab          = 256000
0.00.941.144 I llm_load_print_meta: n_merges         = 0
0.00.941.145 I llm_load_print_meta: vocab_only       = 0
0.00.941.145 I llm_load_print_meta: n_ctx_train      = 8192
0.00.941.146 I llm_load_print_meta: n_embd           = 2048
0.00.941.146 I llm_load_print_meta: n_layer          = 18
0.00.941.210 I llm_load_print_meta: n_head           = 8
0.00.941.217 I llm_load_print_meta: n_head_kv        = 1
0.00.941.219 I llm_load_print_meta: n_rot            = 256
0.00.941.219 I llm_load_print_meta: n_swa            = 0
0.00.941.220 I llm_load_print_meta: n_embd_head_k    = 256
0.00.941.220 I llm_load_print_meta: n_embd_head_v    = 256
0.00.941.225 I llm_load_print_meta: n_gqa            = 8
0.00.941.230 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.941.235 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.941.236 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.941.238 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.941.239 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.941.240 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.941.252 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.941.258 I llm_load_print_meta: n_ff             = 16384
0.00.941.258 I llm_load_print_meta: n_expert         = 0
0.00.941.259 I llm_load_print_meta: n_expert_used    = 0
0.00.941.259 I llm_load_print_meta: causal attn      = 1
0.00.941.260 I llm_load_print_meta: pooling type     = 0
0.00.941.260 I llm_load_print_meta: rope type        = 2
0.00.941.260 I llm_load_print_meta: rope scaling     = linear
0.00.941.262 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.941.262 I llm_load_print_meta: freq_scale_train = 1
0.00.941.263 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.941.267 I llm_load_print_meta: rope_finetuned   = unknown
0.00.941.268 I llm_load_print_meta: ssm_d_conv       = 0
0.00.941.268 I llm_load_print_meta: ssm_d_inner      = 0
0.00.941.269 I llm_load_print_meta: ssm_d_state      = 0
0.00.941.269 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.941.270 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.941.270 I llm_load_print_meta: model type       = 2B
0.00.941.271 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.941.288 I llm_load_print_meta: model params     = 2.51 B
0.00.941.296 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.941.297 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.941.298 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.941.298 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.941.299 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.941.299 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.941.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.941.301 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.941.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.941.308 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.941.309 I llm_load_print_meta: max token length = 93
0.01.000.128 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.005.888 I llama_new_context_with_model: n_seq_max     = 1
0.01.005.896 I llama_new_context_with_model: n_ctx         = 4096
0.01.005.896 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.005.896 I llama_new_context_with_model: n_batch       = 2048
0.01.005.897 I llama_new_context_with_model: n_ubatch      = 512
0.01.005.897 I llama_new_context_with_model: flash_attn    = 0
0.01.005.900 I llama_new_context_with_model: freq_base     = 10000.0
0.01.005.900 I llama_new_context_with_model: freq_scale    = 1
0.01.005.901 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.021.524 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.021.569 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.021.695 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.024.237 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.024.241 I llama_new_context_with_model: graph nodes  = 601
0.01.024.241 I llama_new_context_with_model: graph splits = 1
0.01.024.264 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.609.679 I main: llama threadpool init, n_threads = 4
0.01.609.696 I 
0.01.609.824 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.609.825 I 
0.01.610.076 I sampler seed: 188118073
0.01.610.091 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.610.100 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.610.103 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.610.103 I 
 seconded, but still stands, as a testament to the power and beauty of a meticulously designed architectural marvel. [end of text]


0.09.647.141 I llama_perf_sampler_print:    sampling time =      35.50 ms /    24 runs   (    1.48 ms per token,   676.11 tokens per second)
0.09.647.145 I llama_perf_context_print:        load time =    1608.68 ms
0.09.647.147 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.647.158 I llama_perf_context_print:        eval time =    7972.70 ms /    23 runs   (  346.64 ms per token,     2.88 tokens per second)
0.09.647.160 I llama_perf_context_print:       total time =    8037.47 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.047s
user	46m35.680s
sys	0m6.264s
