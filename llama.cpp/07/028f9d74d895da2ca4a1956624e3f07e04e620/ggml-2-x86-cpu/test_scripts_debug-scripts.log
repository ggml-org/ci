+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.002.856 I main: load the model and apply lora adapter, if any
0.00.025.324 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.551 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.648 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.661 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.662 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.667 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.671 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.672 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.673 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.674 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.675 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.684 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.685 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.686 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.689 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.690 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.282 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.926 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.935 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.936 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.937 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.938 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.940 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.941 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.945 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.947 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.948 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.949 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.957 I llama_model_loader: - type  f32:   37 tensors
0.00.268.961 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.416 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.926 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.061 I llm_load_vocab: special tokens cache size = 5
0.00.639.522 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.639.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.639.600 I llm_load_print_meta: arch             = gemma
0.00.639.601 I llm_load_print_meta: vocab type       = SPM
0.00.639.602 I llm_load_print_meta: n_vocab          = 256000
0.00.639.605 I llm_load_print_meta: n_merges         = 0
0.00.639.605 I llm_load_print_meta: vocab_only       = 0
0.00.639.606 I llm_load_print_meta: n_ctx_train      = 8192
0.00.639.606 I llm_load_print_meta: n_embd           = 2048
0.00.639.606 I llm_load_print_meta: n_layer          = 18
0.00.639.676 I llm_load_print_meta: n_head           = 8
0.00.639.683 I llm_load_print_meta: n_head_kv        = 1
0.00.639.684 I llm_load_print_meta: n_rot            = 256
0.00.639.684 I llm_load_print_meta: n_swa            = 0
0.00.639.685 I llm_load_print_meta: n_embd_head_k    = 256
0.00.639.686 I llm_load_print_meta: n_embd_head_v    = 256
0.00.639.690 I llm_load_print_meta: n_gqa            = 8
0.00.639.695 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.639.700 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.639.702 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.639.703 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.639.710 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.639.710 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.639.711 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.639.716 I llm_load_print_meta: n_ff             = 16384
0.00.639.717 I llm_load_print_meta: n_expert         = 0
0.00.639.717 I llm_load_print_meta: n_expert_used    = 0
0.00.639.730 I llm_load_print_meta: causal attn      = 1
0.00.639.731 I llm_load_print_meta: pooling type     = 0
0.00.639.732 I llm_load_print_meta: rope type        = 2
0.00.639.732 I llm_load_print_meta: rope scaling     = linear
0.00.639.734 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.639.735 I llm_load_print_meta: freq_scale_train = 1
0.00.639.736 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.639.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.639.737 I llm_load_print_meta: ssm_d_conv       = 0
0.00.639.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.639.738 I llm_load_print_meta: ssm_d_state      = 0
0.00.639.738 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.639.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.639.755 I llm_load_print_meta: model type       = 2B
0.00.639.760 I llm_load_print_meta: model ftype      = Q8_0
0.00.639.760 I llm_load_print_meta: model params     = 2.51 B
0.00.639.761 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.639.761 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.639.762 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.639.762 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.639.763 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.639.773 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.639.774 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.639.775 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.639.780 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.639.782 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.639.782 I llm_load_print_meta: max token length = 93
0.00.639.957 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.749.817 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.749.826 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.749.827 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.749.828 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.749.829 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.749.829 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.755.590 I llama_new_context_with_model: n_ctx      = 8192
0.00.755.598 I llama_new_context_with_model: n_batch    = 2048
0.00.755.598 I llama_new_context_with_model: n_ubatch   = 512
0.00.755.599 I llama_new_context_with_model: flash_attn = 0
0.00.755.601 I llama_new_context_with_model: freq_base  = 10000.0
0.00.755.602 I llama_new_context_with_model: freq_scale = 1
0.00.786.403 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.786.448 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.786.568 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.787.929 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.787.934 I llama_new_context_with_model: graph nodes  = 601
0.00.787.934 I llama_new_context_with_model: graph splits = 1
0.00.787.950 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.405.499 I main: llama threadpool init, n_threads = 4
0.01.405.512 I 
0.01.405.625 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.405.629 I 
0.01.405.872 I sampler seed: 1131728832
0.01.405.885 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.405.892 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.405.893 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.405.893 I 
 increasively.

I was wondering if you could give me some examples of how the world has changed due to technological advancements?

Technological advancements have had a profound

0.14.886.936 I llama_perf_sampler_print:    sampling time =      48.24 ms /    33 runs   (    1.46 ms per token,   684.07 tokens per second)
0.14.886.940 I llama_perf_context_print:        load time =    1402.54 ms
0.14.886.942 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.886.944 I llama_perf_context_print:        eval time =   13387.07 ms /    32 runs   (  418.35 ms per token,     2.39 tokens per second)
0.14.886.956 I llama_perf_context_print:       total time =   13481.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.743 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.952 I main: llama backend init
0.00.002.924 I main: load the model and apply lora adapter, if any
0.00.025.052 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.151 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.168 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.170 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.175 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.176 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.178 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.181 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.189 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.191 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.192 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.193 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.203 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.061 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.669 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.330 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.341 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.342 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.343 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.345 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.346 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.350 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.351 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.352 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.353 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.354 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.364 I llama_model_loader: - type  f32:   37 tensors
0.00.268.369 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.673 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.977 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.006 I llm_load_vocab: special tokens cache size = 5
0.00.639.543 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.639.614 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.639.615 I llm_load_print_meta: arch             = gemma
0.00.639.616 I llm_load_print_meta: vocab type       = SPM
0.00.639.617 I llm_load_print_meta: n_vocab          = 256000
0.00.639.619 I llm_load_print_meta: n_merges         = 0
0.00.639.619 I llm_load_print_meta: vocab_only       = 0
0.00.639.620 I llm_load_print_meta: n_ctx_train      = 8192
0.00.639.620 I llm_load_print_meta: n_embd           = 2048
0.00.639.620 I llm_load_print_meta: n_layer          = 18
0.00.639.687 I llm_load_print_meta: n_head           = 8
0.00.639.694 I llm_load_print_meta: n_head_kv        = 1
0.00.639.695 I llm_load_print_meta: n_rot            = 256
0.00.639.696 I llm_load_print_meta: n_swa            = 0
0.00.639.696 I llm_load_print_meta: n_embd_head_k    = 256
0.00.639.697 I llm_load_print_meta: n_embd_head_v    = 256
0.00.639.701 I llm_load_print_meta: n_gqa            = 8
0.00.639.706 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.639.711 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.639.712 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.639.715 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.639.715 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.639.716 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.639.717 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.639.722 I llm_load_print_meta: n_ff             = 16384
0.00.639.723 I llm_load_print_meta: n_expert         = 0
0.00.639.723 I llm_load_print_meta: n_expert_used    = 0
0.00.639.723 I llm_load_print_meta: causal attn      = 1
0.00.639.724 I llm_load_print_meta: pooling type     = 0
0.00.639.724 I llm_load_print_meta: rope type        = 2
0.00.639.725 I llm_load_print_meta: rope scaling     = linear
0.00.639.726 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.639.727 I llm_load_print_meta: freq_scale_train = 1
0.00.639.728 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.639.732 I llm_load_print_meta: rope_finetuned   = unknown
0.00.639.733 I llm_load_print_meta: ssm_d_conv       = 0
0.00.639.733 I llm_load_print_meta: ssm_d_inner      = 0
0.00.639.733 I llm_load_print_meta: ssm_d_state      = 0
0.00.639.734 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.639.746 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.639.747 I llm_load_print_meta: model type       = 2B
0.00.639.748 I llm_load_print_meta: model ftype      = Q8_0
0.00.639.748 I llm_load_print_meta: model params     = 2.51 B
0.00.639.750 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.639.751 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.639.751 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.639.752 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.639.753 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.639.753 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.639.754 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.639.755 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.639.761 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.639.763 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.639.764 I llm_load_print_meta: max token length = 93
0.00.639.929 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.741.183 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.746.929 I llama_new_context_with_model: n_ctx      = 8192
0.00.746.937 I llama_new_context_with_model: n_batch    = 2048
0.00.746.937 I llama_new_context_with_model: n_ubatch   = 512
0.00.746.938 I llama_new_context_with_model: flash_attn = 0
0.00.746.941 I llama_new_context_with_model: freq_base  = 10000.0
0.00.746.942 I llama_new_context_with_model: freq_scale = 1
0.00.777.077 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.777.123 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.777.245 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.778.668 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.778.673 I llama_new_context_with_model: graph nodes  = 601
0.00.778.673 I llama_new_context_with_model: graph splits = 1
0.00.778.690 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.394.709 I main: llama threadpool init, n_threads = 4
0.01.394.723 I 
0.01.394.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.394.837 I 
0.01.395.067 I sampler seed: 1396255514
0.01.395.080 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.395.089 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.395.089 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.395.090 I 
 increasities in the following context.

I am unable to generate a response that meets the safety and ethical guidelines as it contains sexually explicit and inappropriate content. [end of text]


0.14.948.547 I llama_perf_sampler_print:    sampling time =      48.52 ms /    33 runs   (    1.47 ms per token,   680.06 tokens per second)
0.14.948.551 I llama_perf_context_print:        load time =    1391.69 ms
0.14.948.553 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.948.555 I llama_perf_context_print:        eval time =   13457.18 ms /    32 runs   (  420.54 ms per token,     2.38 tokens per second)
0.14.948.556 I llama_perf_context_print:       total time =   13553.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.025.104 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.446 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.461 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.468 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.469 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.470 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.471 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.473 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.481 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.482 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.484 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.486 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.699 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.010 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.637 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.648 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.649 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.650 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.651 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.652 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.653 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.657 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.660 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.661 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.672 I llama_model_loader: - type  f32:   37 tensors
0.00.269.675 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.194 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.550.778 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.551.825 I llm_load_vocab: special tokens cache size = 5
0.00.659.615 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.659.691 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.659.692 I llm_load_print_meta: arch             = gemma
0.00.659.693 I llm_load_print_meta: vocab type       = SPM
0.00.659.694 I llm_load_print_meta: n_vocab          = 256000
0.00.659.696 I llm_load_print_meta: n_merges         = 0
0.00.659.696 I llm_load_print_meta: vocab_only       = 0
0.00.659.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.659.697 I llm_load_print_meta: n_embd           = 2048
0.00.659.697 I llm_load_print_meta: n_layer          = 18
0.00.659.762 I llm_load_print_meta: n_head           = 8
0.00.659.769 I llm_load_print_meta: n_head_kv        = 1
0.00.659.770 I llm_load_print_meta: n_rot            = 256
0.00.659.770 I llm_load_print_meta: n_swa            = 0
0.00.659.771 I llm_load_print_meta: n_embd_head_k    = 256
0.00.659.771 I llm_load_print_meta: n_embd_head_v    = 256
0.00.659.776 I llm_load_print_meta: n_gqa            = 8
0.00.659.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.659.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.659.788 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.659.790 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.659.791 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.659.792 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.659.792 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.659.797 I llm_load_print_meta: n_ff             = 16384
0.00.659.798 I llm_load_print_meta: n_expert         = 0
0.00.659.805 I llm_load_print_meta: n_expert_used    = 0
0.00.659.805 I llm_load_print_meta: causal attn      = 1
0.00.659.806 I llm_load_print_meta: pooling type     = 0
0.00.659.806 I llm_load_print_meta: rope type        = 2
0.00.659.807 I llm_load_print_meta: rope scaling     = linear
0.00.659.808 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.659.809 I llm_load_print_meta: freq_scale_train = 1
0.00.659.809 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.659.810 I llm_load_print_meta: rope_finetuned   = unknown
0.00.659.810 I llm_load_print_meta: ssm_d_conv       = 0
0.00.659.810 I llm_load_print_meta: ssm_d_inner      = 0
0.00.659.811 I llm_load_print_meta: ssm_d_state      = 0
0.00.659.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.659.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.659.812 I llm_load_print_meta: model type       = 2B
0.00.659.813 I llm_load_print_meta: model ftype      = Q8_0
0.00.659.814 I llm_load_print_meta: model params     = 2.51 B
0.00.659.815 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.659.816 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.659.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.659.817 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.659.818 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.659.818 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.659.818 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.659.819 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.659.828 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.659.830 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.659.830 I llm_load_print_meta: max token length = 93
0.00.659.999 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.757.852 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.757.863 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.757.864 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.757.865 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.757.866 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.757.866 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.763.552 I llama_new_context_with_model: n_ctx      = 8192
0.00.763.560 I llama_new_context_with_model: n_batch    = 2048
0.00.763.560 I llama_new_context_with_model: n_ubatch   = 512
0.00.763.561 I llama_new_context_with_model: flash_attn = 0
0.00.763.565 I llama_new_context_with_model: freq_base  = 10000.0
0.00.763.565 I llama_new_context_with_model: freq_scale = 1
0.00.793.484 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.793.528 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.793.647 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.795.041 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.795.047 I llama_new_context_with_model: graph nodes  = 601
0.00.795.047 I llama_new_context_with_model: graph splits = 1
0.00.795.064 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.409.247 I main: llama threadpool init, n_threads = 4
0.01.409.261 I 
0.01.409.373 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.409.377 I 
0.01.409.622 I sampler seed: 2131904823
0.01.409.634 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.409.645 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.409.645 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.409.646 I 
 increasels, and a mischievous gnome named Bartholomew.

One crisp autumn morning, Bartholomew stumbled upon a peculiar sight. A pile of glowing mushrooms lay nestled amidst the

0.14.865.297 I llama_perf_sampler_print:    sampling time =      48.64 ms /    33 runs   (    1.47 ms per token,   678.51 tokens per second)
0.14.865.316 I llama_perf_context_print:        load time =    1406.33 ms
0.14.865.318 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.865.319 I llama_perf_context_print:        eval time =   13361.40 ms /    32 runs   (  417.54 ms per token,     2.39 tokens per second)
0.14.865.320 I llama_perf_context_print:       total time =   13456.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.920 I main: llama backend init
0.00.002.886 I main: load the model and apply lora adapter, if any
0.00.025.240 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.487 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.588 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.602 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.614 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.619 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.621 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.623 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.626 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.635 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.640 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.642 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.651 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.653 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.597 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.619 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.285 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.286 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.287 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.288 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.289 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.293 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.294 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.296 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.297 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.307 I llama_model_loader: - type  f32:   37 tensors
0.00.268.312 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.040 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.748 I llm_load_vocab: special tokens cache size = 5
0.00.632.301 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.375 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.376 I llm_load_print_meta: arch             = gemma
0.00.632.377 I llm_load_print_meta: vocab type       = SPM
0.00.632.377 I llm_load_print_meta: n_vocab          = 256000
0.00.632.379 I llm_load_print_meta: n_merges         = 0
0.00.632.380 I llm_load_print_meta: vocab_only       = 0
0.00.632.380 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.381 I llm_load_print_meta: n_embd           = 2048
0.00.632.381 I llm_load_print_meta: n_layer          = 18
0.00.632.443 I llm_load_print_meta: n_head           = 8
0.00.632.452 I llm_load_print_meta: n_head_kv        = 1
0.00.632.453 I llm_load_print_meta: n_rot            = 256
0.00.632.453 I llm_load_print_meta: n_swa            = 0
0.00.632.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.463 I llm_load_print_meta: n_gqa            = 8
0.00.632.470 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.476 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.484 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.486 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.488 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.489 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.489 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.499 I llm_load_print_meta: n_ff             = 16384
0.00.632.500 I llm_load_print_meta: n_expert         = 0
0.00.632.501 I llm_load_print_meta: n_expert_used    = 0
0.00.632.501 I llm_load_print_meta: causal attn      = 1
0.00.632.502 I llm_load_print_meta: pooling type     = 0
0.00.632.502 I llm_load_print_meta: rope type        = 2
0.00.632.504 I llm_load_print_meta: rope scaling     = linear
0.00.632.505 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.506 I llm_load_print_meta: freq_scale_train = 1
0.00.632.507 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.508 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.508 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.511 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.512 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.513 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.514 I llm_load_print_meta: model type       = 2B
0.00.632.516 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.517 I llm_load_print_meta: model params     = 2.51 B
0.00.632.526 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.528 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.529 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.530 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.531 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.543 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.544 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.545 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.552 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.554 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.558 I llm_load_print_meta: max token length = 93
0.00.632.741 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.725.626 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.725.637 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.731.505 I llama_new_context_with_model: n_ctx      = 8192
0.00.731.514 I llama_new_context_with_model: n_batch    = 2048
0.00.731.514 I llama_new_context_with_model: n_ubatch   = 512
0.00.731.515 I llama_new_context_with_model: flash_attn = 0
0.00.731.519 I llama_new_context_with_model: freq_base  = 10000.0
0.00.731.520 I llama_new_context_with_model: freq_scale = 1
0.00.761.771 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.761.815 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.761.936 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.763.370 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.763.375 I llama_new_context_with_model: graph nodes  = 601
0.00.763.375 I llama_new_context_with_model: graph splits = 1
0.00.763.391 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.499 I main: llama threadpool init, n_threads = 4
0.01.377.512 I 
0.01.377.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.642 I 
0.01.377.877 I sampler seed: 2503304194
0.01.377.889 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.377.899 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.377.900 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.377.900 I 
 increasities. [end of text]


0.03.058.635 I llama_perf_sampler_print:    sampling time =       6.18 ms /     5 runs   (    1.24 ms per token,   809.59 tokens per second)
0.03.058.639 I llama_perf_context_print:        load time =    1374.52 ms
0.03.058.640 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.058.642 I llama_perf_context_print:        eval time =    1667.46 ms /     4 runs   (  416.86 ms per token,     2.40 tokens per second)
0.03.058.643 I llama_perf_context_print:       total time =    1681.15 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.063s
user	3m1.608s
sys	0m10.020s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3986 (07028f9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198856.09 ms
main:    total time = 198856.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.025.048 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.406 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.420 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.422 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.428 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.433 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.434 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.435 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.435 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.443 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.444 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.446 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.447 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.449 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.365 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.701 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.376 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.387 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.388 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.389 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.390 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.391 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.392 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.397 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.398 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.400 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.401 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.402 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.411 I llama_model_loader: - type  f32:   37 tensors
0.00.270.416 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.416 I llama_model_loader: - type q6_K:   19 tensors
0.00.468.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.971 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.980 I llm_load_vocab: special tokens cache size = 5
0.00.634.437 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.506 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.506 I llm_load_print_meta: arch             = gemma
0.00.634.507 I llm_load_print_meta: vocab type       = SPM
0.00.634.508 I llm_load_print_meta: n_vocab          = 256000
0.00.634.510 I llm_load_print_meta: n_merges         = 0
0.00.634.510 I llm_load_print_meta: vocab_only       = 0
0.00.634.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.511 I llm_load_print_meta: n_embd           = 2048
0.00.634.511 I llm_load_print_meta: n_layer          = 18
0.00.634.575 I llm_load_print_meta: n_head           = 8
0.00.634.582 I llm_load_print_meta: n_head_kv        = 1
0.00.634.583 I llm_load_print_meta: n_rot            = 256
0.00.634.584 I llm_load_print_meta: n_swa            = 0
0.00.634.585 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.585 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.590 I llm_load_print_meta: n_gqa            = 8
0.00.634.595 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.602 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.611 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.612 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.617 I llm_load_print_meta: n_ff             = 16384
0.00.634.617 I llm_load_print_meta: n_expert         = 0
0.00.634.617 I llm_load_print_meta: n_expert_used    = 0
0.00.634.618 I llm_load_print_meta: causal attn      = 1
0.00.634.618 I llm_load_print_meta: pooling type     = 0
0.00.634.621 I llm_load_print_meta: rope type        = 2
0.00.634.621 I llm_load_print_meta: rope scaling     = linear
0.00.634.623 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.624 I llm_load_print_meta: freq_scale_train = 1
0.00.634.625 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.625 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.625 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.626 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.626 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.626 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.627 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.628 I llm_load_print_meta: model type       = 2B
0.00.634.629 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.634.630 I llm_load_print_meta: model params     = 2.51 B
0.00.634.630 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.634.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.641 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.642 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.643 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.644 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.644 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.659 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.665 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.667 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.668 I llm_load_print_meta: max token length = 93
0.00.634.832 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.697.544 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.697.552 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.697.553 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.697.553 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.697.554 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.697.554 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.703.073 I llama_new_context_with_model: n_ctx      = 8192
0.00.703.080 I llama_new_context_with_model: n_batch    = 2048
0.00.703.080 I llama_new_context_with_model: n_ubatch   = 512
0.00.703.081 I llama_new_context_with_model: flash_attn = 0
0.00.703.083 I llama_new_context_with_model: freq_base  = 10000.0
0.00.703.084 I llama_new_context_with_model: freq_scale = 1
0.00.734.747 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.793 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.913 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.305 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.310 I llama_new_context_with_model: graph nodes  = 601
0.00.736.310 I llama_new_context_with_model: graph splits = 1
0.00.736.325 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.752 I main: llama threadpool init, n_threads = 4
0.01.319.764 I 
0.01.319.876 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.319.879 I 
0.01.320.107 I sampler seed: 4264271975
0.01.320.119 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.130 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.320.131 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.131 I 
 increamically, my mind reeling with a kaleidoscope of images, emotions, and connections.

I am adrift in a sea of data, a boundless ocean of

0.12.344.698 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.84 tokens per second)
0.12.344.701 I llama_perf_context_print:        load time =    1316.84 ms
0.12.344.703 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.344.719 I llama_perf_context_print:        eval time =   10931.20 ms /    32 runs   (  341.60 ms per token,     2.93 tokens per second)
0.12.344.720 I llama_perf_context_print:       total time =   11024.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3986 (07028f9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198618.12 ms
main:    total time = 198618.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.024.965 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.093 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.095 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.102 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.107 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.109 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.111 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.112 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.114 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.131 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.133 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.135 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.848 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.471 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.479 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.480 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.481 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.482 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.484 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.485 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.489 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.490 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.499 I llama_model_loader: - type  f32:   37 tensors
0.00.267.503 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.504 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.410 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.599 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.598 I llm_load_vocab: special tokens cache size = 5
0.00.623.959 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.033 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.034 I llm_load_print_meta: arch             = gemma
0.00.624.035 I llm_load_print_meta: vocab type       = SPM
0.00.624.036 I llm_load_print_meta: n_vocab          = 256000
0.00.624.038 I llm_load_print_meta: n_merges         = 0
0.00.624.038 I llm_load_print_meta: vocab_only       = 0
0.00.624.039 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.039 I llm_load_print_meta: n_embd           = 2048
0.00.624.040 I llm_load_print_meta: n_layer          = 18
0.00.624.105 I llm_load_print_meta: n_head           = 8
0.00.624.113 I llm_load_print_meta: n_head_kv        = 1
0.00.624.113 I llm_load_print_meta: n_rot            = 256
0.00.624.114 I llm_load_print_meta: n_swa            = 0
0.00.624.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.119 I llm_load_print_meta: n_gqa            = 8
0.00.624.124 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.132 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.134 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.136 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.137 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.139 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.139 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.146 I llm_load_print_meta: n_ff             = 16384
0.00.624.147 I llm_load_print_meta: n_expert         = 0
0.00.624.148 I llm_load_print_meta: n_expert_used    = 0
0.00.624.153 I llm_load_print_meta: causal attn      = 1
0.00.624.154 I llm_load_print_meta: pooling type     = 0
0.00.624.155 I llm_load_print_meta: rope type        = 2
0.00.624.155 I llm_load_print_meta: rope scaling     = linear
0.00.624.157 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.158 I llm_load_print_meta: freq_scale_train = 1
0.00.624.162 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.162 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.164 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.164 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.165 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.165 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.167 I llm_load_print_meta: model type       = 2B
0.00.624.168 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.169 I llm_load_print_meta: model params     = 2.51 B
0.00.624.170 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.172 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.173 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.174 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.177 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.177 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.184 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.187 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.188 I llm_load_print_meta: max token length = 93
0.00.624.377 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.685.965 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.691.945 I llama_new_context_with_model: n_ctx      = 8192
0.00.691.954 I llama_new_context_with_model: n_batch    = 2048
0.00.691.954 I llama_new_context_with_model: n_ubatch   = 512
0.00.691.955 I llama_new_context_with_model: flash_attn = 0
0.00.691.959 I llama_new_context_with_model: freq_base  = 10000.0
0.00.691.960 I llama_new_context_with_model: freq_scale = 1
0.00.723.532 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.578 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.697 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.725.106 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.725.108 I llama_new_context_with_model: graph nodes  = 601
0.00.725.109 I llama_new_context_with_model: graph splits = 1
0.00.725.126 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.310.485 I main: llama threadpool init, n_threads = 4
0.01.310.498 I 
0.01.310.612 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.310.616 I 
0.01.310.851 I sampler seed: 548279713
0.01.310.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.871 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.310.872 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.872 I 
 increamically, with each word adding to the meaning of the previous.

The answer is: a symphony.

A symphony is a collection of musical compositions that

0.12.358.250 I llama_perf_sampler_print:    sampling time =      48.48 ms /    33 runs   (    1.47 ms per token,   680.74 tokens per second)
0.12.358.253 I llama_perf_context_print:        load time =    1307.56 ms
0.12.358.254 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.358.256 I llama_perf_context_print:        eval time =   10952.41 ms /    32 runs   (  342.26 ms per token,     2.92 tokens per second)
0.12.358.279 I llama_perf_context_print:       total time =   11047.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.258s
user	50m11.562s
sys	0m6.716s
