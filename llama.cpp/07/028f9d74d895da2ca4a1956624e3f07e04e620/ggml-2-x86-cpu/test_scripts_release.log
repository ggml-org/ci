+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.823 I main: load the model and apply lora adapter, if any
0.00.022.134 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.208 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.209 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.209 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.210 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.210 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.211 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.216 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.217 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.217 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.229 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.229 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.861 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.011 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.851 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.858 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.858 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.859 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.860 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.860 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.863 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.864 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.865 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.867 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.871 I llama_model_loader: - type  f32:   37 tensors
0.00.131.874 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.680 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.147 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.886 I llm_load_vocab: special tokens cache size = 5
0.00.298.967 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.298.987 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.298.988 I llm_load_print_meta: arch             = gemma
0.00.298.989 I llm_load_print_meta: vocab type       = SPM
0.00.298.989 I llm_load_print_meta: n_vocab          = 256000
0.00.298.990 I llm_load_print_meta: n_merges         = 0
0.00.298.990 I llm_load_print_meta: vocab_only       = 0
0.00.298.990 I llm_load_print_meta: n_ctx_train      = 8192
0.00.298.991 I llm_load_print_meta: n_embd           = 2048
0.00.298.991 I llm_load_print_meta: n_layer          = 18
0.00.299.003 I llm_load_print_meta: n_head           = 8
0.00.299.004 I llm_load_print_meta: n_head_kv        = 1
0.00.299.004 I llm_load_print_meta: n_rot            = 256
0.00.299.004 I llm_load_print_meta: n_swa            = 0
0.00.299.004 I llm_load_print_meta: n_embd_head_k    = 256
0.00.299.005 I llm_load_print_meta: n_embd_head_v    = 256
0.00.299.005 I llm_load_print_meta: n_gqa            = 8
0.00.299.006 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.299.007 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.299.008 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.299.010 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.299.011 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.299.011 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.299.011 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.299.012 I llm_load_print_meta: n_ff             = 16384
0.00.299.012 I llm_load_print_meta: n_expert         = 0
0.00.299.013 I llm_load_print_meta: n_expert_used    = 0
0.00.299.013 I llm_load_print_meta: causal attn      = 1
0.00.299.013 I llm_load_print_meta: pooling type     = 0
0.00.299.013 I llm_load_print_meta: rope type        = 2
0.00.299.014 I llm_load_print_meta: rope scaling     = linear
0.00.299.015 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.299.016 I llm_load_print_meta: freq_scale_train = 1
0.00.299.016 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.299.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.299.017 I llm_load_print_meta: ssm_d_conv       = 0
0.00.299.017 I llm_load_print_meta: ssm_d_inner      = 0
0.00.299.017 I llm_load_print_meta: ssm_d_state      = 0
0.00.299.018 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.299.018 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.299.018 I llm_load_print_meta: model type       = 2B
0.00.299.019 I llm_load_print_meta: model ftype      = Q8_0
0.00.299.020 I llm_load_print_meta: model params     = 2.51 B
0.00.299.020 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.299.021 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.299.021 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.299.021 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.299.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.299.022 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.299.023 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.299.023 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.299.023 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.299.024 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.299.024 I llm_load_print_meta: max token length = 93
0.00.299.044 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.406.135 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.406.144 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.406.145 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.406.146 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.406.146 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.406.147 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.411.361 I llama_new_context_with_model: n_ctx      = 8192
0.00.411.368 I llama_new_context_with_model: n_batch    = 2048
0.00.411.369 I llama_new_context_with_model: n_ubatch   = 512
0.00.411.370 I llama_new_context_with_model: flash_attn = 0
0.00.411.374 I llama_new_context_with_model: freq_base  = 10000.0
0.00.411.374 I llama_new_context_with_model: freq_scale = 1
0.00.442.003 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.442.017 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.442.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.442.998 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.443.006 I llama_new_context_with_model: graph nodes  = 601
0.00.443.006 I llama_new_context_with_model: graph splits = 1
0.00.443.008 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.538.908 I main: llama threadpool init, n_threads = 4
0.00.538.923 I 
0.00.539.003 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.539.007 I 
0.00.539.049 I sampler seed: 3910776367
0.00.539.059 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.539.067 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.539.068 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.539.068 I 
 increasities?

I cannot find the requested text in the context. Please provide more context or search for the text yourself. [end of text]


0.02.436.437 I llama_perf_sampler_print:    sampling time =       3.75 ms /    27 runs   (    0.14 ms per token,  7196.16 tokens per second)
0.02.436.440 I llama_perf_context_print:        load time =     537.06 ms
0.02.436.441 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.436.443 I llama_perf_context_print:        eval time =    1881.73 ms /    26 runs   (   72.37 ms per token,    13.82 tokens per second)
0.02.436.443 I llama_perf_context_print:       total time =    1897.54 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.576 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.874 I main: load the model and apply lora adapter, if any
0.00.022.281 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.292 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.301 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.306 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.306 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.313 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.313 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.314 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.314 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.530 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.538 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.541 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.542 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.545 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.546 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.547 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.548 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.549 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.553 I llama_model_loader: - type  f32:   37 tensors
0.00.131.556 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.475 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.918 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.557 I llm_load_vocab: special tokens cache size = 5
0.00.272.457 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.474 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.474 I llm_load_print_meta: arch             = gemma
0.00.272.475 I llm_load_print_meta: vocab type       = SPM
0.00.272.476 I llm_load_print_meta: n_vocab          = 256000
0.00.272.476 I llm_load_print_meta: n_merges         = 0
0.00.272.476 I llm_load_print_meta: vocab_only       = 0
0.00.272.477 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.477 I llm_load_print_meta: n_embd           = 2048
0.00.272.478 I llm_load_print_meta: n_layer          = 18
0.00.272.490 I llm_load_print_meta: n_head           = 8
0.00.272.491 I llm_load_print_meta: n_head_kv        = 1
0.00.272.492 I llm_load_print_meta: n_rot            = 256
0.00.272.492 I llm_load_print_meta: n_swa            = 0
0.00.272.492 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.493 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.493 I llm_load_print_meta: n_gqa            = 8
0.00.272.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.495 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.497 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.498 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.498 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.499 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.499 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.500 I llm_load_print_meta: n_ff             = 16384
0.00.272.500 I llm_load_print_meta: n_expert         = 0
0.00.272.500 I llm_load_print_meta: n_expert_used    = 0
0.00.272.501 I llm_load_print_meta: causal attn      = 1
0.00.272.501 I llm_load_print_meta: pooling type     = 0
0.00.272.501 I llm_load_print_meta: rope type        = 2
0.00.272.501 I llm_load_print_meta: rope scaling     = linear
0.00.272.503 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.503 I llm_load_print_meta: freq_scale_train = 1
0.00.272.503 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.505 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.506 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.506 I llm_load_print_meta: model type       = 2B
0.00.272.506 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.508 I llm_load_print_meta: model params     = 2.51 B
0.00.272.508 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.509 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.510 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.510 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.511 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.511 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.512 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.512 I llm_load_print_meta: max token length = 93
0.00.272.540 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.636 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.378.025 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.032 I llama_new_context_with_model: n_batch    = 2048
0.00.378.032 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.033 I llama_new_context_with_model: flash_attn = 0
0.00.378.036 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.037 I llama_new_context_with_model: freq_scale = 1
0.00.407.762 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.407.779 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.407.872 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.782 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.408.788 I llama_new_context_with_model: graph nodes  = 601
0.00.408.788 I llama_new_context_with_model: graph splits = 1
0.00.408.790 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.282 I main: llama threadpool init, n_threads = 4
0.00.499.295 I 
0.00.499.371 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.374 I 
0.00.499.419 I sampler seed: 2956809888
0.00.499.429 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.434 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.499.435 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.435 I 
 increasities with an insatiable lust for thrills.

This passage describes which literary device?

a) Simile
b) Metaphor
c) Personification

0.02.763.417 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6973.80 tokens per second)
0.02.763.420 I llama_perf_context_print:        load time =     497.39 ms
0.02.763.422 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.763.424 I llama_perf_context_print:        eval time =    2244.30 ms /    32 runs   (   70.13 ms per token,    14.26 tokens per second)
0.02.763.425 I llama_perf_context_print:       total time =    2264.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.021.998 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.045 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.062 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.066 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.069 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.070 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.071 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.077 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.078 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.079 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.080 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.081 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.771 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.073 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.006 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.013 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.015 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.016 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.017 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.018 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.019 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.023 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.024 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.025 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.026 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.027 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.031 I llama_model_loader: - type  f32:   37 tensors
0.00.132.036 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.273 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.381 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.039 I llm_load_vocab: special tokens cache size = 5
0.00.280.081 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.102 I llm_load_print_meta: arch             = gemma
0.00.280.104 I llm_load_print_meta: vocab type       = SPM
0.00.280.104 I llm_load_print_meta: n_vocab          = 256000
0.00.280.105 I llm_load_print_meta: n_merges         = 0
0.00.280.105 I llm_load_print_meta: vocab_only       = 0
0.00.280.106 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.106 I llm_load_print_meta: n_embd           = 2048
0.00.280.107 I llm_load_print_meta: n_layer          = 18
0.00.280.121 I llm_load_print_meta: n_head           = 8
0.00.280.123 I llm_load_print_meta: n_head_kv        = 1
0.00.280.123 I llm_load_print_meta: n_rot            = 256
0.00.280.123 I llm_load_print_meta: n_swa            = 0
0.00.280.124 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.124 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.125 I llm_load_print_meta: n_gqa            = 8
0.00.280.127 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.129 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.130 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.132 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.133 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.134 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.134 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.136 I llm_load_print_meta: n_ff             = 16384
0.00.280.136 I llm_load_print_meta: n_expert         = 0
0.00.280.137 I llm_load_print_meta: n_expert_used    = 0
0.00.280.137 I llm_load_print_meta: causal attn      = 1
0.00.280.138 I llm_load_print_meta: pooling type     = 0
0.00.280.138 I llm_load_print_meta: rope type        = 2
0.00.280.138 I llm_load_print_meta: rope scaling     = linear
0.00.280.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.141 I llm_load_print_meta: freq_scale_train = 1
0.00.280.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.143 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.143 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.144 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.144 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.145 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.145 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.146 I llm_load_print_meta: model type       = 2B
0.00.280.147 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.148 I llm_load_print_meta: model params     = 2.51 B
0.00.280.150 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.150 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.151 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.152 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.152 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.153 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.154 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.155 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.156 I llm_load_print_meta: max token length = 93
0.00.280.182 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.376.628 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.376.635 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.376.636 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.376.637 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.376.638 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.376.639 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.381.810 I llama_new_context_with_model: n_ctx      = 8192
0.00.381.815 I llama_new_context_with_model: n_batch    = 2048
0.00.381.816 I llama_new_context_with_model: n_ubatch   = 512
0.00.381.817 I llama_new_context_with_model: flash_attn = 0
0.00.381.820 I llama_new_context_with_model: freq_base  = 10000.0
0.00.381.821 I llama_new_context_with_model: freq_scale = 1
0.00.412.691 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.412.708 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.412.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.413.705 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.413.714 I llama_new_context_with_model: graph nodes  = 601
0.00.413.715 I llama_new_context_with_model: graph splits = 1
0.00.413.717 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.509.711 I main: llama threadpool init, n_threads = 4
0.00.509.726 I 
0.00.509.834 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.509.836 I 
0.00.509.884 I sampler seed: 859130804
0.00.509.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.509.905 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.509.906 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.509.906 I 
 increasities?

I cannot find the requested information in the provided context, so I am unable to answer this question. [end of text]


0.02.261.570 I llama_perf_sampler_print:    sampling time =       3.81 ms /    26 runs   (    0.15 ms per token,  6822.36 tokens per second)
0.02.261.573 I llama_perf_context_print:        load time =     507.82 ms
0.02.261.574 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.261.576 I llama_perf_context_print:        eval time =    1735.82 ms /    25 runs   (   69.43 ms per token,    14.40 tokens per second)
0.02.261.577 I llama_perf_context_print:       total time =    1751.87 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.545 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.815 I main: load the model and apply lora adapter, if any
0.00.021.931 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.980 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.988 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.993 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.998 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.999 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.000 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.001 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.002 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.006 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.007 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.009 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.815 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.928 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.797 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.804 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.805 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.805 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.806 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.807 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.807 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.810 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.811 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.812 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.812 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.813 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.817 I llama_model_loader: - type  f32:   37 tensors
0.00.131.820 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.194 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.936 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.652 I llm_load_vocab: special tokens cache size = 5
0.00.278.721 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.741 I llm_load_print_meta: arch             = gemma
0.00.278.741 I llm_load_print_meta: vocab type       = SPM
0.00.278.742 I llm_load_print_meta: n_vocab          = 256000
0.00.278.742 I llm_load_print_meta: n_merges         = 0
0.00.278.743 I llm_load_print_meta: vocab_only       = 0
0.00.278.743 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.743 I llm_load_print_meta: n_embd           = 2048
0.00.278.744 I llm_load_print_meta: n_layer          = 18
0.00.278.756 I llm_load_print_meta: n_head           = 8
0.00.278.757 I llm_load_print_meta: n_head_kv        = 1
0.00.278.757 I llm_load_print_meta: n_rot            = 256
0.00.278.758 I llm_load_print_meta: n_swa            = 0
0.00.278.758 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.758 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.759 I llm_load_print_meta: n_gqa            = 8
0.00.278.760 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.761 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.761 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.763 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.764 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.764 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.764 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.765 I llm_load_print_meta: n_ff             = 16384
0.00.278.765 I llm_load_print_meta: n_expert         = 0
0.00.278.766 I llm_load_print_meta: n_expert_used    = 0
0.00.278.766 I llm_load_print_meta: causal attn      = 1
0.00.278.766 I llm_load_print_meta: pooling type     = 0
0.00.278.766 I llm_load_print_meta: rope type        = 2
0.00.278.767 I llm_load_print_meta: rope scaling     = linear
0.00.278.768 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.769 I llm_load_print_meta: freq_scale_train = 1
0.00.278.769 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.770 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.770 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.771 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.771 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.771 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.772 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.772 I llm_load_print_meta: model type       = 2B
0.00.278.773 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.774 I llm_load_print_meta: model params     = 2.51 B
0.00.278.774 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.775 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.775 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.775 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.776 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.776 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.776 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.777 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.777 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.778 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.778 I llm_load_print_meta: max token length = 93
0.00.278.810 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.369.902 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.369.910 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.375.103 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.110 I llama_new_context_with_model: n_batch    = 2048
0.00.375.111 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.111 I llama_new_context_with_model: flash_attn = 0
0.00.375.114 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.115 I llama_new_context_with_model: freq_scale = 1
0.00.404.929 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.943 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.405.034 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.909 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.405.917 I llama_new_context_with_model: graph nodes  = 601
0.00.405.917 I llama_new_context_with_model: graph splits = 1
0.00.405.919 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.153 I main: llama threadpool init, n_threads = 4
0.00.500.168 I 
0.00.500.246 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.500.249 I 
0.00.500.296 I sampler seed: 3307741157
0.00.500.307 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.309 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.310 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.310 I 
 increasities. [end of text]


0.00.787.345 I llama_perf_sampler_print:    sampling time =       0.68 ms /     5 runs   (    0.14 ms per token,  7363.77 tokens per second)
0.00.787.347 I llama_perf_context_print:        load time =     498.31 ms
0.00.787.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.787.349 I llama_perf_context_print:        eval time =     283.53 ms /     4 runs   (   70.88 ms per token,    14.11 tokens per second)
0.00.787.350 I llama_perf_context_print:       total time =     287.20 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.811s
user	0m27.914s
sys	0m9.839s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3986 (07028f9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32415.42 ms
main:    total time = 32415.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.906 I main: load the model and apply lora adapter, if any
0.00.022.419 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.470 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.477 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.482 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.483 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.487 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.488 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.489 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.490 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.490 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.491 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.494 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.495 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.495 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.496 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.497 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.813 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.071 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.907 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.913 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.914 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.916 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.917 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.918 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.919 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.922 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.923 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.924 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.925 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.926 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.930 I llama_model_loader: - type  f32:   37 tensors
0.00.130.933 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.936 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.841 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.815 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.428 I llm_load_vocab: special tokens cache size = 5
0.00.271.625 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.644 I llm_load_print_meta: arch             = gemma
0.00.271.645 I llm_load_print_meta: vocab type       = SPM
0.00.271.645 I llm_load_print_meta: n_vocab          = 256000
0.00.271.646 I llm_load_print_meta: n_merges         = 0
0.00.271.646 I llm_load_print_meta: vocab_only       = 0
0.00.271.646 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.647 I llm_load_print_meta: n_embd           = 2048
0.00.271.647 I llm_load_print_meta: n_layer          = 18
0.00.271.659 I llm_load_print_meta: n_head           = 8
0.00.271.660 I llm_load_print_meta: n_head_kv        = 1
0.00.271.661 I llm_load_print_meta: n_rot            = 256
0.00.271.661 I llm_load_print_meta: n_swa            = 0
0.00.271.661 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.661 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.662 I llm_load_print_meta: n_gqa            = 8
0.00.271.663 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.664 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.665 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.666 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.667 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.667 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.667 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.668 I llm_load_print_meta: n_ff             = 16384
0.00.271.668 I llm_load_print_meta: n_expert         = 0
0.00.271.669 I llm_load_print_meta: n_expert_used    = 0
0.00.271.669 I llm_load_print_meta: causal attn      = 1
0.00.271.669 I llm_load_print_meta: pooling type     = 0
0.00.271.669 I llm_load_print_meta: rope type        = 2
0.00.271.670 I llm_load_print_meta: rope scaling     = linear
0.00.271.671 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.672 I llm_load_print_meta: freq_scale_train = 1
0.00.271.673 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.673 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.673 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.674 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.674 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.674 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.675 I llm_load_print_meta: model type       = 2B
0.00.271.675 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.676 I llm_load_print_meta: model params     = 2.51 B
0.00.271.677 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.677 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.677 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.678 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.678 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.678 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.679 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.679 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.680 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.680 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.680 I llm_load_print_meta: max token length = 93
0.00.271.701 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.334.720 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.334.725 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.334.726 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.334.726 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.334.727 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.334.727 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.341.013 I llama_new_context_with_model: n_ctx      = 8192
0.00.341.020 I llama_new_context_with_model: n_batch    = 2048
0.00.341.020 I llama_new_context_with_model: n_ubatch   = 512
0.00.341.021 I llama_new_context_with_model: flash_attn = 0
0.00.341.023 I llama_new_context_with_model: freq_base  = 10000.0
0.00.341.023 I llama_new_context_with_model: freq_scale = 1
0.00.370.141 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.370.156 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.258 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.145 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.371.152 I llama_new_context_with_model: graph nodes  = 601
0.00.371.153 I llama_new_context_with_model: graph splits = 1
0.00.371.155 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.931 I main: llama threadpool init, n_threads = 4
0.00.453.945 I 
0.00.454.023 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.454.026 I 
0.00.454.066 I sampler seed: 3990906889
0.00.454.077 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.080 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.081 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.081 I 
 increasities are a key part of the human experience, offering profound insights into ourselves and the world.

**1. Exploring the depths of our being:**


0.02.138.865 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6357.16 tokens per second)
0.02.138.868 I llama_perf_context_print:        load time =     452.00 ms
0.02.138.869 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.138.871 I llama_perf_context_print:        eval time =    1664.09 ms /    32 runs   (   52.00 ms per token,    19.23 tokens per second)
0.02.138.872 I llama_perf_context_print:       total time =    1684.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3986 (07028f9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32062.39 ms
main:    total time = 32062.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.540 I build: 3986 (07028f9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.022.154 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.176 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.180 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.184 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.184 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.185 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.186 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.190 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.191 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.191 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.708 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.275 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.095 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.098 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.100 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.109 I llama_model_loader: - type  f32:   37 tensors
0.00.131.111 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.112 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.558 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.160 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.690 I llm_load_vocab: special tokens cache size = 5
0.00.267.344 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.359 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.360 I llm_load_print_meta: arch             = gemma
0.00.267.360 I llm_load_print_meta: vocab type       = SPM
0.00.267.361 I llm_load_print_meta: n_vocab          = 256000
0.00.267.361 I llm_load_print_meta: n_merges         = 0
0.00.267.361 I llm_load_print_meta: vocab_only       = 0
0.00.267.362 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.362 I llm_load_print_meta: n_embd           = 2048
0.00.267.362 I llm_load_print_meta: n_layer          = 18
0.00.267.373 I llm_load_print_meta: n_head           = 8
0.00.267.374 I llm_load_print_meta: n_head_kv        = 1
0.00.267.374 I llm_load_print_meta: n_rot            = 256
0.00.267.375 I llm_load_print_meta: n_swa            = 0
0.00.267.375 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.375 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.376 I llm_load_print_meta: n_gqa            = 8
0.00.267.377 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.378 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.379 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.380 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.381 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.381 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.381 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.382 I llm_load_print_meta: n_ff             = 16384
0.00.267.383 I llm_load_print_meta: n_expert         = 0
0.00.267.383 I llm_load_print_meta: n_expert_used    = 0
0.00.267.383 I llm_load_print_meta: causal attn      = 1
0.00.267.384 I llm_load_print_meta: pooling type     = 0
0.00.267.384 I llm_load_print_meta: rope type        = 2
0.00.267.384 I llm_load_print_meta: rope scaling     = linear
0.00.267.386 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.386 I llm_load_print_meta: freq_scale_train = 1
0.00.267.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.387 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.387 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.388 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.388 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.388 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.389 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.389 I llm_load_print_meta: model type       = 2B
0.00.267.390 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.391 I llm_load_print_meta: model params     = 2.51 B
0.00.267.391 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.392 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.392 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.392 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.393 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.393 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.393 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.394 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.394 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.395 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.395 I llm_load_print_meta: max token length = 93
0.00.267.413 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.549 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.332.662 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.668 I llama_new_context_with_model: n_batch    = 2048
0.00.332.668 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.669 I llama_new_context_with_model: flash_attn = 0
0.00.332.671 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.672 I llama_new_context_with_model: freq_scale = 1
0.00.362.120 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.135 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.228 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.128 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.136 I llama_new_context_with_model: graph nodes  = 601
0.00.363.136 I llama_new_context_with_model: graph splits = 1
0.00.363.138 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.092 I main: llama threadpool init, n_threads = 4
0.00.446.105 I 
0.00.446.187 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.190 I 
0.00.446.231 I sampler seed: 2698288558
0.00.446.242 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.251 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.251 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.252 I 
 seconary.

**Assistant**

Hello, I am an AI assistant. I can assist you with various tasks such as information retrieval, language translation, and

0.02.150.438 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6623.85 tokens per second)
0.02.150.441 I llama_perf_context_print:        load time =     444.22 ms
0.02.150.442 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.150.443 I llama_perf_context_print:        eval time =    1683.62 ms /    32 runs   (   52.61 ms per token,    19.01 tokens per second)
0.02.150.444 I llama_perf_context_print:       total time =    1704.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m12.001s
user	8m15.297s
sys	0m7.142s
