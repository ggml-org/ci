+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 3937 (5055f4fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.001.813 I main: load the model and apply lora adapter, if any
0.00.021.953 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.002 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.012 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.018 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.022 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.022 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.023 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.024 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.024 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.025 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.029 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.030 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.030 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.030 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.419 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.595 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.604 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.611 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.611 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.612 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.612 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.613 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.614 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.616 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.616 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.617 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.617 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.618 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.621 I llama_model_loader: - type  f32:   37 tensors
0.00.132.625 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.654 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.246.177 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.250.854 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.260.530 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.170 I llm_load_vocab: special tokens cache size = 5
0.00.282.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.265 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.265 I llm_load_print_meta: arch             = gemma
0.00.282.266 I llm_load_print_meta: vocab type       = SPM
0.00.282.266 I llm_load_print_meta: n_vocab          = 256000
0.00.282.266 I llm_load_print_meta: n_merges         = 0
0.00.282.267 I llm_load_print_meta: vocab_only       = 0
0.00.282.267 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.267 I llm_load_print_meta: n_embd           = 2048
0.00.282.268 I llm_load_print_meta: n_layer          = 18
0.00.282.280 I llm_load_print_meta: n_head           = 8
0.00.282.281 I llm_load_print_meta: n_head_kv        = 1
0.00.282.281 I llm_load_print_meta: n_rot            = 256
0.00.282.282 I llm_load_print_meta: n_swa            = 0
0.00.282.282 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.282 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.283 I llm_load_print_meta: n_gqa            = 8
0.00.282.284 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.285 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.286 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.287 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.288 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.288 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.288 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.289 I llm_load_print_meta: n_ff             = 16384
0.00.282.290 I llm_load_print_meta: n_expert         = 0
0.00.282.290 I llm_load_print_meta: n_expert_used    = 0
0.00.282.290 I llm_load_print_meta: causal attn      = 1
0.00.282.290 I llm_load_print_meta: pooling type     = 0
0.00.282.291 I llm_load_print_meta: rope type        = 2
0.00.282.291 I llm_load_print_meta: rope scaling     = linear
0.00.282.293 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.294 I llm_load_print_meta: freq_scale_train = 1
0.00.282.294 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.294 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.295 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.295 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.295 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.296 I llm_load_print_meta: model type       = 2B
0.00.282.297 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.298 I llm_load_print_meta: model params     = 2.51 B
0.00.282.299 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.299 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.300 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.300 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.301 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.301 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.302 I llm_load_print_meta: max token length = 93
0.00.282.321 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.380.316 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.380.326 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.380.327 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.380.328 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.380.328 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.380.329 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.385.500 I llama_new_context_with_model: n_ctx      = 8192
0.00.385.506 I llama_new_context_with_model: n_batch    = 2048
0.00.385.507 I llama_new_context_with_model: n_ubatch   = 512
0.00.385.507 I llama_new_context_with_model: flash_attn = 0
0.00.385.510 I llama_new_context_with_model: freq_base  = 10000.0
0.00.385.511 I llama_new_context_with_model: freq_scale = 1
0.00.415.757 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.415.772 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.415.866 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.416.775 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.416.782 I llama_new_context_with_model: graph nodes  = 601
0.00.416.783 I llama_new_context_with_model: graph splits = 1
0.00.416.785 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.509.001 I main: llama threadpool init, n_threads = 4
0.00.509.016 I 
0.00.509.092 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.509.096 I 
0.00.509.138 I sampler seed: 1113867094
0.00.509.147 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.509.150 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.509.150 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.509.150 I 
 increadibly.

I cannot perform a task because I do not have the necessary skills or knowledge. [end of text]


0.02.006.524 I llama_perf_sampler_print:    sampling time =       3.14 ms /    22 runs   (    0.14 ms per token,  7015.31 tokens per second)
0.02.006.527 I llama_perf_context_print:        load time =     507.17 ms
0.02.006.528 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.006.529 I llama_perf_context_print:        eval time =    1485.22 ms /    21 runs   (   70.72 ms per token,    14.14 tokens per second)
0.02.006.530 I llama_perf_context_print:       total time =    1497.53 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.536 I build: 3937 (5055f4fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.001.813 I main: load the model and apply lora adapter, if any
0.00.021.900 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.929 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.932 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.932 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.933 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.933 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.934 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.939 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.940 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.940 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.941 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.589 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.028 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.912 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.913 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.913 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.914 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.915 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.918 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.918 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.920 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.921 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.922 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.927 I llama_model_loader: - type  f32:   37 tensors
0.00.131.930 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.295 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.080 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.241.417 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.245.642 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.254.174 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.764 I llm_load_vocab: special tokens cache size = 5
0.00.275.728 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.744 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.744 I llm_load_print_meta: arch             = gemma
0.00.275.745 I llm_load_print_meta: vocab type       = SPM
0.00.275.746 I llm_load_print_meta: n_vocab          = 256000
0.00.275.747 I llm_load_print_meta: n_merges         = 0
0.00.275.747 I llm_load_print_meta: vocab_only       = 0
0.00.275.747 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.748 I llm_load_print_meta: n_embd           = 2048
0.00.275.748 I llm_load_print_meta: n_layer          = 18
0.00.275.760 I llm_load_print_meta: n_head           = 8
0.00.275.761 I llm_load_print_meta: n_head_kv        = 1
0.00.275.761 I llm_load_print_meta: n_rot            = 256
0.00.275.761 I llm_load_print_meta: n_swa            = 0
0.00.275.762 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.763 I llm_load_print_meta: n_gqa            = 8
0.00.275.764 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.765 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.766 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.767 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.768 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.768 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.768 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.769 I llm_load_print_meta: n_ff             = 16384
0.00.275.769 I llm_load_print_meta: n_expert         = 0
0.00.275.770 I llm_load_print_meta: n_expert_used    = 0
0.00.275.770 I llm_load_print_meta: causal attn      = 1
0.00.275.770 I llm_load_print_meta: pooling type     = 0
0.00.275.771 I llm_load_print_meta: rope type        = 2
0.00.275.771 I llm_load_print_meta: rope scaling     = linear
0.00.275.772 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.773 I llm_load_print_meta: freq_scale_train = 1
0.00.275.773 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.774 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.774 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.774 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.775 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.775 I llm_load_print_meta: model type       = 2B
0.00.275.776 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.776 I llm_load_print_meta: model params     = 2.51 B
0.00.275.777 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.778 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.778 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.779 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.779 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.779 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.780 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.780 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.781 I llm_load_print_meta: max token length = 93
0.00.275.802 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.369.938 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.374.961 I llama_new_context_with_model: n_ctx      = 8192
0.00.374.967 I llama_new_context_with_model: n_batch    = 2048
0.00.374.967 I llama_new_context_with_model: n_ubatch   = 512
0.00.374.968 I llama_new_context_with_model: flash_attn = 0
0.00.374.970 I llama_new_context_with_model: freq_base  = 10000.0
0.00.374.971 I llama_new_context_with_model: freq_scale = 1
0.00.404.261 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.275 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.367 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.227 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.405.236 I llama_new_context_with_model: graph nodes  = 601
0.00.405.236 I llama_new_context_with_model: graph splits = 1
0.00.405.238 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.772 I main: llama threadpool init, n_threads = 4
0.00.492.786 I 
0.00.492.861 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.864 I 
0.00.492.902 I sampler seed: 3935597542
0.00.492.912 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.919 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.492.923 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.923 I 
 increably.

**Assistant**

I'm unable to generate responses that are sexually suggestive in nature. [end of text]


0.02.066.996 I llama_perf_sampler_print:    sampling time =       3.51 ms /    24 runs   (    0.15 ms per token,  6835.66 tokens per second)
0.02.066.999 I llama_perf_context_print:        load time =     490.94 ms
0.02.067.000 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.067.002 I llama_perf_context_print:        eval time =    1560.05 ms /    23 runs   (   67.83 ms per token,    14.74 tokens per second)
0.02.067.003 I llama_perf_context_print:       total time =    1574.23 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 3937 (5055f4fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.022.029 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.079 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.089 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.095 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.096 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.100 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.100 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.101 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.101 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.102 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.102 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.107 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.108 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.063 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.779 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.717 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.723 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.724 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.725 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.726 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.727 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.730 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.731 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.732 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.733 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.736 I llama_model_loader: - type  f32:   37 tensors
0.00.132.739 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.613 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.579 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.243.311 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.248.670 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.259.766 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.465 I llm_load_vocab: special tokens cache size = 5
0.00.281.847 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.869 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.869 I llm_load_print_meta: arch             = gemma
0.00.281.870 I llm_load_print_meta: vocab type       = SPM
0.00.281.870 I llm_load_print_meta: n_vocab          = 256000
0.00.281.871 I llm_load_print_meta: n_merges         = 0
0.00.281.871 I llm_load_print_meta: vocab_only       = 0
0.00.281.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.872 I llm_load_print_meta: n_embd           = 2048
0.00.281.872 I llm_load_print_meta: n_layer          = 18
0.00.281.884 I llm_load_print_meta: n_head           = 8
0.00.281.885 I llm_load_print_meta: n_head_kv        = 1
0.00.281.886 I llm_load_print_meta: n_rot            = 256
0.00.281.886 I llm_load_print_meta: n_swa            = 0
0.00.281.886 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.886 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.887 I llm_load_print_meta: n_gqa            = 8
0.00.281.888 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.889 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.890 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.892 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.892 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.892 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.892 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.893 I llm_load_print_meta: n_ff             = 16384
0.00.281.894 I llm_load_print_meta: n_expert         = 0
0.00.281.894 I llm_load_print_meta: n_expert_used    = 0
0.00.281.894 I llm_load_print_meta: causal attn      = 1
0.00.281.895 I llm_load_print_meta: pooling type     = 0
0.00.281.895 I llm_load_print_meta: rope type        = 2
0.00.281.895 I llm_load_print_meta: rope scaling     = linear
0.00.281.897 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.898 I llm_load_print_meta: freq_scale_train = 1
0.00.281.898 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.899 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.899 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.899 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.899 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.900 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.900 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.901 I llm_load_print_meta: model type       = 2B
0.00.281.901 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.902 I llm_load_print_meta: model params     = 2.51 B
0.00.281.903 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.903 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.904 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.904 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.905 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.905 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.905 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.906 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.906 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.907 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.907 I llm_load_print_meta: max token length = 93
0.00.281.934 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.357.112 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.357.119 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.357.120 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.357.120 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.357.121 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.357.122 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.362.244 I llama_new_context_with_model: n_ctx      = 8192
0.00.362.252 I llama_new_context_with_model: n_batch    = 2048
0.00.362.252 I llama_new_context_with_model: n_ubatch   = 512
0.00.362.252 I llama_new_context_with_model: flash_attn = 0
0.00.362.255 I llama_new_context_with_model: freq_base  = 10000.0
0.00.362.256 I llama_new_context_with_model: freq_scale = 1
0.00.392.231 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.392.246 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.392.336 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.231 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.393.238 I llama_new_context_with_model: graph nodes  = 601
0.00.393.239 I llama_new_context_with_model: graph splits = 1
0.00.393.241 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.202 I main: llama threadpool init, n_threads = 4
0.00.485.217 I 
0.00.485.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.485.298 I 
0.00.485.336 I sampler seed: 2978543531
0.00.485.347 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.352 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.485.353 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.353 I 
 increasities, but they were mostly confined within the realm of the home. 

The word "microcosm" suggests a miniature version of something, and this

0.02.809.980 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6468.05 tokens per second)
0.02.809.983 I llama_perf_context_print:        load time =     483.35 ms
0.02.809.985 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.809.987 I llama_perf_context_print:        eval time =    2306.01 ms /    32 runs   (   72.06 ms per token,    13.88 tokens per second)
0.02.809.989 I llama_perf_context_print:       total time =    2324.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.542 I build: 3937 (5055f4fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.001.919 I main: load the model and apply lora adapter, if any
0.00.022.320 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.372 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.388 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.389 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.399 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.400 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.401 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.402 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.402 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.418 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.422 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.423 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.425 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.204 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.020 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.934 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.942 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.943 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.944 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.945 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.948 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.948 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.950 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.950 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.951 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.955 I llama_model_loader: - type  f32:   37 tensors
0.00.137.958 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.639 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.869 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.258.416 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.263.252 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.272.826 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.408 I llm_load_vocab: special tokens cache size = 5
0.00.294.643 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.664 I llm_load_print_meta: arch             = gemma
0.00.294.664 I llm_load_print_meta: vocab type       = SPM
0.00.294.665 I llm_load_print_meta: n_vocab          = 256000
0.00.294.666 I llm_load_print_meta: n_merges         = 0
0.00.294.666 I llm_load_print_meta: vocab_only       = 0
0.00.294.666 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.667 I llm_load_print_meta: n_embd           = 2048
0.00.294.667 I llm_load_print_meta: n_layer          = 18
0.00.294.679 I llm_load_print_meta: n_head           = 8
0.00.294.680 I llm_load_print_meta: n_head_kv        = 1
0.00.294.681 I llm_load_print_meta: n_rot            = 256
0.00.294.681 I llm_load_print_meta: n_swa            = 0
0.00.294.681 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.682 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.683 I llm_load_print_meta: n_gqa            = 8
0.00.294.684 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.685 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.685 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.686 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.687 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.687 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.687 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.688 I llm_load_print_meta: n_ff             = 16384
0.00.294.689 I llm_load_print_meta: n_expert         = 0
0.00.294.689 I llm_load_print_meta: n_expert_used    = 0
0.00.294.689 I llm_load_print_meta: causal attn      = 1
0.00.294.690 I llm_load_print_meta: pooling type     = 0
0.00.294.690 I llm_load_print_meta: rope type        = 2
0.00.294.691 I llm_load_print_meta: rope scaling     = linear
0.00.294.692 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.692 I llm_load_print_meta: freq_scale_train = 1
0.00.294.693 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.693 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.693 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.693 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.694 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.694 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.694 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.695 I llm_load_print_meta: model type       = 2B
0.00.294.695 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.696 I llm_load_print_meta: model params     = 2.51 B
0.00.294.697 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.698 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.698 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.699 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.700 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.700 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.701 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.701 I llm_load_print_meta: max token length = 93
0.00.294.733 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.332 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.372.341 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.377.324 I llama_new_context_with_model: n_ctx      = 8192
0.00.377.331 I llama_new_context_with_model: n_batch    = 2048
0.00.377.332 I llama_new_context_with_model: n_ubatch   = 512
0.00.377.332 I llama_new_context_with_model: flash_attn = 0
0.00.377.335 I llama_new_context_with_model: freq_base  = 10000.0
0.00.377.336 I llama_new_context_with_model: freq_scale = 1
0.00.407.033 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.407.050 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.407.160 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.087 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.408.095 I llama_new_context_with_model: graph nodes  = 601
0.00.408.096 I llama_new_context_with_model: graph splits = 1
0.00.408.097 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.505.523 I main: llama threadpool init, n_threads = 4
0.00.505.539 I 
0.00.505.616 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.505.620 I 
0.00.505.659 I sampler seed: 3893931686
0.00.505.670 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.505.672 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.505.673 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.505.673 I 
 increasities of a common noun.

What is the plural form of the noun 'child'?

Children. [end of text]


0.02.282.066 I llama_perf_sampler_print:    sampling time =       3.70 ms /    24 runs   (    0.15 ms per token,  6479.48 tokens per second)
0.02.282.069 I llama_perf_context_print:        load time =     503.58 ms
0.02.282.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.282.073 I llama_perf_context_print:        eval time =    1762.61 ms /    23 runs   (   76.64 ms per token,    13.05 tokens per second)
0.02.282.073 I llama_perf_context_print:       total time =    1776.55 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.953s
user	0m31.717s
sys	0m9.554s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3937 (5055f4fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32124.68 ms
main:    total time = 32124.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 3937 (5055f4fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.001.900 I main: load the model and apply lora adapter, if any
0.00.022.334 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.387 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.400 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.406 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.410 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.416 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.417 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.417 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.418 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.418 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.419 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.424 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.425 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.425 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.426 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.893 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.934 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.865 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.873 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.873 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.874 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.875 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.876 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.876 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.878 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.879 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.879 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.880 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.881 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.884 I llama_model_loader: - type  f32:   37 tensors
0.00.132.887 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.888 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.418 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.511 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.246.107 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.250.861 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.260.642 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.321 I llm_load_vocab: special tokens cache size = 5
0.00.282.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.568 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.568 I llm_load_print_meta: arch             = gemma
0.00.282.569 I llm_load_print_meta: vocab type       = SPM
0.00.282.570 I llm_load_print_meta: n_vocab          = 256000
0.00.282.570 I llm_load_print_meta: n_merges         = 0
0.00.282.570 I llm_load_print_meta: vocab_only       = 0
0.00.282.571 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.571 I llm_load_print_meta: n_embd           = 2048
0.00.282.571 I llm_load_print_meta: n_layer          = 18
0.00.282.582 I llm_load_print_meta: n_head           = 8
0.00.282.583 I llm_load_print_meta: n_head_kv        = 1
0.00.282.583 I llm_load_print_meta: n_rot            = 256
0.00.282.584 I llm_load_print_meta: n_swa            = 0
0.00.282.584 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.584 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.585 I llm_load_print_meta: n_gqa            = 8
0.00.282.586 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.587 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.588 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.589 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.589 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.590 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.590 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.591 I llm_load_print_meta: n_ff             = 16384
0.00.282.592 I llm_load_print_meta: n_expert         = 0
0.00.282.592 I llm_load_print_meta: n_expert_used    = 0
0.00.282.592 I llm_load_print_meta: causal attn      = 1
0.00.282.593 I llm_load_print_meta: pooling type     = 0
0.00.282.593 I llm_load_print_meta: rope type        = 2
0.00.282.593 I llm_load_print_meta: rope scaling     = linear
0.00.282.595 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.595 I llm_load_print_meta: freq_scale_train = 1
0.00.282.596 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.596 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.596 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.596 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.597 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.597 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.597 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.598 I llm_load_print_meta: model type       = 2B
0.00.282.599 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.600 I llm_load_print_meta: model params     = 2.51 B
0.00.282.600 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.601 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.601 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.601 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.602 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.602 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.603 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.603 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.604 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.604 I llm_load_print_meta: max token length = 93
0.00.282.624 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.341.538 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.341.546 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.341.547 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.341.547 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.341.548 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.341.549 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.346.757 I llama_new_context_with_model: n_ctx      = 8192
0.00.346.765 I llama_new_context_with_model: n_batch    = 2048
0.00.346.765 I llama_new_context_with_model: n_ubatch   = 512
0.00.346.766 I llama_new_context_with_model: flash_attn = 0
0.00.346.769 I llama_new_context_with_model: freq_base  = 10000.0
0.00.346.769 I llama_new_context_with_model: freq_scale = 1
0.00.377.610 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.377.627 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.377.721 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.606 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.615 I llama_new_context_with_model: graph nodes  = 601
0.00.378.615 I llama_new_context_with_model: graph splits = 1
0.00.378.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.985 I main: llama threadpool init, n_threads = 4
0.00.462.000 I 
0.00.462.077 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.080 I 
0.00.462.124 I sampler seed: 115835444
0.00.462.135 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.138 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.462.139 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.139 I 
 afforgates of a larger set of data and provide additional insights into the trends and patterns observed in the data.

Answer:

**Step 1: Data

0.02.126.334 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6609.25 tokens per second)
0.02.126.336 I llama_perf_context_print:        load time =     460.06 ms
0.02.126.337 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.126.339 I llama_perf_context_print:        eval time =    1645.82 ms /    32 runs   (   51.43 ms per token,    19.44 tokens per second)
0.02.126.339 I llama_perf_context_print:       total time =    1664.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3937 (5055f4fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32167.20 ms
main:    total time = 32167.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.537 I build: 3937 (5055f4fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.021.991 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.006 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.018 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.019 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.019 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.020 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.020 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.024 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.024 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.025 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.025 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.026 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.567 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.627 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.559 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.566 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.567 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.568 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.572 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.572 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.576 I llama_model_loader: - type  f32:   37 tensors
0.00.132.579 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.579 I llama_model_loader: - type q6_K:   19 tensors
0.00.221.739 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.051 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.260.667 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.265.746 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.276.396 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.095 I llm_load_vocab: special tokens cache size = 5
0.00.298.491 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.298.510 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.298.511 I llm_load_print_meta: arch             = gemma
0.00.298.512 I llm_load_print_meta: vocab type       = SPM
0.00.298.514 I llm_load_print_meta: n_vocab          = 256000
0.00.298.515 I llm_load_print_meta: n_merges         = 0
0.00.298.516 I llm_load_print_meta: vocab_only       = 0
0.00.298.516 I llm_load_print_meta: n_ctx_train      = 8192
0.00.298.516 I llm_load_print_meta: n_embd           = 2048
0.00.298.517 I llm_load_print_meta: n_layer          = 18
0.00.298.529 I llm_load_print_meta: n_head           = 8
0.00.298.530 I llm_load_print_meta: n_head_kv        = 1
0.00.298.531 I llm_load_print_meta: n_rot            = 256
0.00.298.531 I llm_load_print_meta: n_swa            = 0
0.00.298.531 I llm_load_print_meta: n_embd_head_k    = 256
0.00.298.532 I llm_load_print_meta: n_embd_head_v    = 256
0.00.298.532 I llm_load_print_meta: n_gqa            = 8
0.00.298.534 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.298.535 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.298.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.298.537 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.298.537 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.298.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.298.538 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.298.539 I llm_load_print_meta: n_ff             = 16384
0.00.298.539 I llm_load_print_meta: n_expert         = 0
0.00.298.539 I llm_load_print_meta: n_expert_used    = 0
0.00.298.540 I llm_load_print_meta: causal attn      = 1
0.00.298.540 I llm_load_print_meta: pooling type     = 0
0.00.298.541 I llm_load_print_meta: rope type        = 2
0.00.298.541 I llm_load_print_meta: rope scaling     = linear
0.00.298.543 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.298.544 I llm_load_print_meta: freq_scale_train = 1
0.00.298.544 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.298.544 I llm_load_print_meta: rope_finetuned   = unknown
0.00.298.545 I llm_load_print_meta: ssm_d_conv       = 0
0.00.298.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.298.560 I llm_load_print_meta: ssm_d_state      = 0
0.00.298.560 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.298.560 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.298.561 I llm_load_print_meta: model type       = 2B
0.00.298.562 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.298.563 I llm_load_print_meta: model params     = 2.51 B
0.00.298.564 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.298.564 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.298.565 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.298.566 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.298.567 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.298.567 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.298.567 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.298.568 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.298.568 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.298.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.298.570 I llm_load_print_meta: max token length = 93
0.00.298.599 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.370.689 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.375.778 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.784 I llama_new_context_with_model: n_batch    = 2048
0.00.375.785 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.786 I llama_new_context_with_model: flash_attn = 0
0.00.375.788 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.789 I llama_new_context_with_model: freq_scale = 1
0.00.405.598 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.405.614 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.405.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.553 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.562 I llama_new_context_with_model: graph nodes  = 601
0.00.406.563 I llama_new_context_with_model: graph splits = 1
0.00.406.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.545 I main: llama threadpool init, n_threads = 4
0.00.491.559 I 
0.00.491.645 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.650 I 
0.00.491.696 I sampler seed: 2598866880
0.00.491.708 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.717 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.491.718 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.718 I 
 increasities and other forms of flattery, often used to manipulate or deceive.

These manipulative tactics often rely on the use of deception and lying to create a false

0.02.144.725 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6731.95 tokens per second)
0.02.144.728 I llama_perf_context_print:        load time =     489.66 ms
0.02.144.729 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.144.731 I llama_perf_context_print:        eval time =    1634.22 ms /    32 runs   (   51.07 ms per token,    19.58 tokens per second)
0.02.144.731 I llama_perf_context_print:       total time =    1653.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.439s
user	8m15.907s
sys	0m7.097s
