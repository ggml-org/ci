+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.625 I build: 3775 (503147a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.024.568 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.759 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.843 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.853 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.855 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.859 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.860 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.860 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.862 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.862 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.863 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.869 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.870 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.870 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.872 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.873 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.463 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.625 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.567 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.575 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.575 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.576 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.577 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.578 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.579 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.583 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.584 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.585 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.585 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.588 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.595 I llama_model_loader: - type  f32:   37 tensors
0.00.194.610 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.914 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.936 I llm_load_vocab: special tokens cache size = 5
0.00.520.814 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.520.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.520.865 I llm_load_print_meta: arch             = gemma
0.00.520.866 I llm_load_print_meta: vocab type       = SPM
0.00.520.867 I llm_load_print_meta: n_vocab          = 256000
0.00.520.869 I llm_load_print_meta: n_merges         = 0
0.00.520.870 I llm_load_print_meta: vocab_only       = 0
0.00.520.870 I llm_load_print_meta: n_ctx_train      = 8192
0.00.520.871 I llm_load_print_meta: n_embd           = 2048
0.00.520.871 I llm_load_print_meta: n_layer          = 18
0.00.520.904 I llm_load_print_meta: n_head           = 8
0.00.520.911 I llm_load_print_meta: n_head_kv        = 1
0.00.520.912 I llm_load_print_meta: n_rot            = 256
0.00.520.912 I llm_load_print_meta: n_swa            = 0
0.00.520.912 I llm_load_print_meta: n_embd_head_k    = 256
0.00.520.913 I llm_load_print_meta: n_embd_head_v    = 256
0.00.520.918 I llm_load_print_meta: n_gqa            = 8
0.00.520.940 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.520.945 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.520.947 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.520.948 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.520.956 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.520.957 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.520.958 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.520.963 I llm_load_print_meta: n_ff             = 16384
0.00.520.964 I llm_load_print_meta: n_expert         = 0
0.00.520.964 I llm_load_print_meta: n_expert_used    = 0
0.00.520.965 I llm_load_print_meta: causal attn      = 1
0.00.520.965 I llm_load_print_meta: pooling type     = 0
0.00.520.966 I llm_load_print_meta: rope type        = 2
0.00.520.966 I llm_load_print_meta: rope scaling     = linear
0.00.520.968 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.520.969 I llm_load_print_meta: freq_scale_train = 1
0.00.520.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.520.970 I llm_load_print_meta: rope_finetuned   = unknown
0.00.520.970 I llm_load_print_meta: ssm_d_conv       = 0
0.00.520.971 I llm_load_print_meta: ssm_d_inner      = 0
0.00.520.971 I llm_load_print_meta: ssm_d_state      = 0
0.00.520.971 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.520.978 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.520.979 I llm_load_print_meta: model type       = 2B
0.00.520.980 I llm_load_print_meta: model ftype      = Q8_0
0.00.520.981 I llm_load_print_meta: model params     = 2.51 B
0.00.520.982 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.520.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.520.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.520.984 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.520.984 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.520.985 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.520.986 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.520.986 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.520.986 I llm_load_print_meta: max token length = 93
0.00.521.165 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.621.157 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.621.169 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.621.169 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.621.170 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.621.171 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.621.171 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.626.771 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.779 I llama_new_context_with_model: n_batch    = 2048
0.00.626.779 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.780 I llama_new_context_with_model: flash_attn = 0
0.00.626.783 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.784 I llama_new_context_with_model: freq_scale = 1
0.00.657.066 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.657.108 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.657.226 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.658.626 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.658.633 I llama_new_context_with_model: graph nodes  = 601
0.00.658.633 I llama_new_context_with_model: graph splits = 1
0.00.658.650 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.704 I main: llama threadpool init, n_threads = 4
0.01.271.715 I 
0.01.271.803 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.806 I 
0.01.271.969 I sampler seed: 2186341565
0.01.271.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.988 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.989 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and the broader context of their impact.

**Answer:**

**The Intersection of Media Consumption, Sexual Violence, and Power Dynamics**

**

0.14.842.131 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.21 tokens per second)
0.14.842.135 I llama_perf_context_print:        load time =    1268.85 ms
0.14.842.136 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.842.137 I llama_perf_context_print:        eval time =   13488.64 ms /    32 runs   (  421.52 ms per token,     2.37 tokens per second)
0.14.842.162 I llama_perf_context_print:       total time =   13570.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.635 I build: 3775 (503147a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.810 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.902 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.917 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.921 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.926 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.927 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.938 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.939 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.940 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.946 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.948 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.951 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.951 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.371 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.406 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.415 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.416 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.416 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.417 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.418 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.419 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.440 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.442 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.442 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.195.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.456 I llama_model_loader: - type  f32:   37 tensors
0.00.195.461 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.584 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.690 I llm_load_vocab: special tokens cache size = 5
0.00.526.682 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.526.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.526.741 I llm_load_print_meta: arch             = gemma
0.00.526.742 I llm_load_print_meta: vocab type       = SPM
0.00.526.743 I llm_load_print_meta: n_vocab          = 256000
0.00.526.745 I llm_load_print_meta: n_merges         = 0
0.00.526.745 I llm_load_print_meta: vocab_only       = 0
0.00.526.746 I llm_load_print_meta: n_ctx_train      = 8192
0.00.526.746 I llm_load_print_meta: n_embd           = 2048
0.00.526.747 I llm_load_print_meta: n_layer          = 18
0.00.526.780 I llm_load_print_meta: n_head           = 8
0.00.526.787 I llm_load_print_meta: n_head_kv        = 1
0.00.526.788 I llm_load_print_meta: n_rot            = 256
0.00.526.789 I llm_load_print_meta: n_swa            = 0
0.00.526.812 I llm_load_print_meta: n_embd_head_k    = 256
0.00.526.813 I llm_load_print_meta: n_embd_head_v    = 256
0.00.526.818 I llm_load_print_meta: n_gqa            = 8
0.00.526.822 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.526.827 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.526.829 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.526.830 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.526.831 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.526.831 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.526.832 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.526.837 I llm_load_print_meta: n_ff             = 16384
0.00.526.838 I llm_load_print_meta: n_expert         = 0
0.00.526.838 I llm_load_print_meta: n_expert_used    = 0
0.00.526.839 I llm_load_print_meta: causal attn      = 1
0.00.526.839 I llm_load_print_meta: pooling type     = 0
0.00.526.840 I llm_load_print_meta: rope type        = 2
0.00.526.841 I llm_load_print_meta: rope scaling     = linear
0.00.526.842 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.526.843 I llm_load_print_meta: freq_scale_train = 1
0.00.526.843 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.526.844 I llm_load_print_meta: rope_finetuned   = unknown
0.00.526.844 I llm_load_print_meta: ssm_d_conv       = 0
0.00.526.844 I llm_load_print_meta: ssm_d_inner      = 0
0.00.526.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.526.845 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.526.849 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.526.850 I llm_load_print_meta: model type       = 2B
0.00.526.851 I llm_load_print_meta: model ftype      = Q8_0
0.00.526.861 I llm_load_print_meta: model params     = 2.51 B
0.00.526.862 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.526.862 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.526.864 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.526.864 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.526.865 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.526.865 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.526.867 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.526.868 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.526.868 I llm_load_print_meta: max token length = 93
0.00.527.045 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.022 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.627.762 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.769 I llama_new_context_with_model: n_batch    = 2048
0.00.627.769 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.770 I llama_new_context_with_model: flash_attn = 0
0.00.627.772 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.773 I llama_new_context_with_model: freq_scale = 1
0.00.657.101 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.657.147 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.657.269 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.658.644 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.658.650 I llama_new_context_with_model: graph nodes  = 601
0.00.658.651 I llama_new_context_with_model: graph splits = 1
0.00.658.665 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.502 I main: llama threadpool init, n_threads = 4
0.01.269.514 I 
0.01.269.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.611 I 
0.01.269.770 I sampler seed: 1127518968
0.01.269.780 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.785 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.269.785 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically, and then burst forth into laughter. [end of text]


0.05.899.151 I llama_perf_sampler_print:    sampling time =      16.96 ms /    12 runs   (    1.41 ms per token,   707.59 tokens per second)
0.05.899.166 I llama_perf_context_print:        load time =    1266.63 ms
0.05.899.168 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.899.170 I llama_perf_context_print:        eval time =    4600.32 ms /    11 runs   (  418.21 ms per token,     2.39 tokens per second)
0.05.899.171 I llama_perf_context_print:       total time =    4629.66 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.653 I build: 3775 (503147a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.608 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.797 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.885 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.896 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.898 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.902 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.906 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.907 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.907 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.908 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.909 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.915 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.924 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.926 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.927 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.927 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.115 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.478 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.528 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.536 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.547 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.548 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.555 I llama_model_loader: - type  f32:   37 tensors
0.00.195.560 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.875 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.461.035 I llm_load_vocab: special tokens cache size = 5
0.00.519.133 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.519.189 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.519.193 I llm_load_print_meta: arch             = gemma
0.00.519.194 I llm_load_print_meta: vocab type       = SPM
0.00.519.196 I llm_load_print_meta: n_vocab          = 256000
0.00.519.199 I llm_load_print_meta: n_merges         = 0
0.00.519.199 I llm_load_print_meta: vocab_only       = 0
0.00.519.200 I llm_load_print_meta: n_ctx_train      = 8192
0.00.519.213 I llm_load_print_meta: n_embd           = 2048
0.00.519.213 I llm_load_print_meta: n_layer          = 18
0.00.519.249 I llm_load_print_meta: n_head           = 8
0.00.519.258 I llm_load_print_meta: n_head_kv        = 1
0.00.519.258 I llm_load_print_meta: n_rot            = 256
0.00.519.259 I llm_load_print_meta: n_swa            = 0
0.00.519.259 I llm_load_print_meta: n_embd_head_k    = 256
0.00.519.259 I llm_load_print_meta: n_embd_head_v    = 256
0.00.519.265 I llm_load_print_meta: n_gqa            = 8
0.00.519.269 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.519.274 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.519.275 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.519.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.519.277 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.519.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.519.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.519.283 I llm_load_print_meta: n_ff             = 16384
0.00.519.284 I llm_load_print_meta: n_expert         = 0
0.00.519.284 I llm_load_print_meta: n_expert_used    = 0
0.00.519.285 I llm_load_print_meta: causal attn      = 1
0.00.519.285 I llm_load_print_meta: pooling type     = 0
0.00.519.285 I llm_load_print_meta: rope type        = 2
0.00.519.286 I llm_load_print_meta: rope scaling     = linear
0.00.519.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.519.288 I llm_load_print_meta: freq_scale_train = 1
0.00.519.288 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.519.288 I llm_load_print_meta: rope_finetuned   = unknown
0.00.519.289 I llm_load_print_meta: ssm_d_conv       = 0
0.00.519.289 I llm_load_print_meta: ssm_d_inner      = 0
0.00.519.292 I llm_load_print_meta: ssm_d_state      = 0
0.00.519.292 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.519.293 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.519.293 I llm_load_print_meta: model type       = 2B
0.00.519.294 I llm_load_print_meta: model ftype      = Q8_0
0.00.519.295 I llm_load_print_meta: model params     = 2.51 B
0.00.519.296 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.519.296 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.519.297 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.519.298 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.519.298 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.519.298 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.519.299 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.519.299 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.519.300 I llm_load_print_meta: max token length = 93
0.00.519.471 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.594.685 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.594.694 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.594.696 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.594.696 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.594.697 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.594.698 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.600.402 I llama_new_context_with_model: n_ctx      = 8192
0.00.600.409 I llama_new_context_with_model: n_batch    = 2048
0.00.600.410 I llama_new_context_with_model: n_ubatch   = 512
0.00.600.410 I llama_new_context_with_model: flash_attn = 0
0.00.600.412 I llama_new_context_with_model: freq_base  = 10000.0
0.00.600.413 I llama_new_context_with_model: freq_scale = 1
0.00.629.578 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.629.624 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.629.740 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.631.133 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.631.139 I llama_new_context_with_model: graph nodes  = 601
0.00.631.139 I llama_new_context_with_model: graph splits = 1
0.00.631.154 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.104 I main: llama threadpool init, n_threads = 4
0.01.274.116 I 
0.01.274.207 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.210 I 
0.01.274.368 I sampler seed: 427914313
0.01.274.378 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.382 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.274.384 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities can be a sign of:

A) Anxiety
B) Depression
C) Emotional instability
D) All of the above

**Answer:

0.14.952.157 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.85 tokens per second)
0.14.952.161 I llama_perf_context_print:        load time =    1271.20 ms
0.14.952.162 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.952.176 I llama_perf_context_print:        eval time =   13596.78 ms /    32 runs   (  424.90 ms per token,     2.35 tokens per second)
0.14.952.178 I llama_perf_context_print:       total time =   13678.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.624 I build: 3775 (503147a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.412 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.594 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.682 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.693 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.695 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.699 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.704 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.705 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.708 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.709 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.716 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.718 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.723 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.773 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.695 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.641 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.649 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.650 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.651 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.652 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.653 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.654 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.657 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.658 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.659 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.661 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.194.664 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.673 I llama_model_loader: - type  f32:   37 tensors
0.00.194.679 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.198 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.459.235 I llm_load_vocab: special tokens cache size = 5
0.00.517.034 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.517.093 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.517.094 I llm_load_print_meta: arch             = gemma
0.00.517.095 I llm_load_print_meta: vocab type       = SPM
0.00.517.096 I llm_load_print_meta: n_vocab          = 256000
0.00.517.098 I llm_load_print_meta: n_merges         = 0
0.00.517.099 I llm_load_print_meta: vocab_only       = 0
0.00.517.100 I llm_load_print_meta: n_ctx_train      = 8192
0.00.517.100 I llm_load_print_meta: n_embd           = 2048
0.00.517.100 I llm_load_print_meta: n_layer          = 18
0.00.517.135 I llm_load_print_meta: n_head           = 8
0.00.517.141 I llm_load_print_meta: n_head_kv        = 1
0.00.517.142 I llm_load_print_meta: n_rot            = 256
0.00.517.142 I llm_load_print_meta: n_swa            = 0
0.00.517.143 I llm_load_print_meta: n_embd_head_k    = 256
0.00.517.143 I llm_load_print_meta: n_embd_head_v    = 256
0.00.517.147 I llm_load_print_meta: n_gqa            = 8
0.00.517.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.517.157 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.517.158 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.517.159 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.517.159 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.517.160 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.517.160 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.517.165 I llm_load_print_meta: n_ff             = 16384
0.00.517.165 I llm_load_print_meta: n_expert         = 0
0.00.517.166 I llm_load_print_meta: n_expert_used    = 0
0.00.517.166 I llm_load_print_meta: causal attn      = 1
0.00.517.166 I llm_load_print_meta: pooling type     = 0
0.00.517.167 I llm_load_print_meta: rope type        = 2
0.00.517.167 I llm_load_print_meta: rope scaling     = linear
0.00.517.169 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.517.169 I llm_load_print_meta: freq_scale_train = 1
0.00.517.170 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.517.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.517.170 I llm_load_print_meta: ssm_d_conv       = 0
0.00.517.171 I llm_load_print_meta: ssm_d_inner      = 0
0.00.517.171 I llm_load_print_meta: ssm_d_state      = 0
0.00.517.171 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.517.172 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.517.173 I llm_load_print_meta: model type       = 2B
0.00.517.174 I llm_load_print_meta: model ftype      = Q8_0
0.00.517.174 I llm_load_print_meta: model params     = 2.51 B
0.00.517.175 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.517.176 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.517.176 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.517.177 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.517.177 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.517.178 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.517.178 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.517.179 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.517.179 I llm_load_print_meta: max token length = 93
0.00.517.370 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.589.012 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.589.021 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.594.738 I llama_new_context_with_model: n_ctx      = 8192
0.00.594.745 I llama_new_context_with_model: n_batch    = 2048
0.00.594.745 I llama_new_context_with_model: n_ubatch   = 512
0.00.594.746 I llama_new_context_with_model: flash_attn = 0
0.00.594.748 I llama_new_context_with_model: freq_base  = 10000.0
0.00.594.748 I llama_new_context_with_model: freq_scale = 1
0.00.623.974 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.624.020 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.624.149 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.625.544 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.625.551 I llama_new_context_with_model: graph nodes  = 601
0.00.625.552 I llama_new_context_with_model: graph splits = 1
0.00.625.572 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.237.986 I main: llama threadpool init, n_threads = 4
0.01.237.998 I 
0.01.238.102 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.238.106 I 
0.01.238.269 I sampler seed: 3889181228
0.01.238.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.238.286 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.238.287 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with a sense of humor.

I am unable to generate the requested response as it contains sexually suggestive content that is not appropriate for me to provide.

0.14.784.871 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.65 tokens per second)
0.14.784.893 I llama_perf_context_print:        load time =    1235.09 ms
0.14.784.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.784.898 I llama_perf_context_print:        eval time =   13465.36 ms /    32 runs   (  420.79 ms per token,     2.38 tokens per second)
0.14.784.899 I llama_perf_context_print:       total time =   13546.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.458s
user	3m14.088s
sys	0m9.431s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3775 (503147a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198266.58 ms
main:    total time = 198266.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.649 I build: 3775 (503147a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.622 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.807 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.890 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.901 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.903 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.907 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.908 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.908 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.909 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.910 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.911 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.916 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.917 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.919 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.919 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.920 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.239 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.958 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.942 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.949 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.950 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.951 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.952 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.953 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.954 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.958 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.959 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.960 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.193.961 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.193.962 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.193.969 I llama_model_loader: - type  f32:   37 tensors
0.00.193.972 I llama_model_loader: - type q4_K:  108 tensors
0.00.193.974 I llama_model_loader: - type q6_K:   19 tensors
0.00.465.561 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.466.555 I llm_load_vocab: special tokens cache size = 5
0.00.524.451 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.524.505 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.524.506 I llm_load_print_meta: arch             = gemma
0.00.524.507 I llm_load_print_meta: vocab type       = SPM
0.00.524.508 I llm_load_print_meta: n_vocab          = 256000
0.00.524.511 I llm_load_print_meta: n_merges         = 0
0.00.524.511 I llm_load_print_meta: vocab_only       = 0
0.00.524.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.524.512 I llm_load_print_meta: n_embd           = 2048
0.00.524.512 I llm_load_print_meta: n_layer          = 18
0.00.524.545 I llm_load_print_meta: n_head           = 8
0.00.524.551 I llm_load_print_meta: n_head_kv        = 1
0.00.524.551 I llm_load_print_meta: n_rot            = 256
0.00.524.552 I llm_load_print_meta: n_swa            = 0
0.00.524.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.524.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.524.557 I llm_load_print_meta: n_gqa            = 8
0.00.524.561 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.524.566 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.524.568 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.524.569 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.524.569 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.524.570 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.524.570 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.524.575 I llm_load_print_meta: n_ff             = 16384
0.00.524.576 I llm_load_print_meta: n_expert         = 0
0.00.524.576 I llm_load_print_meta: n_expert_used    = 0
0.00.524.576 I llm_load_print_meta: causal attn      = 1
0.00.524.577 I llm_load_print_meta: pooling type     = 0
0.00.524.577 I llm_load_print_meta: rope type        = 2
0.00.524.578 I llm_load_print_meta: rope scaling     = linear
0.00.524.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.524.579 I llm_load_print_meta: freq_scale_train = 1
0.00.524.580 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.524.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.524.580 I llm_load_print_meta: ssm_d_conv       = 0
0.00.524.580 I llm_load_print_meta: ssm_d_inner      = 0
0.00.524.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.524.581 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.524.582 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.524.582 I llm_load_print_meta: model type       = 2B
0.00.524.583 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.524.584 I llm_load_print_meta: model params     = 2.51 B
0.00.524.585 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.524.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.524.585 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.524.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.524.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.524.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.524.587 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.524.587 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.524.588 I llm_load_print_meta: max token length = 93
0.00.524.757 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.584.221 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.584.230 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.584.231 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.584.232 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.584.232 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.584.233 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.589.718 I llama_new_context_with_model: n_ctx      = 8192
0.00.589.725 I llama_new_context_with_model: n_batch    = 2048
0.00.589.726 I llama_new_context_with_model: n_ubatch   = 512
0.00.589.726 I llama_new_context_with_model: flash_attn = 0
0.00.589.728 I llama_new_context_with_model: freq_base  = 10000.0
0.00.589.729 I llama_new_context_with_model: freq_scale = 1
0.00.619.948 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.619.987 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.620.109 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.621.503 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.621.509 I llama_new_context_with_model: graph nodes  = 601
0.00.621.509 I llama_new_context_with_model: graph splits = 1
0.00.621.524 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.199.753 I main: llama threadpool init, n_threads = 4
0.01.199.765 I 
0.01.199.858 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.199.862 I 
0.01.200.032 I sampler seed: 102007069
0.01.200.044 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.200.048 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.200.049 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am unable to answer the question as it contains inappropriate and potentially harmful content. [end of text]


0.08.356.925 I llama_perf_sampler_print:    sampling time =      32.25 ms /    22 runs   (    1.47 ms per token,   682.19 tokens per second)
0.08.356.928 I llama_perf_context_print:        load time =    1196.86 ms
0.08.356.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.356.932 I llama_perf_context_print:        eval time =    7102.54 ms /    21 runs   (  338.22 ms per token,     2.96 tokens per second)
0.08.356.933 I llama_perf_context_print:       total time =    7157.18 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3775 (503147a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198241.06 ms
main:    total time = 198241.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.693 I build: 3775 (503147a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.002.844 I main: load the model and apply lora adapter, if any
0.00.024.766 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.856 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.871 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.873 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.878 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.879 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.880 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.881 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.882 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.883 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.889 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.890 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.891 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.892 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.893 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.780 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.940 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.957 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.965 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.966 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.973 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.973 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.982 I llama_model_loader: - type  f32:   37 tensors
0.00.193.986 I llama_model_loader: - type q4_K:  108 tensors
0.00.193.987 I llama_model_loader: - type q6_K:   19 tensors
0.00.471.993 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.045 I llm_load_vocab: special tokens cache size = 5
0.00.531.000 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.056 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.057 I llm_load_print_meta: arch             = gemma
0.00.531.057 I llm_load_print_meta: vocab type       = SPM
0.00.531.058 I llm_load_print_meta: n_vocab          = 256000
0.00.531.061 I llm_load_print_meta: n_merges         = 0
0.00.531.062 I llm_load_print_meta: vocab_only       = 0
0.00.531.062 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.062 I llm_load_print_meta: n_embd           = 2048
0.00.531.063 I llm_load_print_meta: n_layer          = 18
0.00.531.098 I llm_load_print_meta: n_head           = 8
0.00.531.106 I llm_load_print_meta: n_head_kv        = 1
0.00.531.106 I llm_load_print_meta: n_rot            = 256
0.00.531.107 I llm_load_print_meta: n_swa            = 0
0.00.531.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.107 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.112 I llm_load_print_meta: n_gqa            = 8
0.00.531.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.121 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.122 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.123 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.124 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.124 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.125 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.129 I llm_load_print_meta: n_ff             = 16384
0.00.531.129 I llm_load_print_meta: n_expert         = 0
0.00.531.130 I llm_load_print_meta: n_expert_used    = 0
0.00.531.130 I llm_load_print_meta: causal attn      = 1
0.00.531.131 I llm_load_print_meta: pooling type     = 0
0.00.531.131 I llm_load_print_meta: rope type        = 2
0.00.531.131 I llm_load_print_meta: rope scaling     = linear
0.00.531.133 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.134 I llm_load_print_meta: freq_scale_train = 1
0.00.531.134 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.134 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.135 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.135 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.135 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.135 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.136 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.137 I llm_load_print_meta: model type       = 2B
0.00.531.151 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.531.152 I llm_load_print_meta: model params     = 2.51 B
0.00.531.153 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.531.154 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.155 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.155 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.155 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.156 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.156 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.157 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.157 I llm_load_print_meta: max token length = 93
0.00.531.322 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.588.748 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.594.190 I llama_new_context_with_model: n_ctx      = 8192
0.00.594.197 I llama_new_context_with_model: n_batch    = 2048
0.00.594.197 I llama_new_context_with_model: n_ubatch   = 512
0.00.594.198 I llama_new_context_with_model: flash_attn = 0
0.00.594.200 I llama_new_context_with_model: freq_base  = 10000.0
0.00.594.201 I llama_new_context_with_model: freq_scale = 1
0.00.623.009 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.623.054 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.623.167 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.624.527 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.624.534 I llama_new_context_with_model: graph nodes  = 601
0.00.624.534 I llama_new_context_with_model: graph splits = 1
0.00.624.550 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.198.962 I main: llama threadpool init, n_threads = 4
0.01.198.973 I 
0.01.199.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.199.070 I 
0.01.199.234 I sampler seed: 1733030814
0.01.199.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.199.250 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.199.251 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am not sure if this is the right question to ask, but I'm curious to know. [end of text]


0.10.047.891 I llama_perf_sampler_print:    sampling time =      39.93 ms /    27 runs   (    1.48 ms per token,   676.20 tokens per second)
0.10.047.895 I llama_perf_context_print:        load time =    1196.04 ms
0.10.047.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.047.898 I llama_perf_context_print:        eval time =    8782.61 ms /    26 runs   (  337.79 ms per token,     2.96 tokens per second)
0.10.047.899 I llama_perf_context_print:       total time =    8848.94 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.805s
user	49m42.750s
sys	0m6.368s
