+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.620 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.811 I main: llama backend init
0.00.000.818 I main: load the model and apply lora adapter, if any
0.00.021.879 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.891 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.900 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.905 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.906 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.911 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.911 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.912 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.913 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.914 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.914 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.918 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.919 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.919 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.920 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.921 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.393 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.160 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.102 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.111 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.112 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.113 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.114 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.119 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.120 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.121 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.125 I llama_model_loader: - type  f32:   37 tensors
0.00.134.126 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.694 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.279.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.280.708 I llm_load_vocab: special tokens cache size = 5
0.00.302.378 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.302.400 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.302.401 I llm_load_print_meta: arch             = gemma
0.00.302.401 I llm_load_print_meta: vocab type       = SPM
0.00.302.402 I llm_load_print_meta: n_vocab          = 256000
0.00.302.403 I llm_load_print_meta: n_merges         = 0
0.00.302.403 I llm_load_print_meta: vocab_only       = 0
0.00.302.403 I llm_load_print_meta: n_ctx_train      = 8192
0.00.302.404 I llm_load_print_meta: n_embd           = 2048
0.00.302.404 I llm_load_print_meta: n_layer          = 18
0.00.302.416 I llm_load_print_meta: n_head           = 8
0.00.302.417 I llm_load_print_meta: n_head_kv        = 1
0.00.302.417 I llm_load_print_meta: n_rot            = 256
0.00.302.417 I llm_load_print_meta: n_swa            = 0
0.00.302.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.302.418 I llm_load_print_meta: n_embd_head_v    = 256
0.00.302.419 I llm_load_print_meta: n_gqa            = 8
0.00.302.420 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.302.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.302.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.302.423 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.302.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.302.424 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.302.424 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.302.425 I llm_load_print_meta: n_ff             = 16384
0.00.302.426 I llm_load_print_meta: n_expert         = 0
0.00.302.426 I llm_load_print_meta: n_expert_used    = 0
0.00.302.426 I llm_load_print_meta: causal attn      = 1
0.00.302.426 I llm_load_print_meta: pooling type     = 0
0.00.302.427 I llm_load_print_meta: rope type        = 2
0.00.302.427 I llm_load_print_meta: rope scaling     = linear
0.00.302.429 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.302.430 I llm_load_print_meta: freq_scale_train = 1
0.00.302.430 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.302.430 I llm_load_print_meta: rope_finetuned   = unknown
0.00.302.431 I llm_load_print_meta: ssm_d_conv       = 0
0.00.302.431 I llm_load_print_meta: ssm_d_inner      = 0
0.00.302.431 I llm_load_print_meta: ssm_d_state      = 0
0.00.302.431 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.302.432 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.302.432 I llm_load_print_meta: model type       = 2B
0.00.302.433 I llm_load_print_meta: model ftype      = Q8_0
0.00.302.434 I llm_load_print_meta: model params     = 2.51 B
0.00.302.434 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.302.435 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.302.435 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.302.436 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.302.437 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.302.437 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.302.437 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.302.438 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.302.438 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.302.438 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.302.439 I llm_load_print_meta: max token length = 93
0.00.402.069 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.402.078 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.402.079 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.402.080 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.402.080 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.402.081 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.407.536 I llama_new_context_with_model: n_seq_max     = 1
0.00.407.544 I llama_new_context_with_model: n_ctx         = 4096
0.00.407.545 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.407.545 I llama_new_context_with_model: n_batch       = 2048
0.00.407.546 I llama_new_context_with_model: n_ubatch      = 512
0.00.407.546 I llama_new_context_with_model: flash_attn    = 0
0.00.407.549 I llama_new_context_with_model: freq_base     = 10000.0
0.00.407.550 I llama_new_context_with_model: freq_scale    = 1
0.00.407.551 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.424.179 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.424.193 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.424.295 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.425.671 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.425.678 I llama_new_context_with_model: graph nodes  = 601
0.00.425.679 I llama_new_context_with_model: graph splits = 1
0.00.425.681 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.518.623 I main: llama threadpool init, n_threads = 4
0.00.518.640 I 
0.00.518.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.518.724 I 
0.00.518.769 I sampler seed: 2076969189
0.00.518.780 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.518.788 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.518.788 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.518.798 I 
 maneupher.

I apologize, but I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.01.980.934 I llama_perf_sampler_print:    sampling time =       3.15 ms /    21 runs   (    0.15 ms per token,  6677.27 tokens per second)
0.01.980.936 I llama_perf_context_print:        load time =     517.78 ms
0.01.980.937 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.980.939 I llama_perf_context_print:        eval time =    1449.83 ms /    20 runs   (   72.49 ms per token,    13.79 tokens per second)
0.01.980.940 I llama_perf_context_print:       total time =    1462.32 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.558 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.208 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.224 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.232 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.233 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.237 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.238 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.239 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.240 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.241 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.242 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.247 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.248 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.249 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.881 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.918 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.963 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.970 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.971 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.972 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.972 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.974 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.975 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.979 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.979 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.980 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.981 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.983 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.986 I llama_model_loader: - type  f32:   37 tensors
0.00.133.987 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.750 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.861 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.585 I llm_load_vocab: special tokens cache size = 5
0.00.290.008 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.030 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.030 I llm_load_print_meta: arch             = gemma
0.00.290.031 I llm_load_print_meta: vocab type       = SPM
0.00.290.032 I llm_load_print_meta: n_vocab          = 256000
0.00.290.032 I llm_load_print_meta: n_merges         = 0
0.00.290.032 I llm_load_print_meta: vocab_only       = 0
0.00.290.033 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.033 I llm_load_print_meta: n_embd           = 2048
0.00.290.033 I llm_load_print_meta: n_layer          = 18
0.00.290.046 I llm_load_print_meta: n_head           = 8
0.00.290.047 I llm_load_print_meta: n_head_kv        = 1
0.00.290.048 I llm_load_print_meta: n_rot            = 256
0.00.290.048 I llm_load_print_meta: n_swa            = 0
0.00.290.048 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.049 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.049 I llm_load_print_meta: n_gqa            = 8
0.00.290.051 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.052 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.053 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.054 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.054 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.055 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.055 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.056 I llm_load_print_meta: n_ff             = 16384
0.00.290.056 I llm_load_print_meta: n_expert         = 0
0.00.290.057 I llm_load_print_meta: n_expert_used    = 0
0.00.290.057 I llm_load_print_meta: causal attn      = 1
0.00.290.057 I llm_load_print_meta: pooling type     = 0
0.00.290.057 I llm_load_print_meta: rope type        = 2
0.00.290.058 I llm_load_print_meta: rope scaling     = linear
0.00.290.059 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.060 I llm_load_print_meta: freq_scale_train = 1
0.00.290.060 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.061 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.061 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.061 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.062 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.062 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.062 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.063 I llm_load_print_meta: model type       = 2B
0.00.290.063 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.064 I llm_load_print_meta: model params     = 2.51 B
0.00.290.065 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.290.065 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.066 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.066 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.066 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.067 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.067 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.068 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.068 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.068 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.070 I llm_load_print_meta: max token length = 93
0.00.384.028 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.389.259 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.267 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.268 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.268 I llama_new_context_with_model: n_batch       = 2048
0.00.389.269 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.269 I llama_new_context_with_model: flash_attn    = 0
0.00.389.273 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.274 I llama_new_context_with_model: freq_scale    = 1
0.00.389.275 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.065 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.082 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.176 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.455 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.463 I llama_new_context_with_model: graph nodes  = 601
0.00.406.463 I llama_new_context_with_model: graph splits = 1
0.00.406.466 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.842 I main: llama threadpool init, n_threads = 4
0.00.490.857 I 
0.00.490.931 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.490.934 I 
0.00.490.978 I sampler seed: 1388147631
0.00.490.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.000 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.004 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.004 I 
 increably.

I am unable to find the requested information in the provided context. Please provide the necessary context for me to assist you further. [end of text]


0.02.609.825 I llama_perf_sampler_print:    sampling time =       4.37 ms /    31 runs   (    0.14 ms per token,  7098.69 tokens per second)
0.02.609.827 I llama_perf_context_print:        load time =     490.06 ms
0.02.609.828 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.609.830 I llama_perf_context_print:        eval time =    2100.33 ms /    30 runs   (   70.01 ms per token,    14.28 tokens per second)
0.02.609.831 I llama_perf_context_print:       total time =    2118.99 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.182 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.371 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.021.113 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.125 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.134 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.139 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.140 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.149 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.150 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.151 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.151 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.152 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.158 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.160 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.161 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.161 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.990 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.088 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.042 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.049 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.050 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.051 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.051 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.052 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.053 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.055 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.056 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.057 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.058 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.059 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.063 I llama_model_loader: - type  f32:   37 tensors
0.00.133.064 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.767 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.706 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.413 I llm_load_vocab: special tokens cache size = 5
0.00.290.787 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.806 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.806 I llm_load_print_meta: arch             = gemma
0.00.290.807 I llm_load_print_meta: vocab type       = SPM
0.00.290.808 I llm_load_print_meta: n_vocab          = 256000
0.00.290.808 I llm_load_print_meta: n_merges         = 0
0.00.290.809 I llm_load_print_meta: vocab_only       = 0
0.00.290.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.809 I llm_load_print_meta: n_embd           = 2048
0.00.290.810 I llm_load_print_meta: n_layer          = 18
0.00.290.821 I llm_load_print_meta: n_head           = 8
0.00.290.822 I llm_load_print_meta: n_head_kv        = 1
0.00.290.823 I llm_load_print_meta: n_rot            = 256
0.00.290.823 I llm_load_print_meta: n_swa            = 0
0.00.290.823 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.824 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.824 I llm_load_print_meta: n_gqa            = 8
0.00.290.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.827 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.828 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.829 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.830 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.831 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.831 I llm_load_print_meta: n_ff             = 16384
0.00.290.832 I llm_load_print_meta: n_expert         = 0
0.00.290.832 I llm_load_print_meta: n_expert_used    = 0
0.00.290.832 I llm_load_print_meta: causal attn      = 1
0.00.290.833 I llm_load_print_meta: pooling type     = 0
0.00.290.833 I llm_load_print_meta: rope type        = 2
0.00.290.833 I llm_load_print_meta: rope scaling     = linear
0.00.290.834 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.835 I llm_load_print_meta: freq_scale_train = 1
0.00.290.835 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.836 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.836 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.836 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.837 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.837 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.837 I llm_load_print_meta: model type       = 2B
0.00.290.838 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.839 I llm_load_print_meta: model params     = 2.51 B
0.00.290.840 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.290.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.841 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.842 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.843 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.843 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.844 I llm_load_print_meta: max token length = 93
0.00.365.100 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.365.108 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.109 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.365.110 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.365.110 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.111 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.370.425 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.433 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.433 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.433 I llama_new_context_with_model: n_batch       = 2048
0.00.370.434 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.434 I llama_new_context_with_model: flash_attn    = 0
0.00.370.438 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.439 I llama_new_context_with_model: freq_scale    = 1
0.00.370.439 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.723 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.739 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.104 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.111 I llama_new_context_with_model: graph nodes  = 601
0.00.387.111 I llama_new_context_with_model: graph splits = 1
0.00.387.114 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.078 I main: llama threadpool init, n_threads = 4
0.00.490.095 I 
0.00.490.167 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.490.170 I 
0.00.490.213 I sampler seed: 3128885720
0.00.490.224 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.237 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.490.240 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.240 I 
 maneuphering.

I am unable to access the requested context or the service that is providing it. Please provide me with the necessary information to proceed. [end of text]


0.02.828.779 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6945.91 tokens per second)
0.02.828.781 I llama_perf_context_print:        load time =     489.68 ms
0.02.828.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.828.784 I llama_perf_context_print:        eval time =    2318.83 ms /    32 runs   (   72.46 ms per token,    13.80 tokens per second)
0.02.828.785 I llama_perf_context_print:       total time =    2338.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.179 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.848 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.856 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.870 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.872 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.876 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.877 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.878 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.878 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.879 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.879 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.883 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.884 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.885 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.885 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.886 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.565 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.406 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.360 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.370 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.370 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.371 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.372 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.373 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.373 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.376 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.377 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.379 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.379 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.380 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.385 I llama_model_loader: - type  f32:   37 tensors
0.00.132.385 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.062 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.902 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.581 I llm_load_vocab: special tokens cache size = 5
0.00.287.700 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.719 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.720 I llm_load_print_meta: arch             = gemma
0.00.287.721 I llm_load_print_meta: vocab type       = SPM
0.00.287.721 I llm_load_print_meta: n_vocab          = 256000
0.00.287.722 I llm_load_print_meta: n_merges         = 0
0.00.287.722 I llm_load_print_meta: vocab_only       = 0
0.00.287.722 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.723 I llm_load_print_meta: n_embd           = 2048
0.00.287.723 I llm_load_print_meta: n_layer          = 18
0.00.287.735 I llm_load_print_meta: n_head           = 8
0.00.287.736 I llm_load_print_meta: n_head_kv        = 1
0.00.287.736 I llm_load_print_meta: n_rot            = 256
0.00.287.737 I llm_load_print_meta: n_swa            = 0
0.00.287.737 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.738 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.739 I llm_load_print_meta: n_gqa            = 8
0.00.287.740 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.741 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.742 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.743 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.744 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.744 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.745 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.745 I llm_load_print_meta: n_ff             = 16384
0.00.287.746 I llm_load_print_meta: n_expert         = 0
0.00.287.746 I llm_load_print_meta: n_expert_used    = 0
0.00.287.747 I llm_load_print_meta: causal attn      = 1
0.00.287.747 I llm_load_print_meta: pooling type     = 0
0.00.287.747 I llm_load_print_meta: rope type        = 2
0.00.287.748 I llm_load_print_meta: rope scaling     = linear
0.00.287.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.749 I llm_load_print_meta: freq_scale_train = 1
0.00.287.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.750 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.751 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.751 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.751 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.751 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.752 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.752 I llm_load_print_meta: model type       = 2B
0.00.287.752 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.753 I llm_load_print_meta: model params     = 2.51 B
0.00.287.754 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.755 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.755 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.755 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.756 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.756 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.757 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.757 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.758 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.758 I llm_load_print_meta: max token length = 93
0.00.359.231 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.359.238 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.364.330 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.337 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.337 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.338 I llama_new_context_with_model: n_batch       = 2048
0.00.364.338 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.339 I llama_new_context_with_model: flash_attn    = 0
0.00.364.342 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.343 I llama_new_context_with_model: freq_scale    = 1
0.00.364.344 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.173 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.190 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.292 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.739 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.747 I llama_new_context_with_model: graph nodes  = 601
0.00.381.748 I llama_new_context_with_model: graph splits = 1
0.00.381.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.195 I main: llama threadpool init, n_threads = 4
0.00.479.212 I 
0.00.479.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.479.287 I 
0.00.479.336 I sampler seed: 2598451533
0.00.479.347 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.351 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.352 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.353 I 
 increamically.

I understand. I will be careful with my language in the future. [end of text]


0.01.974.446 I llama_perf_sampler_print:    sampling time =       2.85 ms /    20 runs   (    0.14 ms per token,  7020.01 tokens per second)
0.01.974.449 I llama_perf_context_print:        load time =     478.80 ms
0.01.974.450 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.974.451 I llama_perf_context_print:        eval time =    1483.11 ms /    19 runs   (   78.06 ms per token,    12.81 tokens per second)
0.01.974.452 I llama_perf_context_print:       total time =    1495.26 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.330s
user	0m32.800s
sys	0m9.541s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4172 (50d5cecb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40285.38 ms
main:    total time = 40285.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.372 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.020.840 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.851 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.860 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.868 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.869 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.875 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.876 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.877 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.878 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.879 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.883 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.884 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.884 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.885 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.885 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.947 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.572 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.448 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.455 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.456 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.457 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.457 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.458 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.459 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.462 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.463 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.464 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.465 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.466 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.469 I llama_model_loader: - type  f32:   37 tensors
0.00.132.470 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.470 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.584 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.885 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.641 I llm_load_vocab: special tokens cache size = 5
0.00.289.108 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.129 I llm_load_print_meta: arch             = gemma
0.00.289.130 I llm_load_print_meta: vocab type       = SPM
0.00.289.130 I llm_load_print_meta: n_vocab          = 256000
0.00.289.131 I llm_load_print_meta: n_merges         = 0
0.00.289.131 I llm_load_print_meta: vocab_only       = 0
0.00.289.131 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.132 I llm_load_print_meta: n_embd           = 2048
0.00.289.132 I llm_load_print_meta: n_layer          = 18
0.00.289.143 I llm_load_print_meta: n_head           = 8
0.00.289.144 I llm_load_print_meta: n_head_kv        = 1
0.00.289.144 I llm_load_print_meta: n_rot            = 256
0.00.289.145 I llm_load_print_meta: n_swa            = 0
0.00.289.145 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.145 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.146 I llm_load_print_meta: n_gqa            = 8
0.00.289.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.148 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.149 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.150 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.151 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.151 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.151 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.152 I llm_load_print_meta: n_ff             = 16384
0.00.289.152 I llm_load_print_meta: n_expert         = 0
0.00.289.153 I llm_load_print_meta: n_expert_used    = 0
0.00.289.153 I llm_load_print_meta: causal attn      = 1
0.00.289.153 I llm_load_print_meta: pooling type     = 0
0.00.289.153 I llm_load_print_meta: rope type        = 2
0.00.289.154 I llm_load_print_meta: rope scaling     = linear
0.00.289.155 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.156 I llm_load_print_meta: freq_scale_train = 1
0.00.289.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.157 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.158 I llm_load_print_meta: model type       = 2B
0.00.289.159 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.160 I llm_load_print_meta: model params     = 2.51 B
0.00.289.160 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.161 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.162 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.163 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.163 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.164 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.164 I llm_load_print_meta: max token length = 93
0.00.348.658 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.348.666 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.348.667 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.348.667 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.348.668 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.348.668 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.353.744 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.750 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.751 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.751 I llama_new_context_with_model: n_batch       = 2048
0.00.353.751 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.752 I llama_new_context_with_model: flash_attn    = 0
0.00.353.754 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.755 I llama_new_context_with_model: freq_scale    = 1
0.00.353.756 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.138 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.152 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.250 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.581 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.589 I llama_new_context_with_model: graph nodes  = 601
0.00.370.590 I llama_new_context_with_model: graph splits = 1
0.00.370.592 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.982 I main: llama threadpool init, n_threads = 4
0.00.447.998 I 
0.00.448.074 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.078 I 
0.00.448.124 I sampler seed: 1471638618
0.00.448.134 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.137 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.146 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.146 I 
 fufilling is an example of which type of fallacy?

a. Ad hominem
b. Fallacious reasoning
c. Post hoc ergo propter hoc


0.02.130.244 I llama_perf_sampler_print:    sampling time =       5.21 ms /    33 runs   (    0.16 ms per token,  6330.33 tokens per second)
0.02.130.248 I llama_perf_context_print:        load time =     447.59 ms
0.02.130.249 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.130.250 I llama_perf_context_print:        eval time =    1662.88 ms /    32 runs   (   51.96 ms per token,    19.24 tokens per second)
0.02.130.251 I llama_perf_context_print:       total time =    1682.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4172 (50d5cecb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40251.76 ms
main:    total time = 40251.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.633 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.857 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.021.552 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.570 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.578 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.582 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.583 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.583 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.584 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.584 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.585 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.590 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.591 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.592 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.211 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.178 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.187 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.188 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.188 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.189 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.190 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.191 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.194 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.195 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.199 I llama_model_loader: - type  f32:   37 tensors
0.00.133.201 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.202 I llama_model_loader: - type q6_K:   19 tensors
0.00.222.297 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.630 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.267 I llm_load_vocab: special tokens cache size = 5
0.00.295.513 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.540 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.541 I llm_load_print_meta: arch             = gemma
0.00.295.541 I llm_load_print_meta: vocab type       = SPM
0.00.295.542 I llm_load_print_meta: n_vocab          = 256000
0.00.295.542 I llm_load_print_meta: n_merges         = 0
0.00.295.543 I llm_load_print_meta: vocab_only       = 0
0.00.295.543 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.543 I llm_load_print_meta: n_embd           = 2048
0.00.295.544 I llm_load_print_meta: n_layer          = 18
0.00.295.556 I llm_load_print_meta: n_head           = 8
0.00.295.557 I llm_load_print_meta: n_head_kv        = 1
0.00.295.557 I llm_load_print_meta: n_rot            = 256
0.00.295.558 I llm_load_print_meta: n_swa            = 0
0.00.295.558 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.558 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.559 I llm_load_print_meta: n_gqa            = 8
0.00.295.560 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.561 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.562 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.563 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.564 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.564 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.565 I llm_load_print_meta: n_ff             = 16384
0.00.295.565 I llm_load_print_meta: n_expert         = 0
0.00.295.566 I llm_load_print_meta: n_expert_used    = 0
0.00.295.566 I llm_load_print_meta: causal attn      = 1
0.00.295.566 I llm_load_print_meta: pooling type     = 0
0.00.295.566 I llm_load_print_meta: rope type        = 2
0.00.295.567 I llm_load_print_meta: rope scaling     = linear
0.00.295.568 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.569 I llm_load_print_meta: freq_scale_train = 1
0.00.295.569 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.569 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.570 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.570 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.570 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.570 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.571 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.571 I llm_load_print_meta: model type       = 2B
0.00.295.572 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.295.572 I llm_load_print_meta: model params     = 2.51 B
0.00.295.573 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.295.574 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.574 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.574 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.575 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.575 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.575 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.576 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.577 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.577 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.578 I llm_load_print_meta: max token length = 93
0.00.350.635 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.355.869 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.875 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.875 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.876 I llama_new_context_with_model: n_batch       = 2048
0.00.355.876 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.877 I llama_new_context_with_model: flash_attn    = 0
0.00.355.880 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.881 I llama_new_context_with_model: freq_scale    = 1
0.00.355.881 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.675 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.690 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.779 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.014 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.021 I llama_new_context_with_model: graph nodes  = 601
0.00.372.021 I llama_new_context_with_model: graph splits = 1
0.00.372.024 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.941 I main: llama threadpool init, n_threads = 4
0.00.447.956 I 
0.00.448.036 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.041 I 
0.00.448.093 I sampler seed: 2273587446
0.00.448.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.107 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.119 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.122 I 
 strick in the picture. 

Answer: The flamingo.

A flamingo is a wading bird with long legs and a long neck, often with a pink plumage

0.02.105.003 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6569.78 tokens per second)
0.02.105.007 I llama_perf_context_print:        load time =     447.06 ms
0.02.105.008 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.105.010 I llama_perf_context_print:        eval time =    1637.49 ms /    32 runs   (   51.17 ms per token,    19.54 tokens per second)
0.02.105.011 I llama_perf_context_print:       total time =    1657.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.615s
user	10m25.670s
sys	0m7.101s
