+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.915 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.930 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.026 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.039 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.042 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.051 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.058 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.059 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.060 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.062 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.063 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.076 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.077 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.079 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.080 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.081 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.163 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.325 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.314 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.325 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.330 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.331 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.333 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.338 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.341 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.342 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.344 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.352 I llama_model_loader: - type  f32:   37 tensors
0.00.350.355 I llama_model_loader: - type q8_0:  127 tensors
0.00.606.094 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.675.146 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.676.231 I llm_load_vocab: special tokens cache size = 5
0.00.858.162 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.240 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.241 I llm_load_print_meta: arch             = gemma
0.00.858.241 I llm_load_print_meta: vocab type       = SPM
0.00.858.243 I llm_load_print_meta: n_vocab          = 256000
0.00.858.245 I llm_load_print_meta: n_merges         = 0
0.00.858.246 I llm_load_print_meta: vocab_only       = 0
0.00.858.246 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.247 I llm_load_print_meta: n_embd           = 2048
0.00.858.247 I llm_load_print_meta: n_layer          = 18
0.00.858.312 I llm_load_print_meta: n_head           = 8
0.00.858.318 I llm_load_print_meta: n_head_kv        = 1
0.00.858.319 I llm_load_print_meta: n_rot            = 256
0.00.858.319 I llm_load_print_meta: n_swa            = 0
0.00.858.320 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.320 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.324 I llm_load_print_meta: n_gqa            = 8
0.00.858.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.334 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.335 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.337 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.337 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.338 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.339 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.344 I llm_load_print_meta: n_ff             = 16384
0.00.858.344 I llm_load_print_meta: n_expert         = 0
0.00.858.345 I llm_load_print_meta: n_expert_used    = 0
0.00.858.345 I llm_load_print_meta: causal attn      = 1
0.00.858.346 I llm_load_print_meta: pooling type     = 0
0.00.858.346 I llm_load_print_meta: rope type        = 2
0.00.858.347 I llm_load_print_meta: rope scaling     = linear
0.00.858.348 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.349 I llm_load_print_meta: freq_scale_train = 1
0.00.858.349 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.349 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.351 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.351 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.351 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.363 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.364 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.364 I llm_load_print_meta: model type       = 2B
0.00.858.365 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.366 I llm_load_print_meta: model params     = 2.51 B
0.00.858.391 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.392 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.393 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.402 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.403 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.403 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.409 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.411 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.412 I llm_load_print_meta: max token length = 93
0.00.959.249 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.959.259 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.959.261 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.959.261 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.959.262 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.959.263 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.965.479 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.487 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.487 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.488 I llama_new_context_with_model: n_batch       = 2048
0.00.965.488 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.489 I llama_new_context_with_model: flash_attn    = 0
0.00.965.492 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.493 I llama_new_context_with_model: freq_scale    = 1
0.00.965.493 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.981.447 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.981.493 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.981.627 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.984.204 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.984.208 I llama_new_context_with_model: graph nodes  = 601
0.00.984.208 I llama_new_context_with_model: graph splits = 1
0.00.984.231 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.595.843 I main: llama threadpool init, n_threads = 4
0.01.595.859 I 
0.01.595.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.595.981 I 
0.01.596.219 I sampler seed: 4157846274
0.01.596.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.596.243 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.596.247 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.596.247 I 
 increasities with the following steps:

1. Identify the variable that represents the number of increasities.
2. Identify the variable that represents the probability of

0.15.282.645 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.36 tokens per second)
0.15.282.663 I llama_perf_context_print:        load time =    1594.89 ms
0.15.282.664 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.282.666 I llama_perf_context_print:        eval time =   13598.03 ms /    32 runs   (  424.94 ms per token,     2.35 tokens per second)
0.15.282.667 I llama_perf_context_print:       total time =   13686.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.721 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.963 I main: llama backend init
0.00.000.972 I main: load the model and apply lora adapter, if any
0.00.024.265 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.400 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.417 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.423 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.434 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.438 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.456 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.461 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.463 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.467 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.026 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.083 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.104 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.118 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.120 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.121 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.122 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.124 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.125 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.130 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.133 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.134 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.357.136 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.145 I llama_model_loader: - type  f32:   37 tensors
0.00.357.147 I llama_model_loader: - type q8_0:  127 tensors
0.00.610.424 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.681.098 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.682.117 I llm_load_vocab: special tokens cache size = 5
0.00.885.475 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.885.558 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.885.563 I llm_load_print_meta: arch             = gemma
0.00.885.564 I llm_load_print_meta: vocab type       = SPM
0.00.885.565 I llm_load_print_meta: n_vocab          = 256000
0.00.885.567 I llm_load_print_meta: n_merges         = 0
0.00.885.569 I llm_load_print_meta: vocab_only       = 0
0.00.885.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.885.570 I llm_load_print_meta: n_embd           = 2048
0.00.885.570 I llm_load_print_meta: n_layer          = 18
0.00.885.641 I llm_load_print_meta: n_head           = 8
0.00.885.652 I llm_load_print_meta: n_head_kv        = 1
0.00.885.652 I llm_load_print_meta: n_rot            = 256
0.00.885.653 I llm_load_print_meta: n_swa            = 0
0.00.885.653 I llm_load_print_meta: n_embd_head_k    = 256
0.00.885.654 I llm_load_print_meta: n_embd_head_v    = 256
0.00.885.661 I llm_load_print_meta: n_gqa            = 8
0.00.885.668 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.885.678 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.885.680 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.885.682 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.885.683 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.885.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.885.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.885.692 I llm_load_print_meta: n_ff             = 16384
0.00.885.693 I llm_load_print_meta: n_expert         = 0
0.00.885.694 I llm_load_print_meta: n_expert_used    = 0
0.00.885.695 I llm_load_print_meta: causal attn      = 1
0.00.885.696 I llm_load_print_meta: pooling type     = 0
0.00.885.697 I llm_load_print_meta: rope type        = 2
0.00.885.697 I llm_load_print_meta: rope scaling     = linear
0.00.885.699 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.885.701 I llm_load_print_meta: freq_scale_train = 1
0.00.885.701 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.885.702 I llm_load_print_meta: rope_finetuned   = unknown
0.00.885.711 I llm_load_print_meta: ssm_d_conv       = 0
0.00.885.712 I llm_load_print_meta: ssm_d_inner      = 0
0.00.885.712 I llm_load_print_meta: ssm_d_state      = 0
0.00.885.713 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.885.714 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.885.714 I llm_load_print_meta: model type       = 2B
0.00.885.716 I llm_load_print_meta: model ftype      = Q8_0
0.00.885.717 I llm_load_print_meta: model params     = 2.51 B
0.00.885.727 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.885.728 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.885.730 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.885.731 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.885.731 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.885.732 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.885.733 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.885.734 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.885.740 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.885.742 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.885.743 I llm_load_print_meta: max token length = 93
0.00.982.272 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.988.771 I llama_new_context_with_model: n_seq_max     = 1
0.00.988.780 I llama_new_context_with_model: n_ctx         = 4096
0.00.988.780 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.988.780 I llama_new_context_with_model: n_batch       = 2048
0.00.988.781 I llama_new_context_with_model: n_ubatch      = 512
0.00.988.781 I llama_new_context_with_model: flash_attn    = 0
0.00.988.785 I llama_new_context_with_model: freq_base     = 10000.0
0.00.988.786 I llama_new_context_with_model: freq_scale    = 1
0.00.988.787 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.004.380 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.004.423 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.004.562 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.007.166 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.007.171 I llama_new_context_with_model: graph nodes  = 601
0.01.007.171 I llama_new_context_with_model: graph splits = 1
0.01.007.198 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.645.799 I main: llama threadpool init, n_threads = 4
0.01.645.819 I 
0.01.645.952 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.645.955 I 
0.01.646.205 I sampler seed: 281214497
0.01.646.223 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.646.236 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.646.239 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.646.239 I 
 increasities.

I am unable to access the requested content. It appears to be blocked or restricted.

I apologize for any inconvenience this may cause. [end of text]


0.15.488.113 I llama_perf_sampler_print:    sampling time =      49.42 ms /    33 runs   (    1.50 ms per token,   667.73 tokens per second)
0.15.488.129 I llama_perf_context_print:        load time =    1644.71 ms
0.15.488.131 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.488.132 I llama_perf_context_print:        eval time =   13751.22 ms /    32 runs   (  429.73 ms per token,     2.33 tokens per second)
0.15.488.133 I llama_perf_context_print:       total time =   13842.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.023.906 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.916 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.011 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.029 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.037 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.041 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.042 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.044 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.048 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.049 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.060 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.064 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.066 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.068 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.459 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.837 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.850 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.851 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.853 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.854 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.856 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.857 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.861 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.862 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.865 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.867 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.876 I llama_model_loader: - type  f32:   37 tensors
0.00.351.878 I llama_model_loader: - type q8_0:  127 tensors
0.00.606.879 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.674.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.675.584 I llm_load_vocab: special tokens cache size = 5
0.00.874.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.874.362 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.874.363 I llm_load_print_meta: arch             = gemma
0.00.874.364 I llm_load_print_meta: vocab type       = SPM
0.00.874.365 I llm_load_print_meta: n_vocab          = 256000
0.00.874.367 I llm_load_print_meta: n_merges         = 0
0.00.874.368 I llm_load_print_meta: vocab_only       = 0
0.00.874.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.874.368 I llm_load_print_meta: n_embd           = 2048
0.00.874.369 I llm_load_print_meta: n_layer          = 18
0.00.874.433 I llm_load_print_meta: n_head           = 8
0.00.874.440 I llm_load_print_meta: n_head_kv        = 1
0.00.874.441 I llm_load_print_meta: n_rot            = 256
0.00.874.441 I llm_load_print_meta: n_swa            = 0
0.00.874.442 I llm_load_print_meta: n_embd_head_k    = 256
0.00.874.442 I llm_load_print_meta: n_embd_head_v    = 256
0.00.874.446 I llm_load_print_meta: n_gqa            = 8
0.00.874.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.456 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.874.457 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.874.459 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.874.460 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.874.460 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.874.461 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.874.465 I llm_load_print_meta: n_ff             = 16384
0.00.874.466 I llm_load_print_meta: n_expert         = 0
0.00.874.466 I llm_load_print_meta: n_expert_used    = 0
0.00.874.466 I llm_load_print_meta: causal attn      = 1
0.00.874.467 I llm_load_print_meta: pooling type     = 0
0.00.874.467 I llm_load_print_meta: rope type        = 2
0.00.874.467 I llm_load_print_meta: rope scaling     = linear
0.00.874.469 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.874.470 I llm_load_print_meta: freq_scale_train = 1
0.00.874.470 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.874.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.874.471 I llm_load_print_meta: ssm_d_conv       = 0
0.00.874.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.874.471 I llm_load_print_meta: ssm_d_state      = 0
0.00.874.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.874.472 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.874.472 I llm_load_print_meta: model type       = 2B
0.00.874.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.874.474 I llm_load_print_meta: model params     = 2.51 B
0.00.874.483 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.874.484 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.874.485 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.874.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.874.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.874.513 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.874.513 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.874.514 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.874.520 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.874.521 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.874.521 I llm_load_print_meta: max token length = 93
0.00.951.228 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.951.240 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.951.241 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.951.241 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.951.242 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.951.243 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.957.447 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.457 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.457 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.458 I llama_new_context_with_model: n_batch       = 2048
0.00.957.458 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.459 I llama_new_context_with_model: flash_attn    = 0
0.00.957.462 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.463 I llama_new_context_with_model: freq_scale    = 1
0.00.957.464 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.973.054 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.098 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.226 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.975.787 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.975.791 I llama_new_context_with_model: graph nodes  = 601
0.00.975.792 I llama_new_context_with_model: graph splits = 1
0.00.975.814 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.593 I main: llama threadpool init, n_threads = 4
0.01.587.608 I 
0.01.587.720 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.587.724 I 
0.01.587.958 I sampler seed: 1347580811
0.01.587.974 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.995 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.996 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.999 I 
 increasities to their husbands or wives.

It is a common misconception that such behavior is acceptable in all situations. It is not acceptable in any situation. [end of text]


0.15.176.697 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.66 tokens per second)
0.15.176.700 I llama_perf_context_print:        load time =    1586.58 ms
0.15.176.702 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.176.715 I llama_perf_context_print:        eval time =   13498.62 ms /    32 runs   (  421.83 ms per token,     2.37 tokens per second)
0.15.176.717 I llama_perf_context_print:       total time =   13589.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.866 I main: load the model and apply lora adapter, if any
0.00.023.963 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.975 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.065 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.078 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.080 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.086 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.090 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.091 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.093 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.094 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.095 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.102 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.104 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.105 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.336 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.426 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.494 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.504 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.506 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.507 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.510 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.511 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.515 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.517 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.518 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.520 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.356.521 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.533 I llama_model_loader: - type  f32:   37 tensors
0.00.356.535 I llama_model_loader: - type q8_0:  127 tensors
0.00.594.155 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.659.581 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.660.519 I llm_load_vocab: special tokens cache size = 5
0.00.859.981 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.860.059 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.860.060 I llm_load_print_meta: arch             = gemma
0.00.860.061 I llm_load_print_meta: vocab type       = SPM
0.00.860.062 I llm_load_print_meta: n_vocab          = 256000
0.00.860.064 I llm_load_print_meta: n_merges         = 0
0.00.860.065 I llm_load_print_meta: vocab_only       = 0
0.00.860.065 I llm_load_print_meta: n_ctx_train      = 8192
0.00.860.066 I llm_load_print_meta: n_embd           = 2048
0.00.860.066 I llm_load_print_meta: n_layer          = 18
0.00.860.133 I llm_load_print_meta: n_head           = 8
0.00.860.140 I llm_load_print_meta: n_head_kv        = 1
0.00.860.141 I llm_load_print_meta: n_rot            = 256
0.00.860.141 I llm_load_print_meta: n_swa            = 0
0.00.860.169 I llm_load_print_meta: n_embd_head_k    = 256
0.00.860.170 I llm_load_print_meta: n_embd_head_v    = 256
0.00.860.176 I llm_load_print_meta: n_gqa            = 8
0.00.860.180 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.860.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.860.192 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.860.194 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.860.195 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.860.195 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.860.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.860.202 I llm_load_print_meta: n_ff             = 16384
0.00.860.202 I llm_load_print_meta: n_expert         = 0
0.00.860.203 I llm_load_print_meta: n_expert_used    = 0
0.00.860.204 I llm_load_print_meta: causal attn      = 1
0.00.860.204 I llm_load_print_meta: pooling type     = 0
0.00.860.205 I llm_load_print_meta: rope type        = 2
0.00.860.205 I llm_load_print_meta: rope scaling     = linear
0.00.860.213 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.860.214 I llm_load_print_meta: freq_scale_train = 1
0.00.860.214 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.860.214 I llm_load_print_meta: rope_finetuned   = unknown
0.00.860.215 I llm_load_print_meta: ssm_d_conv       = 0
0.00.860.215 I llm_load_print_meta: ssm_d_inner      = 0
0.00.860.215 I llm_load_print_meta: ssm_d_state      = 0
0.00.860.216 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.860.216 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.860.216 I llm_load_print_meta: model type       = 2B
0.00.860.217 I llm_load_print_meta: model ftype      = Q8_0
0.00.860.218 I llm_load_print_meta: model params     = 2.51 B
0.00.860.227 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.860.228 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.860.229 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.860.230 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.860.230 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.860.231 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.860.240 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.860.240 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.860.247 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.860.249 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.860.250 I llm_load_print_meta: max token length = 93
0.00.933.354 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.933.367 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.939.489 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.498 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.498 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.499 I llama_new_context_with_model: n_batch       = 2048
0.00.939.499 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.500 I llama_new_context_with_model: flash_attn    = 0
0.00.939.504 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.505 I llama_new_context_with_model: freq_scale    = 1
0.00.939.506 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.630 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.671 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.805 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.526 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.529 I llama_new_context_with_model: graph nodes  = 601
0.00.958.530 I llama_new_context_with_model: graph splits = 1
0.00.958.555 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.570.869 I main: llama threadpool init, n_threads = 4
0.01.570.885 I 
0.01.571.004 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.571.008 I 
0.01.571.244 I sampler seed: 1950429450
0.01.571.258 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.268 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.269 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.269 I 
 increasities as a means of expressing oneself, or as a way to feel connected to others?

**A. To express oneself**
**B. To

0.15.374.223 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.65 tokens per second)
0.15.374.226 I llama_perf_context_print:        load time =    1569.91 ms
0.15.374.238 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.374.241 I llama_perf_context_print:        eval time =   13714.49 ms /    32 runs   (  428.58 ms per token,     2.33 tokens per second)
0.15.374.242 I llama_perf_context_print:       total time =   13803.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m11.331s
user	3m53.619s
sys	0m9.612s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4172 (50d5cecb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186520.49 ms
main:    total time = 186520.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.707 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.910 I main: llama backend init
0.00.000.918 I main: load the model and apply lora adapter, if any
0.00.023.792 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.806 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.907 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.922 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.934 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.936 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.937 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.938 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.939 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.952 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.954 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.955 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.957 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.378 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.266 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.255 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.268 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.269 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.270 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.272 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.275 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.298 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.300 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.301 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.303 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.313 I llama_model_loader: - type  f32:   37 tensors
0.00.349.315 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.316 I llama_model_loader: - type q6_K:   19 tensors
0.00.585.111 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.033 I llm_load_vocab: special tokens cache size = 5
0.00.837.534 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.604 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.608 I llm_load_print_meta: arch             = gemma
0.00.837.609 I llm_load_print_meta: vocab type       = SPM
0.00.837.610 I llm_load_print_meta: n_vocab          = 256000
0.00.837.612 I llm_load_print_meta: n_merges         = 0
0.00.837.612 I llm_load_print_meta: vocab_only       = 0
0.00.837.612 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.613 I llm_load_print_meta: n_embd           = 2048
0.00.837.613 I llm_load_print_meta: n_layer          = 18
0.00.837.679 I llm_load_print_meta: n_head           = 8
0.00.837.689 I llm_load_print_meta: n_head_kv        = 1
0.00.837.690 I llm_load_print_meta: n_rot            = 256
0.00.837.690 I llm_load_print_meta: n_swa            = 0
0.00.837.690 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.691 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.696 I llm_load_print_meta: n_gqa            = 8
0.00.837.701 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.706 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.707 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.711 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.711 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.712 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.712 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.717 I llm_load_print_meta: n_ff             = 16384
0.00.837.717 I llm_load_print_meta: n_expert         = 0
0.00.837.718 I llm_load_print_meta: n_expert_used    = 0
0.00.837.718 I llm_load_print_meta: causal attn      = 1
0.00.837.718 I llm_load_print_meta: pooling type     = 0
0.00.837.719 I llm_load_print_meta: rope type        = 2
0.00.837.719 I llm_load_print_meta: rope scaling     = linear
0.00.837.721 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.722 I llm_load_print_meta: freq_scale_train = 1
0.00.837.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.723 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.725 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.725 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.726 I llm_load_print_meta: model type       = 2B
0.00.837.727 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.837.727 I llm_load_print_meta: model params     = 2.51 B
0.00.837.736 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.837.737 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.738 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.739 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.739 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.740 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.742 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.749 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.749 I llm_load_print_meta: max token length = 93
0.00.898.855 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.898.867 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.898.868 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.898.868 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.898.869 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.898.870 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.904.855 I llama_new_context_with_model: n_seq_max     = 1
0.00.904.862 I llama_new_context_with_model: n_ctx         = 4096
0.00.904.862 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.904.863 I llama_new_context_with_model: n_batch       = 2048
0.00.904.863 I llama_new_context_with_model: n_ubatch      = 512
0.00.904.864 I llama_new_context_with_model: flash_attn    = 0
0.00.904.866 I llama_new_context_with_model: freq_base     = 10000.0
0.00.904.867 I llama_new_context_with_model: freq_scale    = 1
0.00.904.868 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.919.700 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.919.740 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.919.874 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.922.422 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.922.426 I llama_new_context_with_model: graph nodes  = 601
0.00.922.426 I llama_new_context_with_model: graph splits = 1
0.00.922.449 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.505.684 I main: llama threadpool init, n_threads = 4
0.01.505.701 I 
0.01.505.812 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.505.816 I 
0.01.506.054 I sampler seed: 1503944538
0.01.506.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.506.077 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.506.080 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.506.081 I 
 secon.

I cannot find the requested information in the provided context. Please provide additional context or specify the information you are looking for. [end of text]


0.11.253.843 I llama_perf_sampler_print:    sampling time =      42.85 ms /    29 runs   (    1.48 ms per token,   676.72 tokens per second)
0.11.253.846 I llama_perf_context_print:        load time =    1504.65 ms
0.11.253.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.253.872 I llama_perf_context_print:        eval time =    9669.47 ms /    28 runs   (  345.34 ms per token,     2.90 tokens per second)
0.11.253.873 I llama_perf_context_print:       total time =    9748.17 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4172 (50d5cecb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186341.96 ms
main:    total time = 186341.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.718 I build: 4172 (50d5cecb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.924 I main: llama backend init
0.00.000.934 I main: load the model and apply lora adapter, if any
0.00.023.370 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.479 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.496 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.501 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.509 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.510 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.512 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.513 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.515 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.516 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.524 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.525 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.526 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.528 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.529 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.021 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.945 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.828 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.837 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.839 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.840 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.841 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.843 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.844 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.849 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.850 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.859 I llama_model_loader: - type  f32:   37 tensors
0.00.352.861 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.862 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.518 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.268 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.243 I llm_load_vocab: special tokens cache size = 5
0.00.842.356 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.434 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.435 I llm_load_print_meta: arch             = gemma
0.00.842.436 I llm_load_print_meta: vocab type       = SPM
0.00.842.437 I llm_load_print_meta: n_vocab          = 256000
0.00.842.439 I llm_load_print_meta: n_merges         = 0
0.00.842.440 I llm_load_print_meta: vocab_only       = 0
0.00.842.440 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.441 I llm_load_print_meta: n_embd           = 2048
0.00.842.441 I llm_load_print_meta: n_layer          = 18
0.00.842.505 I llm_load_print_meta: n_head           = 8
0.00.842.513 I llm_load_print_meta: n_head_kv        = 1
0.00.842.514 I llm_load_print_meta: n_rot            = 256
0.00.842.514 I llm_load_print_meta: n_swa            = 0
0.00.842.514 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.519 I llm_load_print_meta: n_gqa            = 8
0.00.842.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.529 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.530 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.539 I llm_load_print_meta: n_ff             = 16384
0.00.842.540 I llm_load_print_meta: n_expert         = 0
0.00.842.540 I llm_load_print_meta: n_expert_used    = 0
0.00.842.541 I llm_load_print_meta: causal attn      = 1
0.00.842.542 I llm_load_print_meta: pooling type     = 0
0.00.842.542 I llm_load_print_meta: rope type        = 2
0.00.842.554 I llm_load_print_meta: rope scaling     = linear
0.00.842.561 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.562 I llm_load_print_meta: freq_scale_train = 1
0.00.842.563 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.567 I llm_load_print_meta: model type       = 2B
0.00.842.569 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.842.569 I llm_load_print_meta: model params     = 2.51 B
0.00.842.577 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.842.577 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.593 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.594 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.595 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.595 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.600 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.607 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.609 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.609 I llm_load_print_meta: max token length = 93
0.00.899.846 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.905.778 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.785 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.786 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.786 I llama_new_context_with_model: n_batch       = 2048
0.00.905.787 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.787 I llama_new_context_with_model: flash_attn    = 0
0.00.905.789 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.790 I llama_new_context_with_model: freq_scale    = 1
0.00.905.791 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.921.753 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.921.796 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.921.921 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.924.549 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.924.553 I llama_new_context_with_model: graph nodes  = 601
0.00.924.553 I llama_new_context_with_model: graph splits = 1
0.00.924.575 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.507.499 I main: llama threadpool init, n_threads = 4
0.01.507.515 I 
0.01.507.630 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.507.635 I 
0.01.507.869 I sampler seed: 1468492665
0.01.507.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.507.895 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.507.895 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.507.896 I 
 fufilling, a heartwarming and humorous tale about two unlikely friends.

In the quaint town of Willow Creek, lived a quirky librarian named Barnaby and a grumpy

0.12.648.654 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.51 tokens per second)
0.12.648.668 I llama_perf_context_print:        load time =    1506.45 ms
0.12.648.670 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.648.673 I llama_perf_context_print:        eval time =   11051.82 ms /    32 runs   (  345.37 ms per token,     2.90 tokens per second)
0.12.648.674 I llama_perf_context_print:       total time =   11141.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.826s
user	46m38.514s
sys	0m6.623s
