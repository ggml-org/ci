+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4309 (973f328b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.024.142 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.155 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.269 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.271 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.279 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.281 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.282 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.284 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.285 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.286 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.297 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.300 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.301 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.302 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.236.233 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.340.006 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.481 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.493 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.496 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.497 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.507 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.509 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.511 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.364.513 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.523 I llama_model_loader: - type  f32:   37 tensors
0.00.364.526 I llama_model_loader: - type q8_0:  127 tensors
0.00.608.802 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.672.509 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.490 I llm_load_vocab: special tokens cache size = 5
0.00.872.386 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.465 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.466 I llm_load_print_meta: arch             = gemma
0.00.872.467 I llm_load_print_meta: vocab type       = SPM
0.00.872.468 I llm_load_print_meta: n_vocab          = 256000
0.00.872.471 I llm_load_print_meta: n_merges         = 0
0.00.872.471 I llm_load_print_meta: vocab_only       = 0
0.00.872.472 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.472 I llm_load_print_meta: n_embd           = 2048
0.00.872.472 I llm_load_print_meta: n_layer          = 18
0.00.872.537 I llm_load_print_meta: n_head           = 8
0.00.872.545 I llm_load_print_meta: n_head_kv        = 1
0.00.872.545 I llm_load_print_meta: n_rot            = 256
0.00.872.546 I llm_load_print_meta: n_swa            = 0
0.00.872.546 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.546 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.551 I llm_load_print_meta: n_gqa            = 8
0.00.872.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.561 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.562 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.563 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.564 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.565 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.566 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.571 I llm_load_print_meta: n_ff             = 16384
0.00.872.571 I llm_load_print_meta: n_expert         = 0
0.00.872.572 I llm_load_print_meta: n_expert_used    = 0
0.00.872.577 I llm_load_print_meta: causal attn      = 1
0.00.872.577 I llm_load_print_meta: pooling type     = 0
0.00.872.577 I llm_load_print_meta: rope type        = 2
0.00.872.578 I llm_load_print_meta: rope scaling     = linear
0.00.872.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.580 I llm_load_print_meta: freq_scale_train = 1
0.00.872.580 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.581 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.584 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.585 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.585 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.585 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.872.586 I llm_load_print_meta: model type       = 2B
0.00.872.587 I llm_load_print_meta: model ftype      = Q8_0
0.00.872.588 I llm_load_print_meta: model params     = 2.51 B
0.00.872.589 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.872.589 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.590 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.590 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.591 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.591 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.599 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.600 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.600 I llm_load_print_meta: max token length = 93
0.00.976.153 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.976.164 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.976.165 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.976.166 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.976.167 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.976.168 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.982.215 I llama_new_context_with_model: n_seq_max     = 1
0.00.982.224 I llama_new_context_with_model: n_ctx         = 4096
0.00.982.225 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.982.225 I llama_new_context_with_model: n_batch       = 2048
0.00.982.225 I llama_new_context_with_model: n_ubatch      = 512
0.00.982.226 I llama_new_context_with_model: flash_attn    = 0
0.00.982.230 I llama_new_context_with_model: freq_base     = 10000.0
0.00.982.230 I llama_new_context_with_model: freq_scale    = 1
0.00.982.232 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.997.341 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.997.386 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.997.507 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.000.210 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.000.214 I llama_new_context_with_model: graph nodes  = 601
0.01.000.214 I llama_new_context_with_model: graph splits = 1
0.01.000.238 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.608.666 I main: llama threadpool init, n_threads = 4
0.01.608.684 I 
0.01.608.803 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.608.807 I 
0.01.609.051 I sampler seed: 2531399455
0.01.609.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.609.079 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.609.079 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.609.080 I 
 increasities.

I cannot answer this question as it contains inappropriate content. [end of text]


0.08.407.140 I llama_perf_sampler_print:    sampling time =      24.68 ms /    17 runs   (    1.45 ms per token,   688.87 tokens per second)
0.08.407.143 I llama_perf_context_print:        load time =    1607.68 ms
0.08.407.144 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.407.145 I llama_perf_context_print:        eval time =    6752.91 ms /    16 runs   (  422.06 ms per token,     2.37 tokens per second)
0.08.407.146 I llama_perf_context_print:       total time =    6798.48 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.696 I build: 4309 (973f328b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.913 I main: llama backend init
0.00.000.921 I main: load the model and apply lora adapter, if any
0.00.023.637 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.752 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.769 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.775 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.783 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.789 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.791 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.794 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.798 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.806 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.821 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.827 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.837 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.843 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.845 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.767 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.917 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.932 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.934 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.936 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.938 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.946 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.948 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.951 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.357.954 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.966 I llama_model_loader: - type  f32:   37 tensors
0.00.357.969 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.788 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.357 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.345 I llm_load_vocab: special tokens cache size = 5
0.00.844.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.184 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.189 I llm_load_print_meta: arch             = gemma
0.00.844.190 I llm_load_print_meta: vocab type       = SPM
0.00.844.191 I llm_load_print_meta: n_vocab          = 256000
0.00.844.194 I llm_load_print_meta: n_merges         = 0
0.00.844.194 I llm_load_print_meta: vocab_only       = 0
0.00.844.195 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.195 I llm_load_print_meta: n_embd           = 2048
0.00.844.196 I llm_load_print_meta: n_layer          = 18
0.00.844.270 I llm_load_print_meta: n_head           = 8
0.00.844.281 I llm_load_print_meta: n_head_kv        = 1
0.00.844.281 I llm_load_print_meta: n_rot            = 256
0.00.844.282 I llm_load_print_meta: n_swa            = 0
0.00.844.282 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.283 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.289 I llm_load_print_meta: n_gqa            = 8
0.00.844.296 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.303 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.305 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.307 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.308 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.309 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.310 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.316 I llm_load_print_meta: n_ff             = 16384
0.00.844.318 I llm_load_print_meta: n_expert         = 0
0.00.844.319 I llm_load_print_meta: n_expert_used    = 0
0.00.844.320 I llm_load_print_meta: causal attn      = 1
0.00.844.320 I llm_load_print_meta: pooling type     = 0
0.00.844.321 I llm_load_print_meta: rope type        = 2
0.00.844.322 I llm_load_print_meta: rope scaling     = linear
0.00.844.325 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.326 I llm_load_print_meta: freq_scale_train = 1
0.00.844.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.327 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.329 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.330 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.331 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.331 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.332 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.333 I llm_load_print_meta: model type       = 2B
0.00.844.342 I llm_load_print_meta: model ftype      = Q8_0
0.00.844.344 I llm_load_print_meta: model params     = 2.51 B
0.00.844.346 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.844.346 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.348 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.349 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.350 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.351 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.351 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.353 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.360 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.361 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.362 I llm_load_print_meta: max token length = 93
0.00.940.985 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.947.322 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.331 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.331 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.332 I llama_new_context_with_model: n_batch       = 2048
0.00.947.332 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.332 I llama_new_context_with_model: flash_attn    = 0
0.00.947.336 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.337 I llama_new_context_with_model: freq_scale    = 1
0.00.947.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.963.041 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.963.086 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.963.206 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.908 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.912 I llama_new_context_with_model: graph nodes  = 601
0.00.965.912 I llama_new_context_with_model: graph splits = 1
0.00.965.936 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.574.597 I main: llama threadpool init, n_threads = 4
0.01.574.615 I 
0.01.574.749 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.574.753 I 
0.01.575.003 I sampler seed: 2291080641
0.01.575.017 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.030 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.031 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.031 I 
 increably. [end of text]


0.03.272.297 I llama_perf_sampler_print:    sampling time =       6.28 ms /     5 runs   (    1.26 ms per token,   795.67 tokens per second)
0.03.272.302 I llama_perf_context_print:        load time =    1573.57 ms
0.03.272.304 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.272.305 I llama_perf_context_print:        eval time =    1684.78 ms /     4 runs   (  421.19 ms per token,     2.37 tokens per second)
0.03.272.306 I llama_perf_context_print:       total time =    1697.71 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4309 (973f328b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.347 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.357 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.454 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.467 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.470 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.477 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.481 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.483 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.485 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.488 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.491 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.504 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.510 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.512 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.514 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.516 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.078 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.032 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.611 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.622 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.623 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.625 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.628 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.629 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.633 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.635 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.637 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.638 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.357.640 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.648 I llama_model_loader: - type  f32:   37 tensors
0.00.357.650 I llama_model_loader: - type q8_0:  127 tensors
0.00.600.935 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.666.470 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.667.520 I llm_load_vocab: special tokens cache size = 5
0.00.859.511 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.859.585 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.859.586 I llm_load_print_meta: arch             = gemma
0.00.859.587 I llm_load_print_meta: vocab type       = SPM
0.00.859.588 I llm_load_print_meta: n_vocab          = 256000
0.00.859.591 I llm_load_print_meta: n_merges         = 0
0.00.859.591 I llm_load_print_meta: vocab_only       = 0
0.00.859.592 I llm_load_print_meta: n_ctx_train      = 8192
0.00.859.592 I llm_load_print_meta: n_embd           = 2048
0.00.859.592 I llm_load_print_meta: n_layer          = 18
0.00.859.657 I llm_load_print_meta: n_head           = 8
0.00.859.667 I llm_load_print_meta: n_head_kv        = 1
0.00.859.668 I llm_load_print_meta: n_rot            = 256
0.00.859.669 I llm_load_print_meta: n_swa            = 0
0.00.859.670 I llm_load_print_meta: n_embd_head_k    = 256
0.00.859.671 I llm_load_print_meta: n_embd_head_v    = 256
0.00.859.683 I llm_load_print_meta: n_gqa            = 8
0.00.859.690 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.859.697 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.859.699 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.859.701 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.859.702 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.859.703 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.859.703 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.859.714 I llm_load_print_meta: n_ff             = 16384
0.00.859.715 I llm_load_print_meta: n_expert         = 0
0.00.859.715 I llm_load_print_meta: n_expert_used    = 0
0.00.859.716 I llm_load_print_meta: causal attn      = 1
0.00.859.717 I llm_load_print_meta: pooling type     = 0
0.00.859.718 I llm_load_print_meta: rope type        = 2
0.00.859.721 I llm_load_print_meta: rope scaling     = linear
0.00.859.723 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.859.724 I llm_load_print_meta: freq_scale_train = 1
0.00.859.725 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.859.725 I llm_load_print_meta: rope_finetuned   = unknown
0.00.859.726 I llm_load_print_meta: ssm_d_conv       = 0
0.00.859.726 I llm_load_print_meta: ssm_d_inner      = 0
0.00.859.727 I llm_load_print_meta: ssm_d_state      = 0
0.00.859.728 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.859.728 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.859.729 I llm_load_print_meta: model type       = 2B
0.00.859.731 I llm_load_print_meta: model ftype      = Q8_0
0.00.859.745 I llm_load_print_meta: model params     = 2.51 B
0.00.859.749 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.859.750 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.859.751 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.859.751 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.859.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.859.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.859.769 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.859.770 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.859.778 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.780 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.782 I llm_load_print_meta: max token length = 93
0.00.938.604 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.938.611 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.938.612 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.938.613 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.938.614 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.938.615 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.944.818 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.827 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.827 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.827 I llama_new_context_with_model: n_batch       = 2048
0.00.944.828 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.828 I llama_new_context_with_model: flash_attn    = 0
0.00.944.830 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.831 I llama_new_context_with_model: freq_scale    = 1
0.00.944.832 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.482 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.526 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.347 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.351 I llama_new_context_with_model: graph nodes  = 601
0.00.962.352 I llama_new_context_with_model: graph splits = 1
0.00.962.376 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.572.021 I main: llama threadpool init, n_threads = 4
0.01.572.037 I 
0.01.572.176 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.572.180 I 
0.01.572.430 I sampler seed: 2356849617
0.01.572.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.458 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.462 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.462 I 
 increamically.

The answer is: Ouch!

Ouch! is a common expression used to express pain or discomfort. [end of text]


0.13.227.453 I llama_perf_sampler_print:    sampling time =      42.04 ms /    28 runs   (    1.50 ms per token,   666.08 tokens per second)
0.13.227.457 I llama_perf_context_print:        load time =    1571.05 ms
0.13.227.458 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.227.460 I llama_perf_context_print:        eval time =   11578.40 ms /    27 runs   (  428.83 ms per token,     2.33 tokens per second)
0.13.227.474 I llama_perf_context_print:       total time =   11655.44 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4309 (973f328b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.916 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.926 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.018 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.029 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.038 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.044 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.045 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.046 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.048 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.058 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.059 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.060 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.062 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.063 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.296 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.880 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.882 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.883 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.886 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.887 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.892 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.893 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.895 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.896 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.358.898 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.907 I llama_model_loader: - type  f32:   37 tensors
0.00.358.910 I llama_model_loader: - type q8_0:  127 tensors
0.00.597.098 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.667.802 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.668.797 I llm_load_vocab: special tokens cache size = 5
0.00.868.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.868.215 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.868.216 I llm_load_print_meta: arch             = gemma
0.00.868.217 I llm_load_print_meta: vocab type       = SPM
0.00.868.217 I llm_load_print_meta: n_vocab          = 256000
0.00.868.220 I llm_load_print_meta: n_merges         = 0
0.00.868.220 I llm_load_print_meta: vocab_only       = 0
0.00.868.221 I llm_load_print_meta: n_ctx_train      = 8192
0.00.868.221 I llm_load_print_meta: n_embd           = 2048
0.00.868.221 I llm_load_print_meta: n_layer          = 18
0.00.868.285 I llm_load_print_meta: n_head           = 8
0.00.868.292 I llm_load_print_meta: n_head_kv        = 1
0.00.868.293 I llm_load_print_meta: n_rot            = 256
0.00.868.293 I llm_load_print_meta: n_swa            = 0
0.00.868.293 I llm_load_print_meta: n_embd_head_k    = 256
0.00.868.294 I llm_load_print_meta: n_embd_head_v    = 256
0.00.868.299 I llm_load_print_meta: n_gqa            = 8
0.00.868.304 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.868.309 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.868.310 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.868.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.868.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.868.314 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.868.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.868.320 I llm_load_print_meta: n_ff             = 16384
0.00.868.320 I llm_load_print_meta: n_expert         = 0
0.00.868.321 I llm_load_print_meta: n_expert_used    = 0
0.00.868.333 I llm_load_print_meta: causal attn      = 1
0.00.868.334 I llm_load_print_meta: pooling type     = 0
0.00.868.335 I llm_load_print_meta: rope type        = 2
0.00.868.336 I llm_load_print_meta: rope scaling     = linear
0.00.868.349 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.868.350 I llm_load_print_meta: freq_scale_train = 1
0.00.868.350 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.868.351 I llm_load_print_meta: rope_finetuned   = unknown
0.00.868.356 I llm_load_print_meta: ssm_d_conv       = 0
0.00.868.356 I llm_load_print_meta: ssm_d_inner      = 0
0.00.868.357 I llm_load_print_meta: ssm_d_state      = 0
0.00.868.357 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.868.357 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.868.366 I llm_load_print_meta: model type       = 2B
0.00.868.368 I llm_load_print_meta: model ftype      = Q8_0
0.00.868.369 I llm_load_print_meta: model params     = 2.51 B
0.00.868.370 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.868.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.868.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.868.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.868.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.868.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.868.374 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.868.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.868.381 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.868.382 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.868.383 I llm_load_print_meta: max token length = 93
0.00.941.993 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.942.002 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.947.942 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.950 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.950 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.950 I llama_new_context_with_model: n_batch       = 2048
0.00.947.951 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.951 I llama_new_context_with_model: flash_attn    = 0
0.00.947.953 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.954 I llama_new_context_with_model: freq_scale    = 1
0.00.947.955 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.963.860 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.963.904 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.032 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.966.720 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.966.725 I llama_new_context_with_model: graph nodes  = 601
0.00.966.725 I llama_new_context_with_model: graph splits = 1
0.00.966.746 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.846 I main: llama threadpool init, n_threads = 4
0.01.575.864 I 
0.01.575.989 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.575.993 I 
0.01.576.235 I sampler seed: 3977760467
0.01.576.250 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.260 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.262 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.262 I 
 increasels, the first of their kind to be bred in captivity. [end of text]


0.07.945.040 I llama_perf_sampler_print:    sampling time =      23.10 ms /    16 runs   (    1.44 ms per token,   692.67 tokens per second)
0.07.945.043 I llama_perf_context_print:        load time =    1574.89 ms
0.07.945.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.945.058 I llama_perf_context_print:        eval time =    6326.13 ms /    15 runs   (  421.74 ms per token,     2.37 tokens per second)
0.07.945.059 I llama_perf_context_print:       total time =    6369.20 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m42.755s
user	1m59.847s
sys	0m9.499s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4309 (973f328b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185924.07 ms
main:    total time = 185924.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4309 (973f328b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.422 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.435 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.534 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.547 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.549 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.556 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.560 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.561 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.563 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.564 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.565 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.576 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.577 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.579 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.580 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.581 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.690 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.872 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.303 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.311 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.313 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.314 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.316 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.317 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.319 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.322 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.324 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.326 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.327 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.328 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.337 I llama_model_loader: - type  f32:   37 tensors
0.00.356.339 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.340 I llama_model_loader: - type q6_K:   19 tensors
0.00.598.003 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.019 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.946 I llm_load_vocab: special tokens cache size = 5
0.00.865.353 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.865.434 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.865.435 I llm_load_print_meta: arch             = gemma
0.00.865.435 I llm_load_print_meta: vocab type       = SPM
0.00.865.436 I llm_load_print_meta: n_vocab          = 256000
0.00.865.439 I llm_load_print_meta: n_merges         = 0
0.00.865.440 I llm_load_print_meta: vocab_only       = 0
0.00.865.441 I llm_load_print_meta: n_ctx_train      = 8192
0.00.865.441 I llm_load_print_meta: n_embd           = 2048
0.00.865.441 I llm_load_print_meta: n_layer          = 18
0.00.865.508 I llm_load_print_meta: n_head           = 8
0.00.865.516 I llm_load_print_meta: n_head_kv        = 1
0.00.865.516 I llm_load_print_meta: n_rot            = 256
0.00.865.517 I llm_load_print_meta: n_swa            = 0
0.00.865.517 I llm_load_print_meta: n_embd_head_k    = 256
0.00.865.517 I llm_load_print_meta: n_embd_head_v    = 256
0.00.865.522 I llm_load_print_meta: n_gqa            = 8
0.00.865.528 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.865.533 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.865.534 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.865.535 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.865.535 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.865.536 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.865.537 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.865.542 I llm_load_print_meta: n_ff             = 16384
0.00.865.543 I llm_load_print_meta: n_expert         = 0
0.00.865.543 I llm_load_print_meta: n_expert_used    = 0
0.00.865.544 I llm_load_print_meta: causal attn      = 1
0.00.865.544 I llm_load_print_meta: pooling type     = 0
0.00.865.544 I llm_load_print_meta: rope type        = 2
0.00.865.550 I llm_load_print_meta: rope scaling     = linear
0.00.865.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.865.552 I llm_load_print_meta: freq_scale_train = 1
0.00.865.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.865.553 I llm_load_print_meta: rope_finetuned   = unknown
0.00.865.554 I llm_load_print_meta: ssm_d_conv       = 0
0.00.865.554 I llm_load_print_meta: ssm_d_inner      = 0
0.00.865.554 I llm_load_print_meta: ssm_d_state      = 0
0.00.865.555 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.865.555 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.865.556 I llm_load_print_meta: model type       = 2B
0.00.865.557 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.865.557 I llm_load_print_meta: model params     = 2.51 B
0.00.865.558 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.865.559 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.865.561 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.865.562 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.865.562 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.865.574 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.865.575 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.865.579 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.865.585 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.865.587 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.865.587 I llm_load_print_meta: max token length = 93
0.00.928.722 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.928.735 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.928.736 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.928.736 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.928.737 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.928.738 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.934.729 I llama_new_context_with_model: n_seq_max     = 1
0.00.934.737 I llama_new_context_with_model: n_ctx         = 4096
0.00.934.737 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.934.738 I llama_new_context_with_model: n_batch       = 2048
0.00.934.738 I llama_new_context_with_model: n_ubatch      = 512
0.00.934.739 I llama_new_context_with_model: flash_attn    = 0
0.00.934.742 I llama_new_context_with_model: freq_base     = 10000.0
0.00.934.742 I llama_new_context_with_model: freq_scale    = 1
0.00.934.743 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.950.621 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.950.663 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.950.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.953.439 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.953.443 I llama_new_context_with_model: graph nodes  = 601
0.00.953.443 I llama_new_context_with_model: graph splits = 1
0.00.953.465 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.534.573 I main: llama threadpool init, n_threads = 4
0.01.534.590 I 
0.01.534.718 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.534.722 I 
0.01.534.967 I sampler seed: 874193710
0.01.534.981 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.534.991 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.534.994 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.534.995 I 
 increamically. [end of text]


0.02.929.580 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   805.28 tokens per second)
0.02.929.583 I llama_perf_context_print:        load time =    1533.63 ms
0.02.929.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.929.587 I llama_perf_context_print:        eval time =    1382.37 ms /     4 runs   (  345.59 ms per token,     2.89 tokens per second)
0.02.929.588 I llama_perf_context_print:       total time =    1395.02 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4309 (973f328b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185868.16 ms
main:    total time = 185868.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4309 (973f328b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.249 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.349 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.363 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.367 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.377 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.379 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.382 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.392 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.396 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.397 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.399 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.400 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.905 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.324 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.683 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.693 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.695 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.696 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.697 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.700 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.702 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.706 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.707 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.716 I llama_model_loader: - type  f32:   37 tensors
0.00.355.718 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.730 I llama_model_loader: - type q6_K:   19 tensors
0.00.609.271 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.678.061 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.679.120 I llm_load_vocab: special tokens cache size = 5
0.00.879.843 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.879.924 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.879.925 I llm_load_print_meta: arch             = gemma
0.00.879.926 I llm_load_print_meta: vocab type       = SPM
0.00.879.926 I llm_load_print_meta: n_vocab          = 256000
0.00.879.929 I llm_load_print_meta: n_merges         = 0
0.00.879.929 I llm_load_print_meta: vocab_only       = 0
0.00.879.930 I llm_load_print_meta: n_ctx_train      = 8192
0.00.879.930 I llm_load_print_meta: n_embd           = 2048
0.00.879.930 I llm_load_print_meta: n_layer          = 18
0.00.879.998 I llm_load_print_meta: n_head           = 8
0.00.880.005 I llm_load_print_meta: n_head_kv        = 1
0.00.880.006 I llm_load_print_meta: n_rot            = 256
0.00.880.006 I llm_load_print_meta: n_swa            = 0
0.00.880.007 I llm_load_print_meta: n_embd_head_k    = 256
0.00.880.007 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.011 I llm_load_print_meta: n_gqa            = 8
0.00.880.016 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.021 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.022 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.024 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.024 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.024 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.025 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.029 I llm_load_print_meta: n_ff             = 16384
0.00.880.030 I llm_load_print_meta: n_expert         = 0
0.00.880.030 I llm_load_print_meta: n_expert_used    = 0
0.00.880.030 I llm_load_print_meta: causal attn      = 1
0.00.880.031 I llm_load_print_meta: pooling type     = 0
0.00.880.031 I llm_load_print_meta: rope type        = 2
0.00.880.032 I llm_load_print_meta: rope scaling     = linear
0.00.880.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.034 I llm_load_print_meta: freq_scale_train = 1
0.00.880.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.035 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.035 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.035 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.036 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.036 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.036 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.037 I llm_load_print_meta: model type       = 2B
0.00.880.038 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.880.038 I llm_load_print_meta: model params     = 2.51 B
0.00.880.039 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.880.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.040 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.041 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.041 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.042 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.043 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.069 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.070 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.071 I llm_load_print_meta: max token length = 93
0.00.939.599 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.945.457 I llama_new_context_with_model: n_seq_max     = 1
0.00.945.465 I llama_new_context_with_model: n_ctx         = 4096
0.00.945.465 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.945.465 I llama_new_context_with_model: n_batch       = 2048
0.00.945.466 I llama_new_context_with_model: n_ubatch      = 512
0.00.945.466 I llama_new_context_with_model: flash_attn    = 0
0.00.945.469 I llama_new_context_with_model: freq_base     = 10000.0
0.00.945.470 I llama_new_context_with_model: freq_scale    = 1
0.00.945.471 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.960.884 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.960.930 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.961.062 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.963.723 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.963.726 I llama_new_context_with_model: graph nodes  = 601
0.00.963.727 I llama_new_context_with_model: graph splits = 1
0.00.963.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.542.921 I main: llama threadpool init, n_threads = 4
0.01.542.938 I 
0.01.543.058 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.543.062 I 
0.01.543.305 I sampler seed: 2708904710
0.01.543.319 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.543.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.543.331 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.543.331 I 
 seconde.

I cannot answer the question as I do not have access to personal information or location data. [end of text]


0.09.551.178 I llama_perf_sampler_print:    sampling time =      35.41 ms /    24 runs   (    1.48 ms per token,   677.70 tokens per second)
0.09.551.181 I llama_perf_context_print:        load time =    1541.94 ms
0.09.551.183 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.551.184 I llama_perf_context_print:        eval time =    7943.19 ms /    23 runs   (  345.36 ms per token,     2.90 tokens per second)
0.09.551.185 I llama_perf_context_print:       total time =    8008.27 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m27.213s
user	45m52.113s
sys	0m6.400s
