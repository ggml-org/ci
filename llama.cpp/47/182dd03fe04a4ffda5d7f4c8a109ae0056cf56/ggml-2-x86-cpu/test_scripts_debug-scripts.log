+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.375 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.384 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.483 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.485 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.489 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.491 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.494 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.505 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.507 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.508 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.784 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.729 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.738 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.740 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.741 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.742 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.744 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.745 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.750 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.751 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.752 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.754 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.755 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.763 I llama_model_loader: - type  f32:   37 tensors
0.00.348.765 I llama_model_loader: - type q8_0:  127 tensors
0.00.559.318 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.043 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.623.937 I llm_load_vocab: special tokens cache size = 5
0.00.832.211 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.292 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.297 I llm_load_print_meta: arch             = gemma
0.00.832.297 I llm_load_print_meta: vocab type       = SPM
0.00.832.299 I llm_load_print_meta: n_vocab          = 256000
0.00.832.301 I llm_load_print_meta: n_merges         = 0
0.00.832.301 I llm_load_print_meta: vocab_only       = 0
0.00.832.302 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.302 I llm_load_print_meta: n_embd           = 2048
0.00.832.303 I llm_load_print_meta: n_layer          = 18
0.00.832.383 I llm_load_print_meta: n_head           = 8
0.00.832.391 I llm_load_print_meta: n_head_kv        = 1
0.00.832.391 I llm_load_print_meta: n_rot            = 256
0.00.832.393 I llm_load_print_meta: n_swa            = 0
0.00.832.394 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.421 I llm_load_print_meta: n_gqa            = 8
0.00.832.426 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.431 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.433 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.434 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.435 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.435 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.439 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.444 I llm_load_print_meta: n_ff             = 16384
0.00.832.444 I llm_load_print_meta: n_expert         = 0
0.00.832.445 I llm_load_print_meta: n_expert_used    = 0
0.00.832.445 I llm_load_print_meta: causal attn      = 1
0.00.832.445 I llm_load_print_meta: pooling type     = 0
0.00.832.445 I llm_load_print_meta: rope type        = 2
0.00.832.446 I llm_load_print_meta: rope scaling     = linear
0.00.832.448 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.449 I llm_load_print_meta: freq_scale_train = 1
0.00.832.449 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.450 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.450 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.453 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.453 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.453 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.454 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.457 I llm_load_print_meta: model type       = 2B
0.00.832.459 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.471 I llm_load_print_meta: model params     = 2.51 B
0.00.832.473 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.473 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.474 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.474 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.475 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.476 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.476 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.484 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.486 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.487 I llm_load_print_meta: max token length = 93
0.00.933.920 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.933.930 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.933.931 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.933.932 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.933.932 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.933.933 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.940.124 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.132 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.132 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.133 I llama_new_context_with_model: n_batch       = 2048
0.00.940.133 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.134 I llama_new_context_with_model: flash_attn    = 0
0.00.940.136 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.137 I llama_new_context_with_model: freq_scale    = 1
0.00.940.137 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.940.222 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.954.478 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.954.517 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.646 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.957.220 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.957.225 I llama_new_context_with_model: graph nodes  = 601
0.00.957.225 I llama_new_context_with_model: graph splits = 1
0.00.957.248 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.957.252 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.567.109 I main: llama threadpool init, n_threads = 4
0.01.567.125 I 
0.01.567.245 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.567.248 I 
0.01.567.489 I sampler seed: 143163285
0.01.567.504 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.567.514 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.567.517 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.567.517 I 
 increasities. [end of text]


0.03.258.523 I llama_perf_sampler_print:    sampling time =       6.38 ms /     5 runs   (    1.28 ms per token,   783.09 tokens per second)
0.03.258.526 I llama_perf_context_print:        load time =    1566.19 ms
0.03.258.528 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.258.529 I llama_perf_context_print:        eval time =    1679.12 ms /     4 runs   (  419.78 ms per token,     2.38 tokens per second)
0.03.258.544 I llama_perf_context_print:       total time =    1691.43 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.484 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.593 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.598 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.602 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.604 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.605 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.607 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.608 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.610 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.618 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.620 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.621 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.623 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.624 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.995 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.911 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.923 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.924 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.925 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.928 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.929 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.933 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.934 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.936 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.937 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.361.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.948 I llama_model_loader: - type  f32:   37 tensors
0.00.361.951 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.751 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.667.281 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.668.211 I llm_load_vocab: special tokens cache size = 5
0.00.887.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.887.725 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.887.730 I llm_load_print_meta: arch             = gemma
0.00.887.730 I llm_load_print_meta: vocab type       = SPM
0.00.887.731 I llm_load_print_meta: n_vocab          = 256000
0.00.887.734 I llm_load_print_meta: n_merges         = 0
0.00.887.734 I llm_load_print_meta: vocab_only       = 0
0.00.887.735 I llm_load_print_meta: n_ctx_train      = 8192
0.00.887.735 I llm_load_print_meta: n_embd           = 2048
0.00.887.736 I llm_load_print_meta: n_layer          = 18
0.00.887.815 I llm_load_print_meta: n_head           = 8
0.00.887.823 I llm_load_print_meta: n_head_kv        = 1
0.00.887.825 I llm_load_print_meta: n_rot            = 256
0.00.887.825 I llm_load_print_meta: n_swa            = 0
0.00.887.826 I llm_load_print_meta: n_embd_head_k    = 256
0.00.887.826 I llm_load_print_meta: n_embd_head_v    = 256
0.00.887.831 I llm_load_print_meta: n_gqa            = 8
0.00.887.835 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.887.841 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.887.846 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.887.847 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.887.848 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.887.848 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.887.849 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.887.854 I llm_load_print_meta: n_ff             = 16384
0.00.887.855 I llm_load_print_meta: n_expert         = 0
0.00.887.856 I llm_load_print_meta: n_expert_used    = 0
0.00.887.865 I llm_load_print_meta: causal attn      = 1
0.00.887.867 I llm_load_print_meta: pooling type     = 0
0.00.887.867 I llm_load_print_meta: rope type        = 2
0.00.887.868 I llm_load_print_meta: rope scaling     = linear
0.00.887.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.887.870 I llm_load_print_meta: freq_scale_train = 1
0.00.887.870 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.887.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.887.886 I llm_load_print_meta: ssm_d_conv       = 0
0.00.887.889 I llm_load_print_meta: ssm_d_inner      = 0
0.00.887.889 I llm_load_print_meta: ssm_d_state      = 0
0.00.887.890 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.887.890 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.887.894 I llm_load_print_meta: model type       = 2B
0.00.887.895 I llm_load_print_meta: model ftype      = Q8_0
0.00.887.904 I llm_load_print_meta: model params     = 2.51 B
0.00.887.906 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.887.906 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.887.907 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.887.907 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.887.908 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.887.909 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.887.909 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.887.910 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.887.916 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.887.918 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.887.918 I llm_load_print_meta: max token length = 93
0.00.985.709 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.991.635 I llama_new_context_with_model: n_seq_max     = 1
0.00.991.641 I llama_new_context_with_model: n_ctx         = 4096
0.00.991.642 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.991.642 I llama_new_context_with_model: n_batch       = 2048
0.00.991.643 I llama_new_context_with_model: n_ubatch      = 512
0.00.991.643 I llama_new_context_with_model: flash_attn    = 0
0.00.991.646 I llama_new_context_with_model: freq_base     = 10000.0
0.00.991.647 I llama_new_context_with_model: freq_scale    = 1
0.00.991.648 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.991.737 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.006.366 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.006.406 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.006.523 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.009.106 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.009.110 I llama_new_context_with_model: graph nodes  = 601
0.01.009.110 I llama_new_context_with_model: graph splits = 1
0.01.009.135 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.009.139 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.618.446 I main: llama threadpool init, n_threads = 4
0.01.618.462 I 
0.01.618.592 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.618.597 I 
0.01.618.839 I sampler seed: 1385740548
0.01.618.853 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.618.862 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.618.866 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.618.866 I 
 increably! [end of text]


0.03.311.770 I llama_perf_sampler_print:    sampling time =       6.33 ms /     5 runs   (    1.27 ms per token,   790.01 tokens per second)
0.03.311.774 I llama_perf_context_print:        load time =    1617.51 ms
0.03.311.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.311.790 I llama_perf_context_print:        eval time =    1680.89 ms /     4 runs   (  420.22 ms per token,     2.38 tokens per second)
0.03.311.791 I llama_perf_context_print:       total time =    1693.34 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.336 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.346 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.447 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.461 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.464 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.470 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.475 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.477 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.479 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.481 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.484 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.492 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.495 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.499 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.502 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.529 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.720 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.816 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.830 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.831 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.834 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.835 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.837 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.841 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.842 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.844 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.845 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.847 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.856 I llama_model_loader: - type  f32:   37 tensors
0.00.351.858 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.253 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.319 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.331 I llm_load_vocab: special tokens cache size = 5
0.00.851.120 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.200 I llm_load_print_meta: arch             = gemma
0.00.851.201 I llm_load_print_meta: vocab type       = SPM
0.00.851.202 I llm_load_print_meta: n_vocab          = 256000
0.00.851.205 I llm_load_print_meta: n_merges         = 0
0.00.851.205 I llm_load_print_meta: vocab_only       = 0
0.00.851.206 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.206 I llm_load_print_meta: n_embd           = 2048
0.00.851.206 I llm_load_print_meta: n_layer          = 18
0.00.851.290 I llm_load_print_meta: n_head           = 8
0.00.851.303 I llm_load_print_meta: n_head_kv        = 1
0.00.851.303 I llm_load_print_meta: n_rot            = 256
0.00.851.304 I llm_load_print_meta: n_swa            = 0
0.00.851.305 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.305 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.313 I llm_load_print_meta: n_gqa            = 8
0.00.851.321 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.329 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.334 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.335 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.336 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.337 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.338 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.344 I llm_load_print_meta: n_ff             = 16384
0.00.851.346 I llm_load_print_meta: n_expert         = 0
0.00.851.346 I llm_load_print_meta: n_expert_used    = 0
0.00.851.348 I llm_load_print_meta: causal attn      = 1
0.00.851.349 I llm_load_print_meta: pooling type     = 0
0.00.851.350 I llm_load_print_meta: rope type        = 2
0.00.851.350 I llm_load_print_meta: rope scaling     = linear
0.00.851.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.353 I llm_load_print_meta: freq_scale_train = 1
0.00.851.354 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.355 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.356 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.357 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.358 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.358 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.359 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.363 I llm_load_print_meta: model type       = 2B
0.00.851.366 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.367 I llm_load_print_meta: model params     = 2.51 B
0.00.851.368 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.369 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.370 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.374 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.375 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.383 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.385 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.385 I llm_load_print_meta: max token length = 93
0.00.930.623 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.930.632 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.930.633 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.930.634 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.930.635 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.930.635 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.936.850 I llama_new_context_with_model: n_seq_max     = 1
0.00.936.856 I llama_new_context_with_model: n_ctx         = 4096
0.00.936.856 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.936.857 I llama_new_context_with_model: n_batch       = 2048
0.00.936.857 I llama_new_context_with_model: n_ubatch      = 512
0.00.936.858 I llama_new_context_with_model: flash_attn    = 0
0.00.936.860 I llama_new_context_with_model: freq_base     = 10000.0
0.00.936.861 I llama_new_context_with_model: freq_scale    = 1
0.00.936.861 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.951 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.952.036 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.952.079 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.952.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.954.828 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.954.832 I llama_new_context_with_model: graph nodes  = 601
0.00.954.832 I llama_new_context_with_model: graph splits = 1
0.00.954.857 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.954.861 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.564.972 I main: llama threadpool init, n_threads = 4
0.01.564.986 I 
0.01.565.122 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.565.126 I 
0.01.565.379 I sampler seed: 3241501493
0.01.565.393 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.565.405 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.565.406 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.565.407 I 
 increasively, demanding more for his needs.

This behaviour is unacceptable and must be addressed.

**Possible solutions:**

1. **Setting boundaries:** Establish

0.15.152.375 I llama_perf_sampler_print:    sampling time =      49.90 ms /    33 runs   (    1.51 ms per token,   661.31 tokens per second)
0.15.152.378 I llama_perf_context_print:        load time =    1564.01 ms
0.15.152.392 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.152.394 I llama_perf_context_print:        eval time =   13501.21 ms /    32 runs   (  421.91 ms per token,     2.37 tokens per second)
0.15.152.396 I llama_perf_context_print:       total time =   13587.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.023.617 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.631 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.727 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.742 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.747 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.752 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.753 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.755 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.756 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.758 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.760 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.767 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.771 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.772 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.774 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.775 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.770 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.862 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.863 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.871 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.873 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.874 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.875 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.877 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.878 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.882 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.883 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.885 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.886 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.358.888 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.896 I llama_model_loader: - type  f32:   37 tensors
0.00.358.898 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.396 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.282 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.235 I llm_load_vocab: special tokens cache size = 5
0.00.850.387 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.459 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.463 I llm_load_print_meta: arch             = gemma
0.00.850.464 I llm_load_print_meta: vocab type       = SPM
0.00.850.465 I llm_load_print_meta: n_vocab          = 256000
0.00.850.467 I llm_load_print_meta: n_merges         = 0
0.00.850.468 I llm_load_print_meta: vocab_only       = 0
0.00.850.468 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.468 I llm_load_print_meta: n_embd           = 2048
0.00.850.469 I llm_load_print_meta: n_layer          = 18
0.00.850.544 I llm_load_print_meta: n_head           = 8
0.00.850.552 I llm_load_print_meta: n_head_kv        = 1
0.00.850.556 I llm_load_print_meta: n_rot            = 256
0.00.850.556 I llm_load_print_meta: n_swa            = 0
0.00.850.556 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.557 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.561 I llm_load_print_meta: n_gqa            = 8
0.00.850.566 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.572 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.574 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.574 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.575 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.576 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.581 I llm_load_print_meta: n_ff             = 16384
0.00.850.584 I llm_load_print_meta: n_expert         = 0
0.00.850.584 I llm_load_print_meta: n_expert_used    = 0
0.00.850.585 I llm_load_print_meta: causal attn      = 1
0.00.850.585 I llm_load_print_meta: pooling type     = 0
0.00.850.585 I llm_load_print_meta: rope type        = 2
0.00.850.586 I llm_load_print_meta: rope scaling     = linear
0.00.850.587 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.588 I llm_load_print_meta: freq_scale_train = 1
0.00.850.588 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.589 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.589 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.590 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.590 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.590 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.591 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.593 I llm_load_print_meta: model type       = 2B
0.00.850.595 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.595 I llm_load_print_meta: model params     = 2.51 B
0.00.850.596 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.597 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.597 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.597 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.598 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.599 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.599 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.601 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.608 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.609 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.610 I llm_load_print_meta: max token length = 93
0.00.923.513 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.923.522 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.929.494 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.501 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.501 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.502 I llama_new_context_with_model: n_batch       = 2048
0.00.929.503 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.503 I llama_new_context_with_model: flash_attn    = 0
0.00.929.505 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.506 I llama_new_context_with_model: freq_scale    = 1
0.00.929.507 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.589 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.944.922 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.964 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.092 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.743 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.748 I llama_new_context_with_model: graph nodes  = 601
0.00.947.748 I llama_new_context_with_model: graph splits = 1
0.00.947.772 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.947.775 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.557.776 I main: llama threadpool init, n_threads = 4
0.01.557.793 I 
0.01.557.913 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.557.917 I 
0.01.558.163 I sampler seed: 916516459
0.01.558.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.558.189 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.558.190 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.558.190 I 
 increadibly?

I am unable to provide a response that is disrespectful or offensive. [end of text]


0.09.123.844 I llama_perf_sampler_print:    sampling time =      28.06 ms /    19 runs   (    1.48 ms per token,   677.05 tokens per second)
0.09.123.848 I llama_perf_context_print:        load time =    1556.79 ms
0.09.123.861 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.123.863 I llama_perf_context_print:        eval time =    7517.28 ms /    18 runs   (  417.63 ms per token,     2.39 tokens per second)
0.09.123.864 I llama_perf_context_print:       total time =    7566.08 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m40.474s
user	1m51.852s
sys	0m9.418s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4424 (47182dd0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 185690.13 ms
main:    total time = 185690.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.023.086 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.097 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.183 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.195 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.197 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.201 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.203 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.210 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.216 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.221 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.223 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.224 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.243.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.345.231 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.369.091 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.369.098 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.369.100 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.369.101 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.369.102 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.369.104 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.369.105 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.369.109 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.369.110 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.369.124 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.369.128 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.369.129 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.369.139 I llama_model_loader: - type  f32:   37 tensors
0.00.369.141 I llama_model_loader: - type q4_K:  108 tensors
0.00.369.142 I llama_model_loader: - type q6_K:   19 tensors
0.00.580.454 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.863 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.801 I llm_load_vocab: special tokens cache size = 5
0.00.860.244 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.860.320 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.860.325 I llm_load_print_meta: arch             = gemma
0.00.860.326 I llm_load_print_meta: vocab type       = SPM
0.00.860.327 I llm_load_print_meta: n_vocab          = 256000
0.00.860.329 I llm_load_print_meta: n_merges         = 0
0.00.860.330 I llm_load_print_meta: vocab_only       = 0
0.00.860.330 I llm_load_print_meta: n_ctx_train      = 8192
0.00.860.330 I llm_load_print_meta: n_embd           = 2048
0.00.860.331 I llm_load_print_meta: n_layer          = 18
0.00.860.408 I llm_load_print_meta: n_head           = 8
0.00.860.417 I llm_load_print_meta: n_head_kv        = 1
0.00.860.420 I llm_load_print_meta: n_rot            = 256
0.00.860.420 I llm_load_print_meta: n_swa            = 0
0.00.860.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.860.421 I llm_load_print_meta: n_embd_head_v    = 256
0.00.860.426 I llm_load_print_meta: n_gqa            = 8
0.00.860.431 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.860.436 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.860.437 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.860.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.860.440 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.860.441 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.860.442 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.860.447 I llm_load_print_meta: n_ff             = 16384
0.00.860.447 I llm_load_print_meta: n_expert         = 0
0.00.860.448 I llm_load_print_meta: n_expert_used    = 0
0.00.860.448 I llm_load_print_meta: causal attn      = 1
0.00.860.448 I llm_load_print_meta: pooling type     = 0
0.00.860.449 I llm_load_print_meta: rope type        = 2
0.00.860.449 I llm_load_print_meta: rope scaling     = linear
0.00.860.450 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.860.451 I llm_load_print_meta: freq_scale_train = 1
0.00.860.451 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.860.452 I llm_load_print_meta: rope_finetuned   = unknown
0.00.860.453 I llm_load_print_meta: ssm_d_conv       = 0
0.00.860.453 I llm_load_print_meta: ssm_d_inner      = 0
0.00.860.454 I llm_load_print_meta: ssm_d_state      = 0
0.00.860.454 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.860.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.860.458 I llm_load_print_meta: model type       = 2B
0.00.860.459 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.860.460 I llm_load_print_meta: model params     = 2.51 B
0.00.860.461 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.860.461 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.860.462 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.860.462 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.860.463 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.860.463 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.860.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.860.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.860.471 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.860.472 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.860.472 I llm_load_print_meta: max token length = 93
0.00.923.659 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.923.665 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.923.666 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.923.666 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.923.667 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.923.668 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.929.469 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.477 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.477 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.477 I llama_new_context_with_model: n_batch       = 2048
0.00.929.478 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.478 I llama_new_context_with_model: flash_attn    = 0
0.00.929.481 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.481 I llama_new_context_with_model: freq_scale    = 1
0.00.929.482 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.563 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.944.331 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.371 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.491 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.064 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.068 I llama_new_context_with_model: graph nodes  = 601
0.00.947.068 I llama_new_context_with_model: graph splits = 1
0.00.947.092 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.947.095 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.530.275 I main: llama threadpool init, n_threads = 4
0.01.530.291 I 
0.01.530.410 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.530.414 I 
0.01.530.654 I sampler seed: 3584170040
0.01.530.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.530.679 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.530.679 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.530.679 I 
 squaRELLA

## **Squarella**

Squarella is an open-source framework for creating a declarative DSL for interacting with distributed systems. It

0.12.675.163 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.40 tokens per second)
0.12.675.166 I llama_perf_context_print:        load time =    1529.37 ms
0.12.675.181 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.675.183 I llama_perf_context_print:        eval time =   11059.24 ms /    32 runs   (  345.60 ms per token,     2.89 tokens per second)
0.12.675.184 I llama_perf_context_print:       total time =   11144.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4424 (47182dd0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 185609.46 ms
main:    total time = 185609.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.023.042 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.135 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.149 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.150 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.154 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.158 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.159 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.161 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.162 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.163 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.169 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.170 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.172 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.173 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.175 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.465 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.241 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.252 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.253 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.254 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.257 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.259 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.263 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.264 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.272 I llama_model_loader: - type  f32:   37 tensors
0.00.362.275 I llama_model_loader: - type q4_K:  108 tensors
0.00.362.275 I llama_model_loader: - type q6_K:   19 tensors
0.00.580.796 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.241 I llm_load_vocab: special tokens cache size = 5
0.00.849.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.666 I llm_load_print_meta: arch             = gemma
0.00.849.667 I llm_load_print_meta: vocab type       = SPM
0.00.849.668 I llm_load_print_meta: n_vocab          = 256000
0.00.849.670 I llm_load_print_meta: n_merges         = 0
0.00.849.671 I llm_load_print_meta: vocab_only       = 0
0.00.849.671 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.671 I llm_load_print_meta: n_embd           = 2048
0.00.849.672 I llm_load_print_meta: n_layer          = 18
0.00.849.751 I llm_load_print_meta: n_head           = 8
0.00.849.762 I llm_load_print_meta: n_head_kv        = 1
0.00.849.763 I llm_load_print_meta: n_rot            = 256
0.00.849.763 I llm_load_print_meta: n_swa            = 0
0.00.849.764 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.764 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.769 I llm_load_print_meta: n_gqa            = 8
0.00.849.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.783 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.784 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.790 I llm_load_print_meta: n_ff             = 16384
0.00.849.791 I llm_load_print_meta: n_expert         = 0
0.00.849.791 I llm_load_print_meta: n_expert_used    = 0
0.00.849.792 I llm_load_print_meta: causal attn      = 1
0.00.849.792 I llm_load_print_meta: pooling type     = 0
0.00.849.793 I llm_load_print_meta: rope type        = 2
0.00.849.793 I llm_load_print_meta: rope scaling     = linear
0.00.849.795 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.795 I llm_load_print_meta: freq_scale_train = 1
0.00.849.796 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.796 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.797 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.797 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.797 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.799 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.799 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.802 I llm_load_print_meta: model type       = 2B
0.00.849.805 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.849.806 I llm_load_print_meta: model params     = 2.51 B
0.00.849.807 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.849.816 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.818 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.819 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.820 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.821 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.821 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.828 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.829 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.830 I llm_load_print_meta: max token length = 93
0.00.908.402 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.914.136 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.143 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.144 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.144 I llama_new_context_with_model: n_batch       = 2048
0.00.914.145 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.145 I llama_new_context_with_model: flash_attn    = 0
0.00.914.148 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.149 I llama_new_context_with_model: freq_scale    = 1
0.00.914.150 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.914.233 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.929.499 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.545 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.663 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.188 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.192 I llama_new_context_with_model: graph nodes  = 601
0.00.932.193 I llama_new_context_with_model: graph splits = 1
0.00.932.217 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.218 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.513.572 I main: llama threadpool init, n_threads = 4
0.01.513.586 I 
0.01.513.712 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.513.716 I 
0.01.513.960 I sampler seed: 4169509800
0.01.513.974 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.513.987 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.513.987 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.513.988 I 
 seconal.

**Answer:** I am unable to provide an answer as the provided context does not contain any information regarding the requested data. [end of text]


0.11.631.876 I llama_perf_sampler_print:    sampling time =      45.08 ms /    30 runs   (    1.50 ms per token,   665.42 tokens per second)
0.11.631.879 I llama_perf_context_print:        load time =    1512.59 ms
0.11.631.891 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.631.893 I llama_perf_context_print:        eval time =   10040.91 ms /    29 runs   (  346.24 ms per token,     2.89 tokens per second)
0.11.631.894 I llama_perf_context_print:       total time =   10118.31 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m38.452s
user	46m39.316s
sys	0m6.379s
