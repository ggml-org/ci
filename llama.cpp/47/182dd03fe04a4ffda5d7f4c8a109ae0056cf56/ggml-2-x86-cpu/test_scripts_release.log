+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.000.712 I main: load the model and apply lora adapter, if any
0.00.021.027 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.038 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.045 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.051 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.055 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.058 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.059 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.059 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.060 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.060 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.061 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.065 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.066 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.066 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.067 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.508 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.573 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.430 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.436 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.437 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.437 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.438 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.439 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.440 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.443 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.444 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.444 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.445 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.446 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.449 I llama_model_loader: - type  f32:   37 tensors
0.00.130.450 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.758 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.413 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.919 I llm_load_vocab: special tokens cache size = 5
0.00.265.617 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.632 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.634 I llm_load_print_meta: arch             = gemma
0.00.265.634 I llm_load_print_meta: vocab type       = SPM
0.00.265.635 I llm_load_print_meta: n_vocab          = 256000
0.00.265.635 I llm_load_print_meta: n_merges         = 0
0.00.265.636 I llm_load_print_meta: vocab_only       = 0
0.00.265.636 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.636 I llm_load_print_meta: n_embd           = 2048
0.00.265.637 I llm_load_print_meta: n_layer          = 18
0.00.265.648 I llm_load_print_meta: n_head           = 8
0.00.265.650 I llm_load_print_meta: n_head_kv        = 1
0.00.265.650 I llm_load_print_meta: n_rot            = 256
0.00.265.651 I llm_load_print_meta: n_swa            = 0
0.00.265.651 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.651 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.653 I llm_load_print_meta: n_gqa            = 8
0.00.265.654 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.656 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.657 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.658 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.659 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.659 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.659 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.661 I llm_load_print_meta: n_ff             = 16384
0.00.265.661 I llm_load_print_meta: n_expert         = 0
0.00.265.662 I llm_load_print_meta: n_expert_used    = 0
0.00.265.662 I llm_load_print_meta: causal attn      = 1
0.00.265.662 I llm_load_print_meta: pooling type     = 0
0.00.265.662 I llm_load_print_meta: rope type        = 2
0.00.265.663 I llm_load_print_meta: rope scaling     = linear
0.00.265.664 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.664 I llm_load_print_meta: freq_scale_train = 1
0.00.265.665 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.665 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.665 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.666 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.666 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.666 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.666 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.668 I llm_load_print_meta: model type       = 2B
0.00.265.670 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.670 I llm_load_print_meta: model params     = 2.51 B
0.00.265.671 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.671 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.672 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.672 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.672 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.673 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.673 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.673 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.674 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.674 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.675 I llm_load_print_meta: max token length = 93
0.00.368.109 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.119 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.120 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.120 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.121 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.122 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.201 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.206 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.207 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.207 I llama_new_context_with_model: n_batch       = 2048
0.00.373.208 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.208 I llama_new_context_with_model: flash_attn    = 0
0.00.373.210 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.211 I llama_new_context_with_model: freq_scale    = 1
0.00.373.212 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.233 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.460 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.472 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.560 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.770 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.775 I llama_new_context_with_model: graph nodes  = 601
0.00.388.776 I llama_new_context_with_model: graph splits = 1
0.00.388.779 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.779 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.147 I main: llama threadpool init, n_threads = 4
0.00.474.163 I 
0.00.474.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.244 I 
0.00.474.275 I sampler seed: 3311060473
0.00.474.286 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.297 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.301 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.301 I 
 increably. The question is: "How many syllables are there in the word 'criticism'?"

The answer is 8.

The word '

0.02.728.153 I llama_perf_sampler_print:    sampling time =       4.60 ms /    33 runs   (    0.14 ms per token,  7173.91 tokens per second)
0.02.728.156 I llama_perf_context_print:        load time =     473.41 ms
0.02.728.157 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.158 I llama_perf_context_print:        eval time =    2235.62 ms /    32 runs   (   69.86 ms per token,    14.31 tokens per second)
0.02.728.159 I llama_perf_context_print:       total time =    2254.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.591 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.799 I main: llama backend init
0.00.000.806 I main: load the model and apply lora adapter, if any
0.00.021.401 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.418 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.426 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.427 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.430 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.431 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.438 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.439 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.439 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.441 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.321 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.193 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.047 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.053 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.054 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.055 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.056 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.057 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.057 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.061 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.062 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.063 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.064 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.069 I llama_model_loader: - type  f32:   37 tensors
0.00.132.069 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.891 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.225 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.799 I llm_load_vocab: special tokens cache size = 5
0.00.280.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.519 I llm_load_print_meta: arch             = gemma
0.00.280.520 I llm_load_print_meta: vocab type       = SPM
0.00.280.520 I llm_load_print_meta: n_vocab          = 256000
0.00.280.521 I llm_load_print_meta: n_merges         = 0
0.00.280.521 I llm_load_print_meta: vocab_only       = 0
0.00.280.521 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.522 I llm_load_print_meta: n_embd           = 2048
0.00.280.522 I llm_load_print_meta: n_layer          = 18
0.00.280.534 I llm_load_print_meta: n_head           = 8
0.00.280.536 I llm_load_print_meta: n_head_kv        = 1
0.00.280.537 I llm_load_print_meta: n_rot            = 256
0.00.280.537 I llm_load_print_meta: n_swa            = 0
0.00.280.537 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.537 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.539 I llm_load_print_meta: n_gqa            = 8
0.00.280.541 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.542 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.543 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.546 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.546 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.547 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.547 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.549 I llm_load_print_meta: n_ff             = 16384
0.00.280.549 I llm_load_print_meta: n_expert         = 0
0.00.280.549 I llm_load_print_meta: n_expert_used    = 0
0.00.280.550 I llm_load_print_meta: causal attn      = 1
0.00.280.550 I llm_load_print_meta: pooling type     = 0
0.00.280.550 I llm_load_print_meta: rope type        = 2
0.00.280.550 I llm_load_print_meta: rope scaling     = linear
0.00.280.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.552 I llm_load_print_meta: freq_scale_train = 1
0.00.280.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.553 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.553 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.553 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.553 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.554 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.554 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.556 I llm_load_print_meta: model type       = 2B
0.00.280.557 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.557 I llm_load_print_meta: model params     = 2.51 B
0.00.280.558 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.558 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.559 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.559 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.559 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.559 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.560 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.560 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.560 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.561 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.562 I llm_load_print_meta: max token length = 93
0.00.373.798 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.996 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.002 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.003 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.003 I llama_new_context_with_model: n_batch       = 2048
0.00.379.004 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.004 I llama_new_context_with_model: flash_attn    = 0
0.00.379.007 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.008 I llama_new_context_with_model: freq_scale    = 1
0.00.379.009 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.035 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.393.868 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.881 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.977 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.231 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.238 I llama_new_context_with_model: graph nodes  = 601
0.00.395.239 I llama_new_context_with_model: graph splits = 1
0.00.395.242 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.395.242 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.011 I main: llama threadpool init, n_threads = 4
0.00.477.026 I 
0.00.477.101 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.104 I 
0.00.477.138 I sampler seed: 1210825809
0.00.477.150 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.161 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.165 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.165 I 
 increasities?

I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.01.776.979 I llama_perf_sampler_print:    sampling time =       2.92 ms /    20 runs   (    0.15 ms per token,  6842.29 tokens per second)
0.01.776.981 I llama_perf_context_print:        load time =     476.19 ms
0.01.776.982 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.776.983 I llama_perf_context_print:        eval time =    1287.86 ms /    19 runs   (   67.78 ms per token,    14.75 tokens per second)
0.01.776.984 I llama_perf_context_print:       total time =    1299.97 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.527 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.020.804 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.815 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.822 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.827 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.828 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.831 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.831 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.832 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.832 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.833 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.833 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.838 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.838 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.839 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.839 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.840 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.097 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.003 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.010 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.011 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.012 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.013 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.014 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.018 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.020 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.021 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.022 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.026 I llama_model_loader: - type  f32:   37 tensors
0.00.131.027 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.511 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.364 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.954 I llm_load_vocab: special tokens cache size = 5
0.00.292.479 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.496 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.497 I llm_load_print_meta: arch             = gemma
0.00.292.498 I llm_load_print_meta: vocab type       = SPM
0.00.292.498 I llm_load_print_meta: n_vocab          = 256000
0.00.292.499 I llm_load_print_meta: n_merges         = 0
0.00.292.499 I llm_load_print_meta: vocab_only       = 0
0.00.292.500 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.500 I llm_load_print_meta: n_embd           = 2048
0.00.292.500 I llm_load_print_meta: n_layer          = 18
0.00.292.512 I llm_load_print_meta: n_head           = 8
0.00.292.514 I llm_load_print_meta: n_head_kv        = 1
0.00.292.515 I llm_load_print_meta: n_rot            = 256
0.00.292.515 I llm_load_print_meta: n_swa            = 0
0.00.292.515 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.517 I llm_load_print_meta: n_gqa            = 8
0.00.292.519 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.520 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.522 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.524 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.524 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.526 I llm_load_print_meta: n_ff             = 16384
0.00.292.526 I llm_load_print_meta: n_expert         = 0
0.00.292.526 I llm_load_print_meta: n_expert_used    = 0
0.00.292.526 I llm_load_print_meta: causal attn      = 1
0.00.292.527 I llm_load_print_meta: pooling type     = 0
0.00.292.527 I llm_load_print_meta: rope type        = 2
0.00.292.527 I llm_load_print_meta: rope scaling     = linear
0.00.292.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.529 I llm_load_print_meta: freq_scale_train = 1
0.00.292.529 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.530 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.530 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.531 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.531 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.531 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.532 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.533 I llm_load_print_meta: model type       = 2B
0.00.292.534 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.535 I llm_load_print_meta: model params     = 2.51 B
0.00.292.536 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.536 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.537 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.537 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.537 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.537 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.538 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.538 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.539 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.539 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.539 I llm_load_print_meta: max token length = 93
0.00.369.807 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.369.813 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.369.814 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.369.815 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.369.815 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.369.816 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.374.890 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.896 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.896 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.897 I llama_new_context_with_model: n_batch       = 2048
0.00.374.897 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.898 I llama_new_context_with_model: flash_attn    = 0
0.00.374.900 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.901 I llama_new_context_with_model: freq_scale    = 1
0.00.374.902 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.920 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.389.463 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.476 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.812 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.819 I llama_new_context_with_model: graph nodes  = 601
0.00.390.820 I llama_new_context_with_model: graph splits = 1
0.00.390.823 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.823 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.392 I main: llama threadpool init, n_threads = 4
0.00.476.408 I 
0.00.476.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.484 I 
0.00.476.516 I sampler seed: 2914350198
0.00.476.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.530 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.531 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.531 I 
 increasively and then face the consequences. [end of text]


0.01.114.469 I llama_perf_sampler_print:    sampling time =       1.40 ms /    10 runs   (    0.14 ms per token,  7122.51 tokens per second)
0.01.114.471 I llama_perf_context_print:        load time =     475.65 ms
0.01.114.472 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.114.474 I llama_perf_context_print:        eval time =     631.98 ms /     9 runs   (   70.22 ms per token,    14.24 tokens per second)
0.01.114.474 I llama_perf_context_print:       total time =     638.08 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.539 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.316 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.338 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.344 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.345 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.349 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.350 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.352 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.353 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.353 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.358 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.360 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.361 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.361 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.364 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.293 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.298 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.186 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.192 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.192 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.193 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.194 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.195 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.195 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.198 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.200 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.201 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.202 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.206 I llama_model_loader: - type  f32:   37 tensors
0.00.132.206 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.806 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.391 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.833 I llm_load_vocab: special tokens cache size = 5
0.00.265.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.346 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.347 I llm_load_print_meta: arch             = gemma
0.00.265.347 I llm_load_print_meta: vocab type       = SPM
0.00.265.348 I llm_load_print_meta: n_vocab          = 256000
0.00.265.348 I llm_load_print_meta: n_merges         = 0
0.00.265.349 I llm_load_print_meta: vocab_only       = 0
0.00.265.349 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.349 I llm_load_print_meta: n_embd           = 2048
0.00.265.350 I llm_load_print_meta: n_layer          = 18
0.00.265.361 I llm_load_print_meta: n_head           = 8
0.00.265.363 I llm_load_print_meta: n_head_kv        = 1
0.00.265.363 I llm_load_print_meta: n_rot            = 256
0.00.265.363 I llm_load_print_meta: n_swa            = 0
0.00.265.364 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.364 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.366 I llm_load_print_meta: n_gqa            = 8
0.00.265.367 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.369 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.370 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.371 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.372 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.372 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.373 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.375 I llm_load_print_meta: n_ff             = 16384
0.00.265.375 I llm_load_print_meta: n_expert         = 0
0.00.265.375 I llm_load_print_meta: n_expert_used    = 0
0.00.265.375 I llm_load_print_meta: causal attn      = 1
0.00.265.376 I llm_load_print_meta: pooling type     = 0
0.00.265.376 I llm_load_print_meta: rope type        = 2
0.00.265.376 I llm_load_print_meta: rope scaling     = linear
0.00.265.378 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.379 I llm_load_print_meta: freq_scale_train = 1
0.00.265.379 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.379 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.380 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.380 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.381 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.381 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.383 I llm_load_print_meta: model type       = 2B
0.00.265.384 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.385 I llm_load_print_meta: model params     = 2.51 B
0.00.265.385 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.386 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.386 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.386 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.387 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.387 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.387 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.388 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.388 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.389 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.389 I llm_load_print_meta: max token length = 93
0.00.336.817 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.824 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.989 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.995 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.995 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.995 I llama_new_context_with_model: n_batch       = 2048
0.00.341.996 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.996 I llama_new_context_with_model: flash_attn    = 0
0.00.341.998 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.999 I llama_new_context_with_model: freq_scale    = 1
0.00.342.000 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.019 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.356.471 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.484 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.576 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.836 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.841 I llama_new_context_with_model: graph nodes  = 601
0.00.357.842 I llama_new_context_with_model: graph splits = 1
0.00.357.845 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.846 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.299 I main: llama threadpool init, n_threads = 4
0.00.446.315 I 
0.00.446.387 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.390 I 
0.00.446.422 I sampler seed: 1612841424
0.00.446.433 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.446 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.449 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.450 I 
 increasities, a phenomenon observed in many cultures around the world, can be understood as a form of cultural mimicry or imitation. [end of text]


0.02.476.640 I llama_perf_sampler_print:    sampling time =       4.17 ms /    28 runs   (    0.15 ms per token,  6711.41 tokens per second)
0.02.476.642 I llama_perf_context_print:        load time =     445.54 ms
0.02.476.644 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.476.645 I llama_perf_context_print:        eval time =    2014.34 ms /    27 runs   (   74.61 ms per token,    13.40 tokens per second)
0.02.476.646 I llama_perf_context_print:       total time =    2030.35 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.569s
user	0m27.766s
sys	0m9.370s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4424 (47182dd0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40256.43 ms
main:    total time = 40256.43 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.250 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.261 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.270 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.276 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.280 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.283 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.284 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.284 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.285 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.286 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.290 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.291 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.292 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.292 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.799 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.376 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.184 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.191 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.191 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.192 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.193 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.195 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.196 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.199 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.200 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.201 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.202 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.204 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.210 I llama_model_loader: - type  f32:   37 tensors
0.00.131.211 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.212 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.192 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.786 I llm_load_vocab: special tokens cache size = 5
0.00.273.446 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.466 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.467 I llm_load_print_meta: arch             = gemma
0.00.273.468 I llm_load_print_meta: vocab type       = SPM
0.00.273.469 I llm_load_print_meta: n_vocab          = 256000
0.00.273.469 I llm_load_print_meta: n_merges         = 0
0.00.273.470 I llm_load_print_meta: vocab_only       = 0
0.00.273.470 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.470 I llm_load_print_meta: n_embd           = 2048
0.00.273.471 I llm_load_print_meta: n_layer          = 18
0.00.273.482 I llm_load_print_meta: n_head           = 8
0.00.273.484 I llm_load_print_meta: n_head_kv        = 1
0.00.273.484 I llm_load_print_meta: n_rot            = 256
0.00.273.485 I llm_load_print_meta: n_swa            = 0
0.00.273.485 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.485 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.487 I llm_load_print_meta: n_gqa            = 8
0.00.273.489 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.490 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.491 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.493 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.494 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.494 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.494 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.496 I llm_load_print_meta: n_ff             = 16384
0.00.273.497 I llm_load_print_meta: n_expert         = 0
0.00.273.497 I llm_load_print_meta: n_expert_used    = 0
0.00.273.497 I llm_load_print_meta: causal attn      = 1
0.00.273.497 I llm_load_print_meta: pooling type     = 0
0.00.273.498 I llm_load_print_meta: rope type        = 2
0.00.273.498 I llm_load_print_meta: rope scaling     = linear
0.00.273.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.500 I llm_load_print_meta: freq_scale_train = 1
0.00.273.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.500 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.501 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.501 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.501 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.502 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.502 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.504 I llm_load_print_meta: model type       = 2B
0.00.273.506 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.506 I llm_load_print_meta: model params     = 2.51 B
0.00.273.507 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.507 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.508 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.508 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.508 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.509 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.509 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.509 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.510 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.510 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.511 I llm_load_print_meta: max token length = 93
0.00.334.572 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.334.581 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.334.581 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.334.582 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.334.583 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.334.583 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.339.829 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.837 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.838 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.838 I llama_new_context_with_model: n_batch       = 2048
0.00.339.839 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.839 I llama_new_context_with_model: flash_attn    = 0
0.00.339.842 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.843 I llama_new_context_with_model: freq_scale    = 1
0.00.339.844 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.864 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.354.687 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.700 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.794 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.048 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.056 I llama_new_context_with_model: graph nodes  = 601
0.00.356.056 I llama_new_context_with_model: graph splits = 1
0.00.356.059 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.356.060 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.828 I main: llama threadpool init, n_threads = 4
0.00.433.843 I 
0.00.433.922 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.433.926 I 
0.00.433.959 I sampler seed: 2178977901
0.00.433.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.981 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.985 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.985 I 
 seconded data in a table format.

| Column Name | Data Type | Description |
|---|---|---|
| Order ID | INT | Unique identifier for

0.02.013.935 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6417.74 tokens per second)
0.02.013.938 I llama_perf_context_print:        load time =     433.06 ms
0.02.013.939 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.013.940 I llama_perf_context_print:        eval time =    1561.49 ms /    32 runs   (   48.80 ms per token,    20.49 tokens per second)
0.02.013.941 I llama_perf_context_print:       total time =    1580.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4424 (47182dd0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40226.62 ms
main:    total time = 40226.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.526 I build: 4424 (47182dd0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.020.944 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.959 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.966 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.967 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.969 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.971 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.971 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.972 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.972 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.973 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.976 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.977 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.978 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.978 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.468 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.296 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.302 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.303 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.303 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.304 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.305 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.308 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.309 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.312 I llama_model_loader: - type  f32:   37 tensors
0.00.130.312 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.313 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.401 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.192 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.703 I llm_load_vocab: special tokens cache size = 5
0.00.262.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.508 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.509 I llm_load_print_meta: arch             = gemma
0.00.262.509 I llm_load_print_meta: vocab type       = SPM
0.00.262.510 I llm_load_print_meta: n_vocab          = 256000
0.00.262.510 I llm_load_print_meta: n_merges         = 0
0.00.262.511 I llm_load_print_meta: vocab_only       = 0
0.00.262.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.512 I llm_load_print_meta: n_embd           = 2048
0.00.262.512 I llm_load_print_meta: n_layer          = 18
0.00.262.523 I llm_load_print_meta: n_head           = 8
0.00.262.525 I llm_load_print_meta: n_head_kv        = 1
0.00.262.526 I llm_load_print_meta: n_rot            = 256
0.00.262.526 I llm_load_print_meta: n_swa            = 0
0.00.262.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.527 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.529 I llm_load_print_meta: n_gqa            = 8
0.00.262.530 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.532 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.534 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.537 I llm_load_print_meta: n_ff             = 16384
0.00.262.537 I llm_load_print_meta: n_expert         = 0
0.00.262.538 I llm_load_print_meta: n_expert_used    = 0
0.00.262.538 I llm_load_print_meta: causal attn      = 1
0.00.262.538 I llm_load_print_meta: pooling type     = 0
0.00.262.538 I llm_load_print_meta: rope type        = 2
0.00.262.539 I llm_load_print_meta: rope scaling     = linear
0.00.262.541 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.541 I llm_load_print_meta: freq_scale_train = 1
0.00.262.541 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.542 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.542 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.542 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.543 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.543 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.543 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.545 I llm_load_print_meta: model type       = 2B
0.00.262.546 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.547 I llm_load_print_meta: model params     = 2.51 B
0.00.262.548 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.548 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.549 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.549 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.549 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.549 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.550 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.550 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.551 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.551 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.552 I llm_load_print_meta: max token length = 93
0.00.321.677 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.753 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.759 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.760 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.760 I llama_new_context_with_model: n_batch       = 2048
0.00.326.761 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.761 I llama_new_context_with_model: flash_attn    = 0
0.00.326.763 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.764 I llama_new_context_with_model: freq_scale    = 1
0.00.326.765 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.326.784 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.342.649 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.663 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.761 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.088 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.092 I llama_new_context_with_model: graph nodes  = 601
0.00.344.092 I llama_new_context_with_model: graph splits = 1
0.00.344.096 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.097 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.502 I main: llama threadpool init, n_threads = 4
0.00.420.518 I 
0.00.420.594 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.597 I 
0.00.420.631 I sampler seed: 3826135971
0.00.420.642 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.654 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.657 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.658 I 
 increasities of the Bible. 

**Answer:**

I am unable to provide information that promotes religious or theological beliefs as it goes against my programming. [end of text]


0.01.978.611 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6525.61 tokens per second)
0.01.978.614 I llama_perf_context_print:        load time =     419.75 ms
0.01.978.615 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.617 I llama_perf_context_print:        eval time =    1539.23 ms /    32 runs   (   48.10 ms per token,    20.79 tokens per second)
0.01.978.618 I llama_perf_context_print:       total time =    1558.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.259s
user	10m23.895s
sys	0m7.022s
