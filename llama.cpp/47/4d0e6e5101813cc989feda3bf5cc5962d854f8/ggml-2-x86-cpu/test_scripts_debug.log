+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.655 I build: 3901 (474d0e6e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.349 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.667 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.680 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.686 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.692 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.697 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.699 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.704 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.705 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.720 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.722 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.723 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.725 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.136 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.039 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.309 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.319 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.320 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.322 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.323 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.325 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.329 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.330 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.331 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.332 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.333 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.341 I llama_model_loader: - type  f32:   37 tensors
0.00.271.346 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.283 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.614 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.680 I llm_load_vocab: special tokens cache size = 5
0.00.605.961 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.028 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.029 I llm_load_print_meta: arch             = gemma
0.00.606.030 I llm_load_print_meta: vocab type       = SPM
0.00.606.031 I llm_load_print_meta: n_vocab          = 256000
0.00.606.033 I llm_load_print_meta: n_merges         = 0
0.00.606.034 I llm_load_print_meta: vocab_only       = 0
0.00.606.034 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.035 I llm_load_print_meta: n_embd           = 2048
0.00.606.035 I llm_load_print_meta: n_layer          = 18
0.00.606.101 I llm_load_print_meta: n_head           = 8
0.00.606.108 I llm_load_print_meta: n_head_kv        = 1
0.00.606.109 I llm_load_print_meta: n_rot            = 256
0.00.606.109 I llm_load_print_meta: n_swa            = 0
0.00.606.110 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.110 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.115 I llm_load_print_meta: n_gqa            = 8
0.00.606.142 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.151 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.153 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.159 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.160 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.162 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.163 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.169 I llm_load_print_meta: n_ff             = 16384
0.00.606.171 I llm_load_print_meta: n_expert         = 0
0.00.606.172 I llm_load_print_meta: n_expert_used    = 0
0.00.606.173 I llm_load_print_meta: causal attn      = 1
0.00.606.174 I llm_load_print_meta: pooling type     = 0
0.00.606.175 I llm_load_print_meta: rope type        = 2
0.00.606.178 I llm_load_print_meta: rope scaling     = linear
0.00.606.180 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.181 I llm_load_print_meta: freq_scale_train = 1
0.00.606.181 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.182 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.183 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.184 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.184 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.185 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.186 I llm_load_print_meta: model type       = 2B
0.00.606.188 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.189 I llm_load_print_meta: model params     = 2.51 B
0.00.606.190 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.190 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.191 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.192 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.192 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.193 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.203 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.206 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.206 I llm_load_print_meta: max token length = 93
0.00.606.391 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.708.359 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.708.369 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.708.370 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.708.371 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.708.371 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.708.372 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.714.424 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.434 I llama_new_context_with_model: n_batch    = 2048
0.00.714.435 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.436 I llama_new_context_with_model: flash_attn = 0
0.00.714.440 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.441 I llama_new_context_with_model: freq_scale = 1
0.00.744.845 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.744.892 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.006 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.746.393 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.401 I llama_new_context_with_model: graph nodes  = 601
0.00.746.401 I llama_new_context_with_model: graph splits = 1
0.00.746.421 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.459 I main: llama threadpool init, n_threads = 4
0.01.359.471 I 
0.01.359.583 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.587 I 
0.01.359.761 I sampler seed: 2025920996
0.01.359.772 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.779 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.359.780 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.780 I 
 increasities and contradictions. It is clear that the current paradigm of economics does not offer a coherent framework for addressing these issues.

**What are some alternative frameworks

0.14.926.091 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.55 tokens per second)
0.14.926.105 I llama_perf_context_print:        load time =    1356.43 ms
0.14.926.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.926.109 I llama_perf_context_print:        eval time =   13483.52 ms /    32 runs   (  421.36 ms per token,     2.37 tokens per second)
0.14.926.110 I llama_perf_context_print:       total time =   13566.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.646 I build: 3901 (474d0e6e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.425 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.439 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.442 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.448 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.450 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.451 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.452 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.453 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.454 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.462 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.465 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.064 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.999 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.346 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.355 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.356 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.357 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.358 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.359 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.360 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.365 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.366 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.367 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.368 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.369 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.377 I llama_model_loader: - type  f32:   37 tensors
0.00.271.382 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.176 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.011 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.046 I llm_load_vocab: special tokens cache size = 5
0.00.628.612 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.628.679 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.628.681 I llm_load_print_meta: arch             = gemma
0.00.628.681 I llm_load_print_meta: vocab type       = SPM
0.00.628.682 I llm_load_print_meta: n_vocab          = 256000
0.00.628.684 I llm_load_print_meta: n_merges         = 0
0.00.628.686 I llm_load_print_meta: vocab_only       = 0
0.00.628.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.687 I llm_load_print_meta: n_embd           = 2048
0.00.628.687 I llm_load_print_meta: n_layer          = 18
0.00.628.756 I llm_load_print_meta: n_head           = 8
0.00.628.766 I llm_load_print_meta: n_head_kv        = 1
0.00.628.767 I llm_load_print_meta: n_rot            = 256
0.00.628.768 I llm_load_print_meta: n_swa            = 0
0.00.628.768 I llm_load_print_meta: n_embd_head_k    = 256
0.00.628.769 I llm_load_print_meta: n_embd_head_v    = 256
0.00.628.773 I llm_load_print_meta: n_gqa            = 8
0.00.628.778 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.628.783 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.628.784 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.628.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.628.786 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.628.786 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.628.787 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.628.794 I llm_load_print_meta: n_ff             = 16384
0.00.628.794 I llm_load_print_meta: n_expert         = 0
0.00.628.825 I llm_load_print_meta: n_expert_used    = 0
0.00.628.827 I llm_load_print_meta: causal attn      = 1
0.00.628.827 I llm_load_print_meta: pooling type     = 0
0.00.628.827 I llm_load_print_meta: rope type        = 2
0.00.628.829 I llm_load_print_meta: rope scaling     = linear
0.00.628.831 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.628.832 I llm_load_print_meta: freq_scale_train = 1
0.00.628.832 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.628.832 I llm_load_print_meta: rope_finetuned   = unknown
0.00.628.833 I llm_load_print_meta: ssm_d_conv       = 0
0.00.628.833 I llm_load_print_meta: ssm_d_inner      = 0
0.00.628.834 I llm_load_print_meta: ssm_d_state      = 0
0.00.628.835 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.628.835 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.628.836 I llm_load_print_meta: model type       = 2B
0.00.628.838 I llm_load_print_meta: model ftype      = Q8_0
0.00.628.839 I llm_load_print_meta: model params     = 2.51 B
0.00.628.840 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.628.841 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.628.842 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.628.842 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.628.842 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.628.843 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.628.844 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.628.845 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.628.851 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.628.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.628.854 I llm_load_print_meta: max token length = 93
0.00.629.028 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.724.105 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.729.993 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.001 I llama_new_context_with_model: n_batch    = 2048
0.00.730.001 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.002 I llama_new_context_with_model: flash_attn = 0
0.00.730.006 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.007 I llama_new_context_with_model: freq_scale = 1
0.00.759.975 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.760.021 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.760.136 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.761.598 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.761.605 I llama_new_context_with_model: graph nodes  = 601
0.00.761.605 I llama_new_context_with_model: graph splits = 1
0.00.761.621 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.402.385 I main: llama threadpool init, n_threads = 4
0.01.402.399 I 
0.01.402.515 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.402.519 I 
0.01.402.690 I sampler seed: 3160752478
0.01.402.700 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.402.706 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.402.707 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.402.707 I 
 increamically, her dress billowing like a tempest. Laughter danced on the wind, its shrill notes echoing off the shadowed walls of her tower.

Beneath the

0.15.093.015 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.30 tokens per second)
0.15.093.018 I llama_perf_context_print:        load time =    1399.41 ms
0.15.093.020 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.093.024 I llama_perf_context_print:        eval time =   13607.26 ms /    32 runs   (  425.23 ms per token,     2.35 tokens per second)
0.15.093.025 I llama_perf_context_print:       total time =   13690.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.650 I build: 3901 (474d0e6e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.846 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.059 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.149 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.160 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.162 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.170 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.171 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.172 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.174 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.176 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.184 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.185 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.186 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.187 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.188 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.272.010 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.292.458 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.292.466 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.292.467 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.292.468 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.292.469 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.292.471 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.292.473 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.292.476 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.292.477 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.292.478 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.292.479 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.292.481 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.292.489 I llama_model_loader: - type  f32:   37 tensors
0.00.292.492 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.361 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.560 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.620 I llm_load_vocab: special tokens cache size = 5
0.00.632.303 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.366 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.367 I llm_load_print_meta: arch             = gemma
0.00.632.367 I llm_load_print_meta: vocab type       = SPM
0.00.632.368 I llm_load_print_meta: n_vocab          = 256000
0.00.632.370 I llm_load_print_meta: n_merges         = 0
0.00.632.371 I llm_load_print_meta: vocab_only       = 0
0.00.632.371 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.372 I llm_load_print_meta: n_embd           = 2048
0.00.632.372 I llm_load_print_meta: n_layer          = 18
0.00.632.436 I llm_load_print_meta: n_head           = 8
0.00.632.443 I llm_load_print_meta: n_head_kv        = 1
0.00.632.443 I llm_load_print_meta: n_rot            = 256
0.00.632.444 I llm_load_print_meta: n_swa            = 0
0.00.632.444 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.444 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.449 I llm_load_print_meta: n_gqa            = 8
0.00.632.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.459 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.460 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.462 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.463 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.463 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.468 I llm_load_print_meta: n_ff             = 16384
0.00.632.468 I llm_load_print_meta: n_expert         = 0
0.00.632.468 I llm_load_print_meta: n_expert_used    = 0
0.00.632.469 I llm_load_print_meta: causal attn      = 1
0.00.632.469 I llm_load_print_meta: pooling type     = 0
0.00.632.469 I llm_load_print_meta: rope type        = 2
0.00.632.469 I llm_load_print_meta: rope scaling     = linear
0.00.632.471 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.471 I llm_load_print_meta: freq_scale_train = 1
0.00.632.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.473 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.473 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.474 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.474 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.474 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.475 I llm_load_print_meta: model type       = 2B
0.00.632.476 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.477 I llm_load_print_meta: model params     = 2.51 B
0.00.632.477 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.478 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.478 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.479 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.479 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.480 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.481 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.481 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.487 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.489 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.489 I llm_load_print_meta: max token length = 93
0.00.632.654 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.710.275 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.710.288 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.289 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.710.289 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.710.290 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.291 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.716.087 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.096 I llama_new_context_with_model: n_batch    = 2048
0.00.716.096 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.097 I llama_new_context_with_model: flash_attn = 0
0.00.716.101 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.102 I llama_new_context_with_model: freq_scale = 1
0.00.746.340 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.386 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.747.893 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.899 I llama_new_context_with_model: graph nodes  = 601
0.00.747.900 I llama_new_context_with_model: graph splits = 1
0.00.747.915 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.490 I main: llama threadpool init, n_threads = 4
0.01.359.501 I 
0.01.359.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.611 I 
0.01.359.780 I sampler seed: 687919085
0.01.359.791 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.798 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.359.799 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.799 I 
 maneupher in the following sentence: "The process of evolution is a continuous and unpredictable journey."

**A)** Continuous
**B)** Unpredictable


0.14.922.684 I llama_perf_sampler_print:    sampling time =      48.86 ms /    33 runs   (    1.48 ms per token,   675.39 tokens per second)
0.14.922.700 I llama_perf_context_print:        load time =    1356.51 ms
0.14.922.702 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.922.703 I llama_perf_context_print:        eval time =   13480.62 ms /    32 runs   (  421.27 ms per token,     2.37 tokens per second)
0.14.922.704 I llama_perf_context_print:       total time =   13563.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.630 I build: 3901 (474d0e6e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.868 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.086 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.195 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.199 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.201 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.203 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.204 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.206 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.215 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.221 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.222 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.226 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.116 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.274.595 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.293.038 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.293.049 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.293.050 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.293.052 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.293.052 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.293.054 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.293.055 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.293.059 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.293.060 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.293.061 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.293.062 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.293.063 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.293.073 I llama_model_loader: - type  f32:   37 tensors
0.00.293.076 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.882 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.102 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.136 I llm_load_vocab: special tokens cache size = 5
0.00.634.221 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.289 I llm_load_print_meta: arch             = gemma
0.00.634.290 I llm_load_print_meta: vocab type       = SPM
0.00.634.291 I llm_load_print_meta: n_vocab          = 256000
0.00.634.293 I llm_load_print_meta: n_merges         = 0
0.00.634.293 I llm_load_print_meta: vocab_only       = 0
0.00.634.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.294 I llm_load_print_meta: n_embd           = 2048
0.00.634.294 I llm_load_print_meta: n_layer          = 18
0.00.634.358 I llm_load_print_meta: n_head           = 8
0.00.634.366 I llm_load_print_meta: n_head_kv        = 1
0.00.634.366 I llm_load_print_meta: n_rot            = 256
0.00.634.367 I llm_load_print_meta: n_swa            = 0
0.00.634.367 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.367 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.372 I llm_load_print_meta: n_gqa            = 8
0.00.634.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.381 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.382 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.384 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.385 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.386 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.386 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.408 I llm_load_print_meta: n_ff             = 16384
0.00.634.409 I llm_load_print_meta: n_expert         = 0
0.00.634.410 I llm_load_print_meta: n_expert_used    = 0
0.00.634.410 I llm_load_print_meta: causal attn      = 1
0.00.634.410 I llm_load_print_meta: pooling type     = 0
0.00.634.411 I llm_load_print_meta: rope type        = 2
0.00.634.411 I llm_load_print_meta: rope scaling     = linear
0.00.634.412 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.413 I llm_load_print_meta: freq_scale_train = 1
0.00.634.413 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.414 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.414 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.414 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.415 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.416 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.416 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.416 I llm_load_print_meta: model type       = 2B
0.00.634.417 I llm_load_print_meta: model ftype      = Q8_0
0.00.634.418 I llm_load_print_meta: model params     = 2.51 B
0.00.634.419 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.634.419 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.420 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.420 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.420 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.421 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.421 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.422 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.428 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.430 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.431 I llm_load_print_meta: max token length = 93
0.00.634.597 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.857 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.705.869 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.711.623 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.630 I llama_new_context_with_model: n_batch    = 2048
0.00.711.631 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.631 I llama_new_context_with_model: flash_attn = 0
0.00.711.634 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.635 I llama_new_context_with_model: freq_scale = 1
0.00.740.669 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.713 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.831 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.742.162 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.170 I llama_new_context_with_model: graph nodes  = 601
0.00.742.170 I llama_new_context_with_model: graph splits = 1
0.00.742.189 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.926 I main: llama threadpool init, n_threads = 4
0.01.352.940 I 
0.01.353.060 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.093 I 
0.01.353.279 I sampler seed: 2454568903
0.01.353.291 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.298 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.353.299 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.299 I 
 increamental, and concurrent. [end of text]


0.04.319.535 I llama_perf_sampler_print:    sampling time =      10.88 ms /     8 runs   (    1.36 ms per token,   735.23 tokens per second)
0.04.319.538 I llama_perf_context_print:        load time =    1349.92 ms
0.04.319.540 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.319.541 I llama_perf_context_print:        eval time =    2947.12 ms /     7 runs   (  421.02 ms per token,     2.38 tokens per second)
0.04.319.555 I llama_perf_context_print:       total time =    2966.62 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.103s
user	3m8.006s
sys	0m9.571s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3901 (474d0e6e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198479.88 ms
main:    total time = 198479.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.670 I build: 3901 (474d0e6e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.128 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.345 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.442 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.453 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.456 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.460 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.462 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.464 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.466 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.468 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.478 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.479 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.481 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.447 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.965 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.269 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.281 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.282 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.284 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.284 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.287 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.291 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.292 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.293 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.296 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.308 I llama_model_loader: - type  f32:   37 tensors
0.00.271.313 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.314 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.284 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.047 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.052 I llm_load_vocab: special tokens cache size = 5
0.00.611.314 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.376 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.377 I llm_load_print_meta: arch             = gemma
0.00.611.378 I llm_load_print_meta: vocab type       = SPM
0.00.611.379 I llm_load_print_meta: n_vocab          = 256000
0.00.611.381 I llm_load_print_meta: n_merges         = 0
0.00.611.382 I llm_load_print_meta: vocab_only       = 0
0.00.611.382 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.383 I llm_load_print_meta: n_embd           = 2048
0.00.611.383 I llm_load_print_meta: n_layer          = 18
0.00.611.447 I llm_load_print_meta: n_head           = 8
0.00.611.454 I llm_load_print_meta: n_head_kv        = 1
0.00.611.454 I llm_load_print_meta: n_rot            = 256
0.00.611.455 I llm_load_print_meta: n_swa            = 0
0.00.611.456 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.457 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.463 I llm_load_print_meta: n_gqa            = 8
0.00.611.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.494 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.505 I llm_load_print_meta: n_ff             = 16384
0.00.611.507 I llm_load_print_meta: n_expert         = 0
0.00.611.507 I llm_load_print_meta: n_expert_used    = 0
0.00.611.508 I llm_load_print_meta: causal attn      = 1
0.00.611.508 I llm_load_print_meta: pooling type     = 0
0.00.611.509 I llm_load_print_meta: rope type        = 2
0.00.611.509 I llm_load_print_meta: rope scaling     = linear
0.00.611.511 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.512 I llm_load_print_meta: freq_scale_train = 1
0.00.611.512 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.513 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.514 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.514 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.515 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.515 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.515 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.516 I llm_load_print_meta: model type       = 2B
0.00.611.517 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.518 I llm_load_print_meta: model params     = 2.51 B
0.00.611.519 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.519 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.520 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.520 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.521 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.528 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.530 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.531 I llm_load_print_meta: max token length = 93
0.00.611.698 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.812 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.670.822 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.670.823 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.670.824 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.670.824 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.670.825 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.676.515 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.521 I llama_new_context_with_model: n_batch    = 2048
0.00.676.522 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.522 I llama_new_context_with_model: flash_attn = 0
0.00.676.526 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.527 I llama_new_context_with_model: freq_scale = 1
0.00.706.272 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.318 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.428 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.707.798 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.707.804 I llama_new_context_with_model: graph nodes  = 601
0.00.707.805 I llama_new_context_with_model: graph splits = 1
0.00.707.821 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.445 I main: llama threadpool init, n_threads = 4
0.01.287.458 I 
0.01.287.567 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.571 I 
0.01.287.738 I sampler seed: 61048974
0.01.287.748 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.755 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.287.756 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.756 I 
 seconary in the following sentence: "The man who was once a child is now an old man."

The correct answer is: Adolescence.

Ad

0.12.271.931 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.00 tokens per second)
0.12.271.934 I llama_perf_context_print:        load time =    1284.44 ms
0.12.271.949 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.271.951 I llama_perf_context_print:        eval time =   10902.00 ms /    32 runs   (  340.69 ms per token,     2.94 tokens per second)
0.12.271.951 I llama_perf_context_print:       total time =   10984.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3901 (474d0e6e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198429.36 ms
main:    total time = 198429.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.690 I build: 3901 (474d0e6e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.859 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.667 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.766 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.781 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.783 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.787 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.789 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.790 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.791 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.793 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.794 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.801 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.803 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.804 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.806 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.807 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.204 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.425 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.539 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.550 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.551 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.552 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.569 I llama_model_loader: - type  f32:   37 tensors
0.00.269.574 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.575 I llama_model_loader: - type q6_K:   19 tensors
0.00.467.069 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.291 I llm_load_vocab: special tokens cache size = 5
0.00.625.479 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.542 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.543 I llm_load_print_meta: arch             = gemma
0.00.625.544 I llm_load_print_meta: vocab type       = SPM
0.00.625.544 I llm_load_print_meta: n_vocab          = 256000
0.00.625.546 I llm_load_print_meta: n_merges         = 0
0.00.625.547 I llm_load_print_meta: vocab_only       = 0
0.00.625.547 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.548 I llm_load_print_meta: n_embd           = 2048
0.00.625.548 I llm_load_print_meta: n_layer          = 18
0.00.625.614 I llm_load_print_meta: n_head           = 8
0.00.625.621 I llm_load_print_meta: n_head_kv        = 1
0.00.625.621 I llm_load_print_meta: n_rot            = 256
0.00.625.622 I llm_load_print_meta: n_swa            = 0
0.00.625.622 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.622 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.627 I llm_load_print_meta: n_gqa            = 8
0.00.625.632 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.638 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.640 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.642 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.642 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.642 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.656 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.662 I llm_load_print_meta: n_ff             = 16384
0.00.625.662 I llm_load_print_meta: n_expert         = 0
0.00.625.663 I llm_load_print_meta: n_expert_used    = 0
0.00.625.664 I llm_load_print_meta: causal attn      = 1
0.00.625.665 I llm_load_print_meta: pooling type     = 0
0.00.625.665 I llm_load_print_meta: rope type        = 2
0.00.625.666 I llm_load_print_meta: rope scaling     = linear
0.00.625.667 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.668 I llm_load_print_meta: freq_scale_train = 1
0.00.625.669 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.669 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.669 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.674 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.674 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.676 I llm_load_print_meta: model type       = 2B
0.00.625.677 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.625.677 I llm_load_print_meta: model params     = 2.51 B
0.00.625.679 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.625.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.693 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.694 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.700 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.701 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.701 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.707 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.709 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.710 I llm_load_print_meta: max token length = 93
0.00.625.879 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.682.932 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.688.489 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.497 I llama_new_context_with_model: n_batch    = 2048
0.00.688.498 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.498 I llama_new_context_with_model: flash_attn = 0
0.00.688.502 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.503 I llama_new_context_with_model: freq_scale = 1
0.00.719.936 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.982 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.720.101 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.721.457 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.721.464 I llama_new_context_with_model: graph nodes  = 601
0.00.721.464 I llama_new_context_with_model: graph splits = 1
0.00.721.480 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.484 I main: llama threadpool init, n_threads = 4
0.01.301.499 I 
0.01.301.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.611 I 
0.01.301.781 I sampler seed: 1126146487
0.01.301.791 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.797 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.301.798 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.800 I 
 fufilling with the most captivating visuals, music, and narrative.

This is the essence of my artistic vision, a tapestry woven with threads of cinematic brilliance,

0.12.382.775 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.50 tokens per second)
0.12.382.778 I llama_perf_context_print:        load time =    1298.43 ms
0.12.382.780 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.382.781 I llama_perf_context_print:        eval time =   10998.60 ms /    32 runs   (  343.71 ms per token,     2.91 tokens per second)
0.12.382.783 I llama_perf_context_print:       total time =   11081.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.483s
user	50m12.538s
sys	0m6.422s
