+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.580 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.782 I main: load the model and apply lora adapter, if any
0.00.021.533 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.543 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.552 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.556 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.557 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.561 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.562 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.563 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.563 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.564 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.564 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.568 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.569 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.569 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.570 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.570 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.513 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.764 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.690 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.697 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.698 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.699 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.700 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.701 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.702 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.706 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.707 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.709 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.709 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.711 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.715 I llama_model_loader: - type  f32:   37 tensors
0.00.133.716 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.118 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.562 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.213 I llm_load_vocab: special tokens cache size = 5
0.00.287.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.623 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.624 I llm_load_print_meta: arch             = gemma
0.00.287.624 I llm_load_print_meta: vocab type       = SPM
0.00.287.625 I llm_load_print_meta: n_vocab          = 256000
0.00.287.626 I llm_load_print_meta: n_merges         = 0
0.00.287.626 I llm_load_print_meta: vocab_only       = 0
0.00.287.626 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.627 I llm_load_print_meta: n_embd           = 2048
0.00.287.627 I llm_load_print_meta: n_layer          = 18
0.00.287.639 I llm_load_print_meta: n_head           = 8
0.00.287.640 I llm_load_print_meta: n_head_kv        = 1
0.00.287.640 I llm_load_print_meta: n_rot            = 256
0.00.287.641 I llm_load_print_meta: n_swa            = 0
0.00.287.641 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.641 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.642 I llm_load_print_meta: n_gqa            = 8
0.00.287.643 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.644 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.646 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.647 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.647 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.647 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.648 I llm_load_print_meta: n_ff             = 16384
0.00.287.648 I llm_load_print_meta: n_expert         = 0
0.00.287.648 I llm_load_print_meta: n_expert_used    = 0
0.00.287.649 I llm_load_print_meta: causal attn      = 1
0.00.287.649 I llm_load_print_meta: pooling type     = 0
0.00.287.649 I llm_load_print_meta: rope type        = 2
0.00.287.650 I llm_load_print_meta: rope scaling     = linear
0.00.287.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.652 I llm_load_print_meta: freq_scale_train = 1
0.00.287.652 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.652 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.653 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.653 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.653 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.653 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.653 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.654 I llm_load_print_meta: model type       = 2B
0.00.287.655 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.656 I llm_load_print_meta: model params     = 2.51 B
0.00.287.656 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.657 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.658 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.658 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.658 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.659 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.659 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.660 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.660 I llm_load_print_meta: max token length = 93
0.00.388.496 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.388.503 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.388.504 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.388.504 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.388.505 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.388.505 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.393.782 I llama_new_context_with_model: n_seq_max     = 1
0.00.393.789 I llama_new_context_with_model: n_ctx         = 4096
0.00.393.789 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.393.790 I llama_new_context_with_model: n_batch       = 2048
0.00.393.790 I llama_new_context_with_model: n_ubatch      = 512
0.00.393.791 I llama_new_context_with_model: flash_attn    = 0
0.00.393.793 I llama_new_context_with_model: freq_base     = 10000.0
0.00.393.793 I llama_new_context_with_model: freq_scale    = 1
0.00.393.794 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.408.295 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.408.308 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.408.400 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.706 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.409.712 I llama_new_context_with_model: graph nodes  = 601
0.00.409.713 I llama_new_context_with_model: graph splits = 1
0.00.409.715 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.497.774 I main: llama threadpool init, n_threads = 4
0.00.497.791 I 
0.00.497.863 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.497.867 I 
0.00.497.914 I sampler seed: 234100174
0.00.497.924 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.497.936 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.497.939 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.497.940 I 
 increasively through the list of words, highlighting each word's pronunciation.

The words are arranged in alphabetical order.

- bake
- bear
-

0.02.800.759 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6466.78 tokens per second)
0.02.800.762 I llama_perf_context_print:        load time =     496.97 ms
0.02.800.763 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.800.765 I llama_perf_context_print:        eval time =    2283.38 ms /    32 runs   (   71.36 ms per token,    14.01 tokens per second)
0.02.800.765 I llama_perf_context_print:       total time =    2302.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.498 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.688 I main: llama backend init
0.00.000.695 I main: load the model and apply lora adapter, if any
0.00.021.039 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.070 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.074 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.077 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.078 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.083 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.084 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.085 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.085 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.380 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.710 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.717 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.717 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.718 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.719 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.719 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.720 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.723 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.723 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.724 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.726 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.727 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.731 I llama_model_loader: - type  f32:   37 tensors
0.00.132.732 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.316 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.793 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.453 I llm_load_vocab: special tokens cache size = 5
0.00.281.804 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.822 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.823 I llm_load_print_meta: arch             = gemma
0.00.281.823 I llm_load_print_meta: vocab type       = SPM
0.00.281.824 I llm_load_print_meta: n_vocab          = 256000
0.00.281.824 I llm_load_print_meta: n_merges         = 0
0.00.281.825 I llm_load_print_meta: vocab_only       = 0
0.00.281.825 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.826 I llm_load_print_meta: n_embd           = 2048
0.00.281.826 I llm_load_print_meta: n_layer          = 18
0.00.281.839 I llm_load_print_meta: n_head           = 8
0.00.281.840 I llm_load_print_meta: n_head_kv        = 1
0.00.281.840 I llm_load_print_meta: n_rot            = 256
0.00.281.840 I llm_load_print_meta: n_swa            = 0
0.00.281.840 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.841 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.842 I llm_load_print_meta: n_gqa            = 8
0.00.281.843 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.844 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.844 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.846 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.846 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.847 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.847 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.848 I llm_load_print_meta: n_ff             = 16384
0.00.281.848 I llm_load_print_meta: n_expert         = 0
0.00.281.848 I llm_load_print_meta: n_expert_used    = 0
0.00.281.849 I llm_load_print_meta: causal attn      = 1
0.00.281.849 I llm_load_print_meta: pooling type     = 0
0.00.281.849 I llm_load_print_meta: rope type        = 2
0.00.281.849 I llm_load_print_meta: rope scaling     = linear
0.00.281.851 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.851 I llm_load_print_meta: freq_scale_train = 1
0.00.281.852 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.852 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.852 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.853 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.853 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.853 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.854 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.854 I llm_load_print_meta: model type       = 2B
0.00.281.854 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.855 I llm_load_print_meta: model params     = 2.51 B
0.00.281.856 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.857 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.857 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.858 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.858 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.858 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.859 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.860 I llm_load_print_meta: max token length = 93
0.00.375.236 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.530 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.536 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.537 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.537 I llama_new_context_with_model: n_batch       = 2048
0.00.380.538 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.538 I llama_new_context_with_model: flash_attn    = 0
0.00.380.542 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.543 I llama_new_context_with_model: freq_scale    = 1
0.00.380.544 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.512 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.529 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.622 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.912 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.916 I llama_new_context_with_model: graph nodes  = 601
0.00.396.917 I llama_new_context_with_model: graph splits = 1
0.00.396.918 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.220 I main: llama threadpool init, n_threads = 4
0.00.478.234 I 
0.00.478.306 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.478.310 I 
0.00.478.350 I sampler seed: 521536264
0.00.478.361 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.373 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.377 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.377 I 
 seconal, a young man from a humble background, navigates the labyrinthine streets of the capital, driven by a burning ambition to carve his own destiny.

0.02.700.741 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6676.11 tokens per second)
0.02.700.743 I llama_perf_context_print:        load time =     477.51 ms
0.02.700.744 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.700.745 I llama_perf_context_print:        eval time =    2203.14 ms /    32 runs   (   68.85 ms per token,    14.52 tokens per second)
0.02.700.746 I llama_perf_context_print:       total time =    2222.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.584 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.000.784 I main: load the model and apply lora adapter, if any
0.00.021.488 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.499 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.507 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.516 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.520 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.525 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.525 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.526 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.527 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.528 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.528 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.533 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.534 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.535 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.535 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.536 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.442 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.359 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.366 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.367 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.367 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.368 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.369 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.370 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.372 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.373 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.374 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.375 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.376 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.381 I llama_model_loader: - type  f32:   37 tensors
0.00.133.382 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.399 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.182 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.808 I llm_load_vocab: special tokens cache size = 5
0.00.280.313 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.333 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.334 I llm_load_print_meta: arch             = gemma
0.00.280.334 I llm_load_print_meta: vocab type       = SPM
0.00.280.335 I llm_load_print_meta: n_vocab          = 256000
0.00.280.336 I llm_load_print_meta: n_merges         = 0
0.00.280.336 I llm_load_print_meta: vocab_only       = 0
0.00.280.337 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.337 I llm_load_print_meta: n_embd           = 2048
0.00.280.337 I llm_load_print_meta: n_layer          = 18
0.00.280.350 I llm_load_print_meta: n_head           = 8
0.00.280.351 I llm_load_print_meta: n_head_kv        = 1
0.00.280.351 I llm_load_print_meta: n_rot            = 256
0.00.280.351 I llm_load_print_meta: n_swa            = 0
0.00.280.352 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.352 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.353 I llm_load_print_meta: n_gqa            = 8
0.00.280.354 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.355 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.356 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.357 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.358 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.358 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.358 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.359 I llm_load_print_meta: n_ff             = 16384
0.00.280.359 I llm_load_print_meta: n_expert         = 0
0.00.280.360 I llm_load_print_meta: n_expert_used    = 0
0.00.280.360 I llm_load_print_meta: causal attn      = 1
0.00.280.360 I llm_load_print_meta: pooling type     = 0
0.00.280.360 I llm_load_print_meta: rope type        = 2
0.00.280.361 I llm_load_print_meta: rope scaling     = linear
0.00.280.362 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.363 I llm_load_print_meta: freq_scale_train = 1
0.00.280.363 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.364 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.364 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.364 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.364 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.364 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.365 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.365 I llm_load_print_meta: model type       = 2B
0.00.280.366 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.367 I llm_load_print_meta: model params     = 2.51 B
0.00.280.368 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.368 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.369 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.369 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.370 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.370 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.370 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.371 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.371 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.372 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.372 I llm_load_print_meta: max token length = 93
0.00.353.614 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.621 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.622 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.622 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.623 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.623 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.961 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.971 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.971 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.971 I llama_new_context_with_model: n_batch       = 2048
0.00.358.972 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.973 I llama_new_context_with_model: flash_attn    = 0
0.00.358.976 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.977 I llama_new_context_with_model: freq_scale    = 1
0.00.358.978 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.790 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.802 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.897 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.244 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.251 I llama_new_context_with_model: graph nodes  = 601
0.00.375.252 I llama_new_context_with_model: graph splits = 1
0.00.375.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.253 I main: llama threadpool init, n_threads = 4
0.00.473.275 I 
0.00.473.371 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.377 I 
0.00.473.429 I sampler seed: 3799901845
0.00.473.445 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.448 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.449 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.449 I 
 increasities. [end of text]


0.00.766.717 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8064.52 tokens per second)
0.00.766.720 I llama_perf_context_print:        load time =     472.45 ms
0.00.766.721 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.766.723 I llama_perf_context_print:        eval time =     290.19 ms /     4 runs   (   72.55 ms per token,    13.78 tokens per second)
0.00.766.723 I llama_perf_context_print:       total time =     293.48 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.566 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.022.243 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.252 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.260 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.266 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.267 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.271 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.272 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.273 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.274 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.275 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.278 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.279 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.280 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.280 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.281 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.359 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.268 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.122 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.130 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.131 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.131 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.132 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.133 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.134 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.137 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.138 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.138 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.139 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.144 I llama_model_loader: - type  f32:   37 tensors
0.00.134.145 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.320 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.814 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.528 I llm_load_vocab: special tokens cache size = 5
0.00.282.888 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.908 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.909 I llm_load_print_meta: arch             = gemma
0.00.282.909 I llm_load_print_meta: vocab type       = SPM
0.00.282.910 I llm_load_print_meta: n_vocab          = 256000
0.00.282.911 I llm_load_print_meta: n_merges         = 0
0.00.282.911 I llm_load_print_meta: vocab_only       = 0
0.00.282.912 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.912 I llm_load_print_meta: n_embd           = 2048
0.00.282.912 I llm_load_print_meta: n_layer          = 18
0.00.282.923 I llm_load_print_meta: n_head           = 8
0.00.282.924 I llm_load_print_meta: n_head_kv        = 1
0.00.282.925 I llm_load_print_meta: n_rot            = 256
0.00.282.925 I llm_load_print_meta: n_swa            = 0
0.00.282.925 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.926 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.927 I llm_load_print_meta: n_gqa            = 8
0.00.282.928 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.928 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.929 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.931 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.931 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.931 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.932 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.932 I llm_load_print_meta: n_ff             = 16384
0.00.282.933 I llm_load_print_meta: n_expert         = 0
0.00.282.933 I llm_load_print_meta: n_expert_used    = 0
0.00.282.933 I llm_load_print_meta: causal attn      = 1
0.00.282.933 I llm_load_print_meta: pooling type     = 0
0.00.282.934 I llm_load_print_meta: rope type        = 2
0.00.282.934 I llm_load_print_meta: rope scaling     = linear
0.00.282.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.937 I llm_load_print_meta: freq_scale_train = 1
0.00.282.937 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.937 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.938 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.939 I llm_load_print_meta: model type       = 2B
0.00.282.939 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.940 I llm_load_print_meta: model params     = 2.51 B
0.00.282.941 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.941 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.942 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.943 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.943 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.944 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.945 I llm_load_print_meta: max token length = 93
0.00.354.237 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.244 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.475 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.480 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.481 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.481 I llama_new_context_with_model: n_batch       = 2048
0.00.359.482 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.482 I llama_new_context_with_model: flash_attn    = 0
0.00.359.485 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.486 I llama_new_context_with_model: freq_scale    = 1
0.00.359.486 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.247 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.262 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.357 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.691 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.696 I llama_new_context_with_model: graph nodes  = 601
0.00.375.696 I llama_new_context_with_model: graph splits = 1
0.00.375.698 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.409 I main: llama threadpool init, n_threads = 4
0.00.463.424 I 
0.00.463.500 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.504 I 
0.00.463.551 I sampler seed: 2771122378
0.00.463.562 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.565 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.565 I 
 increably. 

**Answer:** I am unable to generate responses that contain inappropriate or sexually suggestive content. [end of text]


0.02.222.747 I llama_perf_sampler_print:    sampling time =       3.56 ms /    24 runs   (    0.15 ms per token,  6739.68 tokens per second)
0.02.222.750 I llama_perf_context_print:        load time =     462.62 ms
0.02.222.752 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.222.754 I llama_perf_context_print:        eval time =    1745.03 ms /    23 runs   (   75.87 ms per token,    13.18 tokens per second)
0.02.222.755 I llama_perf_context_print:       total time =    1759.35 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.107s
user	0m29.267s
sys	0m9.535s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4170 (47f931c8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40459.00 ms
main:    total time = 40459.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.452 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.461 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.474 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.475 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.480 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.480 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.481 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.481 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.482 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.486 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.488 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.488 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.489 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.069 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.866 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.799 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.805 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.806 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.807 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.808 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.809 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.810 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.814 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.815 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.816 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.817 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.818 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.821 I llama_model_loader: - type  f32:   37 tensors
0.00.132.823 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.824 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.460 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.067 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.644 I llm_load_vocab: special tokens cache size = 5
0.00.290.786 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.810 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.810 I llm_load_print_meta: arch             = gemma
0.00.290.811 I llm_load_print_meta: vocab type       = SPM
0.00.290.811 I llm_load_print_meta: n_vocab          = 256000
0.00.290.812 I llm_load_print_meta: n_merges         = 0
0.00.290.812 I llm_load_print_meta: vocab_only       = 0
0.00.290.813 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.813 I llm_load_print_meta: n_embd           = 2048
0.00.290.813 I llm_load_print_meta: n_layer          = 18
0.00.290.826 I llm_load_print_meta: n_head           = 8
0.00.290.827 I llm_load_print_meta: n_head_kv        = 1
0.00.290.827 I llm_load_print_meta: n_rot            = 256
0.00.290.828 I llm_load_print_meta: n_swa            = 0
0.00.290.828 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.828 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.829 I llm_load_print_meta: n_gqa            = 8
0.00.290.830 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.831 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.832 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.834 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.835 I llm_load_print_meta: n_ff             = 16384
0.00.290.836 I llm_load_print_meta: n_expert         = 0
0.00.290.836 I llm_load_print_meta: n_expert_used    = 0
0.00.290.836 I llm_load_print_meta: causal attn      = 1
0.00.290.837 I llm_load_print_meta: pooling type     = 0
0.00.290.837 I llm_load_print_meta: rope type        = 2
0.00.290.837 I llm_load_print_meta: rope scaling     = linear
0.00.290.839 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.839 I llm_load_print_meta: freq_scale_train = 1
0.00.290.840 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.840 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.840 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.840 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.841 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.842 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.842 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.842 I llm_load_print_meta: model type       = 2B
0.00.290.843 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.290.844 I llm_load_print_meta: model params     = 2.51 B
0.00.290.845 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.290.845 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.846 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.846 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.847 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.847 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.848 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.848 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.848 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.849 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.849 I llm_load_print_meta: max token length = 93
0.00.349.634 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.349.643 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.349.644 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.349.645 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.349.645 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.349.646 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.354.903 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.911 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.911 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.912 I llama_new_context_with_model: n_batch       = 2048
0.00.354.912 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.913 I llama_new_context_with_model: flash_attn    = 0
0.00.354.915 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.916 I llama_new_context_with_model: freq_scale    = 1
0.00.354.917 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.356 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.370 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.464 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.805 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.810 I llama_new_context_with_model: graph nodes  = 601
0.00.371.811 I llama_new_context_with_model: graph splits = 1
0.00.371.812 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.293 I main: llama threadpool init, n_threads = 4
0.00.448.308 I 
0.00.448.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.387 I 
0.00.448.432 I sampler seed: 4260915065
0.00.448.446 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.455 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.457 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.457 I 
 increasities.

I do not understand this context. Could you please provide more information? [end of text]


0.01.433.143 I llama_perf_sampler_print:    sampling time =       3.25 ms /    20 runs   (    0.16 ms per token,  6163.33 tokens per second)
0.01.433.145 I llama_perf_context_print:        load time =     447.52 ms
0.01.433.146 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.433.147 I llama_perf_context_print:        eval time =     972.65 ms /    19 runs   (   51.19 ms per token,    19.53 tokens per second)
0.01.433.148 I llama_perf_context_print:       total time =     984.86 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4170 (47f931c8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40222.13 ms
main:    total time = 40222.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.203 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.219 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.226 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.227 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.231 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.232 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.233 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.234 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.239 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.240 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.241 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.241 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.242 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.776 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.380 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.288 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.295 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.296 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.297 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.297 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.298 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.299 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.302 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.302 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.306 I llama_model_loader: - type  f32:   37 tensors
0.00.133.307 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.308 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.394 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.622 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.284 I llm_load_vocab: special tokens cache size = 5
0.00.291.571 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.592 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.592 I llm_load_print_meta: arch             = gemma
0.00.291.593 I llm_load_print_meta: vocab type       = SPM
0.00.291.593 I llm_load_print_meta: n_vocab          = 256000
0.00.291.594 I llm_load_print_meta: n_merges         = 0
0.00.291.595 I llm_load_print_meta: vocab_only       = 0
0.00.291.595 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.595 I llm_load_print_meta: n_embd           = 2048
0.00.291.596 I llm_load_print_meta: n_layer          = 18
0.00.291.607 I llm_load_print_meta: n_head           = 8
0.00.291.608 I llm_load_print_meta: n_head_kv        = 1
0.00.291.608 I llm_load_print_meta: n_rot            = 256
0.00.291.609 I llm_load_print_meta: n_swa            = 0
0.00.291.609 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.609 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.610 I llm_load_print_meta: n_gqa            = 8
0.00.291.611 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.612 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.613 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.615 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.615 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.616 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.616 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.617 I llm_load_print_meta: n_ff             = 16384
0.00.291.617 I llm_load_print_meta: n_expert         = 0
0.00.291.617 I llm_load_print_meta: n_expert_used    = 0
0.00.291.617 I llm_load_print_meta: causal attn      = 1
0.00.291.618 I llm_load_print_meta: pooling type     = 0
0.00.291.618 I llm_load_print_meta: rope type        = 2
0.00.291.618 I llm_load_print_meta: rope scaling     = linear
0.00.291.620 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.620 I llm_load_print_meta: freq_scale_train = 1
0.00.291.621 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.621 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.621 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.622 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.622 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.622 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.622 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.623 I llm_load_print_meta: model type       = 2B
0.00.291.624 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.624 I llm_load_print_meta: model params     = 2.51 B
0.00.291.625 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.625 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.626 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.626 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.627 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.627 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.628 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.628 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.629 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.629 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.629 I llm_load_print_meta: max token length = 93
0.00.348.290 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.353.330 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.337 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.337 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.338 I llama_new_context_with_model: n_batch       = 2048
0.00.353.338 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.339 I llama_new_context_with_model: flash_attn    = 0
0.00.353.341 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.342 I llama_new_context_with_model: freq_scale    = 1
0.00.353.343 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.081 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.096 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.197 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.442 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.449 I llama_new_context_with_model: graph nodes  = 601
0.00.369.449 I llama_new_context_with_model: graph splits = 1
0.00.369.452 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.133 I main: llama threadpool init, n_threads = 4
0.00.445.149 I 
0.00.445.224 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.228 I 
0.00.445.271 I sampler seed: 3370778731
0.00.445.282 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.291 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.294 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.294 I 
 seconally, in order from least to greatest.

A) 1, 2, 3, 4, 5
B) 1

0.02.114.753 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6034.01 tokens per second)
0.02.114.755 I llama_perf_context_print:        load time =     444.33 ms
0.02.114.757 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.114.759 I llama_perf_context_print:        eval time =    1649.41 ms /    32 runs   (   51.54 ms per token,    19.40 tokens per second)
0.02.114.760 I llama_perf_context_print:       total time =    1669.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.047s
user	10m22.371s
sys	0m7.069s
