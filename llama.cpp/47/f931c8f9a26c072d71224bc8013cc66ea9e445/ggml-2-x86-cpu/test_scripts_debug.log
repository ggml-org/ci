+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.708 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.916 I main: llama backend init
0.00.000.924 I main: load the model and apply lora adapter, if any
0.00.023.624 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.637 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.731 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.744 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.746 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.753 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.758 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.759 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.761 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.762 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.763 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.770 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.771 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.774 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.775 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.776 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.965 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.911 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.925 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.927 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.928 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.930 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.931 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.936 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.937 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.938 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.940 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.941 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.950 I llama_model_loader: - type  f32:   37 tensors
0.00.350.952 I llama_model_loader: - type q8_0:  127 tensors
0.00.590.703 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.660.571 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.661.661 I llm_load_vocab: special tokens cache size = 5
0.00.850.750 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.824 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.825 I llm_load_print_meta: arch             = gemma
0.00.850.826 I llm_load_print_meta: vocab type       = SPM
0.00.850.827 I llm_load_print_meta: n_vocab          = 256000
0.00.850.829 I llm_load_print_meta: n_merges         = 0
0.00.850.829 I llm_load_print_meta: vocab_only       = 0
0.00.850.829 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.830 I llm_load_print_meta: n_embd           = 2048
0.00.850.830 I llm_load_print_meta: n_layer          = 18
0.00.850.896 I llm_load_print_meta: n_head           = 8
0.00.850.904 I llm_load_print_meta: n_head_kv        = 1
0.00.850.904 I llm_load_print_meta: n_rot            = 256
0.00.850.905 I llm_load_print_meta: n_swa            = 0
0.00.850.905 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.905 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.910 I llm_load_print_meta: n_gqa            = 8
0.00.850.915 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.920 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.921 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.923 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.924 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.925 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.930 I llm_load_print_meta: n_ff             = 16384
0.00.850.931 I llm_load_print_meta: n_expert         = 0
0.00.850.931 I llm_load_print_meta: n_expert_used    = 0
0.00.850.931 I llm_load_print_meta: causal attn      = 1
0.00.850.932 I llm_load_print_meta: pooling type     = 0
0.00.850.932 I llm_load_print_meta: rope type        = 2
0.00.850.933 I llm_load_print_meta: rope scaling     = linear
0.00.850.934 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.935 I llm_load_print_meta: freq_scale_train = 1
0.00.850.936 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.936 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.937 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.938 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.939 I llm_load_print_meta: model type       = 2B
0.00.850.940 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.940 I llm_load_print_meta: model params     = 2.51 B
0.00.850.952 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.952 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.953 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.959 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.960 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.960 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.961 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.961 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.966 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.969 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.969 I llm_load_print_meta: max token length = 93
0.00.951.396 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.951.406 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.951.407 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.951.408 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.951.409 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.951.410 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.957.463 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.472 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.472 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.473 I llama_new_context_with_model: n_batch       = 2048
0.00.957.473 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.474 I llama_new_context_with_model: flash_attn    = 0
0.00.957.478 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.479 I llama_new_context_with_model: freq_scale    = 1
0.00.957.480 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.972.586 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.972.631 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.972.775 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.975.310 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.975.315 I llama_new_context_with_model: graph nodes  = 601
0.00.975.315 I llama_new_context_with_model: graph splits = 1
0.00.975.339 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.586.005 I main: llama threadpool init, n_threads = 4
0.01.586.023 I 
0.01.586.143 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.586.148 I 
0.01.586.394 I sampler seed: 1068519359
0.01.586.408 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.586.421 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.586.422 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.586.422 I 
 increably. 

**Assistant**

I'm unable to generate responses that contain vulgar or sexually suggestive content. [end of text]


0.12.205.596 I llama_perf_sampler_print:    sampling time =      38.41 ms /    26 runs   (    1.48 ms per token,   676.84 tokens per second)
0.12.205.599 I llama_perf_context_print:        load time =    1584.97 ms
0.12.205.601 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.205.616 I llama_perf_context_print:        eval time =   10548.85 ms /    25 runs   (  421.95 ms per token,     2.37 tokens per second)
0.12.205.618 I llama_perf_context_print:       total time =   10619.60 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.023.560 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.664 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.678 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.683 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.690 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.692 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.694 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.695 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.697 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.698 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.710 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.715 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.717 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.873 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.984 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.906 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.916 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.917 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.919 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.920 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.922 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.923 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.928 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.929 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.951 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.955 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.957 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.966 I llama_model_loader: - type  f32:   37 tensors
0.00.352.968 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.663.936 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.664.951 I llm_load_vocab: special tokens cache size = 5
0.00.864.093 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.864.177 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.864.179 I llm_load_print_meta: arch             = gemma
0.00.864.179 I llm_load_print_meta: vocab type       = SPM
0.00.864.180 I llm_load_print_meta: n_vocab          = 256000
0.00.864.182 I llm_load_print_meta: n_merges         = 0
0.00.864.183 I llm_load_print_meta: vocab_only       = 0
0.00.864.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.864.184 I llm_load_print_meta: n_embd           = 2048
0.00.864.184 I llm_load_print_meta: n_layer          = 18
0.00.864.252 I llm_load_print_meta: n_head           = 8
0.00.864.260 I llm_load_print_meta: n_head_kv        = 1
0.00.864.260 I llm_load_print_meta: n_rot            = 256
0.00.864.260 I llm_load_print_meta: n_swa            = 0
0.00.864.262 I llm_load_print_meta: n_embd_head_k    = 256
0.00.864.262 I llm_load_print_meta: n_embd_head_v    = 256
0.00.864.268 I llm_load_print_meta: n_gqa            = 8
0.00.864.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.864.279 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.864.280 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.864.282 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.864.282 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.864.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.864.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.864.288 I llm_load_print_meta: n_ff             = 16384
0.00.864.289 I llm_load_print_meta: n_expert         = 0
0.00.864.289 I llm_load_print_meta: n_expert_used    = 0
0.00.864.290 I llm_load_print_meta: causal attn      = 1
0.00.864.290 I llm_load_print_meta: pooling type     = 0
0.00.864.290 I llm_load_print_meta: rope type        = 2
0.00.864.308 I llm_load_print_meta: rope scaling     = linear
0.00.864.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.864.310 I llm_load_print_meta: freq_scale_train = 1
0.00.864.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.864.311 I llm_load_print_meta: rope_finetuned   = unknown
0.00.864.315 I llm_load_print_meta: ssm_d_conv       = 0
0.00.864.316 I llm_load_print_meta: ssm_d_inner      = 0
0.00.864.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.864.317 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.864.317 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.864.326 I llm_load_print_meta: model type       = 2B
0.00.864.330 I llm_load_print_meta: model ftype      = Q8_0
0.00.864.331 I llm_load_print_meta: model params     = 2.51 B
0.00.864.340 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.864.341 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.864.342 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.864.343 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.864.343 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.864.344 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.864.351 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.864.352 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.864.358 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.864.360 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.864.361 I llm_load_print_meta: max token length = 93
0.00.959.122 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.965.082 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.090 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.090 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.091 I llama_new_context_with_model: n_batch       = 2048
0.00.965.091 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.092 I llama_new_context_with_model: flash_attn    = 0
0.00.965.095 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.096 I llama_new_context_with_model: freq_scale    = 1
0.00.965.097 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.980.801 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.980.847 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.980.980 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.983.588 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.983.593 I llama_new_context_with_model: graph nodes  = 601
0.00.983.593 I llama_new_context_with_model: graph splits = 1
0.00.983.619 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.597.556 I main: llama threadpool init, n_threads = 4
0.01.597.574 I 
0.01.597.701 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.597.705 I 
0.01.597.945 I sampler seed: 3146278418
0.01.597.960 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.597.970 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.597.972 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.597.972 I 
 increasities, but I cannot engage in sexually suggestive or inappropriate behavior. [end of text]


0.07.996.192 I llama_perf_sampler_print:    sampling time =      23.11 ms /    16 runs   (    1.44 ms per token,   692.28 tokens per second)
0.07.996.195 I llama_perf_context_print:        load time =    1596.57 ms
0.07.996.197 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.996.199 I llama_perf_context_print:        eval time =    6355.91 ms /    15 runs   (  423.73 ms per token,     2.36 tokens per second)
0.07.996.200 I llama_perf_context_print:       total time =    6398.64 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.784 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.989 I main: llama backend init
0.00.000.998 I main: load the model and apply lora adapter, if any
0.00.025.161 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.172 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.268 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.281 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.282 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.295 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.297 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.299 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.303 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.315 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.317 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.321 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.863 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.447 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.421 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.433 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.435 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.437 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.441 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.443 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.449 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.451 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.453 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.455 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.358.458 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.470 I llama_model_loader: - type  f32:   37 tensors
0.00.358.473 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.600 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.665.721 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.666.757 I llm_load_vocab: special tokens cache size = 5
0.00.866.007 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.866.096 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.866.100 I llm_load_print_meta: arch             = gemma
0.00.866.101 I llm_load_print_meta: vocab type       = SPM
0.00.866.102 I llm_load_print_meta: n_vocab          = 256000
0.00.866.105 I llm_load_print_meta: n_merges         = 0
0.00.866.106 I llm_load_print_meta: vocab_only       = 0
0.00.866.106 I llm_load_print_meta: n_ctx_train      = 8192
0.00.866.115 I llm_load_print_meta: n_embd           = 2048
0.00.866.116 I llm_load_print_meta: n_layer          = 18
0.00.866.193 I llm_load_print_meta: n_head           = 8
0.00.866.205 I llm_load_print_meta: n_head_kv        = 1
0.00.866.205 I llm_load_print_meta: n_rot            = 256
0.00.866.206 I llm_load_print_meta: n_swa            = 0
0.00.866.207 I llm_load_print_meta: n_embd_head_k    = 256
0.00.866.207 I llm_load_print_meta: n_embd_head_v    = 256
0.00.866.215 I llm_load_print_meta: n_gqa            = 8
0.00.866.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.866.232 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.866.234 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.866.236 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.866.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.866.239 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.866.240 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.866.248 I llm_load_print_meta: n_ff             = 16384
0.00.866.249 I llm_load_print_meta: n_expert         = 0
0.00.866.249 I llm_load_print_meta: n_expert_used    = 0
0.00.866.250 I llm_load_print_meta: causal attn      = 1
0.00.866.251 I llm_load_print_meta: pooling type     = 0
0.00.866.251 I llm_load_print_meta: rope type        = 2
0.00.866.252 I llm_load_print_meta: rope scaling     = linear
0.00.866.254 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.866.255 I llm_load_print_meta: freq_scale_train = 1
0.00.866.256 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.866.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.866.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.866.258 I llm_load_print_meta: ssm_d_inner      = 0
0.00.866.259 I llm_load_print_meta: ssm_d_state      = 0
0.00.866.260 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.866.260 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.866.264 I llm_load_print_meta: model type       = 2B
0.00.866.266 I llm_load_print_meta: model ftype      = Q8_0
0.00.866.268 I llm_load_print_meta: model params     = 2.51 B
0.00.866.280 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.866.281 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.866.283 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.866.284 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.866.285 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.866.286 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.866.287 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.866.289 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.866.296 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.866.298 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.866.299 I llm_load_print_meta: max token length = 93
0.00.941.401 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.941.411 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.941.412 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.941.413 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.941.414 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.941.415 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.947.623 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.631 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.631 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.632 I llama_new_context_with_model: n_batch       = 2048
0.00.947.632 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.633 I llama_new_context_with_model: flash_attn    = 0
0.00.947.637 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.638 I llama_new_context_with_model: freq_scale    = 1
0.00.947.639 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.963.040 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.963.092 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.963.247 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.856 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.860 I llama_new_context_with_model: graph nodes  = 601
0.00.965.860 I llama_new_context_with_model: graph splits = 1
0.00.965.888 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.627 I main: llama threadpool init, n_threads = 4
0.01.580.643 I 
0.01.580.771 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.580.775 I 
0.01.581.028 I sampler seed: 4178835831
0.01.581.052 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.581.067 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.581.074 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.581.075 I 
 increasities can be summarized as follows:

- **High-income individuals:**
    - Can amass a large amount of wealth.
    - May have

0.15.316.194 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.99 tokens per second)
0.15.316.198 I llama_perf_context_print:        load time =    1579.52 ms
0.15.316.210 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.316.212 I llama_perf_context_print:        eval time =   13644.14 ms /    32 runs   (  426.38 ms per token,     2.35 tokens per second)
0.15.316.213 I llama_perf_context_print:       total time =   13735.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.841 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.852 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.964 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.967 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.977 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.979 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.981 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.983 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.984 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.998 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.002 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.003 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.005 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.006 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.917 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.981 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.975 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.989 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.990 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.991 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.998 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.000 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.001 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.003 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.350.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.013 I llama_model_loader: - type  f32:   37 tensors
0.00.350.015 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.329 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.649.313 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.650.367 I llm_load_vocab: special tokens cache size = 5
0.00.851.096 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.171 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.175 I llm_load_print_meta: arch             = gemma
0.00.851.176 I llm_load_print_meta: vocab type       = SPM
0.00.851.177 I llm_load_print_meta: n_vocab          = 256000
0.00.851.180 I llm_load_print_meta: n_merges         = 0
0.00.851.180 I llm_load_print_meta: vocab_only       = 0
0.00.851.180 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.181 I llm_load_print_meta: n_embd           = 2048
0.00.851.181 I llm_load_print_meta: n_layer          = 18
0.00.851.245 I llm_load_print_meta: n_head           = 8
0.00.851.256 I llm_load_print_meta: n_head_kv        = 1
0.00.851.257 I llm_load_print_meta: n_rot            = 256
0.00.851.258 I llm_load_print_meta: n_swa            = 0
0.00.851.258 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.259 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.264 I llm_load_print_meta: n_gqa            = 8
0.00.851.269 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.275 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.276 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.280 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.280 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.281 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.281 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.286 I llm_load_print_meta: n_ff             = 16384
0.00.851.297 I llm_load_print_meta: n_expert         = 0
0.00.851.298 I llm_load_print_meta: n_expert_used    = 0
0.00.851.299 I llm_load_print_meta: causal attn      = 1
0.00.851.299 I llm_load_print_meta: pooling type     = 0
0.00.851.300 I llm_load_print_meta: rope type        = 2
0.00.851.305 I llm_load_print_meta: rope scaling     = linear
0.00.851.307 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.321 I llm_load_print_meta: freq_scale_train = 1
0.00.851.325 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.326 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.326 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.326 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.327 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.327 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.328 I llm_load_print_meta: model type       = 2B
0.00.851.329 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.329 I llm_load_print_meta: model params     = 2.51 B
0.00.851.339 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.339 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.340 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.340 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.341 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.341 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.341 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.350 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.356 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.358 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.361 I llm_load_print_meta: max token length = 93
0.00.923.898 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.923.910 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.929.998 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.005 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.006 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.006 I llama_new_context_with_model: n_batch       = 2048
0.00.930.006 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.007 I llama_new_context_with_model: flash_attn    = 0
0.00.930.010 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.010 I llama_new_context_with_model: freq_scale    = 1
0.00.930.011 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.736 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.779 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.906 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.539 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.542 I llama_new_context_with_model: graph nodes  = 601
0.00.947.543 I llama_new_context_with_model: graph splits = 1
0.00.947.565 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.559.416 I main: llama threadpool init, n_threads = 4
0.01.559.432 I 
0.01.559.552 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.559.557 I 
0.01.559.800 I sampler seed: 1995381165
0.01.559.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.829 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.832 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.833 I 
 increasities, and other types of unsolicited emails.

**Solution:**

**1. Use a spam filter:**

- Install a reputable spam filter to identify

0.15.238.766 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.95 tokens per second)
0.15.238.770 I llama_perf_context_print:        load time =    1558.46 ms
0.15.238.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.238.785 I llama_perf_context_print:        eval time =   13589.85 ms /    32 runs   (  424.68 ms per token,     2.35 tokens per second)
0.15.238.786 I llama_perf_context_print:       total time =   13679.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.509s
user	3m11.423s
sys	0m9.574s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4170 (47f931c8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186365.32 ms
main:    total time = 186365.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.023.488 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.503 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.604 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.617 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.619 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.627 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.631 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.632 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.633 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.634 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.636 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.648 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.649 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.651 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.652 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.654 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.787 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.879 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.873 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.886 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.887 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.889 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.890 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.891 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.897 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.899 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.900 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.901 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.903 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.912 I llama_model_loader: - type  f32:   37 tensors
0.00.350.915 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.915 I llama_model_loader: - type q6_K:   19 tensors
0.00.603.934 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.672.127 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.244 I llm_load_vocab: special tokens cache size = 5
0.00.863.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.348 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.349 I llm_load_print_meta: arch             = gemma
0.00.863.350 I llm_load_print_meta: vocab type       = SPM
0.00.863.351 I llm_load_print_meta: n_vocab          = 256000
0.00.863.353 I llm_load_print_meta: n_merges         = 0
0.00.863.354 I llm_load_print_meta: vocab_only       = 0
0.00.863.354 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.354 I llm_load_print_meta: n_embd           = 2048
0.00.863.355 I llm_load_print_meta: n_layer          = 18
0.00.863.423 I llm_load_print_meta: n_head           = 8
0.00.863.430 I llm_load_print_meta: n_head_kv        = 1
0.00.863.431 I llm_load_print_meta: n_rot            = 256
0.00.863.431 I llm_load_print_meta: n_swa            = 0
0.00.863.431 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.437 I llm_load_print_meta: n_gqa            = 8
0.00.863.441 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.446 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.447 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.449 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.450 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.455 I llm_load_print_meta: n_ff             = 16384
0.00.863.455 I llm_load_print_meta: n_expert         = 0
0.00.863.456 I llm_load_print_meta: n_expert_used    = 0
0.00.863.456 I llm_load_print_meta: causal attn      = 1
0.00.863.456 I llm_load_print_meta: pooling type     = 0
0.00.863.457 I llm_load_print_meta: rope type        = 2
0.00.863.457 I llm_load_print_meta: rope scaling     = linear
0.00.863.458 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.459 I llm_load_print_meta: freq_scale_train = 1
0.00.863.459 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.460 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.460 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.460 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.461 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.461 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.461 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.462 I llm_load_print_meta: model type       = 2B
0.00.863.463 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.863.464 I llm_load_print_meta: model params     = 2.51 B
0.00.863.473 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.863.474 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.475 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.475 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.476 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.476 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.476 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.485 I llm_load_print_meta: max token length = 93
0.00.924.397 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.924.409 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.924.410 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.924.411 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.924.411 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.924.412 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.930.409 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.419 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.420 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.420 I llama_new_context_with_model: n_batch       = 2048
0.00.930.420 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.421 I llama_new_context_with_model: flash_attn    = 0
0.00.930.425 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.426 I llama_new_context_with_model: freq_scale    = 1
0.00.930.426 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.946.061 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.946.104 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.946.235 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.948.787 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.948.791 I llama_new_context_with_model: graph nodes  = 601
0.00.948.792 I llama_new_context_with_model: graph splits = 1
0.00.948.815 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.532.131 I main: llama threadpool init, n_threads = 4
0.01.532.149 I 
0.01.532.270 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.532.270 I 
0.01.532.510 I sampler seed: 3071807955
0.01.532.525 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.532.537 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.532.537 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.532.538 I 
 maneuvously.

**Explanation:**

The sentence is grammatically incorrect and unusable.

**Improvements:**

- Use correct grammar and punctuation.
-

0.12.679.051 I llama_perf_sampler_print:    sampling time =      48.99 ms /    33 runs   (    1.48 ms per token,   673.55 tokens per second)
0.12.679.055 I llama_perf_context_print:        load time =    1531.13 ms
0.12.679.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.679.069 I llama_perf_context_print:        eval time =   11056.73 ms /    32 runs   (  345.52 ms per token,     2.89 tokens per second)
0.12.679.071 I llama_perf_context_print:       total time =   11146.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4170 (47f931c8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186399.22 ms
main:    total time = 186399.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4170 (47f931c8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.023.330 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.451 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.457 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.462 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.463 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.464 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.468 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.479 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.481 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.483 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.484 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.486 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.934 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.769 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.779 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.780 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.782 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.783 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.784 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.786 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.791 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.792 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.802 I llama_model_loader: - type  f32:   37 tensors
0.00.351.804 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.805 I llama_model_loader: - type q6_K:   19 tensors
0.00.590.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.659.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.660.259 I llm_load_vocab: special tokens cache size = 5
0.00.868.603 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.868.675 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.868.676 I llm_load_print_meta: arch             = gemma
0.00.868.677 I llm_load_print_meta: vocab type       = SPM
0.00.868.678 I llm_load_print_meta: n_vocab          = 256000
0.00.868.680 I llm_load_print_meta: n_merges         = 0
0.00.868.681 I llm_load_print_meta: vocab_only       = 0
0.00.868.681 I llm_load_print_meta: n_ctx_train      = 8192
0.00.868.682 I llm_load_print_meta: n_embd           = 2048
0.00.868.682 I llm_load_print_meta: n_layer          = 18
0.00.868.748 I llm_load_print_meta: n_head           = 8
0.00.868.755 I llm_load_print_meta: n_head_kv        = 1
0.00.868.755 I llm_load_print_meta: n_rot            = 256
0.00.868.756 I llm_load_print_meta: n_swa            = 0
0.00.868.756 I llm_load_print_meta: n_embd_head_k    = 256
0.00.868.758 I llm_load_print_meta: n_embd_head_v    = 256
0.00.868.763 I llm_load_print_meta: n_gqa            = 8
0.00.868.768 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.868.774 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.868.775 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.868.777 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.868.778 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.868.779 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.868.779 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.868.785 I llm_load_print_meta: n_ff             = 16384
0.00.868.785 I llm_load_print_meta: n_expert         = 0
0.00.868.812 I llm_load_print_meta: n_expert_used    = 0
0.00.868.812 I llm_load_print_meta: causal attn      = 1
0.00.868.813 I llm_load_print_meta: pooling type     = 0
0.00.868.813 I llm_load_print_meta: rope type        = 2
0.00.868.818 I llm_load_print_meta: rope scaling     = linear
0.00.868.819 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.868.829 I llm_load_print_meta: freq_scale_train = 1
0.00.868.829 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.868.830 I llm_load_print_meta: rope_finetuned   = unknown
0.00.868.831 I llm_load_print_meta: ssm_d_conv       = 0
0.00.868.831 I llm_load_print_meta: ssm_d_inner      = 0
0.00.868.831 I llm_load_print_meta: ssm_d_state      = 0
0.00.868.832 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.868.832 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.868.836 I llm_load_print_meta: model type       = 2B
0.00.868.837 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.868.838 I llm_load_print_meta: model params     = 2.51 B
0.00.868.847 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.868.847 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.868.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.868.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.868.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.868.851 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.868.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.868.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.868.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.868.868 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.868.869 I llm_load_print_meta: max token length = 93
0.00.923.968 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.929.790 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.798 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.798 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.799 I llama_new_context_with_model: n_batch       = 2048
0.00.929.799 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.800 I llama_new_context_with_model: flash_attn    = 0
0.00.929.802 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.803 I llama_new_context_with_model: freq_scale    = 1
0.00.929.804 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.329 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.945.373 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.502 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.948.130 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.948.135 I llama_new_context_with_model: graph nodes  = 601
0.00.948.135 I llama_new_context_with_model: graph splits = 1
0.00.948.159 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.532.346 I main: llama threadpool init, n_threads = 4
0.01.532.363 I 
0.01.532.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.532.484 I 
0.01.532.719 I sampler seed: 2877420380
0.01.532.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.532.744 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.532.745 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.532.746 I 
 seconded my account and is now trying to access my personal information.

**Here's what I know:**

- The account was compromised due to a

0.12.684.090 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.83 tokens per second)
0.12.684.094 I llama_perf_context_print:        load time =    1531.37 ms
0.12.684.106 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.684.108 I llama_perf_context_print:        eval time =   11061.23 ms /    32 runs   (  345.66 ms per token,     2.89 tokens per second)
0.12.684.110 I llama_perf_context_print:       total time =   11151.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.106s
user	46m44.335s
sys	0m6.426s
