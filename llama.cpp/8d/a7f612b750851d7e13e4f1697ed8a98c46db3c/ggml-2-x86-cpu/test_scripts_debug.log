+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.668 I build: 4719 (8da7f612) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.086.295 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.311 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.429 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.457 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.463 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.465 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.467 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.469 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.470 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.472 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.479 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.480 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.482 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.484 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.485 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.301.223 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.403.013 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.426.479 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.426.492 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.426.494 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.426.496 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.426.497 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.426.500 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.426.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.426.507 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.426.509 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.426.511 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.426.513 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.426.514 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.426.523 I llama_model_loader: - type  f32:   37 tensors
0.00.426.525 I llama_model_loader: - type q8_0:  127 tensors
0.00.426.543 I print_info: file format = GGUF V3 (latest)
0.00.426.544 I print_info: file type   = Q8_0
0.00.426.547 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.689.878 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.822.039 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.823.081 I load: special tokens cache size = 5
0.01.048.577 I load: token to piece cache size = 1.6014 MB
0.01.048.666 I print_info: arch             = gemma
0.01.048.670 I print_info: vocab_only       = 0
0.01.048.670 I print_info: n_ctx_train      = 8192
0.01.048.671 I print_info: n_embd           = 2048
0.01.048.671 I print_info: n_layer          = 18
0.01.048.740 I print_info: n_head           = 8
0.01.048.750 I print_info: n_head_kv        = 1
0.01.048.751 I print_info: n_rot            = 256
0.01.048.752 I print_info: n_swa            = 0
0.01.048.753 I print_info: n_embd_head_k    = 256
0.01.048.753 I print_info: n_embd_head_v    = 256
0.01.048.758 I print_info: n_gqa            = 8
0.01.048.763 I print_info: n_embd_k_gqa     = 256
0.01.048.768 I print_info: n_embd_v_gqa     = 256
0.01.048.769 I print_info: f_norm_eps       = 0.0e+00
0.01.048.771 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.048.771 I print_info: f_clamp_kqv      = 0.0e+00
0.01.048.772 I print_info: f_max_alibi_bias = 0.0e+00
0.01.048.773 I print_info: f_logit_scale    = 0.0e+00
0.01.048.777 I print_info: n_ff             = 16384
0.01.048.778 I print_info: n_expert         = 0
0.01.048.788 I print_info: n_expert_used    = 0
0.01.048.789 I print_info: causal attn      = 1
0.01.048.790 I print_info: pooling type     = 0
0.01.048.790 I print_info: rope type        = 2
0.01.048.791 I print_info: rope scaling     = linear
0.01.048.793 I print_info: freq_base_train  = 10000.0
0.01.048.793 I print_info: freq_scale_train = 1
0.01.048.794 I print_info: n_ctx_orig_yarn  = 8192
0.01.048.794 I print_info: rope_finetuned   = unknown
0.01.048.794 I print_info: ssm_d_conv       = 0
0.01.048.795 I print_info: ssm_d_inner      = 0
0.01.048.796 I print_info: ssm_d_state      = 0
0.01.048.796 I print_info: ssm_dt_rank      = 0
0.01.048.797 I print_info: ssm_dt_b_c_rms   = 0
0.01.048.799 I print_info: model type       = 2B
0.01.048.800 I print_info: model params     = 2.51 B
0.01.048.803 I print_info: general.name     = gemma-1.1-2b-it
0.01.048.806 I print_info: vocab type       = SPM
0.01.048.808 I print_info: n_vocab          = 256000
0.01.048.812 I print_info: n_merges         = 0
0.01.048.812 I print_info: BOS token        = 2 '<bos>'
0.01.048.813 I print_info: EOS token        = 1 '<eos>'
0.01.048.813 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.048.814 I print_info: UNK token        = 3 '<unk>'
0.01.048.814 I print_info: PAD token        = 0 '<pad>'
0.01.048.827 I print_info: LF token         = 227 '<0x0A>'
0.01.048.843 I print_info: EOG token        = 1 '<eos>'
0.01.048.844 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.048.845 I print_info: max token length = 93
0.01.048.847 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.152.401 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.152.409 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.152.410 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.152.411 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.152.412 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.152.412 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.159.484 I llama_context_unified: n_seq_max     = 1
0.01.159.491 I llama_context_unified: n_ctx         = 4096
0.01.159.491 I llama_context_unified: n_ctx_per_seq = 4096
0.01.159.492 I llama_context_unified: n_batch       = 2048
0.01.159.492 I llama_context_unified: n_ubatch      = 512
0.01.159.492 I llama_context_unified: flash_attn    = 0
0.01.159.495 I llama_context_unified: freq_base     = 10000.0
0.01.159.496 I llama_context_unified: freq_scale    = 1
0.01.159.497 W llama_context_unified: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.159.582 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.173.875 I init:        CPU KV buffer size =    72.00 MiB
0.01.173.914 I llama_context_unified: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.174.041 I llama_context_unified:        CPU  output buffer size =     0.98 MiB
0.01.177.611 I llama_context_unified:        CPU compute buffer size =   504.00 MiB
0.01.177.615 I llama_context_unified: graph nodes  = 601
0.01.177.616 I llama_context_unified: graph splits = 1
0.01.177.641 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.177.644 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.814.013 I main: llama threadpool init, n_threads = 4
0.01.814.029 I 
0.01.814.131 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.814.135 I 
0.01.814.382 I sampler seed: 1538943632
0.01.814.396 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.814.407 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.814.408 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.814.408 I 
 increasels, and the like.

I am not able to create visual elements such as images or diagrams. Therefore, I am unable to provide a visual representation

0.15.311.189 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.05 tokens per second)
0.15.311.193 I llama_perf_context_print:        load time =    1786.13 ms
0.15.311.194 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.311.196 I llama_perf_context_print:        eval time =   13412.15 ms /    32 runs   (  419.13 ms per token,     2.39 tokens per second)
0.15.311.197 I llama_perf_context_print:       total time =   13524.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.650 I build: 4719 (8da7f612) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.086.308 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.461 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.468 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.469 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.473 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.484 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.486 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.488 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.489 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.299.850 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.401.802 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.425.207 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.425.223 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.425.225 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.425.227 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.425.228 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.425.231 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.425.233 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.425.236 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.425.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.425.261 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.425.264 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.425.265 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.425.275 I llama_model_loader: - type  f32:   37 tensors
0.00.425.277 I llama_model_loader: - type q8_0:  127 tensors
0.00.425.294 I print_info: file format = GGUF V3 (latest)
0.00.425.298 I print_info: file type   = Q8_0
0.00.425.300 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.708.574 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.835.388 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.836.441 I load: special tokens cache size = 5
0.01.070.123 I load: token to piece cache size = 1.6014 MB
0.01.070.211 I print_info: arch             = gemma
0.01.070.212 I print_info: vocab_only       = 0
0.01.070.213 I print_info: n_ctx_train      = 8192
0.01.070.214 I print_info: n_embd           = 2048
0.01.070.214 I print_info: n_layer          = 18
0.01.070.282 I print_info: n_head           = 8
0.01.070.290 I print_info: n_head_kv        = 1
0.01.070.290 I print_info: n_rot            = 256
0.01.070.291 I print_info: n_swa            = 0
0.01.070.292 I print_info: n_embd_head_k    = 256
0.01.070.293 I print_info: n_embd_head_v    = 256
0.01.070.298 I print_info: n_gqa            = 8
0.01.070.302 I print_info: n_embd_k_gqa     = 256
0.01.070.307 I print_info: n_embd_v_gqa     = 256
0.01.070.312 I print_info: f_norm_eps       = 0.0e+00
0.01.070.313 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.070.314 I print_info: f_clamp_kqv      = 0.0e+00
0.01.070.324 I print_info: f_max_alibi_bias = 0.0e+00
0.01.070.325 I print_info: f_logit_scale    = 0.0e+00
0.01.070.330 I print_info: n_ff             = 16384
0.01.070.332 I print_info: n_expert         = 0
0.01.070.332 I print_info: n_expert_used    = 0
0.01.070.332 I print_info: causal attn      = 1
0.01.070.333 I print_info: pooling type     = 0
0.01.070.351 I print_info: rope type        = 2
0.01.070.355 I print_info: rope scaling     = linear
0.01.070.356 I print_info: freq_base_train  = 10000.0
0.01.070.357 I print_info: freq_scale_train = 1
0.01.070.357 I print_info: n_ctx_orig_yarn  = 8192
0.01.070.358 I print_info: rope_finetuned   = unknown
0.01.070.358 I print_info: ssm_d_conv       = 0
0.01.070.358 I print_info: ssm_d_inner      = 0
0.01.070.359 I print_info: ssm_d_state      = 0
0.01.070.359 I print_info: ssm_dt_rank      = 0
0.01.070.360 I print_info: ssm_dt_b_c_rms   = 0
0.01.070.361 I print_info: model type       = 2B
0.01.070.362 I print_info: model params     = 2.51 B
0.01.070.363 I print_info: general.name     = gemma-1.1-2b-it
0.01.070.367 I print_info: vocab type       = SPM
0.01.070.369 I print_info: n_vocab          = 256000
0.01.070.379 I print_info: n_merges         = 0
0.01.070.380 I print_info: BOS token        = 2 '<bos>'
0.01.070.381 I print_info: EOS token        = 1 '<eos>'
0.01.070.381 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.070.382 I print_info: UNK token        = 3 '<unk>'
0.01.070.382 I print_info: PAD token        = 0 '<pad>'
0.01.070.383 I print_info: LF token         = 227 '<0x0A>'
0.01.070.400 I print_info: EOG token        = 1 '<eos>'
0.01.070.402 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.070.403 I print_info: max token length = 93
0.01.070.404 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.164.366 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.171.744 I llama_context_unified: n_seq_max     = 1
0.01.171.754 I llama_context_unified: n_ctx         = 4096
0.01.171.754 I llama_context_unified: n_ctx_per_seq = 4096
0.01.171.754 I llama_context_unified: n_batch       = 2048
0.01.171.755 I llama_context_unified: n_ubatch      = 512
0.01.171.755 I llama_context_unified: flash_attn    = 0
0.01.171.759 I llama_context_unified: freq_base     = 10000.0
0.01.171.760 I llama_context_unified: freq_scale    = 1
0.01.171.761 W llama_context_unified: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.171.859 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.187.261 I init:        CPU KV buffer size =    72.00 MiB
0.01.187.307 I llama_context_unified: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.187.461 I llama_context_unified:        CPU  output buffer size =     0.98 MiB
0.01.190.654 I llama_context_unified:        CPU compute buffer size =   504.00 MiB
0.01.190.658 I llama_context_unified: graph nodes  = 601
0.01.190.659 I llama_context_unified: graph splits = 1
0.01.190.683 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.190.687 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.869.237 I main: llama threadpool init, n_threads = 4
0.01.869.251 I 
0.01.869.355 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.869.361 I 
0.01.869.603 I sampler seed: 3589433525
0.01.869.617 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.869.629 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.869.630 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.869.630 I 
 maneuvled.

I am unable to locate the specific information you require. Please check your records or try again later. [end of text]


0.13.151.971 I llama_perf_sampler_print:    sampling time =      40.40 ms /    27 runs   (    1.50 ms per token,   668.27 tokens per second)
0.13.151.975 I llama_perf_context_print:        load time =    1841.39 ms
0.13.151.976 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.151.978 I llama_perf_context_print:        eval time =   11212.60 ms /    26 runs   (  431.25 ms per token,     2.32 tokens per second)
0.13.151.978 I llama_perf_context_print:       total time =   11309.59 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.647 I build: 4719 (8da7f612) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.086.789 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.804 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.902 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.922 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.932 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.935 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.936 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.938 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.939 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.947 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.949 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.951 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.954 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.480 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.396.503 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.888 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.900 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.902 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.904 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.905 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.907 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.910 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.914 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.916 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.918 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.919 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.921 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.419.929 I llama_model_loader: - type  f32:   37 tensors
0.00.419.931 I llama_model_loader: - type q8_0:  127 tensors
0.00.419.948 I print_info: file format = GGUF V3 (latest)
0.00.419.948 I print_info: file type   = Q8_0
0.00.419.951 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.702.398 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.832.164 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.833.207 I load: special tokens cache size = 5
0.01.067.014 I load: token to piece cache size = 1.6014 MB
0.01.067.103 I print_info: arch             = gemma
0.01.067.107 I print_info: vocab_only       = 0
0.01.067.108 I print_info: n_ctx_train      = 8192
0.01.067.108 I print_info: n_embd           = 2048
0.01.067.109 I print_info: n_layer          = 18
0.01.067.184 I print_info: n_head           = 8
0.01.067.195 I print_info: n_head_kv        = 1
0.01.067.195 I print_info: n_rot            = 256
0.01.067.197 I print_info: n_swa            = 0
0.01.067.197 I print_info: n_embd_head_k    = 256
0.01.067.198 I print_info: n_embd_head_v    = 256
0.01.067.203 I print_info: n_gqa            = 8
0.01.067.207 I print_info: n_embd_k_gqa     = 256
0.01.067.213 I print_info: n_embd_v_gqa     = 256
0.01.067.219 I print_info: f_norm_eps       = 0.0e+00
0.01.067.220 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.067.221 I print_info: f_clamp_kqv      = 0.0e+00
0.01.067.222 I print_info: f_max_alibi_bias = 0.0e+00
0.01.067.222 I print_info: f_logit_scale    = 0.0e+00
0.01.067.230 I print_info: n_ff             = 16384
0.01.067.231 I print_info: n_expert         = 0
0.01.067.232 I print_info: n_expert_used    = 0
0.01.067.235 I print_info: causal attn      = 1
0.01.067.235 I print_info: pooling type     = 0
0.01.067.236 I print_info: rope type        = 2
0.01.067.236 I print_info: rope scaling     = linear
0.01.067.238 I print_info: freq_base_train  = 10000.0
0.01.067.238 I print_info: freq_scale_train = 1
0.01.067.239 I print_info: n_ctx_orig_yarn  = 8192
0.01.067.239 I print_info: rope_finetuned   = unknown
0.01.067.240 I print_info: ssm_d_conv       = 0
0.01.067.240 I print_info: ssm_d_inner      = 0
0.01.067.240 I print_info: ssm_d_state      = 0
0.01.067.241 I print_info: ssm_dt_rank      = 0
0.01.067.241 I print_info: ssm_dt_b_c_rms   = 0
0.01.067.243 I print_info: model type       = 2B
0.01.067.244 I print_info: model params     = 2.51 B
0.01.067.244 I print_info: general.name     = gemma-1.1-2b-it
0.01.067.248 I print_info: vocab type       = SPM
0.01.067.249 I print_info: n_vocab          = 256000
0.01.067.252 I print_info: n_merges         = 0
0.01.067.253 I print_info: BOS token        = 2 '<bos>'
0.01.067.253 I print_info: EOS token        = 1 '<eos>'
0.01.067.254 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.067.255 I print_info: UNK token        = 3 '<unk>'
0.01.067.255 I print_info: PAD token        = 0 '<pad>'
0.01.067.256 I print_info: LF token         = 227 '<0x0A>'
0.01.067.270 I print_info: EOG token        = 1 '<eos>'
0.01.067.274 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.067.275 I print_info: max token length = 93
0.01.067.277 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.143.586 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.143.597 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.143.598 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.143.599 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.143.600 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.143.600 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.150.877 I llama_context_unified: n_seq_max     = 1
0.01.150.883 I llama_context_unified: n_ctx         = 4096
0.01.150.884 I llama_context_unified: n_ctx_per_seq = 4096
0.01.150.884 I llama_context_unified: n_batch       = 2048
0.01.150.884 I llama_context_unified: n_ubatch      = 512
0.01.150.885 I llama_context_unified: flash_attn    = 0
0.01.150.887 I llama_context_unified: freq_base     = 10000.0
0.01.150.888 I llama_context_unified: freq_scale    = 1
0.01.150.888 W llama_context_unified: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.150.978 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.166.535 I init:        CPU KV buffer size =    72.00 MiB
0.01.166.577 I llama_context_unified: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.166.733 I llama_context_unified:        CPU  output buffer size =     0.98 MiB
0.01.170.013 I llama_context_unified:        CPU compute buffer size =   504.00 MiB
0.01.170.018 I llama_context_unified: graph nodes  = 601
0.01.170.018 I llama_context_unified: graph splits = 1
0.01.170.045 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.170.049 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.808.650 I main: llama threadpool init, n_threads = 4
0.01.808.664 I 
0.01.808.768 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.808.773 I 
0.01.809.041 I sampler seed: 2586016627
0.01.809.053 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.809.063 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.809.063 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.809.063 I 
 increasities and injustices.

**Answer:**

I am unable to provide an answer that perpetuates negative stereotypes or engages in disrespectful or insensitive remarks about any group

0.15.300.542 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.56 tokens per second)
0.15.300.546 I llama_perf_context_print:        load time =    1780.84 ms
0.15.300.547 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.300.562 I llama_perf_context_print:        eval time =   13406.05 ms /    32 runs   (  418.94 ms per token,     2.39 tokens per second)
0.15.300.563 I llama_perf_context_print:       total time =   13518.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.726 I build: 4719 (8da7f612) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.952 I main: llama backend init
0.00.000.961 I main: load the model and apply lora adapter, if any
0.00.086.240 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.376 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.382 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.386 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.396 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.413 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.428 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.435 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.438 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.440 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.028 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.396.349 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.764 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.782 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.784 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.786 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.787 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.790 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.791 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.796 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.797 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.799 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.801 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.803 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.419.812 I llama_model_loader: - type  f32:   37 tensors
0.00.419.814 I llama_model_loader: - type q8_0:  127 tensors
0.00.419.832 I print_info: file format = GGUF V3 (latest)
0.00.419.833 I print_info: file type   = Q8_0
0.00.419.836 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.686.615 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.818.256 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.819.237 I load: special tokens cache size = 5
0.01.042.021 I load: token to piece cache size = 1.6014 MB
0.01.042.110 I print_info: arch             = gemma
0.01.042.115 I print_info: vocab_only       = 0
0.01.042.116 I print_info: n_ctx_train      = 8192
0.01.042.116 I print_info: n_embd           = 2048
0.01.042.117 I print_info: n_layer          = 18
0.01.042.195 I print_info: n_head           = 8
0.01.042.206 I print_info: n_head_kv        = 1
0.01.042.207 I print_info: n_rot            = 256
0.01.042.207 I print_info: n_swa            = 0
0.01.042.208 I print_info: n_embd_head_k    = 256
0.01.042.208 I print_info: n_embd_head_v    = 256
0.01.042.215 I print_info: n_gqa            = 8
0.01.042.223 I print_info: n_embd_k_gqa     = 256
0.01.042.233 I print_info: n_embd_v_gqa     = 256
0.01.042.235 I print_info: f_norm_eps       = 0.0e+00
0.01.042.237 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.042.237 I print_info: f_clamp_kqv      = 0.0e+00
0.01.042.238 I print_info: f_max_alibi_bias = 0.0e+00
0.01.042.238 I print_info: f_logit_scale    = 0.0e+00
0.01.042.244 I print_info: n_ff             = 16384
0.01.042.244 I print_info: n_expert         = 0
0.01.042.248 I print_info: n_expert_used    = 0
0.01.042.248 I print_info: causal attn      = 1
0.01.042.249 I print_info: pooling type     = 0
0.01.042.250 I print_info: rope type        = 2
0.01.042.251 I print_info: rope scaling     = linear
0.01.042.253 I print_info: freq_base_train  = 10000.0
0.01.042.254 I print_info: freq_scale_train = 1
0.01.042.254 I print_info: n_ctx_orig_yarn  = 8192
0.01.042.256 I print_info: rope_finetuned   = unknown
0.01.042.257 I print_info: ssm_d_conv       = 0
0.01.042.257 I print_info: ssm_d_inner      = 0
0.01.042.258 I print_info: ssm_d_state      = 0
0.01.042.259 I print_info: ssm_dt_rank      = 0
0.01.042.259 I print_info: ssm_dt_b_c_rms   = 0
0.01.042.261 I print_info: model type       = 2B
0.01.042.264 I print_info: model params     = 2.51 B
0.01.042.264 I print_info: general.name     = gemma-1.1-2b-it
0.01.042.269 I print_info: vocab type       = SPM
0.01.042.271 I print_info: n_vocab          = 256000
0.01.042.274 I print_info: n_merges         = 0
0.01.042.276 I print_info: BOS token        = 2 '<bos>'
0.01.042.277 I print_info: EOS token        = 1 '<eos>'
0.01.042.277 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.042.279 I print_info: UNK token        = 3 '<unk>'
0.01.042.280 I print_info: PAD token        = 0 '<pad>'
0.01.042.281 I print_info: LF token         = 227 '<0x0A>'
0.01.042.299 I print_info: EOG token        = 1 '<eos>'
0.01.042.301 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.042.305 I print_info: max token length = 93
0.01.042.308 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.115.217 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.115.229 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.122.481 I llama_context_unified: n_seq_max     = 1
0.01.122.488 I llama_context_unified: n_ctx         = 4096
0.01.122.488 I llama_context_unified: n_ctx_per_seq = 4096
0.01.122.488 I llama_context_unified: n_batch       = 2048
0.01.122.489 I llama_context_unified: n_ubatch      = 512
0.01.122.489 I llama_context_unified: flash_attn    = 0
0.01.122.493 I llama_context_unified: freq_base     = 10000.0
0.01.122.493 I llama_context_unified: freq_scale    = 1
0.01.122.494 W llama_context_unified: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.122.588 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.137.414 I init:        CPU KV buffer size =    72.00 MiB
0.01.137.455 I llama_context_unified: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.137.576 I llama_context_unified:        CPU  output buffer size =     0.98 MiB
0.01.141.084 I llama_context_unified:        CPU compute buffer size =   504.00 MiB
0.01.141.088 I llama_context_unified: graph nodes  = 601
0.01.141.088 I llama_context_unified: graph splits = 1
0.01.141.116 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.141.120 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.778.642 I main: llama threadpool init, n_threads = 4
0.01.778.656 I 
0.01.778.769 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.778.774 I 
0.01.779.021 I sampler seed: 3177728902
0.01.779.037 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.779.050 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.779.052 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.779.052 I 
 increasities can be harmful to both the individual and society.

**a) Explain the harmful effects of narcissistic rage.**

**b) Discuss the ways narcissistic

0.15.409.540 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.08 tokens per second)
0.15.409.544 I llama_perf_context_print:        load time =    1750.62 ms
0.15.409.546 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.409.560 I llama_perf_context_print:        eval time =   13545.55 ms /    32 runs   (  423.30 ms per token,     2.36 tokens per second)
0.15.409.561 I llama_perf_context_print:       total time =   13657.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.745s
user	3m43.905s
sys	0m9.365s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4719 (8da7f612)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186170.18 ms
main:    total time = 186170.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.731 I build: 4719 (8da7f612) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.944 I main: llama backend init
0.00.000.952 I main: load the model and apply lora adapter, if any
0.00.086.001 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.016 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.120 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.141 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.143 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.149 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.151 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.152 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.154 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.157 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.164 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.166 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.167 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.169 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.002 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.251 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.756 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.773 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.775 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.777 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.779 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.781 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.783 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.787 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.789 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.414.791 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.414.793 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.795 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.414.797 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.414.805 I llama_model_loader: - type  f32:   37 tensors
0.00.414.807 I llama_model_loader: - type q4_K:  108 tensors
0.00.414.808 I llama_model_loader: - type q6_K:   19 tensors
0.00.414.825 I print_info: file format = GGUF V3 (latest)
0.00.414.826 I print_info: file type   = Q4_K - Medium
0.00.414.829 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.684.381 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.810.227 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.811.138 I load: special tokens cache size = 5
0.01.038.778 I load: token to piece cache size = 1.6014 MB
0.01.038.859 I print_info: arch             = gemma
0.01.038.860 I print_info: vocab_only       = 0
0.01.038.860 I print_info: n_ctx_train      = 8192
0.01.038.860 I print_info: n_embd           = 2048
0.01.038.861 I print_info: n_layer          = 18
0.01.038.930 I print_info: n_head           = 8
0.01.038.941 I print_info: n_head_kv        = 1
0.01.038.942 I print_info: n_rot            = 256
0.01.038.942 I print_info: n_swa            = 0
0.01.038.943 I print_info: n_embd_head_k    = 256
0.01.038.943 I print_info: n_embd_head_v    = 256
0.01.038.948 I print_info: n_gqa            = 8
0.01.038.953 I print_info: n_embd_k_gqa     = 256
0.01.038.958 I print_info: n_embd_v_gqa     = 256
0.01.038.960 I print_info: f_norm_eps       = 0.0e+00
0.01.038.961 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.038.962 I print_info: f_clamp_kqv      = 0.0e+00
0.01.038.962 I print_info: f_max_alibi_bias = 0.0e+00
0.01.038.964 I print_info: f_logit_scale    = 0.0e+00
0.01.038.969 I print_info: n_ff             = 16384
0.01.038.970 I print_info: n_expert         = 0
0.01.038.970 I print_info: n_expert_used    = 0
0.01.038.970 I print_info: causal attn      = 1
0.01.038.971 I print_info: pooling type     = 0
0.01.038.971 I print_info: rope type        = 2
0.01.038.974 I print_info: rope scaling     = linear
0.01.038.976 I print_info: freq_base_train  = 10000.0
0.01.038.977 I print_info: freq_scale_train = 1
0.01.038.977 I print_info: n_ctx_orig_yarn  = 8192
0.01.038.977 I print_info: rope_finetuned   = unknown
0.01.038.978 I print_info: ssm_d_conv       = 0
0.01.038.978 I print_info: ssm_d_inner      = 0
0.01.038.979 I print_info: ssm_d_state      = 0
0.01.038.979 I print_info: ssm_dt_rank      = 0
0.01.038.979 I print_info: ssm_dt_b_c_rms   = 0
0.01.038.981 I print_info: model type       = 2B
0.01.038.982 I print_info: model params     = 2.51 B
0.01.038.992 I print_info: general.name     = gemma-1.1-2b-it
0.01.038.996 I print_info: vocab type       = SPM
0.01.038.998 I print_info: n_vocab          = 256000
0.01.039.000 I print_info: n_merges         = 0
0.01.039.001 I print_info: BOS token        = 2 '<bos>'
0.01.039.001 I print_info: EOS token        = 1 '<eos>'
0.01.039.002 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.039.003 I print_info: UNK token        = 3 '<unk>'
0.01.039.004 I print_info: PAD token        = 0 '<pad>'
0.01.039.005 I print_info: LF token         = 227 '<0x0A>'
0.01.039.032 I print_info: EOG token        = 1 '<eos>'
0.01.039.035 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.039.036 I print_info: max token length = 93
0.01.039.038 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.101.158 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.101.167 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.101.168 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.101.169 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.101.169 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.101.170 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.108.068 I llama_context_unified: n_seq_max     = 1
0.01.108.074 I llama_context_unified: n_ctx         = 4096
0.01.108.074 I llama_context_unified: n_ctx_per_seq = 4096
0.01.108.074 I llama_context_unified: n_batch       = 2048
0.01.108.075 I llama_context_unified: n_ubatch      = 512
0.01.108.075 I llama_context_unified: flash_attn    = 0
0.01.108.078 I llama_context_unified: freq_base     = 10000.0
0.01.108.078 I llama_context_unified: freq_scale    = 1
0.01.108.079 W llama_context_unified: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.108.160 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.122.540 I init:        CPU KV buffer size =    72.00 MiB
0.01.122.583 I llama_context_unified: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.122.735 I llama_context_unified:        CPU  output buffer size =     0.98 MiB
0.01.126.300 I llama_context_unified:        CPU compute buffer size =   504.00 MiB
0.01.126.304 I llama_context_unified: graph nodes  = 601
0.01.126.304 I llama_context_unified: graph splits = 1
0.01.126.329 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.126.333 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.735.597 I main: llama threadpool init, n_threads = 4
0.01.735.610 I 
0.01.735.702 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.735.706 I 
0.01.735.944 I sampler seed: 3015697824
0.01.735.957 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.735.967 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.735.968 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.735.968 I 
 seconded, and the verb tenses are correct. [end of text]


0.05.587.164 I llama_perf_sampler_print:    sampling time =      17.21 ms /    12 runs   (    1.43 ms per token,   697.23 tokens per second)
0.05.587.168 I llama_perf_context_print:        load time =    1707.67 ms
0.05.587.180 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.587.182 I llama_perf_context_print:        eval time =    3820.83 ms /    11 runs   (  347.35 ms per token,     2.88 tokens per second)
0.05.587.183 I llama_perf_context_print:       total time =    3878.40 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4719 (8da7f612)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186124.86 ms
main:    total time = 186124.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.689 I build: 4719 (8da7f612) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.085.766 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.915 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.920 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.926 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.932 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.934 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.935 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.942 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.945 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.946 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.948 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.299.825 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.401.317 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.424.748 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.424.760 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.424.762 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.424.764 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.424.766 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.424.768 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.424.770 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.424.774 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.424.775 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.424.777 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.424.786 I llama_model_loader: - type  f32:   37 tensors
0.00.424.788 I llama_model_loader: - type q4_K:  108 tensors
0.00.424.789 I llama_model_loader: - type q6_K:   19 tensors
0.00.424.806 I print_info: file format = GGUF V3 (latest)
0.00.424.807 I print_info: file type   = Q4_K - Medium
0.00.424.809 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.692.203 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.819.422 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.820.432 I load: special tokens cache size = 5
0.01.052.846 I load: token to piece cache size = 1.6014 MB
0.01.052.927 I print_info: arch             = gemma
0.01.052.928 I print_info: vocab_only       = 0
0.01.052.929 I print_info: n_ctx_train      = 8192
0.01.052.929 I print_info: n_embd           = 2048
0.01.052.930 I print_info: n_layer          = 18
0.01.052.997 I print_info: n_head           = 8
0.01.053.010 I print_info: n_head_kv        = 1
0.01.053.010 I print_info: n_rot            = 256
0.01.053.011 I print_info: n_swa            = 0
0.01.053.012 I print_info: n_embd_head_k    = 256
0.01.053.012 I print_info: n_embd_head_v    = 256
0.01.053.017 I print_info: n_gqa            = 8
0.01.053.022 I print_info: n_embd_k_gqa     = 256
0.01.053.029 I print_info: n_embd_v_gqa     = 256
0.01.053.030 I print_info: f_norm_eps       = 0.0e+00
0.01.053.040 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.053.052 I print_info: f_clamp_kqv      = 0.0e+00
0.01.053.055 I print_info: f_max_alibi_bias = 0.0e+00
0.01.053.056 I print_info: f_logit_scale    = 0.0e+00
0.01.053.061 I print_info: n_ff             = 16384
0.01.053.062 I print_info: n_expert         = 0
0.01.053.062 I print_info: n_expert_used    = 0
0.01.053.071 I print_info: causal attn      = 1
0.01.053.072 I print_info: pooling type     = 0
0.01.053.072 I print_info: rope type        = 2
0.01.053.073 I print_info: rope scaling     = linear
0.01.053.075 I print_info: freq_base_train  = 10000.0
0.01.053.076 I print_info: freq_scale_train = 1
0.01.053.076 I print_info: n_ctx_orig_yarn  = 8192
0.01.053.077 I print_info: rope_finetuned   = unknown
0.01.053.078 I print_info: ssm_d_conv       = 0
0.01.053.078 I print_info: ssm_d_inner      = 0
0.01.053.079 I print_info: ssm_d_state      = 0
0.01.053.079 I print_info: ssm_dt_rank      = 0
0.01.053.080 I print_info: ssm_dt_b_c_rms   = 0
0.01.053.082 I print_info: model type       = 2B
0.01.053.083 I print_info: model params     = 2.51 B
0.01.053.084 I print_info: general.name     = gemma-1.1-2b-it
0.01.053.089 I print_info: vocab type       = SPM
0.01.053.091 I print_info: n_vocab          = 256000
0.01.053.093 I print_info: n_merges         = 0
0.01.053.094 I print_info: BOS token        = 2 '<bos>'
0.01.053.094 I print_info: EOS token        = 1 '<eos>'
0.01.053.097 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.053.097 I print_info: UNK token        = 3 '<unk>'
0.01.053.098 I print_info: PAD token        = 0 '<pad>'
0.01.053.098 I print_info: LF token         = 227 '<0x0A>'
0.01.053.114 I print_info: EOG token        = 1 '<eos>'
0.01.053.116 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.053.116 I print_info: max token length = 93
0.01.053.118 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.110.378 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.117.459 I llama_context_unified: n_seq_max     = 1
0.01.117.464 I llama_context_unified: n_ctx         = 4096
0.01.117.465 I llama_context_unified: n_ctx_per_seq = 4096
0.01.117.465 I llama_context_unified: n_batch       = 2048
0.01.117.465 I llama_context_unified: n_ubatch      = 512
0.01.117.466 I llama_context_unified: flash_attn    = 0
0.01.117.468 I llama_context_unified: freq_base     = 10000.0
0.01.117.469 I llama_context_unified: freq_scale    = 1
0.01.117.469 W llama_context_unified: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.117.553 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.133.007 I init:        CPU KV buffer size =    72.00 MiB
0.01.133.051 I llama_context_unified: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.133.176 I llama_context_unified:        CPU  output buffer size =     0.98 MiB
0.01.136.774 I llama_context_unified:        CPU compute buffer size =   504.00 MiB
0.01.136.778 I llama_context_unified: graph nodes  = 601
0.01.136.778 I llama_context_unified: graph splits = 1
0.01.136.805 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.136.808 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.744.508 I main: llama threadpool init, n_threads = 4
0.01.744.521 I 
0.01.744.625 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.744.629 I 
0.01.744.867 I sampler seed: 379195290
0.01.744.881 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.744.890 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.744.893 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.744.893 I 
 increasities can be explained by several factors, including neuronal plasticity, synaptic plasticity, and epigenetic modifications.

**Neuronal plasticity**

* Long-term

0.12.869.872 I llama_perf_sampler_print:    sampling time =      49.49 ms /    33 runs   (    1.50 ms per token,   666.75 tokens per second)
0.12.869.888 I llama_perf_context_print:        load time =    1716.70 ms
0.12.869.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.869.892 I llama_perf_context_print:        eval time =   11040.43 ms /    32 runs   (  345.01 ms per token,     2.90 tokens per second)
0.12.869.892 I llama_perf_context_print:       total time =   11152.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m34.189s
user	46m15.114s
sys	0m6.328s
