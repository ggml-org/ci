+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3988 (8d8ff715) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.755 I main: load the model and apply lora adapter, if any
0.00.024.624 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.842 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.939 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.941 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.945 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.948 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.949 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.950 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.952 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.952 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.960 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.962 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.963 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.964 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.965 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.180 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.470 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.535 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.546 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.548 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.549 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.550 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.551 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.552 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.556 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.557 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.558 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.559 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.560 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.570 I llama_model_loader: - type  f32:   37 tensors
0.00.271.574 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.017 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.331 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.291 I llm_load_vocab: special tokens cache size = 5
0.00.602.094 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.164 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.165 I llm_load_print_meta: arch             = gemma
0.00.602.166 I llm_load_print_meta: vocab type       = SPM
0.00.602.167 I llm_load_print_meta: n_vocab          = 256000
0.00.602.169 I llm_load_print_meta: n_merges         = 0
0.00.602.170 I llm_load_print_meta: vocab_only       = 0
0.00.602.170 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.170 I llm_load_print_meta: n_embd           = 2048
0.00.602.171 I llm_load_print_meta: n_layer          = 18
0.00.602.233 I llm_load_print_meta: n_head           = 8
0.00.602.240 I llm_load_print_meta: n_head_kv        = 1
0.00.602.240 I llm_load_print_meta: n_rot            = 256
0.00.602.242 I llm_load_print_meta: n_swa            = 0
0.00.602.243 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.243 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.248 I llm_load_print_meta: n_gqa            = 8
0.00.602.253 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.258 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.260 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.261 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.262 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.263 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.263 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.268 I llm_load_print_meta: n_ff             = 16384
0.00.602.269 I llm_load_print_meta: n_expert         = 0
0.00.602.270 I llm_load_print_meta: n_expert_used    = 0
0.00.602.270 I llm_load_print_meta: causal attn      = 1
0.00.602.271 I llm_load_print_meta: pooling type     = 0
0.00.602.271 I llm_load_print_meta: rope type        = 2
0.00.602.271 I llm_load_print_meta: rope scaling     = linear
0.00.602.274 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.275 I llm_load_print_meta: freq_scale_train = 1
0.00.602.275 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.276 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.276 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.277 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.277 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.278 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.279 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.279 I llm_load_print_meta: model type       = 2B
0.00.602.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.281 I llm_load_print_meta: model params     = 2.51 B
0.00.602.282 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.283 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.283 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.284 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.284 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.285 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.285 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.286 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.301 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.306 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.321 I llm_load_print_meta: max token length = 93
0.00.602.486 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.712.446 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.712.453 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.712.454 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.712.455 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.712.455 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.712.456 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.718.103 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.110 I llama_new_context_with_model: n_batch    = 2048
0.00.718.111 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.111 I llama_new_context_with_model: flash_attn = 0
0.00.718.114 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.115 I llama_new_context_with_model: freq_scale = 1
0.00.747.770 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.813 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.312 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.318 I llama_new_context_with_model: graph nodes  = 601
0.00.749.318 I llama_new_context_with_model: graph splits = 1
0.00.749.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.770 I main: llama threadpool init, n_threads = 4
0.01.361.783 I 
0.01.361.888 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.892 I 
0.01.362.122 I sampler seed: 267538671
0.01.362.134 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.143 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.362.144 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.144 I 
 seconded 
**Assistant**

I understand. I will ensure that I provide clear and concise responses that adhere to the specified guidelines. Please let me know

0.14.796.713 I llama_perf_sampler_print:    sampling time =      47.65 ms /    33 runs   (    1.44 ms per token,   692.58 tokens per second)
0.14.796.716 I llama_perf_context_print:        load time =    1358.93 ms
0.14.796.728 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.796.731 I llama_perf_context_print:        eval time =   13341.07 ms /    32 runs   (  416.91 ms per token,     2.40 tokens per second)
0.14.796.732 I llama_perf_context_print:       total time =   13434.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3988 (8d8ff715) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.024.820 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.930 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.931 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.936 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.938 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.939 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.942 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.952 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.954 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.956 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.957 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.959 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.534 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.266.639 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.726 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.727 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.728 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.729 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.731 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.732 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.735 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.737 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.286.739 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.286.740 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.286.747 I llama_model_loader: - type  f32:   37 tensors
0.00.286.752 I llama_model_loader: - type q8_0:  127 tensors
0.00.486.329 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.268 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.178 I llm_load_vocab: special tokens cache size = 5
0.00.657.866 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.657.933 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.657.934 I llm_load_print_meta: arch             = gemma
0.00.657.935 I llm_load_print_meta: vocab type       = SPM
0.00.657.936 I llm_load_print_meta: n_vocab          = 256000
0.00.657.938 I llm_load_print_meta: n_merges         = 0
0.00.657.938 I llm_load_print_meta: vocab_only       = 0
0.00.657.939 I llm_load_print_meta: n_ctx_train      = 8192
0.00.657.939 I llm_load_print_meta: n_embd           = 2048
0.00.657.940 I llm_load_print_meta: n_layer          = 18
0.00.658.002 I llm_load_print_meta: n_head           = 8
0.00.658.010 I llm_load_print_meta: n_head_kv        = 1
0.00.658.011 I llm_load_print_meta: n_rot            = 256
0.00.658.012 I llm_load_print_meta: n_swa            = 0
0.00.658.013 I llm_load_print_meta: n_embd_head_k    = 256
0.00.658.013 I llm_load_print_meta: n_embd_head_v    = 256
0.00.658.018 I llm_load_print_meta: n_gqa            = 8
0.00.658.031 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.658.039 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.658.040 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.658.041 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.658.043 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.658.043 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.658.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.658.049 I llm_load_print_meta: n_ff             = 16384
0.00.658.049 I llm_load_print_meta: n_expert         = 0
0.00.658.062 I llm_load_print_meta: n_expert_used    = 0
0.00.658.065 I llm_load_print_meta: causal attn      = 1
0.00.658.066 I llm_load_print_meta: pooling type     = 0
0.00.658.066 I llm_load_print_meta: rope type        = 2
0.00.658.066 I llm_load_print_meta: rope scaling     = linear
0.00.658.068 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.658.068 I llm_load_print_meta: freq_scale_train = 1
0.00.658.069 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.658.069 I llm_load_print_meta: rope_finetuned   = unknown
0.00.658.070 I llm_load_print_meta: ssm_d_conv       = 0
0.00.658.070 I llm_load_print_meta: ssm_d_inner      = 0
0.00.658.070 I llm_load_print_meta: ssm_d_state      = 0
0.00.658.071 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.658.071 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.658.072 I llm_load_print_meta: model type       = 2B
0.00.658.074 I llm_load_print_meta: model ftype      = Q8_0
0.00.658.075 I llm_load_print_meta: model params     = 2.51 B
0.00.658.076 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.658.076 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.658.085 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.658.086 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.658.087 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.658.087 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.658.088 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.658.088 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.658.094 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.658.096 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.658.097 I llm_load_print_meta: max token length = 93
0.00.658.281 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.758.076 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.763.834 I llama_new_context_with_model: n_ctx      = 8192
0.00.763.842 I llama_new_context_with_model: n_batch    = 2048
0.00.763.842 I llama_new_context_with_model: n_ubatch   = 512
0.00.763.843 I llama_new_context_with_model: flash_attn = 0
0.00.763.845 I llama_new_context_with_model: freq_base  = 10000.0
0.00.763.846 I llama_new_context_with_model: freq_scale = 1
0.00.792.678 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.792.721 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.792.833 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.794.213 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.794.218 I llama_new_context_with_model: graph nodes  = 601
0.00.794.218 I llama_new_context_with_model: graph splits = 1
0.00.794.234 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.410.088 I main: llama threadpool init, n_threads = 4
0.01.410.103 I 
0.01.410.227 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.410.233 I 
0.01.410.481 I sampler seed: 3044467541
0.01.410.493 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.410.502 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.410.502 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.410.509 I 
 increasels with a powerful voice that echoes throughout the land.

**What is the setting of this story?** [end of text]


0.11.693.090 I llama_perf_sampler_print:    sampling time =      36.21 ms /    25 runs   (    1.45 ms per token,   690.36 tokens per second)
0.11.693.094 I llama_perf_context_print:        load time =    1407.15 ms
0.11.693.095 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.693.109 I llama_perf_context_print:        eval time =   10211.83 ms /    24 runs   (  425.49 ms per token,     2.35 tokens per second)
0.11.693.110 I llama_perf_context_print:       total time =   10283.01 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3988 (8d8ff715) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.027.501 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.027.715 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.027.801 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.812 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.814 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.818 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.819 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.820 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.821 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.822 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.823 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.830 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.913 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.915 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.916 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.892 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.279.811 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.279.823 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.279.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.279.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.279.828 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.279.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.279.831 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.279.849 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.279.850 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.279.852 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.279.854 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.279.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.279.865 I llama_model_loader: - type  f32:   37 tensors
0.00.279.871 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.759 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.934 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.931 I llm_load_vocab: special tokens cache size = 5
0.00.647.891 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.647.978 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.647.982 I llm_load_print_meta: arch             = gemma
0.00.647.983 I llm_load_print_meta: vocab type       = SPM
0.00.647.984 I llm_load_print_meta: n_vocab          = 256000
0.00.647.987 I llm_load_print_meta: n_merges         = 0
0.00.647.987 I llm_load_print_meta: vocab_only       = 0
0.00.647.988 I llm_load_print_meta: n_ctx_train      = 8192
0.00.647.989 I llm_load_print_meta: n_embd           = 2048
0.00.648.000 I llm_load_print_meta: n_layer          = 18
0.00.648.072 I llm_load_print_meta: n_head           = 8
0.00.648.084 I llm_load_print_meta: n_head_kv        = 1
0.00.648.085 I llm_load_print_meta: n_rot            = 256
0.00.648.086 I llm_load_print_meta: n_swa            = 0
0.00.648.086 I llm_load_print_meta: n_embd_head_k    = 256
0.00.648.087 I llm_load_print_meta: n_embd_head_v    = 256
0.00.648.095 I llm_load_print_meta: n_gqa            = 8
0.00.648.102 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.648.113 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.648.116 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.648.118 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.648.119 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.648.119 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.648.120 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.648.128 I llm_load_print_meta: n_ff             = 16384
0.00.648.128 I llm_load_print_meta: n_expert         = 0
0.00.648.129 I llm_load_print_meta: n_expert_used    = 0
0.00.648.130 I llm_load_print_meta: causal attn      = 1
0.00.648.130 I llm_load_print_meta: pooling type     = 0
0.00.648.131 I llm_load_print_meta: rope type        = 2
0.00.648.131 I llm_load_print_meta: rope scaling     = linear
0.00.648.133 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.648.135 I llm_load_print_meta: freq_scale_train = 1
0.00.648.135 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.648.136 I llm_load_print_meta: rope_finetuned   = unknown
0.00.648.136 I llm_load_print_meta: ssm_d_conv       = 0
0.00.648.137 I llm_load_print_meta: ssm_d_inner      = 0
0.00.648.138 I llm_load_print_meta: ssm_d_state      = 0
0.00.648.138 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.648.140 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.648.141 I llm_load_print_meta: model type       = 2B
0.00.648.143 I llm_load_print_meta: model ftype      = Q8_0
0.00.648.146 I llm_load_print_meta: model params     = 2.51 B
0.00.648.148 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.648.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.648.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.648.150 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.648.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.648.151 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.648.155 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.648.156 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.648.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.648.166 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.648.167 I llm_load_print_meta: max token length = 93
0.00.648.348 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.745.207 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.745.215 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.745.217 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.745.218 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.745.219 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.745.220 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.751.030 I llama_new_context_with_model: n_ctx      = 8192
0.00.751.038 I llama_new_context_with_model: n_batch    = 2048
0.00.751.038 I llama_new_context_with_model: n_ubatch   = 512
0.00.751.039 I llama_new_context_with_model: flash_attn = 0
0.00.751.042 I llama_new_context_with_model: freq_base  = 10000.0
0.00.751.043 I llama_new_context_with_model: freq_scale = 1
0.00.780.359 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.780.406 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.780.522 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.781.909 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.781.913 I llama_new_context_with_model: graph nodes  = 601
0.00.781.914 I llama_new_context_with_model: graph splits = 1
0.00.781.932 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.395.929 I main: llama threadpool init, n_threads = 4
0.01.395.943 I 
0.01.396.061 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.396.064 I 
0.01.396.293 I sampler seed: 1818041043
0.01.396.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.396.324 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.396.334 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.396.334 I 
 increasities by the sea?

The question is about a phenomenon that is related to coastal erosion and marine life.

**Answer:**

**Sea level rise

0.14.812.395 I llama_perf_sampler_print:    sampling time =      48.51 ms /    33 runs   (    1.47 ms per token,   680.22 tokens per second)
0.14.812.400 I llama_perf_context_print:        load time =    1393.08 ms
0.14.812.402 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.812.403 I llama_perf_context_print:        eval time =   13322.08 ms /    32 runs   (  416.31 ms per token,     2.40 tokens per second)
0.14.812.404 I llama_perf_context_print:       total time =   13416.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3988 (8d8ff715) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.322 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.532 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.617 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.629 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.633 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.637 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.638 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.639 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.650 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.652 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.664 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.214 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.228 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.236 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.237 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.238 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.239 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.245 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.246 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.249 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.250 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.258 I llama_model_loader: - type  f32:   37 tensors
0.00.269.261 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.272 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.635 I llm_load_vocab: special tokens cache size = 5
0.00.609.854 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.924 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.925 I llm_load_print_meta: arch             = gemma
0.00.609.926 I llm_load_print_meta: vocab type       = SPM
0.00.609.927 I llm_load_print_meta: n_vocab          = 256000
0.00.609.929 I llm_load_print_meta: n_merges         = 0
0.00.609.929 I llm_load_print_meta: vocab_only       = 0
0.00.609.930 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.930 I llm_load_print_meta: n_embd           = 2048
0.00.609.931 I llm_load_print_meta: n_layer          = 18
0.00.609.992 I llm_load_print_meta: n_head           = 8
0.00.610.000 I llm_load_print_meta: n_head_kv        = 1
0.00.610.000 I llm_load_print_meta: n_rot            = 256
0.00.610.001 I llm_load_print_meta: n_swa            = 0
0.00.610.001 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.002 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.011 I llm_load_print_meta: n_gqa            = 8
0.00.610.016 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.021 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.022 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.028 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.029 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.034 I llm_load_print_meta: n_ff             = 16384
0.00.610.034 I llm_load_print_meta: n_expert         = 0
0.00.610.035 I llm_load_print_meta: n_expert_used    = 0
0.00.610.036 I llm_load_print_meta: causal attn      = 1
0.00.610.036 I llm_load_print_meta: pooling type     = 0
0.00.610.036 I llm_load_print_meta: rope type        = 2
0.00.610.037 I llm_load_print_meta: rope scaling     = linear
0.00.610.038 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.039 I llm_load_print_meta: freq_scale_train = 1
0.00.610.040 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.040 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.041 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.041 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.042 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.042 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.043 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.044 I llm_load_print_meta: model type       = 2B
0.00.610.045 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.046 I llm_load_print_meta: model params     = 2.51 B
0.00.610.047 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.047 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.048 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.049 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.061 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.063 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.063 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.064 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.069 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.071 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.072 I llm_load_print_meta: max token length = 93
0.00.610.245 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.704 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.702.714 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.708.434 I llama_new_context_with_model: n_ctx      = 8192
0.00.708.441 I llama_new_context_with_model: n_batch    = 2048
0.00.708.442 I llama_new_context_with_model: n_ubatch   = 512
0.00.708.442 I llama_new_context_with_model: flash_attn = 0
0.00.708.445 I llama_new_context_with_model: freq_base  = 10000.0
0.00.708.446 I llama_new_context_with_model: freq_scale = 1
0.00.737.512 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.737.556 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.675 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.116 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.739.121 I llama_new_context_with_model: graph nodes  = 601
0.00.739.122 I llama_new_context_with_model: graph splits = 1
0.00.739.136 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.377 I main: llama threadpool init, n_threads = 4
0.01.350.390 I 
0.01.350.497 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.500 I 
0.01.350.731 I sampler seed: 3949550545
0.01.350.743 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.350.751 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.350.752 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.350.752 I 
 increasities in the movie. [end of text]


0.04.282.335 I llama_perf_sampler_print:    sampling time =      10.57 ms /     8 runs   (    1.32 ms per token,   756.86 tokens per second)
0.04.282.339 I llama_perf_context_print:        load time =    1347.50 ms
0.04.282.341 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.282.343 I llama_perf_context_print:        eval time =    2910.06 ms /     7 runs   (  415.72 ms per token,     2.41 tokens per second)
0.04.282.345 I llama_perf_context_print:       total time =    2931.97 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.446s
user	2m53.037s
sys	0m9.651s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3988 (8d8ff715)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199413.68 ms
main:    total time = 199413.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 3988 (8d8ff715) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.024.848 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.051 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.136 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.147 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.149 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.153 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.154 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.156 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.158 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.166 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.170 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.175 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.177 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.178 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.179 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.180 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.924 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.929 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.944 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.945 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.946 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.951 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.952 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.954 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.955 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.956 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.968 I llama_model_loader: - type  f32:   37 tensors
0.00.268.972 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.972 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.097 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.870 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.756 I llm_load_vocab: special tokens cache size = 5
0.00.605.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.501 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.503 I llm_load_print_meta: arch             = gemma
0.00.605.503 I llm_load_print_meta: vocab type       = SPM
0.00.605.504 I llm_load_print_meta: n_vocab          = 256000
0.00.605.506 I llm_load_print_meta: n_merges         = 0
0.00.605.507 I llm_load_print_meta: vocab_only       = 0
0.00.605.507 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.507 I llm_load_print_meta: n_embd           = 2048
0.00.605.508 I llm_load_print_meta: n_layer          = 18
0.00.605.569 I llm_load_print_meta: n_head           = 8
0.00.605.577 I llm_load_print_meta: n_head_kv        = 1
0.00.605.585 I llm_load_print_meta: n_rot            = 256
0.00.605.587 I llm_load_print_meta: n_swa            = 0
0.00.605.587 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.587 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.592 I llm_load_print_meta: n_gqa            = 8
0.00.605.597 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.602 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.606 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.608 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.609 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.609 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.610 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.615 I llm_load_print_meta: n_ff             = 16384
0.00.605.615 I llm_load_print_meta: n_expert         = 0
0.00.605.615 I llm_load_print_meta: n_expert_used    = 0
0.00.605.616 I llm_load_print_meta: causal attn      = 1
0.00.605.628 I llm_load_print_meta: pooling type     = 0
0.00.605.629 I llm_load_print_meta: rope type        = 2
0.00.605.630 I llm_load_print_meta: rope scaling     = linear
0.00.605.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.633 I llm_load_print_meta: freq_scale_train = 1
0.00.605.633 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.633 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.634 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.635 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.635 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.635 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.636 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.636 I llm_load_print_meta: model type       = 2B
0.00.605.637 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.638 I llm_load_print_meta: model params     = 2.51 B
0.00.605.639 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.639 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.639 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.640 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.640 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.648 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.649 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.650 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.655 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.657 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.658 I llm_load_print_meta: max token length = 93
0.00.605.824 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.989 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.668.995 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.668.996 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.668.997 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.668.997 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.668.998 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.674.580 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.587 I llama_new_context_with_model: n_batch    = 2048
0.00.674.588 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.588 I llama_new_context_with_model: flash_attn = 0
0.00.674.591 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.592 I llama_new_context_with_model: freq_scale = 1
0.00.704.115 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.160 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.276 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.700 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.705 I llama_new_context_with_model: graph nodes  = 601
0.00.705.706 I llama_new_context_with_model: graph splits = 1
0.00.705.721 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.714 I main: llama threadpool init, n_threads = 4
0.01.287.727 I 
0.01.287.838 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.842 I 
0.01.288.072 I sampler seed: 1657635735
0.01.288.083 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.089 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.288.090 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.100 I 
 seconally. [end of text]


0.02.669.101 I llama_perf_sampler_print:    sampling time =       6.14 ms /     5 runs   (    1.23 ms per token,   814.86 tokens per second)
0.02.669.105 I llama_perf_context_print:        load time =    1284.84 ms
0.02.669.106 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.669.107 I llama_perf_context_print:        eval time =    1367.87 ms /     4 runs   (  341.97 ms per token,     2.92 tokens per second)
0.02.669.108 I llama_perf_context_print:       total time =    1381.40 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3988 (8d8ff715)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199195.58 ms
main:    total time = 199195.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 3988 (8d8ff715) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.821 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.926 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.940 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.941 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.946 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.948 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.950 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.954 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.963 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.968 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.561 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.268 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.134 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.135 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.136 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.137 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.138 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.141 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.142 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.151 I llama_model_loader: - type  f32:   37 tensors
0.00.269.157 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.158 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.377 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.632 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.690 I llm_load_vocab: special tokens cache size = 5
0.00.624.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.668 I llm_load_print_meta: arch             = gemma
0.00.624.669 I llm_load_print_meta: vocab type       = SPM
0.00.624.670 I llm_load_print_meta: n_vocab          = 256000
0.00.624.673 I llm_load_print_meta: n_merges         = 0
0.00.624.674 I llm_load_print_meta: vocab_only       = 0
0.00.624.674 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.675 I llm_load_print_meta: n_embd           = 2048
0.00.624.677 I llm_load_print_meta: n_layer          = 18
0.00.624.746 I llm_load_print_meta: n_head           = 8
0.00.624.756 I llm_load_print_meta: n_head_kv        = 1
0.00.624.757 I llm_load_print_meta: n_rot            = 256
0.00.624.757 I llm_load_print_meta: n_swa            = 0
0.00.624.757 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.758 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.762 I llm_load_print_meta: n_gqa            = 8
0.00.624.771 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.784 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.786 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.786 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.787 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.787 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.793 I llm_load_print_meta: n_ff             = 16384
0.00.624.793 I llm_load_print_meta: n_expert         = 0
0.00.624.794 I llm_load_print_meta: n_expert_used    = 0
0.00.624.795 I llm_load_print_meta: causal attn      = 1
0.00.624.795 I llm_load_print_meta: pooling type     = 0
0.00.624.795 I llm_load_print_meta: rope type        = 2
0.00.624.796 I llm_load_print_meta: rope scaling     = linear
0.00.624.798 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.807 I llm_load_print_meta: freq_scale_train = 1
0.00.624.808 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.809 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.809 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.810 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.811 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.812 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.813 I llm_load_print_meta: model type       = 2B
0.00.624.815 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.817 I llm_load_print_meta: model params     = 2.51 B
0.00.624.819 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.820 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.821 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.822 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.823 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.824 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.824 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.825 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.832 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.834 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.835 I llm_load_print_meta: max token length = 93
0.00.625.011 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.686.268 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.692.212 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.219 I llama_new_context_with_model: n_batch    = 2048
0.00.692.219 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.220 I llama_new_context_with_model: flash_attn = 0
0.00.692.222 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.222 I llama_new_context_with_model: freq_scale = 1
0.00.721.584 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.634 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.750 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.125 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.130 I llama_new_context_with_model: graph nodes  = 601
0.00.723.130 I llama_new_context_with_model: graph splits = 1
0.00.723.147 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.304.915 I main: llama threadpool init, n_threads = 4
0.01.304.931 I 
0.01.305.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.070 I 
0.01.305.307 I sampler seed: 721933150
0.01.305.320 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.305.331 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.331 I 
 seconally.

I am unable to process the given context because I lack the necessary information. Please provide me with the necessary context so I can understand the question

0.12.355.719 I llama_perf_sampler_print:    sampling time =      48.15 ms /    33 runs   (    1.46 ms per token,   685.36 tokens per second)
0.12.355.722 I llama_perf_context_print:        load time =    1302.04 ms
0.12.355.735 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.355.737 I llama_perf_context_print:        eval time =   10956.57 ms /    32 runs   (  342.39 ms per token,     2.92 tokens per second)
0.12.355.738 I llama_perf_context_print:       total time =   11050.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m56.510s
user	49m34.752s
sys	0m6.482s
