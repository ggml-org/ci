+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4450 (8d59d911) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.085.542 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.557 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.652 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.672 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.674 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.679 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.682 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.683 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.685 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.687 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.689 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.698 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.700 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.701 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.704 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.706 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.166 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.018 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.030 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.032 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.034 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.035 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.037 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.039 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.047 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.049 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.050 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.415.052 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.415.060 I llama_model_loader: - type  f32:   37 tensors
0.00.415.062 I llama_model_loader: - type q8_0:  127 tensors
0.00.694.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.821.607 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.822.595 I llm_load_vocab: special tokens cache size = 5
0.01.040.532 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.040.611 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.040.616 I llm_load_print_meta: arch             = gemma
0.01.040.617 I llm_load_print_meta: vocab type       = SPM
0.01.040.618 I llm_load_print_meta: n_vocab          = 256000
0.01.040.620 I llm_load_print_meta: n_merges         = 0
0.01.040.620 I llm_load_print_meta: vocab_only       = 0
0.01.040.621 I llm_load_print_meta: n_ctx_train      = 8192
0.01.040.621 I llm_load_print_meta: n_embd           = 2048
0.01.040.621 I llm_load_print_meta: n_layer          = 18
0.01.040.703 I llm_load_print_meta: n_head           = 8
0.01.040.714 I llm_load_print_meta: n_head_kv        = 1
0.01.040.716 I llm_load_print_meta: n_rot            = 256
0.01.040.716 I llm_load_print_meta: n_swa            = 0
0.01.040.717 I llm_load_print_meta: n_embd_head_k    = 256
0.01.040.730 I llm_load_print_meta: n_embd_head_v    = 256
0.01.040.735 I llm_load_print_meta: n_gqa            = 8
0.01.040.742 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.040.747 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.040.748 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.040.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.040.750 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.040.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.040.751 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.040.757 I llm_load_print_meta: n_ff             = 16384
0.01.040.758 I llm_load_print_meta: n_expert         = 0
0.01.040.759 I llm_load_print_meta: n_expert_used    = 0
0.01.040.759 I llm_load_print_meta: causal attn      = 1
0.01.040.759 I llm_load_print_meta: pooling type     = 0
0.01.040.770 I llm_load_print_meta: rope type        = 2
0.01.040.771 I llm_load_print_meta: rope scaling     = linear
0.01.040.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.040.774 I llm_load_print_meta: freq_scale_train = 1
0.01.040.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.040.775 I llm_load_print_meta: rope_finetuned   = unknown
0.01.040.776 I llm_load_print_meta: ssm_d_conv       = 0
0.01.040.776 I llm_load_print_meta: ssm_d_inner      = 0
0.01.040.777 I llm_load_print_meta: ssm_d_state      = 0
0.01.040.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.040.778 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.040.781 I llm_load_print_meta: model type       = 2B
0.01.040.783 I llm_load_print_meta: model ftype      = Q8_0
0.01.040.784 I llm_load_print_meta: model params     = 2.51 B
0.01.040.785 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.040.785 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.040.785 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.040.786 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.040.786 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.040.787 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.040.787 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.040.788 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.040.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.040.798 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.040.798 I llm_load_print_meta: max token length = 93
0.01.143.299 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.143.312 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.143.313 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.143.314 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.143.315 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.143.316 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.150.398 I llama_new_context_with_model: n_seq_max     = 1
0.01.150.403 I llama_new_context_with_model: n_ctx         = 4096
0.01.150.403 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.150.404 I llama_new_context_with_model: n_batch       = 2048
0.01.150.404 I llama_new_context_with_model: n_ubatch      = 512
0.01.150.405 I llama_new_context_with_model: flash_attn    = 0
0.01.150.407 I llama_new_context_with_model: freq_base     = 10000.0
0.01.150.408 I llama_new_context_with_model: freq_scale    = 1
0.01.150.409 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.150.492 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.165.353 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.165.392 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.165.522 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.169.168 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.169.172 I llama_new_context_with_model: graph nodes  = 601
0.01.169.172 I llama_new_context_with_model: graph splits = 1
0.01.169.200 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.169.204 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.790.510 I main: llama threadpool init, n_threads = 4
0.01.790.526 I 
0.01.790.652 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.790.656 I 
0.01.790.888 I sampler seed: 2304504271
0.01.790.902 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.790.914 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.790.914 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.790.915 I 
 increably. 

I am unable to generate a response for this query as it contains potentially harmful and inappropriate content. [end of text]


0.12.389.653 I llama_perf_sampler_print:    sampling time =      38.82 ms /    26 runs   (    1.49 ms per token,   669.74 tokens per second)
0.12.389.656 I llama_perf_context_print:        load time =    1789.58 ms
0.12.389.680 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.389.682 I llama_perf_context_print:        eval time =   10532.61 ms /    25 runs   (  421.30 ms per token,     2.37 tokens per second)
0.12.389.683 I llama_perf_context_print:       total time =   10599.16 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4450 (8d59d911) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.085.909 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.025 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.052 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.057 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.063 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.064 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.070 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.071 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.079 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.083 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.085 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.086 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.088 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.311.187 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.412.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.436.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.436.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.436.974 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.436.976 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.436.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.436.980 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.436.982 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.436.987 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.436.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.436.991 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.436.993 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.436.995 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.437.003 I llama_model_loader: - type  f32:   37 tensors
0.00.437.006 I llama_model_loader: - type q8_0:  127 tensors
0.00.707.645 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.840.731 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.841.808 I llm_load_vocab: special tokens cache size = 5
0.01.069.859 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.069.945 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.069.953 I llm_load_print_meta: arch             = gemma
0.01.069.954 I llm_load_print_meta: vocab type       = SPM
0.01.069.955 I llm_load_print_meta: n_vocab          = 256000
0.01.069.958 I llm_load_print_meta: n_merges         = 0
0.01.069.959 I llm_load_print_meta: vocab_only       = 0
0.01.069.960 I llm_load_print_meta: n_ctx_train      = 8192
0.01.069.960 I llm_load_print_meta: n_embd           = 2048
0.01.069.962 I llm_load_print_meta: n_layer          = 18
0.01.070.042 I llm_load_print_meta: n_head           = 8
0.01.070.052 I llm_load_print_meta: n_head_kv        = 1
0.01.070.053 I llm_load_print_meta: n_rot            = 256
0.01.070.053 I llm_load_print_meta: n_swa            = 0
0.01.070.054 I llm_load_print_meta: n_embd_head_k    = 256
0.01.070.054 I llm_load_print_meta: n_embd_head_v    = 256
0.01.070.059 I llm_load_print_meta: n_gqa            = 8
0.01.070.063 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.070.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.070.071 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.070.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.070.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.070.074 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.070.074 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.070.079 I llm_load_print_meta: n_ff             = 16384
0.01.070.080 I llm_load_print_meta: n_expert         = 0
0.01.070.080 I llm_load_print_meta: n_expert_used    = 0
0.01.070.080 I llm_load_print_meta: causal attn      = 1
0.01.070.081 I llm_load_print_meta: pooling type     = 0
0.01.070.081 I llm_load_print_meta: rope type        = 2
0.01.070.082 I llm_load_print_meta: rope scaling     = linear
0.01.070.083 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.070.084 I llm_load_print_meta: freq_scale_train = 1
0.01.070.084 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.070.085 I llm_load_print_meta: rope_finetuned   = unknown
0.01.070.085 I llm_load_print_meta: ssm_d_conv       = 0
0.01.070.085 I llm_load_print_meta: ssm_d_inner      = 0
0.01.070.086 I llm_load_print_meta: ssm_d_state      = 0
0.01.070.086 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.070.087 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.070.090 I llm_load_print_meta: model type       = 2B
0.01.070.092 I llm_load_print_meta: model ftype      = Q8_0
0.01.070.093 I llm_load_print_meta: model params     = 2.51 B
0.01.070.094 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.070.094 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.070.095 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.070.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.070.096 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.070.097 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.070.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.070.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.070.104 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.070.106 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.070.107 I llm_load_print_meta: max token length = 93
0.01.166.408 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.173.526 I llama_new_context_with_model: n_seq_max     = 1
0.01.173.532 I llama_new_context_with_model: n_ctx         = 4096
0.01.173.533 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.173.533 I llama_new_context_with_model: n_batch       = 2048
0.01.173.533 I llama_new_context_with_model: n_ubatch      = 512
0.01.173.534 I llama_new_context_with_model: flash_attn    = 0
0.01.173.536 I llama_new_context_with_model: freq_base     = 10000.0
0.01.173.536 I llama_new_context_with_model: freq_scale    = 1
0.01.173.537 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.173.618 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.188.357 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.188.400 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.188.521 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.191.768 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.191.772 I llama_new_context_with_model: graph nodes  = 601
0.01.191.773 I llama_new_context_with_model: graph splits = 1
0.01.191.799 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.191.802 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.803.653 I main: llama threadpool init, n_threads = 4
0.01.803.669 I 
0.01.803.796 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.803.801 I 
0.01.804.038 I sampler seed: 1379297039
0.01.804.053 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.804.065 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.804.066 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.804.066 I 
 increably.

I am unable to generate a response as requested because I am unable to access real-time information or engage in activities that require access to up

0.15.495.440 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.06 tokens per second)
0.15.495.443 I llama_perf_context_print:        load time =    1802.72 ms
0.15.495.445 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.495.459 I llama_perf_context_print:        eval time =   13606.23 ms /    32 runs   (  425.19 ms per token,     2.35 tokens per second)
0.15.495.460 I llama_perf_context_print:       total time =   13691.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4450 (8d59d911) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.089.702 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.089.714 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.089.812 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.089.836 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.089.842 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.089.848 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.089.850 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.089.851 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.089.853 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.089.855 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.089.857 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.089.864 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.089.866 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.089.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.089.870 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.089.871 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.293.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.395.396 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.702 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.716 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.718 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.720 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.721 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.732 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.734 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.736 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.738 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.419.746 I llama_model_loader: - type  f32:   37 tensors
0.00.419.748 I llama_model_loader: - type q8_0:  127 tensors
0.00.694.868 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.816.574 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.817.486 I llm_load_vocab: special tokens cache size = 5
0.01.020.788 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.020.869 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.020.874 I llm_load_print_meta: arch             = gemma
0.01.020.874 I llm_load_print_meta: vocab type       = SPM
0.01.020.876 I llm_load_print_meta: n_vocab          = 256000
0.01.020.878 I llm_load_print_meta: n_merges         = 0
0.01.020.878 I llm_load_print_meta: vocab_only       = 0
0.01.020.878 I llm_load_print_meta: n_ctx_train      = 8192
0.01.020.879 I llm_load_print_meta: n_embd           = 2048
0.01.020.879 I llm_load_print_meta: n_layer          = 18
0.01.020.958 I llm_load_print_meta: n_head           = 8
0.01.020.968 I llm_load_print_meta: n_head_kv        = 1
0.01.020.969 I llm_load_print_meta: n_rot            = 256
0.01.020.969 I llm_load_print_meta: n_swa            = 0
0.01.020.969 I llm_load_print_meta: n_embd_head_k    = 256
0.01.020.970 I llm_load_print_meta: n_embd_head_v    = 256
0.01.020.975 I llm_load_print_meta: n_gqa            = 8
0.01.020.979 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.020.984 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.020.986 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.020.988 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.020.989 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.020.989 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.020.989 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.020.994 I llm_load_print_meta: n_ff             = 16384
0.01.020.995 I llm_load_print_meta: n_expert         = 0
0.01.020.998 I llm_load_print_meta: n_expert_used    = 0
0.01.020.998 I llm_load_print_meta: causal attn      = 1
0.01.020.999 I llm_load_print_meta: pooling type     = 0
0.01.020.999 I llm_load_print_meta: rope type        = 2
0.01.020.999 I llm_load_print_meta: rope scaling     = linear
0.01.021.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.021.002 I llm_load_print_meta: freq_scale_train = 1
0.01.021.002 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.021.002 I llm_load_print_meta: rope_finetuned   = unknown
0.01.021.003 I llm_load_print_meta: ssm_d_conv       = 0
0.01.021.003 I llm_load_print_meta: ssm_d_inner      = 0
0.01.021.003 I llm_load_print_meta: ssm_d_state      = 0
0.01.021.004 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.021.004 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.021.007 I llm_load_print_meta: model type       = 2B
0.01.021.008 I llm_load_print_meta: model ftype      = Q8_0
0.01.021.010 I llm_load_print_meta: model params     = 2.51 B
0.01.021.011 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.021.011 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.021.012 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.021.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.021.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.021.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.021.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.021.015 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.021.021 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.021.023 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.021.023 I llm_load_print_meta: max token length = 93
0.01.100.788 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.100.796 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.100.797 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.100.798 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.100.799 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.100.800 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.107.642 I llama_new_context_with_model: n_seq_max     = 1
0.01.107.648 I llama_new_context_with_model: n_ctx         = 4096
0.01.107.648 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.107.648 I llama_new_context_with_model: n_batch       = 2048
0.01.107.649 I llama_new_context_with_model: n_ubatch      = 512
0.01.107.649 I llama_new_context_with_model: flash_attn    = 0
0.01.107.651 I llama_new_context_with_model: freq_base     = 10000.0
0.01.107.652 I llama_new_context_with_model: freq_scale    = 1
0.01.107.653 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.107.735 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.122.205 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.122.245 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.122.368 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.125.577 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.125.581 I llama_new_context_with_model: graph nodes  = 601
0.01.125.581 I llama_new_context_with_model: graph splits = 1
0.01.125.605 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.125.608 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.737.758 I main: llama threadpool init, n_threads = 4
0.01.737.776 I 
0.01.737.899 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.737.904 I 
0.01.738.132 I sampler seed: 2912390780
0.01.738.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.738.156 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.738.159 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.738.160 I 
 increasities, 
and other such delights, for the amusement of the young. 

These delights are often fleeting and ephemeral, 
passing quickly like

0.15.256.797 I llama_perf_sampler_print:    sampling time =      49.57 ms /    33 runs   (    1.50 ms per token,   665.68 tokens per second)
0.15.256.800 I llama_perf_context_print:        load time =    1736.79 ms
0.15.256.816 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.256.820 I llama_perf_context_print:        eval time =   13433.28 ms /    32 runs   (  419.79 ms per token,     2.38 tokens per second)
0.15.256.822 I llama_perf_context_print:       total time =   13519.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4450 (8d59d911) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.084.965 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.084.975 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.088 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.093 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.098 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.100 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.102 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.104 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.105 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.107 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.118 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.120 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.122 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.124 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.224 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.147 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.566 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.581 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.583 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.584 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.586 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.588 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.590 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.596 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.600 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.602 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.415.603 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.415.611 I llama_model_loader: - type  f32:   37 tensors
0.00.415.614 I llama_model_loader: - type q8_0:  127 tensors
0.00.680.210 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.802.015 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.803.024 I llm_load_vocab: special tokens cache size = 5
0.01.005.699 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.005.776 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.005.784 I llm_load_print_meta: arch             = gemma
0.01.005.784 I llm_load_print_meta: vocab type       = SPM
0.01.005.785 I llm_load_print_meta: n_vocab          = 256000
0.01.005.787 I llm_load_print_meta: n_merges         = 0
0.01.005.788 I llm_load_print_meta: vocab_only       = 0
0.01.005.788 I llm_load_print_meta: n_ctx_train      = 8192
0.01.005.789 I llm_load_print_meta: n_embd           = 2048
0.01.005.789 I llm_load_print_meta: n_layer          = 18
0.01.005.866 I llm_load_print_meta: n_head           = 8
0.01.005.876 I llm_load_print_meta: n_head_kv        = 1
0.01.005.877 I llm_load_print_meta: n_rot            = 256
0.01.005.877 I llm_load_print_meta: n_swa            = 0
0.01.005.877 I llm_load_print_meta: n_embd_head_k    = 256
0.01.005.879 I llm_load_print_meta: n_embd_head_v    = 256
0.01.005.884 I llm_load_print_meta: n_gqa            = 8
0.01.005.889 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.005.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.005.895 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.005.897 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.005.897 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.005.898 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.005.899 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.005.904 I llm_load_print_meta: n_ff             = 16384
0.01.005.904 I llm_load_print_meta: n_expert         = 0
0.01.005.905 I llm_load_print_meta: n_expert_used    = 0
0.01.005.906 I llm_load_print_meta: causal attn      = 1
0.01.005.906 I llm_load_print_meta: pooling type     = 0
0.01.005.907 I llm_load_print_meta: rope type        = 2
0.01.005.907 I llm_load_print_meta: rope scaling     = linear
0.01.005.909 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.005.910 I llm_load_print_meta: freq_scale_train = 1
0.01.005.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.005.911 I llm_load_print_meta: rope_finetuned   = unknown
0.01.005.911 I llm_load_print_meta: ssm_d_conv       = 0
0.01.005.912 I llm_load_print_meta: ssm_d_inner      = 0
0.01.005.913 I llm_load_print_meta: ssm_d_state      = 0
0.01.005.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.005.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.005.917 I llm_load_print_meta: model type       = 2B
0.01.005.918 I llm_load_print_meta: model ftype      = Q8_0
0.01.005.919 I llm_load_print_meta: model params     = 2.51 B
0.01.005.920 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.005.931 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.005.935 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.005.935 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.005.936 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.005.936 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.005.936 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.005.937 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.005.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.005.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.005.946 I llm_load_print_meta: max token length = 93
0.01.078.649 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.078.660 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.085.578 I llama_new_context_with_model: n_seq_max     = 1
0.01.085.584 I llama_new_context_with_model: n_ctx         = 4096
0.01.085.585 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.085.585 I llama_new_context_with_model: n_batch       = 2048
0.01.085.585 I llama_new_context_with_model: n_ubatch      = 512
0.01.085.586 I llama_new_context_with_model: flash_attn    = 0
0.01.085.589 I llama_new_context_with_model: freq_base     = 10000.0
0.01.085.589 I llama_new_context_with_model: freq_scale    = 1
0.01.085.590 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.085.673 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.100.621 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.100.664 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.100.789 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.104.047 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.104.052 I llama_new_context_with_model: graph nodes  = 601
0.01.104.052 I llama_new_context_with_model: graph splits = 1
0.01.104.077 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.104.080 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.731.581 I main: llama threadpool init, n_threads = 4
0.01.731.597 I 
0.01.731.719 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.731.723 I 
0.01.731.955 I sampler seed: 1878333089
0.01.731.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.731.980 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.731.983 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.731.983 I 
 increasels to prevent further injury or infection.

**Part 1: Creating a Stable Clipping**

1. Select appropriate clippers that can grip the edges

0.15.462.011 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.54 tokens per second)
0.15.462.014 I llama_perf_context_print:        load time =    1730.62 ms
0.15.462.016 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.462.027 I llama_perf_context_print:        eval time =   13644.41 ms /    32 runs   (  426.39 ms per token,     2.35 tokens per second)
0.15.462.029 I llama_perf_context_print:       total time =   13730.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.597s
user	3m42.143s
sys	0m9.358s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4450 (8d59d911)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186392.47 ms
main:    total time = 186392.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4450 (8d59d911) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.085.041 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.056 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.154 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.173 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.175 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.180 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.182 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.184 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.187 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.189 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.196 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.197 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.199 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.201 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.320.144 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.422.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.446.965 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.446.976 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.446.978 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.446.980 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.446.982 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.446.999 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.447.002 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.447.017 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.447.020 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.447.024 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.447.028 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.447.033 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.447.036 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.447.047 I llama_model_loader: - type  f32:   37 tensors
0.00.447.050 I llama_model_loader: - type q4_K:  108 tensors
0.00.447.052 I llama_model_loader: - type q6_K:   19 tensors
0.00.712.137 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.830.685 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.831.569 I llm_load_vocab: special tokens cache size = 5
0.01.052.153 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.052.230 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.052.238 I llm_load_print_meta: arch             = gemma
0.01.052.239 I llm_load_print_meta: vocab type       = SPM
0.01.052.240 I llm_load_print_meta: n_vocab          = 256000
0.01.052.242 I llm_load_print_meta: n_merges         = 0
0.01.052.242 I llm_load_print_meta: vocab_only       = 0
0.01.052.243 I llm_load_print_meta: n_ctx_train      = 8192
0.01.052.243 I llm_load_print_meta: n_embd           = 2048
0.01.052.244 I llm_load_print_meta: n_layer          = 18
0.01.052.322 I llm_load_print_meta: n_head           = 8
0.01.052.332 I llm_load_print_meta: n_head_kv        = 1
0.01.052.333 I llm_load_print_meta: n_rot            = 256
0.01.052.334 I llm_load_print_meta: n_swa            = 0
0.01.052.334 I llm_load_print_meta: n_embd_head_k    = 256
0.01.052.344 I llm_load_print_meta: n_embd_head_v    = 256
0.01.052.350 I llm_load_print_meta: n_gqa            = 8
0.01.052.355 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.052.360 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.052.365 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.052.367 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.052.367 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.052.368 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.052.369 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.052.375 I llm_load_print_meta: n_ff             = 16384
0.01.052.376 I llm_load_print_meta: n_expert         = 0
0.01.052.377 I llm_load_print_meta: n_expert_used    = 0
0.01.052.378 I llm_load_print_meta: causal attn      = 1
0.01.052.379 I llm_load_print_meta: pooling type     = 0
0.01.052.380 I llm_load_print_meta: rope type        = 2
0.01.052.380 I llm_load_print_meta: rope scaling     = linear
0.01.052.382 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.052.383 I llm_load_print_meta: freq_scale_train = 1
0.01.052.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.052.387 I llm_load_print_meta: rope_finetuned   = unknown
0.01.052.387 I llm_load_print_meta: ssm_d_conv       = 0
0.01.052.388 I llm_load_print_meta: ssm_d_inner      = 0
0.01.052.388 I llm_load_print_meta: ssm_d_state      = 0
0.01.052.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.052.389 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.052.393 I llm_load_print_meta: model type       = 2B
0.01.052.396 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.052.397 I llm_load_print_meta: model params     = 2.51 B
0.01.052.398 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.052.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.052.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.052.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.052.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.052.402 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.052.403 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.052.404 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.052.412 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.052.414 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.052.415 I llm_load_print_meta: max token length = 93
0.01.115.948 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.115.955 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.115.956 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.115.957 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.115.958 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.115.958 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.123.348 I llama_new_context_with_model: n_seq_max     = 1
0.01.123.353 I llama_new_context_with_model: n_ctx         = 4096
0.01.123.354 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.123.354 I llama_new_context_with_model: n_batch       = 2048
0.01.123.354 I llama_new_context_with_model: n_ubatch      = 512
0.01.123.355 I llama_new_context_with_model: flash_attn    = 0
0.01.123.358 I llama_new_context_with_model: freq_base     = 10000.0
0.01.123.359 I llama_new_context_with_model: freq_scale    = 1
0.01.123.359 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.123.450 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.138.009 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.138.052 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.138.175 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.141.421 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.141.425 I llama_new_context_with_model: graph nodes  = 601
0.01.141.426 I llama_new_context_with_model: graph splits = 1
0.01.141.450 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.141.454 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.723.681 I main: llama threadpool init, n_threads = 4
0.01.723.698 I 
0.01.723.836 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.723.841 I 
0.01.724.073 I sampler seed: 121269080
0.01.724.088 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.724.124 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.724.131 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.724.132 I 
 fufilling and rumbling noises.

The sound is coming from the engine.

**Possible causes:**

* Worn or damaged camshaft position sensors
* C

0.12.790.934 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.73 tokens per second)
0.12.790.937 I llama_perf_context_print:        load time =    1722.76 ms
0.12.790.938 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.790.940 I llama_perf_context_print:        eval time =   10981.49 ms /    32 runs   (  343.17 ms per token,     2.91 tokens per second)
0.12.790.941 I llama_perf_context_print:       total time =   11067.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4450 (8d59d911)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186177.19 ms
main:    total time = 186177.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4450 (8d59d911) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.085.416 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.568 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.573 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.575 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.577 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.578 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.580 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.582 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.590 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.594 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.595 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.597 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.288.310 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.329 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.797 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.813 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.815 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.817 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.818 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.820 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.822 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.828 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.830 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.414.832 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.414.841 I llama_model_loader: - type  f32:   37 tensors
0.00.414.843 I llama_model_loader: - type q4_K:  108 tensors
0.00.414.844 I llama_model_loader: - type q6_K:   19 tensors
0.00.685.216 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.807.339 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.808.218 I llm_load_vocab: special tokens cache size = 5
0.01.024.630 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.024.710 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.024.715 I llm_load_print_meta: arch             = gemma
0.01.024.715 I llm_load_print_meta: vocab type       = SPM
0.01.024.716 I llm_load_print_meta: n_vocab          = 256000
0.01.024.719 I llm_load_print_meta: n_merges         = 0
0.01.024.719 I llm_load_print_meta: vocab_only       = 0
0.01.024.720 I llm_load_print_meta: n_ctx_train      = 8192
0.01.024.720 I llm_load_print_meta: n_embd           = 2048
0.01.024.720 I llm_load_print_meta: n_layer          = 18
0.01.024.802 I llm_load_print_meta: n_head           = 8
0.01.024.813 I llm_load_print_meta: n_head_kv        = 1
0.01.024.814 I llm_load_print_meta: n_rot            = 256
0.01.024.814 I llm_load_print_meta: n_swa            = 0
0.01.024.815 I llm_load_print_meta: n_embd_head_k    = 256
0.01.024.816 I llm_load_print_meta: n_embd_head_v    = 256
0.01.024.820 I llm_load_print_meta: n_gqa            = 8
0.01.024.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.024.830 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.024.831 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.024.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.024.834 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.024.844 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.024.845 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.024.850 I llm_load_print_meta: n_ff             = 16384
0.01.024.851 I llm_load_print_meta: n_expert         = 0
0.01.024.851 I llm_load_print_meta: n_expert_used    = 0
0.01.024.852 I llm_load_print_meta: causal attn      = 1
0.01.024.852 I llm_load_print_meta: pooling type     = 0
0.01.024.853 I llm_load_print_meta: rope type        = 2
0.01.024.853 I llm_load_print_meta: rope scaling     = linear
0.01.024.854 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.024.855 I llm_load_print_meta: freq_scale_train = 1
0.01.024.856 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.024.857 I llm_load_print_meta: rope_finetuned   = unknown
0.01.024.857 I llm_load_print_meta: ssm_d_conv       = 0
0.01.024.857 I llm_load_print_meta: ssm_d_inner      = 0
0.01.024.870 I llm_load_print_meta: ssm_d_state      = 0
0.01.024.873 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.024.873 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.024.876 I llm_load_print_meta: model type       = 2B
0.01.024.878 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.024.878 I llm_load_print_meta: model params     = 2.51 B
0.01.024.879 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.024.888 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.024.890 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.024.892 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.024.893 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.024.893 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.024.894 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.024.894 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.024.901 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.024.902 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.024.903 I llm_load_print_meta: max token length = 93
0.01.083.692 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.090.583 I llama_new_context_with_model: n_seq_max     = 1
0.01.090.588 I llama_new_context_with_model: n_ctx         = 4096
0.01.090.589 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.090.589 I llama_new_context_with_model: n_batch       = 2048
0.01.090.589 I llama_new_context_with_model: n_ubatch      = 512
0.01.090.590 I llama_new_context_with_model: flash_attn    = 0
0.01.090.592 I llama_new_context_with_model: freq_base     = 10000.0
0.01.090.593 I llama_new_context_with_model: freq_scale    = 1
0.01.090.593 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.090.675 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.106.712 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.106.753 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.106.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.110.434 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.110.438 I llama_new_context_with_model: graph nodes  = 601
0.01.110.438 I llama_new_context_with_model: graph splits = 1
0.01.110.463 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.110.466 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.690.446 I main: llama threadpool init, n_threads = 4
0.01.690.464 I 
0.01.690.586 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.690.590 I 
0.01.690.819 I sampler seed: 2147708068
0.01.690.833 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.690.843 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.690.845 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.690.846 I 
 seconded data.

**Solution:**

1. **Partition the data**: Partition the data into smaller subsets based on some meaningful attribute, such as date,

0.12.844.721 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.52 tokens per second)
0.12.844.725 I llama_perf_context_print:        load time =    1689.52 ms
0.12.844.727 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.844.729 I llama_perf_context_print:        eval time =   11069.88 ms /    32 runs   (  345.93 ms per token,     2.89 tokens per second)
0.12.844.730 I llama_perf_context_print:       total time =   11154.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.475s
user	46m43.288s
sys	0m6.303s
