+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4272 (6fe62478) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.896 I main: load the model and apply lora adapter, if any
0.00.023.685 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.698 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.794 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.808 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.810 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.818 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.822 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.824 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.825 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.826 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.827 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.839 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.840 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.841 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.844 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.845 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.740 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.075 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.085 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.086 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.092 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.096 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.097 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.099 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.100 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.102 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.111 I llama_model_loader: - type  f32:   37 tensors
0.00.352.114 I llama_model_loader: - type q8_0:  127 tensors
0.00.595.723 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.663.135 I llm_load_vocab: special tokens cache size = 5
0.00.853.559 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.635 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.636 I llm_load_print_meta: arch             = gemma
0.00.853.637 I llm_load_print_meta: vocab type       = SPM
0.00.853.638 I llm_load_print_meta: n_vocab          = 256000
0.00.853.640 I llm_load_print_meta: n_merges         = 0
0.00.853.641 I llm_load_print_meta: vocab_only       = 0
0.00.853.641 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.642 I llm_load_print_meta: n_embd           = 2048
0.00.853.642 I llm_load_print_meta: n_layer          = 18
0.00.853.706 I llm_load_print_meta: n_head           = 8
0.00.853.714 I llm_load_print_meta: n_head_kv        = 1
0.00.853.714 I llm_load_print_meta: n_rot            = 256
0.00.853.714 I llm_load_print_meta: n_swa            = 0
0.00.853.715 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.715 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.720 I llm_load_print_meta: n_gqa            = 8
0.00.853.725 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.730 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.731 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.732 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.733 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.733 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.734 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.740 I llm_load_print_meta: n_ff             = 16384
0.00.853.740 I llm_load_print_meta: n_expert         = 0
0.00.853.741 I llm_load_print_meta: n_expert_used    = 0
0.00.853.741 I llm_load_print_meta: causal attn      = 1
0.00.853.747 I llm_load_print_meta: pooling type     = 0
0.00.853.747 I llm_load_print_meta: rope type        = 2
0.00.853.747 I llm_load_print_meta: rope scaling     = linear
0.00.853.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.749 I llm_load_print_meta: freq_scale_train = 1
0.00.853.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.751 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.752 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.752 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.752 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.753 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.754 I llm_load_print_meta: model type       = 2B
0.00.853.755 I llm_load_print_meta: model ftype      = Q8_0
0.00.853.756 I llm_load_print_meta: model params     = 2.51 B
0.00.853.757 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.853.758 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.759 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.760 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.760 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.761 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.761 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.762 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.769 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.770 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.771 I llm_load_print_meta: max token length = 93
0.00.956.220 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.956.232 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.956.233 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.956.234 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.956.234 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.956.235 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.962.191 I llama_new_context_with_model: n_seq_max     = 1
0.00.962.198 I llama_new_context_with_model: n_ctx         = 4096
0.00.962.198 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.962.198 I llama_new_context_with_model: n_batch       = 2048
0.00.962.199 I llama_new_context_with_model: n_ubatch      = 512
0.00.962.199 I llama_new_context_with_model: flash_attn    = 0
0.00.962.203 I llama_new_context_with_model: freq_base     = 10000.0
0.00.962.203 I llama_new_context_with_model: freq_scale    = 1
0.00.962.204 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.977.683 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.977.725 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.977.847 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.980.508 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.980.512 I llama_new_context_with_model: graph nodes  = 601
0.00.980.513 I llama_new_context_with_model: graph splits = 1
0.00.980.535 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.592.238 I main: llama threadpool init, n_threads = 4
0.01.592.255 I 
0.01.592.377 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.592.382 I 
0.01.592.625 I sampler seed: 592748661
0.01.592.640 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.592.651 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.592.652 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.592.652 I 
 increasities. [end of text]


0.03.286.437 I llama_perf_sampler_print:    sampling time =       6.09 ms /     5 runs   (    1.22 ms per token,   821.29 tokens per second)
0.03.286.440 I llama_perf_context_print:        load time =    1591.24 ms
0.03.286.442 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.286.445 I llama_perf_context_print:        eval time =    1681.27 ms /     4 runs   (  420.32 ms per token,     2.38 tokens per second)
0.03.286.448 I llama_perf_context_print:       total time =    1694.21 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4272 (6fe62478) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.023.742 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.844 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.858 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.860 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.867 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.871 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.873 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.874 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.875 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.876 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.884 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.885 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.887 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.888 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.206 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.037 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.360 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.370 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.372 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.373 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.374 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.376 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.377 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.381 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.382 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.384 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.385 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.387 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.397 I llama_model_loader: - type  f32:   37 tensors
0.00.352.400 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.610 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.672.543 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.599 I llm_load_vocab: special tokens cache size = 5
0.00.875.343 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.875.419 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.875.420 I llm_load_print_meta: arch             = gemma
0.00.875.420 I llm_load_print_meta: vocab type       = SPM
0.00.875.422 I llm_load_print_meta: n_vocab          = 256000
0.00.875.424 I llm_load_print_meta: n_merges         = 0
0.00.875.425 I llm_load_print_meta: vocab_only       = 0
0.00.875.425 I llm_load_print_meta: n_ctx_train      = 8192
0.00.875.425 I llm_load_print_meta: n_embd           = 2048
0.00.875.426 I llm_load_print_meta: n_layer          = 18
0.00.875.491 I llm_load_print_meta: n_head           = 8
0.00.875.498 I llm_load_print_meta: n_head_kv        = 1
0.00.875.498 I llm_load_print_meta: n_rot            = 256
0.00.875.499 I llm_load_print_meta: n_swa            = 0
0.00.875.499 I llm_load_print_meta: n_embd_head_k    = 256
0.00.875.499 I llm_load_print_meta: n_embd_head_v    = 256
0.00.875.504 I llm_load_print_meta: n_gqa            = 8
0.00.875.509 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.875.514 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.515 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.516 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.517 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.517 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.517 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.522 I llm_load_print_meta: n_ff             = 16384
0.00.875.523 I llm_load_print_meta: n_expert         = 0
0.00.875.523 I llm_load_print_meta: n_expert_used    = 0
0.00.875.523 I llm_load_print_meta: causal attn      = 1
0.00.875.524 I llm_load_print_meta: pooling type     = 0
0.00.875.524 I llm_load_print_meta: rope type        = 2
0.00.875.524 I llm_load_print_meta: rope scaling     = linear
0.00.875.526 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.527 I llm_load_print_meta: freq_scale_train = 1
0.00.875.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.528 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.528 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.529 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.529 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.530 I llm_load_print_meta: model type       = 2B
0.00.875.531 I llm_load_print_meta: model ftype      = Q8_0
0.00.875.531 I llm_load_print_meta: model params     = 2.51 B
0.00.875.532 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.875.533 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.533 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.534 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.534 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.534 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.535 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.535 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.557 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.559 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.559 I llm_load_print_meta: max token length = 93
0.00.972.160 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.978.210 I llama_new_context_with_model: n_seq_max     = 1
0.00.978.218 I llama_new_context_with_model: n_ctx         = 4096
0.00.978.218 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.978.219 I llama_new_context_with_model: n_batch       = 2048
0.00.978.219 I llama_new_context_with_model: n_ubatch      = 512
0.00.978.220 I llama_new_context_with_model: flash_attn    = 0
0.00.978.223 I llama_new_context_with_model: freq_base     = 10000.0
0.00.978.224 I llama_new_context_with_model: freq_scale    = 1
0.00.978.225 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.993.827 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.993.873 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.993.998 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.996.690 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.996.694 I llama_new_context_with_model: graph nodes  = 601
0.00.996.694 I llama_new_context_with_model: graph splits = 1
0.00.996.717 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.610.591 I main: llama threadpool init, n_threads = 4
0.01.610.608 I 
0.01.610.731 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.610.735 I 
0.01.610.976 I sampler seed: 2223355269
0.01.610.990 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.611.003 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.611.004 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.611.006 I 
 increasities and other forms of deception to influence the outcome of elections.

**Measures to Counter Deception:**

- Strengthen election integrity laws and regulations
- Enhance

0.15.224.001 I llama_perf_sampler_print:    sampling time =      48.05 ms /    33 runs   (    1.46 ms per token,   686.83 tokens per second)
0.15.224.004 I llama_perf_context_print:        load time =    1609.59 ms
0.15.224.016 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.224.018 I llama_perf_context_print:        eval time =   13523.78 ms /    32 runs   (  422.62 ms per token,     2.37 tokens per second)
0.15.224.020 I llama_perf_context_print:       total time =   13613.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4272 (6fe62478) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.950 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.960 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.059 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.073 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.085 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.094 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.095 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.096 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.098 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.099 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.100 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.109 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.110 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.112 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.321 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.136 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.480 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.489 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.491 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.492 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.494 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.495 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.497 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.501 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.502 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.504 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.505 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.507 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.516 I llama_model_loader: - type  f32:   37 tensors
0.00.354.519 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.231 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.666.931 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.667.875 I llm_load_vocab: special tokens cache size = 5
0.00.872.220 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.296 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.300 I llm_load_print_meta: arch             = gemma
0.00.872.300 I llm_load_print_meta: vocab type       = SPM
0.00.872.302 I llm_load_print_meta: n_vocab          = 256000
0.00.872.305 I llm_load_print_meta: n_merges         = 0
0.00.872.305 I llm_load_print_meta: vocab_only       = 0
0.00.872.306 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.306 I llm_load_print_meta: n_embd           = 2048
0.00.872.306 I llm_load_print_meta: n_layer          = 18
0.00.872.371 I llm_load_print_meta: n_head           = 8
0.00.872.380 I llm_load_print_meta: n_head_kv        = 1
0.00.872.381 I llm_load_print_meta: n_rot            = 256
0.00.872.382 I llm_load_print_meta: n_swa            = 0
0.00.872.382 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.387 I llm_load_print_meta: n_gqa            = 8
0.00.872.392 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.397 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.399 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.401 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.401 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.402 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.403 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.408 I llm_load_print_meta: n_ff             = 16384
0.00.872.409 I llm_load_print_meta: n_expert         = 0
0.00.872.411 I llm_load_print_meta: n_expert_used    = 0
0.00.872.411 I llm_load_print_meta: causal attn      = 1
0.00.872.412 I llm_load_print_meta: pooling type     = 0
0.00.872.412 I llm_load_print_meta: rope type        = 2
0.00.872.412 I llm_load_print_meta: rope scaling     = linear
0.00.872.414 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.414 I llm_load_print_meta: freq_scale_train = 1
0.00.872.415 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.415 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.415 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.416 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.417 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.872.418 I llm_load_print_meta: model type       = 2B
0.00.872.419 I llm_load_print_meta: model ftype      = Q8_0
0.00.872.420 I llm_load_print_meta: model params     = 2.51 B
0.00.872.421 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.872.421 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.422 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.432 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.455 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.456 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.462 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.463 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.464 I llm_load_print_meta: max token length = 93
0.00.949.353 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.949.362 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.949.363 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.949.364 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.949.364 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.949.365 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.955.220 I llama_new_context_with_model: n_seq_max     = 1
0.00.955.228 I llama_new_context_with_model: n_ctx         = 4096
0.00.955.228 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.955.229 I llama_new_context_with_model: n_batch       = 2048
0.00.955.229 I llama_new_context_with_model: n_ubatch      = 512
0.00.955.230 I llama_new_context_with_model: flash_attn    = 0
0.00.955.233 I llama_new_context_with_model: freq_base     = 10000.0
0.00.955.234 I llama_new_context_with_model: freq_scale    = 1
0.00.955.234 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.969.701 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.743 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.863 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.539 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.543 I llama_new_context_with_model: graph nodes  = 601
0.00.972.543 I llama_new_context_with_model: graph splits = 1
0.00.972.565 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.616.157 I main: llama threadpool init, n_threads = 4
0.01.616.173 I 
0.01.616.297 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.616.301 I 
0.01.616.546 I sampler seed: 2076195394
0.01.616.574 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.616.586 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.616.587 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.616.588 I 
 increasements by showing how the current state of affairs is detrimental to the environment.

**Answer:**

**The current state of affairs is detrimental to the environment

0.15.277.199 I llama_perf_sampler_print:    sampling time =      48.76 ms /    33 runs   (    1.48 ms per token,   676.80 tokens per second)
0.15.277.203 I llama_perf_context_print:        load time =    1615.18 ms
0.15.277.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.277.215 I llama_perf_context_print:        eval time =   13569.40 ms /    32 runs   (  424.04 ms per token,     2.36 tokens per second)
0.15.277.217 I llama_perf_context_print:       total time =   13661.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 4272 (6fe62478) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.023.341 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.350 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.453 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.455 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.461 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.465 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.466 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.468 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.469 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.470 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.478 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.480 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.481 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.483 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.954 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.519 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.768 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.777 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.779 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.782 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.783 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.784 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.789 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.790 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.791 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.793 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.795 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.803 I llama_model_loader: - type  f32:   37 tensors
0.00.351.806 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.459 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.299 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.294 I llm_load_vocab: special tokens cache size = 5
0.00.848.496 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.569 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.574 I llm_load_print_meta: arch             = gemma
0.00.848.574 I llm_load_print_meta: vocab type       = SPM
0.00.848.575 I llm_load_print_meta: n_vocab          = 256000
0.00.848.578 I llm_load_print_meta: n_merges         = 0
0.00.848.578 I llm_load_print_meta: vocab_only       = 0
0.00.848.578 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.579 I llm_load_print_meta: n_embd           = 2048
0.00.848.579 I llm_load_print_meta: n_layer          = 18
0.00.848.643 I llm_load_print_meta: n_head           = 8
0.00.848.653 I llm_load_print_meta: n_head_kv        = 1
0.00.848.654 I llm_load_print_meta: n_rot            = 256
0.00.848.654 I llm_load_print_meta: n_swa            = 0
0.00.848.654 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.654 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.659 I llm_load_print_meta: n_gqa            = 8
0.00.848.664 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.669 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.670 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.672 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.673 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.673 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.673 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.678 I llm_load_print_meta: n_ff             = 16384
0.00.848.679 I llm_load_print_meta: n_expert         = 0
0.00.848.679 I llm_load_print_meta: n_expert_used    = 0
0.00.848.680 I llm_load_print_meta: causal attn      = 1
0.00.848.680 I llm_load_print_meta: pooling type     = 0
0.00.848.680 I llm_load_print_meta: rope type        = 2
0.00.848.681 I llm_load_print_meta: rope scaling     = linear
0.00.848.682 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.683 I llm_load_print_meta: freq_scale_train = 1
0.00.848.683 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.684 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.684 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.684 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.684 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.685 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.685 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.686 I llm_load_print_meta: model type       = 2B
0.00.848.686 I llm_load_print_meta: model ftype      = Q8_0
0.00.848.687 I llm_load_print_meta: model params     = 2.51 B
0.00.848.688 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.848.688 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.689 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.689 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.690 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.690 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.691 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.691 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.697 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.699 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.699 I llm_load_print_meta: max token length = 93
0.00.921.495 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.921.508 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.927.467 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.475 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.476 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.476 I llama_new_context_with_model: n_batch       = 2048
0.00.927.477 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.477 I llama_new_context_with_model: flash_attn    = 0
0.00.927.480 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.481 I llama_new_context_with_model: freq_scale    = 1
0.00.927.481 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.641 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.695 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.817 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.448 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.452 I llama_new_context_with_model: graph nodes  = 601
0.00.945.452 I llama_new_context_with_model: graph splits = 1
0.00.945.475 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.279 I main: llama threadpool init, n_threads = 4
0.01.556.297 I 
0.01.556.418 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.556.421 I 
0.01.556.662 I sampler seed: 67461321
0.01.556.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.556.688 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.556.689 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.556.689 I 
 increasively, and finally reached the climax of his speech. The climax of his speech was a powerful statement that left his audience with a profound sense of awe and

0.15.216.706 I llama_perf_sampler_print:    sampling time =      48.37 ms /    33 runs   (    1.47 ms per token,   682.18 tokens per second)
0.15.216.711 I llama_perf_context_print:        load time =    1555.29 ms
0.15.216.713 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.216.714 I llama_perf_context_print:        eval time =   13571.30 ms /    32 runs   (  424.10 ms per token,     2.36 tokens per second)
0.15.216.715 I llama_perf_context_print:       total time =   13660.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.837s
user	3m4.459s
sys	0m9.437s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4272 (6fe62478)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185048.69 ms
main:    total time = 185048.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.714 I build: 4272 (6fe62478) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.925 I main: llama backend init
0.00.000.934 I main: load the model and apply lora adapter, if any
0.00.025.471 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.484 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.589 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.612 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.614 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.615 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.618 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.619 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.627 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.628 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.629 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.631 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.632 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.757 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.829 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.279 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.292 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.293 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.295 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.296 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.297 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.299 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.304 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.305 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.307 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.308 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.310 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.319 I llama_model_loader: - type  f32:   37 tensors
0.00.354.321 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.322 I llama_model_loader: - type q6_K:   19 tensors
0.00.608.321 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.679.873 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.680.943 I llm_load_vocab: special tokens cache size = 5
0.00.889.103 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.889.179 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.889.180 I llm_load_print_meta: arch             = gemma
0.00.889.181 I llm_load_print_meta: vocab type       = SPM
0.00.889.182 I llm_load_print_meta: n_vocab          = 256000
0.00.889.185 I llm_load_print_meta: n_merges         = 0
0.00.889.185 I llm_load_print_meta: vocab_only       = 0
0.00.889.186 I llm_load_print_meta: n_ctx_train      = 8192
0.00.889.186 I llm_load_print_meta: n_embd           = 2048
0.00.889.186 I llm_load_print_meta: n_layer          = 18
0.00.889.267 I llm_load_print_meta: n_head           = 8
0.00.889.274 I llm_load_print_meta: n_head_kv        = 1
0.00.889.275 I llm_load_print_meta: n_rot            = 256
0.00.889.275 I llm_load_print_meta: n_swa            = 0
0.00.889.275 I llm_load_print_meta: n_embd_head_k    = 256
0.00.889.276 I llm_load_print_meta: n_embd_head_v    = 256
0.00.889.296 I llm_load_print_meta: n_gqa            = 8
0.00.889.303 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.889.309 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.889.310 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.889.312 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.889.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.889.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.889.331 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.889.336 I llm_load_print_meta: n_ff             = 16384
0.00.889.337 I llm_load_print_meta: n_expert         = 0
0.00.889.337 I llm_load_print_meta: n_expert_used    = 0
0.00.889.338 I llm_load_print_meta: causal attn      = 1
0.00.889.338 I llm_load_print_meta: pooling type     = 0
0.00.889.341 I llm_load_print_meta: rope type        = 2
0.00.889.347 I llm_load_print_meta: rope scaling     = linear
0.00.889.349 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.889.349 I llm_load_print_meta: freq_scale_train = 1
0.00.889.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.889.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.889.361 I llm_load_print_meta: ssm_d_conv       = 0
0.00.889.362 I llm_load_print_meta: ssm_d_inner      = 0
0.00.889.362 I llm_load_print_meta: ssm_d_state      = 0
0.00.889.362 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.889.363 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.889.363 I llm_load_print_meta: model type       = 2B
0.00.889.364 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.889.366 I llm_load_print_meta: model params     = 2.51 B
0.00.889.367 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.889.367 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.889.368 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.889.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.889.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.889.377 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.889.378 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.889.379 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.889.385 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.889.386 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.889.386 I llm_load_print_meta: max token length = 93
0.00.951.210 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.951.221 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.951.222 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.951.223 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.951.223 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.951.224 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.957.296 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.303 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.304 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.304 I llama_new_context_with_model: n_batch       = 2048
0.00.957.304 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.305 I llama_new_context_with_model: flash_attn    = 0
0.00.957.309 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.309 I llama_new_context_with_model: freq_scale    = 1
0.00.957.310 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.973.453 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.496 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.619 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.976.250 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.976.254 I llama_new_context_with_model: graph nodes  = 601
0.00.976.254 I llama_new_context_with_model: graph splits = 1
0.00.976.280 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.566.102 I main: llama threadpool init, n_threads = 4
0.01.566.120 I 
0.01.566.243 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.566.247 I 
0.01.566.501 I sampler seed: 3491818913
0.01.566.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.566.528 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.566.529 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.566.530 I 
 increamically.

I'm so hungry right now. I could eat a whole pizza and it wouldn't even be a problem.

I'm

0.12.723.315 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.14 tokens per second)
0.12.723.318 I llama_perf_context_print:        load time =    1565.04 ms
0.12.723.319 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.723.320 I llama_perf_context_print:        eval time =   11069.27 ms /    32 runs   (  345.91 ms per token,     2.89 tokens per second)
0.12.723.337 I llama_perf_context_print:       total time =   11157.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4272 (6fe62478)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185076.54 ms
main:    total time = 185076.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.695 I build: 4272 (6fe62478) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.023.632 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.737 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.753 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.757 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.764 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.766 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.768 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.770 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.772 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.779 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.783 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.784 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.786 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.787 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.301 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.124 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.516 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.527 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.528 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.530 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.531 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.533 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.534 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.538 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.539 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.550 I llama_model_loader: - type  f32:   37 tensors
0.00.351.552 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.553 I llama_model_loader: - type q6_K:   19 tensors
0.00.597.336 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.501 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.406 I llm_load_vocab: special tokens cache size = 5
0.00.861.587 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.661 I llm_load_print_meta: arch             = gemma
0.00.861.662 I llm_load_print_meta: vocab type       = SPM
0.00.861.663 I llm_load_print_meta: n_vocab          = 256000
0.00.861.666 I llm_load_print_meta: n_merges         = 0
0.00.861.666 I llm_load_print_meta: vocab_only       = 0
0.00.861.667 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.667 I llm_load_print_meta: n_embd           = 2048
0.00.861.668 I llm_load_print_meta: n_layer          = 18
0.00.861.734 I llm_load_print_meta: n_head           = 8
0.00.861.741 I llm_load_print_meta: n_head_kv        = 1
0.00.861.742 I llm_load_print_meta: n_rot            = 256
0.00.861.742 I llm_load_print_meta: n_swa            = 0
0.00.861.742 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.743 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.747 I llm_load_print_meta: n_gqa            = 8
0.00.861.753 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.759 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.760 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.762 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.763 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.763 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.763 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.768 I llm_load_print_meta: n_ff             = 16384
0.00.861.768 I llm_load_print_meta: n_expert         = 0
0.00.861.769 I llm_load_print_meta: n_expert_used    = 0
0.00.861.769 I llm_load_print_meta: causal attn      = 1
0.00.861.770 I llm_load_print_meta: pooling type     = 0
0.00.861.770 I llm_load_print_meta: rope type        = 2
0.00.861.771 I llm_load_print_meta: rope scaling     = linear
0.00.861.772 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.773 I llm_load_print_meta: freq_scale_train = 1
0.00.861.773 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.778 I llm_load_print_meta: model type       = 2B
0.00.861.779 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.861.789 I llm_load_print_meta: model params     = 2.51 B
0.00.861.790 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.861.791 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.792 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.792 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.801 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.802 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.803 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.809 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.814 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.815 I llm_load_print_meta: max token length = 93
0.00.920.039 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.925.872 I llama_new_context_with_model: n_seq_max     = 1
0.00.925.881 I llama_new_context_with_model: n_ctx         = 4096
0.00.925.881 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.925.882 I llama_new_context_with_model: n_batch       = 2048
0.00.925.882 I llama_new_context_with_model: n_ubatch      = 512
0.00.925.883 I llama_new_context_with_model: flash_attn    = 0
0.00.925.885 I llama_new_context_with_model: freq_base     = 10000.0
0.00.925.886 I llama_new_context_with_model: freq_scale    = 1
0.00.925.887 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.941.499 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.941.540 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.941.663 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.944.179 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.944.183 I llama_new_context_with_model: graph nodes  = 601
0.00.944.183 I llama_new_context_with_model: graph splits = 1
0.00.944.205 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.529.638 I main: llama threadpool init, n_threads = 4
0.01.529.655 I 
0.01.529.772 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.529.773 I 
0.01.530.013 I sampler seed: 4002799293
0.01.530.027 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.530.039 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.530.039 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.530.040 I 
 seconded by the words "too" and "too much".

The overuse of **too** and **too much** has become a common complaint in English

0.12.658.119 I llama_perf_sampler_print:    sampling time =      47.94 ms /    33 runs   (    1.45 ms per token,   688.35 tokens per second)
0.12.658.134 I llama_perf_context_print:        load time =    1528.65 ms
0.12.658.136 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.658.138 I llama_perf_context_print:        eval time =   11039.85 ms /    32 runs   (  345.00 ms per token,     2.90 tokens per second)
0.12.658.139 I llama_perf_context_print:       total time =   11128.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m38.442s
user	46m40.983s
sys	0m6.412s
