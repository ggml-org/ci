+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.000.913 I main: load the model and apply lora adapter, if any
0.00.023.343 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.357 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.450 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.463 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.465 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.472 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.476 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.477 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.479 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.480 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.482 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.490 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.491 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.493 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.607 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.281 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.282 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.284 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.288 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.293 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.295 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.296 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.357.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.307 I llama_model_loader: - type  f32:   37 tensors
0.00.357.309 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.037 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.120 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.098 I llm_load_vocab: special tokens cache size = 5
0.00.858.682 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.756 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.757 I llm_load_print_meta: arch             = gemma
0.00.858.758 I llm_load_print_meta: vocab type       = SPM
0.00.858.758 I llm_load_print_meta: n_vocab          = 256000
0.00.858.761 I llm_load_print_meta: n_merges         = 0
0.00.858.761 I llm_load_print_meta: vocab_only       = 0
0.00.858.762 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.762 I llm_load_print_meta: n_embd           = 2048
0.00.858.762 I llm_load_print_meta: n_layer          = 18
0.00.858.824 I llm_load_print_meta: n_head           = 8
0.00.858.832 I llm_load_print_meta: n_head_kv        = 1
0.00.858.832 I llm_load_print_meta: n_rot            = 256
0.00.858.833 I llm_load_print_meta: n_swa            = 0
0.00.858.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.838 I llm_load_print_meta: n_gqa            = 8
0.00.858.843 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.849 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.851 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.852 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.853 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.853 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.853 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.858 I llm_load_print_meta: n_ff             = 16384
0.00.858.859 I llm_load_print_meta: n_expert         = 0
0.00.858.859 I llm_load_print_meta: n_expert_used    = 0
0.00.858.859 I llm_load_print_meta: causal attn      = 1
0.00.858.859 I llm_load_print_meta: pooling type     = 0
0.00.858.860 I llm_load_print_meta: rope type        = 2
0.00.858.860 I llm_load_print_meta: rope scaling     = linear
0.00.858.862 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.862 I llm_load_print_meta: freq_scale_train = 1
0.00.858.863 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.863 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.863 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.864 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.864 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.864 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.865 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.865 I llm_load_print_meta: model type       = 2B
0.00.858.866 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.867 I llm_load_print_meta: model params     = 2.51 B
0.00.858.868 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.868 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.869 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.869 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.881 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.882 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.887 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.889 I llm_load_print_meta: max token length = 93
0.00.961.727 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.961.736 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.961.737 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.961.738 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.961.739 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.961.739 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.967.754 I llama_new_context_with_model: n_seq_max     = 1
0.00.967.764 I llama_new_context_with_model: n_ctx         = 4096
0.00.967.764 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.967.764 I llama_new_context_with_model: n_batch       = 2048
0.00.967.765 I llama_new_context_with_model: n_ubatch      = 512
0.00.967.765 I llama_new_context_with_model: flash_attn    = 0
0.00.967.770 I llama_new_context_with_model: freq_base     = 10000.0
0.00.967.771 I llama_new_context_with_model: freq_scale    = 1
0.00.967.771 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.879 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.983.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.983.518 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.983.640 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.986.316 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.986.320 I llama_new_context_with_model: graph nodes  = 601
0.00.986.321 I llama_new_context_with_model: graph splits = 1
0.00.986.344 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.986.347 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.600.801 I main: llama threadpool init, n_threads = 4
0.01.600.817 I 
0.01.600.940 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.600.944 I 
0.01.601.180 I sampler seed: 1654560911
0.01.601.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.601.203 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.601.207 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.601.207 I 
 increably. [end of text]


0.03.304.466 I llama_perf_sampler_print:    sampling time =       6.19 ms /     5 runs   (    1.24 ms per token,   807.88 tokens per second)
0.03.304.469 I llama_perf_context_print:        load time =    1599.78 ms
0.03.304.471 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.304.473 I llama_perf_context_print:        eval time =    1690.60 ms /     4 runs   (  422.65 ms per token,     2.37 tokens per second)
0.03.304.474 I llama_perf_context_print:       total time =    1703.67 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.144 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.239 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.252 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.254 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.267 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.268 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.269 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.275 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.276 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.277 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.286 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.252.857 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.355.073 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.379.655 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.379.663 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.379.664 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.379.665 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.379.667 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.379.668 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.379.670 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.379.674 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.379.675 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.379.677 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.379.678 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.379.680 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.379.689 I llama_model_loader: - type  f32:   37 tensors
0.00.379.691 I llama_model_loader: - type q8_0:  127 tensors
0.00.619.977 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.679.589 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.680.517 I llm_load_vocab: special tokens cache size = 5
0.00.884.622 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.884.693 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.884.693 I llm_load_print_meta: arch             = gemma
0.00.884.694 I llm_load_print_meta: vocab type       = SPM
0.00.884.695 I llm_load_print_meta: n_vocab          = 256000
0.00.884.698 I llm_load_print_meta: n_merges         = 0
0.00.884.698 I llm_load_print_meta: vocab_only       = 0
0.00.884.698 I llm_load_print_meta: n_ctx_train      = 8192
0.00.884.699 I llm_load_print_meta: n_embd           = 2048
0.00.884.699 I llm_load_print_meta: n_layer          = 18
0.00.884.765 I llm_load_print_meta: n_head           = 8
0.00.884.774 I llm_load_print_meta: n_head_kv        = 1
0.00.884.775 I llm_load_print_meta: n_rot            = 256
0.00.884.775 I llm_load_print_meta: n_swa            = 0
0.00.884.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.884.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.884.781 I llm_load_print_meta: n_gqa            = 8
0.00.884.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.884.791 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.884.793 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.884.795 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.884.795 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.884.796 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.884.796 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.884.811 I llm_load_print_meta: n_ff             = 16384
0.00.884.812 I llm_load_print_meta: n_expert         = 0
0.00.884.812 I llm_load_print_meta: n_expert_used    = 0
0.00.884.812 I llm_load_print_meta: causal attn      = 1
0.00.884.813 I llm_load_print_meta: pooling type     = 0
0.00.884.817 I llm_load_print_meta: rope type        = 2
0.00.884.818 I llm_load_print_meta: rope scaling     = linear
0.00.884.820 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.884.822 I llm_load_print_meta: freq_scale_train = 1
0.00.884.822 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.884.822 I llm_load_print_meta: rope_finetuned   = unknown
0.00.884.823 I llm_load_print_meta: ssm_d_conv       = 0
0.00.884.823 I llm_load_print_meta: ssm_d_inner      = 0
0.00.884.823 I llm_load_print_meta: ssm_d_state      = 0
0.00.884.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.884.824 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.884.824 I llm_load_print_meta: model type       = 2B
0.00.884.825 I llm_load_print_meta: model ftype      = Q8_0
0.00.884.826 I llm_load_print_meta: model params     = 2.51 B
0.00.884.827 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.884.828 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.884.828 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.884.829 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.884.830 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.884.830 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.884.831 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.884.831 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.884.838 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.884.839 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.884.839 I llm_load_print_meta: max token length = 93
0.00.982.267 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.989.122 I llama_new_context_with_model: n_seq_max     = 1
0.00.989.130 I llama_new_context_with_model: n_ctx         = 4096
0.00.989.130 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.989.131 I llama_new_context_with_model: n_batch       = 2048
0.00.989.131 I llama_new_context_with_model: n_ubatch      = 512
0.00.989.133 I llama_new_context_with_model: flash_attn    = 0
0.00.989.136 I llama_new_context_with_model: freq_base     = 10000.0
0.00.989.137 I llama_new_context_with_model: freq_scale    = 1
0.00.989.146 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.989.241 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.004.532 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.004.575 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.004.701 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.007.386 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.007.391 I llama_new_context_with_model: graph nodes  = 601
0.01.007.391 I llama_new_context_with_model: graph splits = 1
0.01.007.415 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.007.418 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.617.987 I main: llama threadpool init, n_threads = 4
0.01.618.002 I 
0.01.618.125 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.618.129 I 
0.01.618.366 I sampler seed: 3741646878
0.01.618.379 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.618.390 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.618.391 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.618.391 I 
 increasities is not just a myth, but a real and present danger to the planet.

**The Facts:**

* Climate change is disrupting ecosystems, leading

0.15.250.293 I llama_perf_sampler_print:    sampling time =      47.92 ms /    33 runs   (    1.45 ms per token,   688.62 tokens per second)
0.15.250.297 I llama_perf_context_print:        load time =    1617.06 ms
0.15.250.309 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.250.312 I llama_perf_context_print:        eval time =   13544.21 ms /    32 runs   (  423.26 ms per token,     2.36 tokens per second)
0.15.250.313 I llama_perf_context_print:       total time =   13632.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.698 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.000.901 I main: load the model and apply lora adapter, if any
0.00.023.133 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.143 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.234 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.245 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.247 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.253 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.257 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.258 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.262 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.269 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.271 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.896 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.480 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.489 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.491 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.492 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.494 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.495 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.497 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.501 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.503 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.505 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.506 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.508 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.517 I llama_model_loader: - type  f32:   37 tensors
0.00.354.520 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.074 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.757 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.688 I llm_load_vocab: special tokens cache size = 5
0.00.843.600 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.670 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.671 I llm_load_print_meta: arch             = gemma
0.00.843.672 I llm_load_print_meta: vocab type       = SPM
0.00.843.672 I llm_load_print_meta: n_vocab          = 256000
0.00.843.675 I llm_load_print_meta: n_merges         = 0
0.00.843.675 I llm_load_print_meta: vocab_only       = 0
0.00.843.676 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.676 I llm_load_print_meta: n_embd           = 2048
0.00.843.676 I llm_load_print_meta: n_layer          = 18
0.00.843.739 I llm_load_print_meta: n_head           = 8
0.00.843.748 I llm_load_print_meta: n_head_kv        = 1
0.00.843.752 I llm_load_print_meta: n_rot            = 256
0.00.843.752 I llm_load_print_meta: n_swa            = 0
0.00.843.753 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.753 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.757 I llm_load_print_meta: n_gqa            = 8
0.00.843.762 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.767 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.770 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.771 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.772 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.776 I llm_load_print_meta: n_ff             = 16384
0.00.843.777 I llm_load_print_meta: n_expert         = 0
0.00.843.778 I llm_load_print_meta: n_expert_used    = 0
0.00.843.778 I llm_load_print_meta: causal attn      = 1
0.00.843.778 I llm_load_print_meta: pooling type     = 0
0.00.843.780 I llm_load_print_meta: rope type        = 2
0.00.843.780 I llm_load_print_meta: rope scaling     = linear
0.00.843.782 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.782 I llm_load_print_meta: freq_scale_train = 1
0.00.843.783 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.784 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.784 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.785 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.786 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.786 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.787 I llm_load_print_meta: model type       = 2B
0.00.843.788 I llm_load_print_meta: model ftype      = Q8_0
0.00.843.789 I llm_load_print_meta: model params     = 2.51 B
0.00.843.790 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.843.791 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.792 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.792 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.794 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.794 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.795 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.800 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.802 I llm_load_print_meta: max token length = 93
0.00.925.137 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.925.144 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.925.145 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.925.146 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.925.147 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.925.148 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.931.002 I llama_new_context_with_model: n_seq_max     = 1
0.00.931.008 I llama_new_context_with_model: n_ctx         = 4096
0.00.931.009 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.931.009 I llama_new_context_with_model: n_batch       = 2048
0.00.931.010 I llama_new_context_with_model: n_ubatch      = 512
0.00.931.010 I llama_new_context_with_model: flash_attn    = 0
0.00.931.013 I llama_new_context_with_model: freq_base     = 10000.0
0.00.931.014 I llama_new_context_with_model: freq_scale    = 1
0.00.931.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.931.101 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.946.359 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.946.399 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.946.521 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.949.293 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.949.297 I llama_new_context_with_model: graph nodes  = 601
0.00.949.298 I llama_new_context_with_model: graph splits = 1
0.00.949.322 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.949.325 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.601.750 I main: llama threadpool init, n_threads = 4
0.01.601.766 I 
0.01.601.887 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.601.891 I 
0.01.602.125 I sampler seed: 2647515662
0.01.602.139 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.602.148 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.602.151 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.602.151 I 
 increamically, forgetting that it has been used.

What was said?

The answer is a joke.

The joke is a bit that is said to

0.15.203.968 I llama_perf_sampler_print:    sampling time =      47.95 ms /    33 runs   (    1.45 ms per token,   688.27 tokens per second)
0.15.203.984 I llama_perf_context_print:        load time =    1600.75 ms
0.15.203.985 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.203.987 I llama_perf_context_print:        eval time =   13514.47 ms /    32 runs   (  422.33 ms per token,     2.37 tokens per second)
0.15.203.988 I llama_perf_context_print:       total time =   13602.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.000.848 I main: load the model and apply lora adapter, if any
0.00.023.071 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.080 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.170 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.181 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.195 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.196 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.207 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.208 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.210 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.211 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.213 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.568 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.352.032 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.376.541 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.376.549 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.376.551 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.376.552 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.376.553 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.376.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.376.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.376.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.376.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.376.563 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.376.564 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.376.566 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.376.575 I llama_model_loader: - type  f32:   37 tensors
0.00.376.577 I llama_model_loader: - type q8_0:  127 tensors
0.00.591.016 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.066 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.060 I llm_load_vocab: special tokens cache size = 5
0.00.864.024 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.864.099 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.864.100 I llm_load_print_meta: arch             = gemma
0.00.864.101 I llm_load_print_meta: vocab type       = SPM
0.00.864.102 I llm_load_print_meta: n_vocab          = 256000
0.00.864.104 I llm_load_print_meta: n_merges         = 0
0.00.864.104 I llm_load_print_meta: vocab_only       = 0
0.00.864.105 I llm_load_print_meta: n_ctx_train      = 8192
0.00.864.105 I llm_load_print_meta: n_embd           = 2048
0.00.864.105 I llm_load_print_meta: n_layer          = 18
0.00.864.168 I llm_load_print_meta: n_head           = 8
0.00.864.175 I llm_load_print_meta: n_head_kv        = 1
0.00.864.176 I llm_load_print_meta: n_rot            = 256
0.00.864.176 I llm_load_print_meta: n_swa            = 0
0.00.864.176 I llm_load_print_meta: n_embd_head_k    = 256
0.00.864.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.864.181 I llm_load_print_meta: n_gqa            = 8
0.00.864.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.864.191 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.864.193 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.864.194 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.864.195 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.864.196 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.864.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.864.201 I llm_load_print_meta: n_ff             = 16384
0.00.864.202 I llm_load_print_meta: n_expert         = 0
0.00.864.203 I llm_load_print_meta: n_expert_used    = 0
0.00.864.203 I llm_load_print_meta: causal attn      = 1
0.00.864.203 I llm_load_print_meta: pooling type     = 0
0.00.864.204 I llm_load_print_meta: rope type        = 2
0.00.864.205 I llm_load_print_meta: rope scaling     = linear
0.00.864.207 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.864.207 I llm_load_print_meta: freq_scale_train = 1
0.00.864.208 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.864.208 I llm_load_print_meta: rope_finetuned   = unknown
0.00.864.209 I llm_load_print_meta: ssm_d_conv       = 0
0.00.864.210 I llm_load_print_meta: ssm_d_inner      = 0
0.00.864.210 I llm_load_print_meta: ssm_d_state      = 0
0.00.864.211 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.864.224 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.864.231 I llm_load_print_meta: model type       = 2B
0.00.864.232 I llm_load_print_meta: model ftype      = Q8_0
0.00.864.233 I llm_load_print_meta: model params     = 2.51 B
0.00.864.234 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.864.234 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.864.235 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.864.235 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.864.236 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.864.236 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.864.237 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.864.237 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.864.244 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.864.246 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.864.246 I llm_load_print_meta: max token length = 93
0.00.937.016 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.937.025 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.942.791 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.798 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.798 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.799 I llama_new_context_with_model: n_batch       = 2048
0.00.942.799 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.800 I llama_new_context_with_model: flash_attn    = 0
0.00.942.802 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.802 I llama_new_context_with_model: freq_scale    = 1
0.00.942.803 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.889 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.957.303 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.341 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.453 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.091 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.095 I llama_new_context_with_model: graph nodes  = 601
0.00.960.096 I llama_new_context_with_model: graph splits = 1
0.00.960.121 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.960.123 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.573.487 I main: llama threadpool init, n_threads = 4
0.01.573.503 I 
0.01.573.621 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.573.625 I 
0.01.573.861 I sampler seed: 2918874417
0.01.573.874 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.573.887 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.573.888 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.573.888 I 
 increably. 

I'm not sure what I should do. I'm feeling overwhelmed and stressed.

**Possible responses:**

- Take a

0.15.264.799 I llama_perf_sampler_print:    sampling time =      48.00 ms /    33 runs   (    1.45 ms per token,   687.47 tokens per second)
0.15.264.802 I llama_perf_context_print:        load time =    1572.55 ms
0.15.264.804 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.264.816 I llama_perf_context_print:        eval time =   13603.12 ms /    32 runs   (  425.10 ms per token,     2.35 tokens per second)
0.15.264.819 I llama_perf_context_print:       total time =   13691.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.558s
user	3m4.404s
sys	0m9.354s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4380 (6f0c9e03)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185747.73 ms
main:    total time = 185747.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.023.083 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.094 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.182 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.193 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.195 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.202 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.203 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.208 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.214 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.218 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.221 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.176 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.538 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.085 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.095 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.096 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.107 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.108 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.109 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.112 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.121 I llama_model_loader: - type  f32:   37 tensors
0.00.353.124 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.126 I llama_model_loader: - type q6_K:   19 tensors
0.00.566.967 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.420 I llm_load_vocab: special tokens cache size = 5
0.00.820.108 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.185 I llm_load_print_meta: arch             = gemma
0.00.820.186 I llm_load_print_meta: vocab type       = SPM
0.00.820.187 I llm_load_print_meta: n_vocab          = 256000
0.00.820.189 I llm_load_print_meta: n_merges         = 0
0.00.820.190 I llm_load_print_meta: vocab_only       = 0
0.00.820.190 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.190 I llm_load_print_meta: n_embd           = 2048
0.00.820.191 I llm_load_print_meta: n_layer          = 18
0.00.820.256 I llm_load_print_meta: n_head           = 8
0.00.820.266 I llm_load_print_meta: n_head_kv        = 1
0.00.820.268 I llm_load_print_meta: n_rot            = 256
0.00.820.268 I llm_load_print_meta: n_swa            = 0
0.00.820.278 I llm_load_print_meta: n_embd_head_k    = 256
0.00.820.279 I llm_load_print_meta: n_embd_head_v    = 256
0.00.820.284 I llm_load_print_meta: n_gqa            = 8
0.00.820.292 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.820.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.820.298 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.820.300 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.820.300 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.820.301 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.820.303 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.820.308 I llm_load_print_meta: n_ff             = 16384
0.00.820.320 I llm_load_print_meta: n_expert         = 0
0.00.820.321 I llm_load_print_meta: n_expert_used    = 0
0.00.820.324 I llm_load_print_meta: causal attn      = 1
0.00.820.326 I llm_load_print_meta: pooling type     = 0
0.00.820.326 I llm_load_print_meta: rope type        = 2
0.00.820.327 I llm_load_print_meta: rope scaling     = linear
0.00.820.329 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.820.329 I llm_load_print_meta: freq_scale_train = 1
0.00.820.331 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.820.331 I llm_load_print_meta: rope_finetuned   = unknown
0.00.820.332 I llm_load_print_meta: ssm_d_conv       = 0
0.00.820.332 I llm_load_print_meta: ssm_d_inner      = 0
0.00.820.333 I llm_load_print_meta: ssm_d_state      = 0
0.00.820.333 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.820.334 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.820.334 I llm_load_print_meta: model type       = 2B
0.00.820.336 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.820.336 I llm_load_print_meta: model params     = 2.51 B
0.00.820.337 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.820.337 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.820.338 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.820.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.820.339 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.820.342 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.820.342 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.820.343 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.820.348 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.820.350 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.820.350 I llm_load_print_meta: max token length = 93
0.00.884.475 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.884.485 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.884.486 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.884.486 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.884.487 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.884.488 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.890.215 I llama_new_context_with_model: n_seq_max     = 1
0.00.890.222 I llama_new_context_with_model: n_ctx         = 4096
0.00.890.222 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.890.222 I llama_new_context_with_model: n_batch       = 2048
0.00.890.223 I llama_new_context_with_model: n_ubatch      = 512
0.00.890.223 I llama_new_context_with_model: flash_attn    = 0
0.00.890.225 I llama_new_context_with_model: freq_base     = 10000.0
0.00.890.226 I llama_new_context_with_model: freq_scale    = 1
0.00.890.226 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.890.310 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.904.530 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.904.568 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.904.680 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.907.275 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.907.279 I llama_new_context_with_model: graph nodes  = 601
0.00.907.280 I llama_new_context_with_model: graph splits = 1
0.00.907.302 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.907.306 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.489.384 I main: llama threadpool init, n_threads = 4
0.01.489.401 I 
0.01.489.577 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.489.583 I 
0.01.489.830 I sampler seed: 1694151949
0.01.489.845 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.489.858 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.489.862 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.489.863 I 
 seconally to the following question:

Evaluate the following integral:
$$\int_0^1 \frac{1}{x^2+4x+

0.12.599.640 I llama_perf_sampler_print:    sampling time =      47.24 ms /    33 runs   (    1.43 ms per token,   698.49 tokens per second)
0.12.599.646 I llama_perf_context_print:        load time =    1488.45 ms
0.12.599.648 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.599.656 I llama_perf_context_print:        eval time =   11023.25 ms /    32 runs   (  344.48 ms per token,     2.90 tokens per second)
0.12.599.658 I llama_perf_context_print:       total time =   11110.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4380 (6f0c9e03)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186218.34 ms
main:    total time = 186218.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.067 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.173 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.197 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.199 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.205 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.209 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.211 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.212 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.222 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.049 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.633 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.641 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.642 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.644 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.645 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.647 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.648 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.652 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.653 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.661 I llama_model_loader: - type  f32:   37 tensors
0.00.353.664 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.664 I llama_model_loader: - type q6_K:   19 tensors
0.00.573.057 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.163 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.100 I llm_load_vocab: special tokens cache size = 5
0.00.845.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.403 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.404 I llm_load_print_meta: arch             = gemma
0.00.845.405 I llm_load_print_meta: vocab type       = SPM
0.00.845.406 I llm_load_print_meta: n_vocab          = 256000
0.00.845.408 I llm_load_print_meta: n_merges         = 0
0.00.845.409 I llm_load_print_meta: vocab_only       = 0
0.00.845.409 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.410 I llm_load_print_meta: n_embd           = 2048
0.00.845.410 I llm_load_print_meta: n_layer          = 18
0.00.845.475 I llm_load_print_meta: n_head           = 8
0.00.845.482 I llm_load_print_meta: n_head_kv        = 1
0.00.845.483 I llm_load_print_meta: n_rot            = 256
0.00.845.483 I llm_load_print_meta: n_swa            = 0
0.00.845.484 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.484 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.489 I llm_load_print_meta: n_gqa            = 8
0.00.845.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.500 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.501 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.503 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.505 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.510 I llm_load_print_meta: n_ff             = 16384
0.00.845.510 I llm_load_print_meta: n_expert         = 0
0.00.845.511 I llm_load_print_meta: n_expert_used    = 0
0.00.845.511 I llm_load_print_meta: causal attn      = 1
0.00.845.511 I llm_load_print_meta: pooling type     = 0
0.00.845.512 I llm_load_print_meta: rope type        = 2
0.00.845.513 I llm_load_print_meta: rope scaling     = linear
0.00.845.514 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.515 I llm_load_print_meta: freq_scale_train = 1
0.00.845.515 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.516 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.517 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.517 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.518 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.519 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.520 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.520 I llm_load_print_meta: model type       = 2B
0.00.845.521 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.845.522 I llm_load_print_meta: model params     = 2.51 B
0.00.845.523 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.845.523 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.524 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.524 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.524 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.525 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.525 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.526 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.533 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.537 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.538 I llm_load_print_meta: max token length = 93
0.00.905.927 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.911.837 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.844 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.844 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.845 I llama_new_context_with_model: n_batch       = 2048
0.00.911.845 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.846 I llama_new_context_with_model: flash_attn    = 0
0.00.911.849 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.849 I llama_new_context_with_model: freq_scale    = 1
0.00.911.850 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.934 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.926.817 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.859 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.971 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.562 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.567 I llama_new_context_with_model: graph nodes  = 601
0.00.929.567 I llama_new_context_with_model: graph splits = 1
0.00.929.592 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.929.595 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.512.269 I main: llama threadpool init, n_threads = 4
0.01.512.285 I 
0.01.512.404 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.512.408 I 
0.01.512.647 I sampler seed: 562772821
0.01.512.660 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.512.672 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.512.673 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.512.674 I 
 increasities with a young woman, revealing their intimate details to the woman.

This is a serious crime that has serious consequences for the victim. It is important

0.12.662.741 I llama_perf_sampler_print:    sampling time =      47.78 ms /    33 runs   (    1.45 ms per token,   690.71 tokens per second)
0.12.662.745 I llama_perf_context_print:        load time =    1511.34 ms
0.12.662.747 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.662.759 I llama_perf_context_print:        eval time =   11062.38 ms /    32 runs   (  345.70 ms per token,     2.89 tokens per second)
0.12.662.761 I llama_perf_context_print:       total time =   11150.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.123s
user	46m45.783s
sys	0m6.221s
