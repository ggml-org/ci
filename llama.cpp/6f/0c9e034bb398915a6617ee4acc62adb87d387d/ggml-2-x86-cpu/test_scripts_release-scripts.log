+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.217 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.227 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.238 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.246 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.248 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.253 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.257 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.258 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.269 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.273 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.274 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.274 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.860 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.866 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.866 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.867 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.868 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.868 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.869 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.871 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.871 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.873 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.873 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.875 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.877 I llama_model_loader: - type  f32:   37 tensors
0.00.130.878 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.223 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.043 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.599 I llm_load_vocab: special tokens cache size = 5
0.00.290.416 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.433 I llm_load_print_meta: arch             = gemma
0.00.290.434 I llm_load_print_meta: vocab type       = SPM
0.00.290.435 I llm_load_print_meta: n_vocab          = 256000
0.00.290.435 I llm_load_print_meta: n_merges         = 0
0.00.290.435 I llm_load_print_meta: vocab_only       = 0
0.00.290.436 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.436 I llm_load_print_meta: n_embd           = 2048
0.00.290.436 I llm_load_print_meta: n_layer          = 18
0.00.290.447 I llm_load_print_meta: n_head           = 8
0.00.290.448 I llm_load_print_meta: n_head_kv        = 1
0.00.290.449 I llm_load_print_meta: n_rot            = 256
0.00.290.449 I llm_load_print_meta: n_swa            = 0
0.00.290.449 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.449 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.450 I llm_load_print_meta: n_gqa            = 8
0.00.290.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.453 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.454 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.455 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.455 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.457 I llm_load_print_meta: n_ff             = 16384
0.00.290.457 I llm_load_print_meta: n_expert         = 0
0.00.290.457 I llm_load_print_meta: n_expert_used    = 0
0.00.290.457 I llm_load_print_meta: causal attn      = 1
0.00.290.458 I llm_load_print_meta: pooling type     = 0
0.00.290.458 I llm_load_print_meta: rope type        = 2
0.00.290.458 I llm_load_print_meta: rope scaling     = linear
0.00.290.459 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.460 I llm_load_print_meta: freq_scale_train = 1
0.00.290.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.462 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.462 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.463 I llm_load_print_meta: model type       = 2B
0.00.290.463 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.464 I llm_load_print_meta: model params     = 2.51 B
0.00.290.465 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.290.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.466 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.466 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.467 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.467 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.468 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.468 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.468 I llm_load_print_meta: max token length = 93
0.00.392.341 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.392.349 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.392.350 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.392.350 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.392.351 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.392.352 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.397.753 I llama_new_context_with_model: n_seq_max     = 1
0.00.397.760 I llama_new_context_with_model: n_ctx         = 4096
0.00.397.760 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.397.761 I llama_new_context_with_model: n_batch       = 2048
0.00.397.761 I llama_new_context_with_model: n_ubatch      = 512
0.00.397.762 I llama_new_context_with_model: flash_attn    = 0
0.00.397.764 I llama_new_context_with_model: freq_base     = 10000.0
0.00.397.766 I llama_new_context_with_model: freq_scale    = 1
0.00.397.766 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.786 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.413.215 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.413.229 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.413.337 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.414.657 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.414.665 I llama_new_context_with_model: graph nodes  = 601
0.00.414.665 I llama_new_context_with_model: graph splits = 1
0.00.414.667 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.414.668 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.751 I main: llama threadpool init, n_threads = 4
0.00.500.765 I 
0.00.500.855 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.500.859 I 
0.00.500.903 I sampler seed: 1869109266
0.00.500.914 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.923 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.926 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.927 I 
 increasities and anxieties about the future of the species. This existential crisis arises from a profound sense of interconnectedness and interdependence among all living things on Earth.



0.02.748.488 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6565.86 tokens per second)
0.02.748.491 I llama_perf_context_print:        load time =     499.95 ms
0.02.748.492 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.748.494 I llama_perf_context_print:        eval time =    2228.99 ms /    32 runs   (   69.66 ms per token,    14.36 tokens per second)
0.02.748.494 I llama_perf_context_print:       total time =    2247.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.513 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.708 I main: llama backend init
0.00.000.714 I main: load the model and apply lora adapter, if any
0.00.021.061 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.091 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.094 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.095 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.097 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.098 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.098 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.103 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.104 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.104 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.105 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.105 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.186 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.739 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.745 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.745 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.746 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.746 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.747 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.748 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.750 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.751 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.753 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.753 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.754 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.757 I llama_model_loader: - type  f32:   37 tensors
0.00.130.758 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.035 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.309 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.881 I llm_load_vocab: special tokens cache size = 5
0.00.277.643 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.661 I llm_load_print_meta: arch             = gemma
0.00.277.662 I llm_load_print_meta: vocab type       = SPM
0.00.277.663 I llm_load_print_meta: n_vocab          = 256000
0.00.277.663 I llm_load_print_meta: n_merges         = 0
0.00.277.663 I llm_load_print_meta: vocab_only       = 0
0.00.277.664 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.665 I llm_load_print_meta: n_embd           = 2048
0.00.277.665 I llm_load_print_meta: n_layer          = 18
0.00.277.675 I llm_load_print_meta: n_head           = 8
0.00.277.676 I llm_load_print_meta: n_head_kv        = 1
0.00.277.677 I llm_load_print_meta: n_rot            = 256
0.00.277.677 I llm_load_print_meta: n_swa            = 0
0.00.277.677 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.677 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.678 I llm_load_print_meta: n_gqa            = 8
0.00.277.679 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.680 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.681 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.682 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.682 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.683 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.684 I llm_load_print_meta: n_ff             = 16384
0.00.277.684 I llm_load_print_meta: n_expert         = 0
0.00.277.684 I llm_load_print_meta: n_expert_used    = 0
0.00.277.684 I llm_load_print_meta: causal attn      = 1
0.00.277.685 I llm_load_print_meta: pooling type     = 0
0.00.277.685 I llm_load_print_meta: rope type        = 2
0.00.277.685 I llm_load_print_meta: rope scaling     = linear
0.00.277.687 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.687 I llm_load_print_meta: freq_scale_train = 1
0.00.277.688 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.688 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.688 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.689 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.689 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.689 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.690 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.690 I llm_load_print_meta: model type       = 2B
0.00.277.691 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.691 I llm_load_print_meta: model params     = 2.51 B
0.00.277.692 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.693 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.693 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.693 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.694 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.694 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.694 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.695 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.695 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.696 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.696 I llm_load_print_meta: max token length = 93
0.00.370.697 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.104 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.110 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.111 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.112 I llama_new_context_with_model: n_batch       = 2048
0.00.376.112 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.113 I llama_new_context_with_model: flash_attn    = 0
0.00.376.116 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.117 I llama_new_context_with_model: freq_scale    = 1
0.00.376.118 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.140 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.391.733 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.747 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.073 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.081 I llama_new_context_with_model: graph nodes  = 601
0.00.393.082 I llama_new_context_with_model: graph splits = 1
0.00.393.084 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.393.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.290 I main: llama threadpool init, n_threads = 4
0.00.474.306 I 
0.00.474.383 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.386 I 
0.00.474.427 I sampler seed: 2021504861
0.00.474.439 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.442 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.452 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.455 I 
 increasities, but there was nothing abnormal about her behavior.

I cannot answer this question from the provided context because the provided text does not contain any information about

0.02.676.516 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6655.91 tokens per second)
0.02.676.519 I llama_perf_context_print:        load time =     473.56 ms
0.02.676.521 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.676.522 I llama_perf_context_print:        eval time =    2183.19 ms /    32 runs   (   68.22 ms per token,    14.66 tokens per second)
0.02.676.525 I llama_perf_context_print:       total time =    2202.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.172 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.362 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.442 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.451 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.463 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.468 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.471 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.475 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.476 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.477 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.477 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.478 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.478 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.483 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.484 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.484 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.485 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.832 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.545 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.559 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.562 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.563 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.566 I llama_model_loader: - type  f32:   37 tensors
0.00.130.567 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.194 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.795 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.377 I llm_load_vocab: special tokens cache size = 5
0.00.266.401 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.417 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.417 I llm_load_print_meta: arch             = gemma
0.00.266.418 I llm_load_print_meta: vocab type       = SPM
0.00.266.418 I llm_load_print_meta: n_vocab          = 256000
0.00.266.419 I llm_load_print_meta: n_merges         = 0
0.00.266.419 I llm_load_print_meta: vocab_only       = 0
0.00.266.420 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.420 I llm_load_print_meta: n_embd           = 2048
0.00.266.420 I llm_load_print_meta: n_layer          = 18
0.00.266.430 I llm_load_print_meta: n_head           = 8
0.00.266.431 I llm_load_print_meta: n_head_kv        = 1
0.00.266.432 I llm_load_print_meta: n_rot            = 256
0.00.266.432 I llm_load_print_meta: n_swa            = 0
0.00.266.432 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.433 I llm_load_print_meta: n_gqa            = 8
0.00.266.434 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.435 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.436 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.438 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.439 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.439 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.440 I llm_load_print_meta: n_ff             = 16384
0.00.266.440 I llm_load_print_meta: n_expert         = 0
0.00.266.441 I llm_load_print_meta: n_expert_used    = 0
0.00.266.441 I llm_load_print_meta: causal attn      = 1
0.00.266.441 I llm_load_print_meta: pooling type     = 0
0.00.266.441 I llm_load_print_meta: rope type        = 2
0.00.266.442 I llm_load_print_meta: rope scaling     = linear
0.00.266.443 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.444 I llm_load_print_meta: freq_scale_train = 1
0.00.266.444 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.444 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.445 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.445 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.445 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.446 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.446 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.446 I llm_load_print_meta: model type       = 2B
0.00.266.447 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.448 I llm_load_print_meta: model params     = 2.51 B
0.00.266.449 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.449 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.450 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.450 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.450 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.451 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.451 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.452 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.452 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.453 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.453 I llm_load_print_meta: max token length = 93
0.00.343.902 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.909 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.910 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.910 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.911 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.912 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.944 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.951 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.951 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.952 I llama_new_context_with_model: n_batch       = 2048
0.00.348.952 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.953 I llama_new_context_with_model: flash_attn    = 0
0.00.348.955 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.956 I llama_new_context_with_model: freq_scale    = 1
0.00.348.957 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.977 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.363.388 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.401 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.491 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.755 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.761 I llama_new_context_with_model: graph nodes  = 601
0.00.364.761 I llama_new_context_with_model: graph splits = 1
0.00.364.764 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.764 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.305 I main: llama threadpool init, n_threads = 4
0.00.449.323 I 
0.00.449.395 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.398 I 
0.00.449.439 I sampler seed: 3994334249
0.00.449.452 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.455 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.456 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.456 I 
 increasities in the context of evolutionary biology, and the evolutionary implications of such changes.

**Answer:**

**1. Evolutionary Consequences of Disruptive Decou

0.02.711.886 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6821.00 tokens per second)
0.02.711.889 I llama_perf_context_print:        load time =     448.92 ms
0.02.711.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.891 I llama_perf_context_print:        eval time =    2244.45 ms /    32 runs   (   70.14 ms per token,    14.26 tokens per second)
0.02.711.892 I llama_perf_context_print:       total time =    2262.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.539 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.195 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.205 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.212 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.223 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.225 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.234 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.235 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.236 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.236 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.237 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.241 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.243 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.244 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.247 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.248 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.450 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.354 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.187 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.194 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.194 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.195 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.196 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.197 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.198 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.200 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.201 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.202 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.202 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.203 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.207 I llama_model_loader: - type  f32:   37 tensors
0.00.131.208 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.698 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.706 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.300 I llm_load_vocab: special tokens cache size = 5
0.00.273.206 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.223 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.223 I llm_load_print_meta: arch             = gemma
0.00.273.224 I llm_load_print_meta: vocab type       = SPM
0.00.273.224 I llm_load_print_meta: n_vocab          = 256000
0.00.273.225 I llm_load_print_meta: n_merges         = 0
0.00.273.225 I llm_load_print_meta: vocab_only       = 0
0.00.273.225 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.226 I llm_load_print_meta: n_embd           = 2048
0.00.273.226 I llm_load_print_meta: n_layer          = 18
0.00.273.237 I llm_load_print_meta: n_head           = 8
0.00.273.238 I llm_load_print_meta: n_head_kv        = 1
0.00.273.239 I llm_load_print_meta: n_rot            = 256
0.00.273.239 I llm_load_print_meta: n_swa            = 0
0.00.273.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.240 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.240 I llm_load_print_meta: n_gqa            = 8
0.00.273.241 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.242 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.243 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.244 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.244 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.245 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.245 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.246 I llm_load_print_meta: n_ff             = 16384
0.00.273.246 I llm_load_print_meta: n_expert         = 0
0.00.273.246 I llm_load_print_meta: n_expert_used    = 0
0.00.273.247 I llm_load_print_meta: causal attn      = 1
0.00.273.247 I llm_load_print_meta: pooling type     = 0
0.00.273.247 I llm_load_print_meta: rope type        = 2
0.00.273.248 I llm_load_print_meta: rope scaling     = linear
0.00.273.249 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.250 I llm_load_print_meta: freq_scale_train = 1
0.00.273.250 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.251 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.251 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.251 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.252 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.252 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.252 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.253 I llm_load_print_meta: model type       = 2B
0.00.273.253 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.254 I llm_load_print_meta: model params     = 2.51 B
0.00.273.254 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.255 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.255 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.255 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.256 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.256 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.256 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.257 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.258 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.259 I llm_load_print_meta: max token length = 93
0.00.345.532 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.538 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.864 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.865 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.865 I llama_new_context_with_model: n_batch       = 2048
0.00.350.866 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.866 I llama_new_context_with_model: flash_attn    = 0
0.00.350.869 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.870 I llama_new_context_with_model: freq_scale    = 1
0.00.350.871 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.892 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.168 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.182 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.279 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.525 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.531 I llama_new_context_with_model: graph nodes  = 601
0.00.366.532 I llama_new_context_with_model: graph splits = 1
0.00.366.534 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.535 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.840 I main: llama threadpool init, n_threads = 4
0.00.454.856 I 
0.00.454.931 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.932 I 
0.00.454.976 I sampler seed: 1640662839
0.00.454.986 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.989 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.989 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.990 I 
 increably. I am not able to write a code snippet for the requested task. [end of text]


0.01.818.139 I llama_perf_sampler_print:    sampling time =       2.90 ms /    19 runs   (    0.15 ms per token,  6549.47 tokens per second)
0.01.818.142 I llama_perf_context_print:        load time =     454.07 ms
0.01.818.143 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.818.144 I llama_perf_context_print:        eval time =    1352.08 ms /    18 runs   (   75.12 ms per token,    13.31 tokens per second)
0.01.818.145 I llama_perf_context_print:       total time =    1363.31 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.740s
user	0m35.120s
sys	0m9.401s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4380 (6f0c9e03)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40244.14 ms
main:    total time = 40244.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.044 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.054 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.073 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.074 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.077 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.078 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.079 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.079 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.080 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.080 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.084 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.085 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.086 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.086 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.729 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.226 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.057 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.063 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.064 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.064 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.065 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.066 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.068 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.072 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.072 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.073 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.074 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.076 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.078 I llama_model_loader: - type  f32:   37 tensors
0.00.131.079 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.080 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.549 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.946 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.693 I llm_load_vocab: special tokens cache size = 5
0.00.287.731 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.751 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.752 I llm_load_print_meta: arch             = gemma
0.00.287.752 I llm_load_print_meta: vocab type       = SPM
0.00.287.753 I llm_load_print_meta: n_vocab          = 256000
0.00.287.753 I llm_load_print_meta: n_merges         = 0
0.00.287.754 I llm_load_print_meta: vocab_only       = 0
0.00.287.754 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.754 I llm_load_print_meta: n_embd           = 2048
0.00.287.754 I llm_load_print_meta: n_layer          = 18
0.00.287.765 I llm_load_print_meta: n_head           = 8
0.00.287.766 I llm_load_print_meta: n_head_kv        = 1
0.00.287.766 I llm_load_print_meta: n_rot            = 256
0.00.287.766 I llm_load_print_meta: n_swa            = 0
0.00.287.766 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.767 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.768 I llm_load_print_meta: n_gqa            = 8
0.00.287.769 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.770 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.770 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.772 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.772 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.772 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.773 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.774 I llm_load_print_meta: n_ff             = 16384
0.00.287.774 I llm_load_print_meta: n_expert         = 0
0.00.287.774 I llm_load_print_meta: n_expert_used    = 0
0.00.287.774 I llm_load_print_meta: causal attn      = 1
0.00.287.775 I llm_load_print_meta: pooling type     = 0
0.00.287.775 I llm_load_print_meta: rope type        = 2
0.00.287.775 I llm_load_print_meta: rope scaling     = linear
0.00.287.777 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.777 I llm_load_print_meta: freq_scale_train = 1
0.00.287.778 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.780 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.782 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.782 I llm_load_print_meta: model type       = 2B
0.00.287.784 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.287.784 I llm_load_print_meta: model params     = 2.51 B
0.00.287.785 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.287.786 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.786 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.787 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.788 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.788 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.788 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.789 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.790 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.790 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.790 I llm_load_print_meta: max token length = 93
0.00.349.154 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.349.162 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.349.163 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.349.163 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.349.164 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.349.164 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.354.337 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.343 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.343 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.344 I llama_new_context_with_model: n_batch       = 2048
0.00.354.344 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.345 I llama_new_context_with_model: flash_attn    = 0
0.00.354.347 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.348 I llama_new_context_with_model: freq_scale    = 1
0.00.354.349 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.368 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.369.177 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.191 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.285 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.567 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.573 I llama_new_context_with_model: graph nodes  = 601
0.00.370.573 I llama_new_context_with_model: graph splits = 1
0.00.370.575 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.370.575 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.029 I main: llama threadpool init, n_threads = 4
0.00.446.043 I 
0.00.446.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.119 I 
0.00.446.161 I sampler seed: 3386333052
0.00.446.172 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.178 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.180 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.180 I 
 seconally! [end of text]


0.00.645.069 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7704.16 tokens per second)
0.00.645.071 I llama_perf_context_print:        load time =     445.28 ms
0.00.645.072 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.645.074 I llama_perf_context_print:        eval time =     195.64 ms /     4 runs   (   48.91 ms per token,    20.45 tokens per second)
0.00.645.074 I llama_perf_context_print:       total time =     199.05 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4380 (6f0c9e03)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40217.76 ms
main:    total time = 40217.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.561 I build: 4380 (6f0c9e03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.020.998 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.021 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.028 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.035 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.036 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.036 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.037 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.905 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.127 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.980 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.988 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.988 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.989 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.990 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.990 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.993 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.993 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.997 I llama_model_loader: - type  f32:   37 tensors
0.00.131.998 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.999 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.544 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.096 I llm_load_vocab: special tokens cache size = 5
0.00.268.925 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.941 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.941 I llm_load_print_meta: arch             = gemma
0.00.268.942 I llm_load_print_meta: vocab type       = SPM
0.00.268.942 I llm_load_print_meta: n_vocab          = 256000
0.00.268.943 I llm_load_print_meta: n_merges         = 0
0.00.268.943 I llm_load_print_meta: vocab_only       = 0
0.00.268.943 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.943 I llm_load_print_meta: n_embd           = 2048
0.00.268.944 I llm_load_print_meta: n_layer          = 18
0.00.268.955 I llm_load_print_meta: n_head           = 8
0.00.268.955 I llm_load_print_meta: n_head_kv        = 1
0.00.268.956 I llm_load_print_meta: n_rot            = 256
0.00.268.956 I llm_load_print_meta: n_swa            = 0
0.00.268.956 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.956 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.957 I llm_load_print_meta: n_gqa            = 8
0.00.268.958 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.959 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.960 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.962 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.962 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.962 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.963 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.964 I llm_load_print_meta: n_ff             = 16384
0.00.268.964 I llm_load_print_meta: n_expert         = 0
0.00.268.964 I llm_load_print_meta: n_expert_used    = 0
0.00.268.965 I llm_load_print_meta: causal attn      = 1
0.00.268.965 I llm_load_print_meta: pooling type     = 0
0.00.268.965 I llm_load_print_meta: rope type        = 2
0.00.268.966 I llm_load_print_meta: rope scaling     = linear
0.00.268.967 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.967 I llm_load_print_meta: freq_scale_train = 1
0.00.268.968 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.968 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.968 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.969 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.969 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.969 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.970 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.970 I llm_load_print_meta: model type       = 2B
0.00.268.971 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.972 I llm_load_print_meta: model params     = 2.51 B
0.00.268.972 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.973 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.973 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.973 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.974 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.974 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.974 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.975 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.976 I llm_load_print_meta: max token length = 93
0.00.326.842 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.952 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.959 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.960 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.960 I llama_new_context_with_model: n_batch       = 2048
0.00.331.960 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.961 I llama_new_context_with_model: flash_attn    = 0
0.00.331.964 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.965 I llama_new_context_with_model: freq_scale    = 1
0.00.331.966 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.985 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.347.000 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.015 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.114 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.440 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.444 I llama_new_context_with_model: graph nodes  = 601
0.00.348.444 I llama_new_context_with_model: graph splits = 1
0.00.348.447 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.447 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.475 I main: llama threadpool init, n_threads = 4
0.00.422.491 I 
0.00.422.566 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.570 I 
0.00.422.611 I sampler seed: 3982292739
0.00.422.623 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.635 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.638 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.639 I 
 strick by the name of "Alice."

I am unable to provide personally identifiable information. Therefore, I am unable to provide information regarding Alice's personal life

0.01.984.512 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6354.71 tokens per second)
0.01.984.514 I llama_perf_context_print:        load time =     421.68 ms
0.01.984.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.517 I llama_perf_context_print:        eval time =    1543.24 ms /    32 runs   (   48.23 ms per token,    20.74 tokens per second)
0.01.984.518 I llama_perf_context_print:       total time =    1562.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.251s
user	10m18.667s
sys	0m6.922s
