+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3938 (6f55bccb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.027.736 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.027.944 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.028.030 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.041 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.043 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.047 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.048 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.050 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.051 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.052 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.053 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.059 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.062 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.063 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.063 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.233 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.786 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.169 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.176 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.177 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.178 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.179 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.180 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.181 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.185 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.186 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.187 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.188 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.189 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.196 I llama_model_loader: - type  f32:   37 tensors
0.00.269.200 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.526 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.496 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.471 I llm_load_vocab: special tokens cache size = 5
0.00.611.561 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.635 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.636 I llm_load_print_meta: arch             = gemma
0.00.611.637 I llm_load_print_meta: vocab type       = SPM
0.00.611.638 I llm_load_print_meta: n_vocab          = 256000
0.00.611.640 I llm_load_print_meta: n_merges         = 0
0.00.611.641 I llm_load_print_meta: vocab_only       = 0
0.00.611.641 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.641 I llm_load_print_meta: n_embd           = 2048
0.00.611.642 I llm_load_print_meta: n_layer          = 18
0.00.611.707 I llm_load_print_meta: n_head           = 8
0.00.611.714 I llm_load_print_meta: n_head_kv        = 1
0.00.611.715 I llm_load_print_meta: n_rot            = 256
0.00.611.716 I llm_load_print_meta: n_swa            = 0
0.00.611.716 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.717 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.721 I llm_load_print_meta: n_gqa            = 8
0.00.611.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.731 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.734 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.739 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.739 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.740 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.745 I llm_load_print_meta: n_ff             = 16384
0.00.611.746 I llm_load_print_meta: n_expert         = 0
0.00.611.747 I llm_load_print_meta: n_expert_used    = 0
0.00.611.748 I llm_load_print_meta: causal attn      = 1
0.00.611.749 I llm_load_print_meta: pooling type     = 0
0.00.611.749 I llm_load_print_meta: rope type        = 2
0.00.611.768 I llm_load_print_meta: rope scaling     = linear
0.00.611.770 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.771 I llm_load_print_meta: freq_scale_train = 1
0.00.611.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.772 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.780 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.784 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.784 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.786 I llm_load_print_meta: model type       = 2B
0.00.611.787 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.788 I llm_load_print_meta: model params     = 2.51 B
0.00.611.789 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.798 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.798 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.799 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.799 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.806 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.808 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.809 I llm_load_print_meta: max token length = 93
0.00.611.978 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.469 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.714.480 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.714.481 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.714.482 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.714.483 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.714.483 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.720.281 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.289 I llama_new_context_with_model: n_batch    = 2048
0.00.720.289 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.290 I llama_new_context_with_model: flash_attn = 0
0.00.720.292 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.293 I llama_new_context_with_model: freq_scale = 1
0.00.749.500 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.541 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.749.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.051 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.057 I llama_new_context_with_model: graph nodes  = 601
0.00.751.057 I llama_new_context_with_model: graph splits = 1
0.00.751.073 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.360 I main: llama threadpool init, n_threads = 4
0.01.360.374 I 
0.01.360.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.483 I 
0.01.360.662 I sampler seed: 2459107208
0.01.360.674 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.680 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.360.682 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.682 I 
 seconary clauses.

A secondary clause is a dependent clause that contains a subject and a verb, and it is used to provide additional information or explanation about the

0.14.843.074 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.59 tokens per second)
0.14.843.078 I llama_perf_context_print:        load time =    1357.48 ms
0.14.843.090 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.843.093 I llama_perf_context_print:        eval time =   13400.40 ms /    32 runs   (  418.76 ms per token,     2.39 tokens per second)
0.14.843.094 I llama_perf_context_print:       total time =   13482.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3938 (6f55bccb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.024.761 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.848 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.861 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.866 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.869 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.871 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.872 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.873 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.874 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.875 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.881 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.882 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.883 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.884 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.885 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.887 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.294 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.065 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.067 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.069 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.071 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.074 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.088 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.097 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.099 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.104 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.115 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.119 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.128 I llama_model_loader: - type  f32:   37 tensors
0.00.268.131 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.559 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.393 I llm_load_vocab: special tokens cache size = 5
0.00.611.029 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.098 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.099 I llm_load_print_meta: arch             = gemma
0.00.611.100 I llm_load_print_meta: vocab type       = SPM
0.00.611.100 I llm_load_print_meta: n_vocab          = 256000
0.00.611.103 I llm_load_print_meta: n_merges         = 0
0.00.611.103 I llm_load_print_meta: vocab_only       = 0
0.00.611.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.104 I llm_load_print_meta: n_embd           = 2048
0.00.611.104 I llm_load_print_meta: n_layer          = 18
0.00.611.168 I llm_load_print_meta: n_head           = 8
0.00.611.175 I llm_load_print_meta: n_head_kv        = 1
0.00.611.175 I llm_load_print_meta: n_rot            = 256
0.00.611.177 I llm_load_print_meta: n_swa            = 0
0.00.611.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.183 I llm_load_print_meta: n_gqa            = 8
0.00.611.215 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.222 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.223 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.227 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.228 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.228 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.229 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.234 I llm_load_print_meta: n_ff             = 16384
0.00.611.235 I llm_load_print_meta: n_expert         = 0
0.00.611.235 I llm_load_print_meta: n_expert_used    = 0
0.00.611.236 I llm_load_print_meta: causal attn      = 1
0.00.611.236 I llm_load_print_meta: pooling type     = 0
0.00.611.237 I llm_load_print_meta: rope type        = 2
0.00.611.238 I llm_load_print_meta: rope scaling     = linear
0.00.611.239 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.239 I llm_load_print_meta: freq_scale_train = 1
0.00.611.240 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.240 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.241 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.241 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.241 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.242 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.242 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.243 I llm_load_print_meta: model type       = 2B
0.00.611.244 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.245 I llm_load_print_meta: model params     = 2.51 B
0.00.611.246 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.246 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.247 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.248 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.249 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.249 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.249 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.265 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.266 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.267 I llm_load_print_meta: max token length = 93
0.00.611.428 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.707.262 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.712.908 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.915 I llama_new_context_with_model: n_batch    = 2048
0.00.712.916 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.917 I llama_new_context_with_model: flash_attn = 0
0.00.712.919 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.920 I llama_new_context_with_model: freq_scale = 1
0.00.742.286 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.329 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.742.442 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.821 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.827 I llama_new_context_with_model: graph nodes  = 601
0.00.743.827 I llama_new_context_with_model: graph splits = 1
0.00.743.843 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.361 I main: llama threadpool init, n_threads = 4
0.01.353.373 I 
0.01.353.476 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.480 I 
0.01.353.673 I sampler seed: 799631369
0.01.353.684 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.691 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.353.693 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.693 I 
 increasively.

I am having trouble understanding the relationship between the terms in the given sentence.

Could you please explain what the relationship is between the terms?

0.14.795.998 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.79 tokens per second)
0.14.796.013 I llama_perf_context_print:        load time =    1350.46 ms
0.14.796.015 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.796.017 I llama_perf_context_print:        eval time =   13360.41 ms /    32 runs   (  417.51 ms per token,     2.40 tokens per second)
0.14.796.018 I llama_perf_context_print:       total time =   13442.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 3938 (6f55bccb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.766 I main: load the model and apply lora adapter, if any
0.00.024.293 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.485 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.565 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.578 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.582 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.584 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.584 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.586 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.587 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.588 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.594 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.595 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.595 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.596 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.597 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.146 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.759 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.017 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.027 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.028 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.029 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.030 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.033 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.034 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.035 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.036 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.037 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.046 I llama_model_loader: - type  f32:   37 tensors
0.00.265.050 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.548 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.969 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.926 I llm_load_vocab: special tokens cache size = 5
0.00.604.950 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.023 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.024 I llm_load_print_meta: arch             = gemma
0.00.605.025 I llm_load_print_meta: vocab type       = SPM
0.00.605.026 I llm_load_print_meta: n_vocab          = 256000
0.00.605.028 I llm_load_print_meta: n_merges         = 0
0.00.605.029 I llm_load_print_meta: vocab_only       = 0
0.00.605.029 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.029 I llm_load_print_meta: n_embd           = 2048
0.00.605.030 I llm_load_print_meta: n_layer          = 18
0.00.605.092 I llm_load_print_meta: n_head           = 8
0.00.605.099 I llm_load_print_meta: n_head_kv        = 1
0.00.605.100 I llm_load_print_meta: n_rot            = 256
0.00.605.100 I llm_load_print_meta: n_swa            = 0
0.00.605.100 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.101 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.105 I llm_load_print_meta: n_gqa            = 8
0.00.605.110 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.115 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.116 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.118 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.118 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.119 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.119 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.124 I llm_load_print_meta: n_ff             = 16384
0.00.605.124 I llm_load_print_meta: n_expert         = 0
0.00.605.125 I llm_load_print_meta: n_expert_used    = 0
0.00.605.125 I llm_load_print_meta: causal attn      = 1
0.00.605.125 I llm_load_print_meta: pooling type     = 0
0.00.605.126 I llm_load_print_meta: rope type        = 2
0.00.605.126 I llm_load_print_meta: rope scaling     = linear
0.00.605.128 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.128 I llm_load_print_meta: freq_scale_train = 1
0.00.605.129 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.129 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.129 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.130 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.131 I llm_load_print_meta: model type       = 2B
0.00.605.132 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.132 I llm_load_print_meta: model params     = 2.51 B
0.00.605.133 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.134 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.134 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.135 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.135 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.136 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.136 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.168 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.170 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.171 I llm_load_print_meta: max token length = 93
0.00.605.338 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.061 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.684.071 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.071 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.684.072 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.684.073 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.684.073 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.689.724 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.731 I llama_new_context_with_model: n_batch    = 2048
0.00.689.731 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.732 I llama_new_context_with_model: flash_attn = 0
0.00.689.734 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.735 I llama_new_context_with_model: freq_scale = 1
0.00.718.817 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.860 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.975 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.401 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.406 I llama_new_context_with_model: graph nodes  = 601
0.00.720.406 I llama_new_context_with_model: graph splits = 1
0.00.720.424 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.214 I main: llama threadpool init, n_threads = 4
0.01.329.227 I 
0.01.329.331 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.335 I 
0.01.329.514 I sampler seed: 525877531
0.01.329.526 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.329.534 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.329.535 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.329.535 I 
 increasities, and the overall instability of the economy could all contribute to the challenges of financial regulation.

**Discuss how the challenges of financial regulation can be addressed

0.14.914.664 I llama_perf_sampler_print:    sampling time =      49.57 ms /    33 runs   (    1.50 ms per token,   665.77 tokens per second)
0.14.914.667 I llama_perf_context_print:        load time =    1326.37 ms
0.14.914.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.914.671 I llama_perf_context_print:        eval time =   13502.22 ms /    32 runs   (  421.94 ms per token,     2.37 tokens per second)
0.14.914.672 I llama_perf_context_print:       total time =   13585.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3938 (6f55bccb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.621 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.832 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.922 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.934 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.935 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.941 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.943 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.944 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.946 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.947 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.954 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.958 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.959 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.960 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.961 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.661 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.198 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.416 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.425 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.426 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.427 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.430 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.431 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.435 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.436 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.437 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.438 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.439 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.448 I llama_model_loader: - type  f32:   37 tensors
0.00.266.453 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.645 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.872 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.801 I llm_load_vocab: special tokens cache size = 5
0.00.605.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.941 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.942 I llm_load_print_meta: arch             = gemma
0.00.605.943 I llm_load_print_meta: vocab type       = SPM
0.00.605.943 I llm_load_print_meta: n_vocab          = 256000
0.00.605.946 I llm_load_print_meta: n_merges         = 0
0.00.605.946 I llm_load_print_meta: vocab_only       = 0
0.00.605.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.947 I llm_load_print_meta: n_embd           = 2048
0.00.605.947 I llm_load_print_meta: n_layer          = 18
0.00.606.012 I llm_load_print_meta: n_head           = 8
0.00.606.019 I llm_load_print_meta: n_head_kv        = 1
0.00.606.020 I llm_load_print_meta: n_rot            = 256
0.00.606.021 I llm_load_print_meta: n_swa            = 0
0.00.606.022 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.022 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.027 I llm_load_print_meta: n_gqa            = 8
0.00.606.032 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.037 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.038 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.039 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.041 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.041 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.041 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.046 I llm_load_print_meta: n_ff             = 16384
0.00.606.047 I llm_load_print_meta: n_expert         = 0
0.00.606.048 I llm_load_print_meta: n_expert_used    = 0
0.00.606.048 I llm_load_print_meta: causal attn      = 1
0.00.606.048 I llm_load_print_meta: pooling type     = 0
0.00.606.049 I llm_load_print_meta: rope type        = 2
0.00.606.050 I llm_load_print_meta: rope scaling     = linear
0.00.606.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.052 I llm_load_print_meta: freq_scale_train = 1
0.00.606.052 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.057 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.058 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.058 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.058 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.058 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.059 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.060 I llm_load_print_meta: model type       = 2B
0.00.606.061 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.062 I llm_load_print_meta: model params     = 2.51 B
0.00.606.072 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.073 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.074 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.074 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.075 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.076 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.076 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.076 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.082 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.083 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.084 I llm_load_print_meta: max token length = 93
0.00.606.248 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.677.698 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.677.708 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.683.327 I llama_new_context_with_model: n_ctx      = 8192
0.00.683.335 I llama_new_context_with_model: n_batch    = 2048
0.00.683.335 I llama_new_context_with_model: n_ubatch   = 512
0.00.683.336 I llama_new_context_with_model: flash_attn = 0
0.00.683.338 I llama_new_context_with_model: freq_base  = 10000.0
0.00.683.339 I llama_new_context_with_model: freq_scale = 1
0.00.712.712 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.712.756 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.866 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.220 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.714.225 I llama_new_context_with_model: graph nodes  = 601
0.00.714.225 I llama_new_context_with_model: graph splits = 1
0.00.714.240 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.655 I main: llama threadpool init, n_threads = 4
0.01.324.667 I 
0.01.324.769 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.774 I 
0.01.324.955 I sampler seed: 4004458406
0.01.324.967 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.975 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.324.984 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.986 I 
 increasities, and other forms of flattery to gain advantage in a negotiation.

**Answer:**

**It is unethical and improper to resort to flattery and manipulative

0.14.746.870 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.03 tokens per second)
0.14.746.873 I llama_perf_context_print:        load time =    1321.79 ms
0.14.746.874 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.746.875 I llama_perf_context_print:        eval time =   13339.62 ms /    32 runs   (  416.86 ms per token,     2.40 tokens per second)
0.14.746.898 I llama_perf_context_print:       total time =   13422.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.468s
user	3m48.292s
sys	0m9.444s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3938 (6f55bccb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197948.56 ms
main:    total time = 197948.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3938 (6f55bccb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.543 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.738 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.824 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.835 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.836 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.841 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.844 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.845 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.846 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.847 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.848 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.853 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.855 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.859 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.860 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.861 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.251 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.710 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.005 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.014 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.015 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.016 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.017 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.018 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.019 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.022 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.023 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.024 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.025 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.027 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.035 I llama_model_loader: - type  f32:   37 tensors
0.00.265.039 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.040 I llama_model_loader: - type q6_K:   19 tensors
0.00.428.097 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.629 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.485.570 I llm_load_vocab: special tokens cache size = 5
0.00.587.851 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.919 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.920 I llm_load_print_meta: arch             = gemma
0.00.587.921 I llm_load_print_meta: vocab type       = SPM
0.00.587.922 I llm_load_print_meta: n_vocab          = 256000
0.00.587.925 I llm_load_print_meta: n_merges         = 0
0.00.587.925 I llm_load_print_meta: vocab_only       = 0
0.00.587.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.926 I llm_load_print_meta: n_embd           = 2048
0.00.587.926 I llm_load_print_meta: n_layer          = 18
0.00.587.991 I llm_load_print_meta: n_head           = 8
0.00.587.999 I llm_load_print_meta: n_head_kv        = 1
0.00.588.000 I llm_load_print_meta: n_rot            = 256
0.00.588.001 I llm_load_print_meta: n_swa            = 0
0.00.588.002 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.002 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.007 I llm_load_print_meta: n_gqa            = 8
0.00.588.012 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.017 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.019 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.021 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.022 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.022 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.023 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.028 I llm_load_print_meta: n_ff             = 16384
0.00.588.028 I llm_load_print_meta: n_expert         = 0
0.00.588.028 I llm_load_print_meta: n_expert_used    = 0
0.00.588.030 I llm_load_print_meta: causal attn      = 1
0.00.588.030 I llm_load_print_meta: pooling type     = 0
0.00.588.030 I llm_load_print_meta: rope type        = 2
0.00.588.031 I llm_load_print_meta: rope scaling     = linear
0.00.588.032 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.033 I llm_load_print_meta: freq_scale_train = 1
0.00.588.033 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.034 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.036 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.036 I llm_load_print_meta: model type       = 2B
0.00.588.038 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.588.038 I llm_load_print_meta: model params     = 2.51 B
0.00.588.049 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.588.050 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.063 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.064 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.069 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.070 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.075 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.077 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.077 I llm_load_print_meta: max token length = 93
0.00.588.246 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.647.113 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.647.124 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.647.125 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.647.126 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.647.126 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.647.127 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.652.818 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.827 I llama_new_context_with_model: n_batch    = 2048
0.00.652.828 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.828 I llama_new_context_with_model: flash_attn = 0
0.00.652.832 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.832 I llama_new_context_with_model: freq_scale = 1
0.00.681.678 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.681.721 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.681.829 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.683.201 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.683.206 I llama_new_context_with_model: graph nodes  = 601
0.00.683.207 I llama_new_context_with_model: graph splits = 1
0.00.683.223 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.261.398 I main: llama threadpool init, n_threads = 4
0.01.261.410 I 
0.01.261.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.261.519 I 
0.01.261.704 I sampler seed: 3974836564
0.01.261.717 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.724 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.261.727 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.261.728 I 
 seconded, 2003.

**The Tragedy of the Titanic**

The sinking of the Titanic, one of the most notorious maritime disasters in

0.12.123.369 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.15 tokens per second)
0.12.123.372 I llama_perf_context_print:        load time =    1258.51 ms
0.12.123.373 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.123.396 I llama_perf_context_print:        eval time =   10779.64 ms /    32 runs   (  336.86 ms per token,     2.97 tokens per second)
0.12.123.398 I llama_perf_context_print:       total time =   10861.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3938 (6f55bccb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199572.02 ms
main:    total time = 199572.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 3938 (6f55bccb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.616 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.710 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.723 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.725 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.729 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.732 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.734 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.734 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.735 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.736 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.742 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.743 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.745 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.754 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.756 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.412 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.867 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.046 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.054 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.055 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.056 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.057 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.058 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.059 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.063 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.064 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.072 I llama_model_loader: - type  f32:   37 tensors
0.00.266.076 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.076 I llama_model_loader: - type q6_K:   19 tensors
0.00.430.936 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.437 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.418 I llm_load_vocab: special tokens cache size = 5
0.00.592.231 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.306 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.307 I llm_load_print_meta: arch             = gemma
0.00.592.308 I llm_load_print_meta: vocab type       = SPM
0.00.592.309 I llm_load_print_meta: n_vocab          = 256000
0.00.592.311 I llm_load_print_meta: n_merges         = 0
0.00.592.312 I llm_load_print_meta: vocab_only       = 0
0.00.592.312 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.312 I llm_load_print_meta: n_embd           = 2048
0.00.592.313 I llm_load_print_meta: n_layer          = 18
0.00.592.380 I llm_load_print_meta: n_head           = 8
0.00.592.387 I llm_load_print_meta: n_head_kv        = 1
0.00.592.388 I llm_load_print_meta: n_rot            = 256
0.00.592.388 I llm_load_print_meta: n_swa            = 0
0.00.592.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.389 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.393 I llm_load_print_meta: n_gqa            = 8
0.00.592.398 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.403 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.404 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.405 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.406 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.406 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.407 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.412 I llm_load_print_meta: n_ff             = 16384
0.00.592.413 I llm_load_print_meta: n_expert         = 0
0.00.592.414 I llm_load_print_meta: n_expert_used    = 0
0.00.592.414 I llm_load_print_meta: causal attn      = 1
0.00.592.414 I llm_load_print_meta: pooling type     = 0
0.00.592.415 I llm_load_print_meta: rope type        = 2
0.00.592.426 I llm_load_print_meta: rope scaling     = linear
0.00.592.428 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.429 I llm_load_print_meta: freq_scale_train = 1
0.00.592.429 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.429 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.434 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.435 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.435 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.435 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.439 I llm_load_print_meta: model type       = 2B
0.00.592.441 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.592.454 I llm_load_print_meta: model params     = 2.51 B
0.00.592.456 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.592.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.463 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.465 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.465 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.466 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.474 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.484 I llm_load_print_meta: max token length = 93
0.00.592.650 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.650.842 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.656.493 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.501 I llama_new_context_with_model: n_batch    = 2048
0.00.656.501 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.502 I llama_new_context_with_model: flash_attn = 0
0.00.656.504 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.505 I llama_new_context_with_model: freq_scale = 1
0.00.686.575 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.621 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.732 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.064 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.688.069 I llama_new_context_with_model: graph nodes  = 601
0.00.688.070 I llama_new_context_with_model: graph splits = 1
0.00.688.085 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.707 I main: llama threadpool init, n_threads = 4
0.01.270.720 I 
0.01.270.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.829 I 
0.01.271.012 I sampler seed: 455394392
0.01.271.023 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.031 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.271.032 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.033 I 
 maneupherably! [end of text]


0.02.980.123 I llama_perf_sampler_print:    sampling time =       7.79 ms /     6 runs   (    1.30 ms per token,   770.02 tokens per second)
0.02.980.127 I llama_perf_context_print:        load time =    1267.83 ms
0.02.980.128 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.980.156 I llama_perf_context_print:        eval time =    1694.84 ms /     5 runs   (  338.97 ms per token,     2.95 tokens per second)
0.02.980.157 I llama_perf_context_print:       total time =    1709.43 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m55.592s
user	49m28.891s
sys	0m6.382s
