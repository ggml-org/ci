+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.000.924 I main: load the model and apply lora adapter, if any
0.00.024.034 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.046 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.160 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.175 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.177 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.187 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.191 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.193 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.195 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.197 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.199 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.210 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.216 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.221 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.224 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.701 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.619 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.459 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.471 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.472 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.473 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.475 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.476 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.478 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.483 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.484 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.486 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.487 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.488 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.499 I llama_model_loader: - type  f32:   37 tensors
0.00.351.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.592.119 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.378 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.424 I llm_load_vocab: special tokens cache size = 5
0.00.861.151 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.227 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.232 I llm_load_print_meta: arch             = gemma
0.00.861.233 I llm_load_print_meta: vocab type       = SPM
0.00.861.233 I llm_load_print_meta: n_vocab          = 256000
0.00.861.236 I llm_load_print_meta: n_merges         = 0
0.00.861.236 I llm_load_print_meta: vocab_only       = 0
0.00.861.237 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.237 I llm_load_print_meta: n_embd           = 2048
0.00.861.237 I llm_load_print_meta: n_layer          = 18
0.00.861.302 I llm_load_print_meta: n_head           = 8
0.00.861.311 I llm_load_print_meta: n_head_kv        = 1
0.00.861.312 I llm_load_print_meta: n_rot            = 256
0.00.861.313 I llm_load_print_meta: n_swa            = 0
0.00.861.313 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.314 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.320 I llm_load_print_meta: n_gqa            = 8
0.00.861.325 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.332 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.333 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.335 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.336 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.336 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.336 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.342 I llm_load_print_meta: n_ff             = 16384
0.00.861.342 I llm_load_print_meta: n_expert         = 0
0.00.861.343 I llm_load_print_meta: n_expert_used    = 0
0.00.861.343 I llm_load_print_meta: causal attn      = 1
0.00.861.344 I llm_load_print_meta: pooling type     = 0
0.00.861.344 I llm_load_print_meta: rope type        = 2
0.00.861.356 I llm_load_print_meta: rope scaling     = linear
0.00.861.358 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.359 I llm_load_print_meta: freq_scale_train = 1
0.00.861.360 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.360 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.361 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.361 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.361 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.362 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.362 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.363 I llm_load_print_meta: model type       = 2B
0.00.861.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.861.365 I llm_load_print_meta: model params     = 2.51 B
0.00.861.374 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.861.374 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.375 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.376 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.376 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.379 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.379 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.380 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.386 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.387 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.388 I llm_load_print_meta: max token length = 93
0.00.966.053 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.966.062 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.966.063 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.966.064 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.966.064 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.966.065 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.972.468 I llama_new_context_with_model: n_seq_max     = 1
0.00.972.476 I llama_new_context_with_model: n_ctx         = 4096
0.00.972.477 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.972.477 I llama_new_context_with_model: n_batch       = 2048
0.00.972.477 I llama_new_context_with_model: n_ubatch      = 512
0.00.972.478 I llama_new_context_with_model: flash_attn    = 0
0.00.972.481 I llama_new_context_with_model: freq_base     = 10000.0
0.00.972.482 I llama_new_context_with_model: freq_scale    = 1
0.00.972.483 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.988.058 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.988.102 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.988.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.990.803 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.990.806 I llama_new_context_with_model: graph nodes  = 601
0.00.990.807 I llama_new_context_with_model: graph splits = 1
0.00.990.830 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.597.423 I main: llama threadpool init, n_threads = 4
0.01.597.440 I 
0.01.597.572 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.597.576 I 
0.01.597.821 I sampler seed: 3133571864
0.01.597.834 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.597.847 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.597.848 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.597.848 I 
 increasities with a captivating blend of emotions, humor, and suspense. [end of text]


0.07.957.906 I llama_perf_sampler_print:    sampling time =      23.08 ms /    16 runs   (    1.44 ms per token,   693.15 tokens per second)
0.07.957.909 I llama_perf_context_print:        load time =    1596.38 ms
0.07.957.920 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.957.922 I llama_perf_context_print:        eval time =    6317.74 ms /    15 runs   (  421.18 ms per token,     2.37 tokens per second)
0.07.957.923 I llama_perf_context_print:       total time =    6360.49 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.000.848 I main: load the model and apply lora adapter, if any
0.00.023.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.476 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.489 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.491 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.497 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.501 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.502 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.503 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.506 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.513 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.514 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.515 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.517 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.518 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.282 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.234 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.038 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.048 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.049 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.050 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.052 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.055 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.060 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.061 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.062 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.064 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.065 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.073 I llama_model_loader: - type  f32:   37 tensors
0.00.352.075 I llama_model_loader: - type q8_0:  127 tensors
0.00.584.111 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.592 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.622 I llm_load_vocab: special tokens cache size = 5
0.00.840.251 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.840.326 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.840.327 I llm_load_print_meta: arch             = gemma
0.00.840.327 I llm_load_print_meta: vocab type       = SPM
0.00.840.328 I llm_load_print_meta: n_vocab          = 256000
0.00.840.331 I llm_load_print_meta: n_merges         = 0
0.00.840.331 I llm_load_print_meta: vocab_only       = 0
0.00.840.332 I llm_load_print_meta: n_ctx_train      = 8192
0.00.840.332 I llm_load_print_meta: n_embd           = 2048
0.00.840.333 I llm_load_print_meta: n_layer          = 18
0.00.840.396 I llm_load_print_meta: n_head           = 8
0.00.840.404 I llm_load_print_meta: n_head_kv        = 1
0.00.840.404 I llm_load_print_meta: n_rot            = 256
0.00.840.406 I llm_load_print_meta: n_swa            = 0
0.00.840.407 I llm_load_print_meta: n_embd_head_k    = 256
0.00.840.418 I llm_load_print_meta: n_embd_head_v    = 256
0.00.840.423 I llm_load_print_meta: n_gqa            = 8
0.00.840.428 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.840.433 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.840.438 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.840.439 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.840.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.840.440 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.840.440 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.840.446 I llm_load_print_meta: n_ff             = 16384
0.00.840.446 I llm_load_print_meta: n_expert         = 0
0.00.840.447 I llm_load_print_meta: n_expert_used    = 0
0.00.840.448 I llm_load_print_meta: causal attn      = 1
0.00.840.448 I llm_load_print_meta: pooling type     = 0
0.00.840.449 I llm_load_print_meta: rope type        = 2
0.00.840.462 I llm_load_print_meta: rope scaling     = linear
0.00.840.464 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.840.465 I llm_load_print_meta: freq_scale_train = 1
0.00.840.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.840.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.840.473 I llm_load_print_meta: ssm_d_conv       = 0
0.00.840.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.840.473 I llm_load_print_meta: ssm_d_state      = 0
0.00.840.474 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.840.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.840.475 I llm_load_print_meta: model type       = 2B
0.00.840.483 I llm_load_print_meta: model ftype      = Q8_0
0.00.840.484 I llm_load_print_meta: model params     = 2.51 B
0.00.840.494 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.840.497 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.840.498 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.840.498 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.840.499 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.840.500 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.840.500 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.840.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.840.507 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.840.508 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.840.509 I llm_load_print_meta: max token length = 93
0.00.936.554 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.942.691 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.700 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.700 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.701 I llama_new_context_with_model: n_batch       = 2048
0.00.942.701 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.701 I llama_new_context_with_model: flash_attn    = 0
0.00.942.706 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.707 I llama_new_context_with_model: freq_scale    = 1
0.00.942.707 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.568 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.617 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.743 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.338 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.342 I llama_new_context_with_model: graph nodes  = 601
0.00.961.343 I llama_new_context_with_model: graph splits = 1
0.00.961.366 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.461 I main: llama threadpool init, n_threads = 4
0.01.571.478 I 
0.01.571.590 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.571.594 I 
0.01.571.831 I sampler seed: 4189552488
0.01.571.846 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.855 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.859 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.859 I 
 increably! 😄 [end of text]


0.03.704.298 I llama_perf_sampler_print:    sampling time =       7.75 ms /     6 runs   (    1.29 ms per token,   774.09 tokens per second)
0.03.704.301 I llama_perf_context_print:        load time =    1570.52 ms
0.03.704.302 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.704.316 I llama_perf_context_print:        eval time =    2117.52 ms /     5 runs   (  423.50 ms per token,     2.36 tokens per second)
0.03.704.317 I llama_perf_context_print:       total time =    2132.85 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.023.463 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.472 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.565 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.580 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.587 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.593 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.595 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.596 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.597 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.599 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.609 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.610 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.611 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.612 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.614 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.710 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.930 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.891 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.901 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.902 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.904 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.905 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.906 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.908 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.912 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.914 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.915 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.916 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.918 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.927 I llama_model_loader: - type  f32:   37 tensors
0.00.352.929 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.440 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.585 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.655 I llm_load_vocab: special tokens cache size = 5
0.00.850.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.496 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.500 I llm_load_print_meta: arch             = gemma
0.00.850.501 I llm_load_print_meta: vocab type       = SPM
0.00.850.502 I llm_load_print_meta: n_vocab          = 256000
0.00.850.504 I llm_load_print_meta: n_merges         = 0
0.00.850.505 I llm_load_print_meta: vocab_only       = 0
0.00.850.505 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.505 I llm_load_print_meta: n_embd           = 2048
0.00.850.506 I llm_load_print_meta: n_layer          = 18
0.00.850.571 I llm_load_print_meta: n_head           = 8
0.00.850.582 I llm_load_print_meta: n_head_kv        = 1
0.00.850.582 I llm_load_print_meta: n_rot            = 256
0.00.850.584 I llm_load_print_meta: n_swa            = 0
0.00.850.585 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.594 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.600 I llm_load_print_meta: n_gqa            = 8
0.00.850.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.612 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.613 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.614 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.615 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.615 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.615 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.621 I llm_load_print_meta: n_ff             = 16384
0.00.850.622 I llm_load_print_meta: n_expert         = 0
0.00.850.622 I llm_load_print_meta: n_expert_used    = 0
0.00.850.622 I llm_load_print_meta: causal attn      = 1
0.00.850.623 I llm_load_print_meta: pooling type     = 0
0.00.850.624 I llm_load_print_meta: rope type        = 2
0.00.850.624 I llm_load_print_meta: rope scaling     = linear
0.00.850.626 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.627 I llm_load_print_meta: freq_scale_train = 1
0.00.850.628 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.628 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.628 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.629 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.629 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.642 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.642 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.643 I llm_load_print_meta: model type       = 2B
0.00.850.645 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.646 I llm_load_print_meta: model params     = 2.51 B
0.00.850.656 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.658 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.659 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.668 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.669 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.669 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.670 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.676 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.678 I llm_load_print_meta: max token length = 93
0.00.928.215 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.928.226 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.928.227 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.928.228 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.928.228 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.928.229 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.934.131 I llama_new_context_with_model: n_seq_max     = 1
0.00.934.139 I llama_new_context_with_model: n_ctx         = 4096
0.00.934.139 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.934.139 I llama_new_context_with_model: n_batch       = 2048
0.00.934.140 I llama_new_context_with_model: n_ubatch      = 512
0.00.934.140 I llama_new_context_with_model: flash_attn    = 0
0.00.934.144 I llama_new_context_with_model: freq_base     = 10000.0
0.00.934.144 I llama_new_context_with_model: freq_scale    = 1
0.00.934.145 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.949.386 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.949.427 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.949.556 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.952.105 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.952.109 I llama_new_context_with_model: graph nodes  = 601
0.00.952.109 I llama_new_context_with_model: graph splits = 1
0.00.952.133 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.565.516 I main: llama threadpool init, n_threads = 4
0.01.565.533 I 
0.01.565.651 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.565.654 I 
0.01.565.896 I sampler seed: 730361938
0.01.565.910 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.565.920 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.565.921 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.565.921 I 
 seconal, 2023.

**Title: The Power of Community: Building Connections and Strengthening Relationships**

**Introduction:**

Community is a

0.15.284.217 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.60 tokens per second)
0.15.284.220 I llama_perf_context_print:        load time =    1564.57 ms
0.15.284.221 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.284.223 I llama_perf_context_print:        eval time =   13629.30 ms /    32 runs   (  425.92 ms per token,     2.35 tokens per second)
0.15.284.224 I llama_perf_context_print:       total time =   13718.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.023.434 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.445 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.534 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.547 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.548 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.554 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.558 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.559 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.561 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.562 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.564 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.570 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.571 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.573 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.575 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.279 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.174 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.930 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.942 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.944 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.946 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.947 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.952 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.953 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.956 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.350.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.966 I llama_model_loader: - type  f32:   37 tensors
0.00.350.968 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.317 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.415 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.395 I llm_load_vocab: special tokens cache size = 5
0.00.822.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.822.684 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.822.685 I llm_load_print_meta: arch             = gemma
0.00.822.686 I llm_load_print_meta: vocab type       = SPM
0.00.822.686 I llm_load_print_meta: n_vocab          = 256000
0.00.822.688 I llm_load_print_meta: n_merges         = 0
0.00.822.689 I llm_load_print_meta: vocab_only       = 0
0.00.822.689 I llm_load_print_meta: n_ctx_train      = 8192
0.00.822.690 I llm_load_print_meta: n_embd           = 2048
0.00.822.690 I llm_load_print_meta: n_layer          = 18
0.00.822.756 I llm_load_print_meta: n_head           = 8
0.00.822.762 I llm_load_print_meta: n_head_kv        = 1
0.00.822.764 I llm_load_print_meta: n_rot            = 256
0.00.822.765 I llm_load_print_meta: n_swa            = 0
0.00.822.766 I llm_load_print_meta: n_embd_head_k    = 256
0.00.822.779 I llm_load_print_meta: n_embd_head_v    = 256
0.00.822.784 I llm_load_print_meta: n_gqa            = 8
0.00.822.789 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.822.794 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.822.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.822.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.822.798 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.822.799 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.822.799 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.822.804 I llm_load_print_meta: n_ff             = 16384
0.00.822.805 I llm_load_print_meta: n_expert         = 0
0.00.822.805 I llm_load_print_meta: n_expert_used    = 0
0.00.822.806 I llm_load_print_meta: causal attn      = 1
0.00.822.806 I llm_load_print_meta: pooling type     = 0
0.00.822.807 I llm_load_print_meta: rope type        = 2
0.00.822.808 I llm_load_print_meta: rope scaling     = linear
0.00.822.809 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.822.810 I llm_load_print_meta: freq_scale_train = 1
0.00.822.810 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.822.811 I llm_load_print_meta: rope_finetuned   = unknown
0.00.822.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.822.812 I llm_load_print_meta: ssm_d_inner      = 0
0.00.822.812 I llm_load_print_meta: ssm_d_state      = 0
0.00.822.812 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.822.825 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.822.826 I llm_load_print_meta: model type       = 2B
0.00.822.828 I llm_load_print_meta: model ftype      = Q8_0
0.00.822.829 I llm_load_print_meta: model params     = 2.51 B
0.00.822.838 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.822.838 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.822.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.822.852 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.822.853 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.822.853 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.822.853 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.822.854 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.822.860 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.822.861 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.822.862 I llm_load_print_meta: max token length = 93
0.00.895.846 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.895.858 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.902.061 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.070 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.070 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.070 I llama_new_context_with_model: n_batch       = 2048
0.00.902.071 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.072 I llama_new_context_with_model: flash_attn    = 0
0.00.902.075 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.076 I llama_new_context_with_model: freq_scale    = 1
0.00.902.077 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.918.202 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.918.247 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.918.372 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.921.037 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.921.042 I llama_new_context_with_model: graph nodes  = 601
0.00.921.042 I llama_new_context_with_model: graph splits = 1
0.00.921.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.541.643 I main: llama threadpool init, n_threads = 4
0.01.541.658 I 
0.01.541.775 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.541.778 I 
0.01.542.019 I sampler seed: 119891667
0.01.542.034 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.542.043 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.542.047 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.542.047 I 
 increasities, a concept developed to illustrate the tension between the preservation of privacy and the need for transparency.

**Key features of the increasities concept:**



0.15.177.548 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   672.00 tokens per second)
0.15.177.552 I llama_perf_context_print:        load time =    1540.67 ms
0.15.177.554 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.177.556 I llama_perf_context_print:        eval time =   13546.82 ms /    32 runs   (  423.34 ms per token,     2.36 tokens per second)
0.15.177.557 I llama_perf_context_print:       total time =   13635.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.774s
user	2m37.066s
sys	0m9.397s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4213 (6c595676)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186302.08 ms
main:    total time = 186302.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.764 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.773 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.867 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.880 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.882 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.888 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.892 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.893 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.895 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.896 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.897 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.910 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.914 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.915 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.014 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.874 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.601 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.611 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.612 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.613 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.615 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.616 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.618 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.622 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.623 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.625 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.626 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.628 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.635 I llama_model_loader: - type  f32:   37 tensors
0.00.350.638 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.639 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.017 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.922 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.962 I llm_load_vocab: special tokens cache size = 5
0.00.826.551 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.626 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.627 I llm_load_print_meta: arch             = gemma
0.00.826.628 I llm_load_print_meta: vocab type       = SPM
0.00.826.629 I llm_load_print_meta: n_vocab          = 256000
0.00.826.631 I llm_load_print_meta: n_merges         = 0
0.00.826.631 I llm_load_print_meta: vocab_only       = 0
0.00.826.632 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.632 I llm_load_print_meta: n_embd           = 2048
0.00.826.633 I llm_load_print_meta: n_layer          = 18
0.00.826.698 I llm_load_print_meta: n_head           = 8
0.00.826.706 I llm_load_print_meta: n_head_kv        = 1
0.00.826.708 I llm_load_print_meta: n_rot            = 256
0.00.826.708 I llm_load_print_meta: n_swa            = 0
0.00.826.709 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.715 I llm_load_print_meta: n_gqa            = 8
0.00.826.720 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.725 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.726 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.732 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.732 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.733 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.741 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.746 I llm_load_print_meta: n_ff             = 16384
0.00.826.747 I llm_load_print_meta: n_expert         = 0
0.00.826.760 I llm_load_print_meta: n_expert_used    = 0
0.00.826.764 I llm_load_print_meta: causal attn      = 1
0.00.826.764 I llm_load_print_meta: pooling type     = 0
0.00.826.765 I llm_load_print_meta: rope type        = 2
0.00.826.765 I llm_load_print_meta: rope scaling     = linear
0.00.826.767 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.767 I llm_load_print_meta: freq_scale_train = 1
0.00.826.768 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.768 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.768 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.780 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.782 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.783 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.783 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.784 I llm_load_print_meta: model type       = 2B
0.00.826.785 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.826.786 I llm_load_print_meta: model params     = 2.51 B
0.00.826.795 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.826.795 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.797 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.798 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.798 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.798 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.799 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.800 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.806 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.807 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.808 I llm_load_print_meta: max token length = 93
0.00.888.992 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.889.001 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.889.002 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.889.002 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.889.003 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.889.004 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.894.924 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.930 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.930 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.930 I llama_new_context_with_model: n_batch       = 2048
0.00.894.931 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.931 I llama_new_context_with_model: flash_attn    = 0
0.00.894.934 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.935 I llama_new_context_with_model: freq_scale    = 1
0.00.894.936 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.910.035 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.910.159 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.716 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.720 I llama_new_context_with_model: graph nodes  = 601
0.00.912.721 I llama_new_context_with_model: graph splits = 1
0.00.912.743 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.494.413 I main: llama threadpool init, n_threads = 4
0.01.494.429 I 
0.01.494.546 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.494.549 I 
0.01.494.784 I sampler seed: 1992846311
0.01.494.798 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.494.809 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.494.812 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.494.813 I 
 squaRED FOR LIFE!

The phrase is intended to convey that life is precious and should be cherished.

**Interpretation:**

* The phrase encourages people to

0.12.618.025 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.26 tokens per second)
0.12.618.041 I llama_perf_context_print:        load time =    1493.48 ms
0.12.618.043 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.618.045 I llama_perf_context_print:        eval time =   11034.37 ms /    32 runs   (  344.82 ms per token,     2.90 tokens per second)
0.12.618.046 I llama_perf_context_print:       total time =   11123.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4213 (6c595676)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186273.15 ms
main:    total time = 186273.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.925 I main: llama backend init
0.00.000.934 I main: load the model and apply lora adapter, if any
0.00.023.039 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.345 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.359 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.361 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.369 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.370 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.372 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.373 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.374 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.389 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.391 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.392 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.059 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.815 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.635 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.644 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.645 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.646 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.648 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.649 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.651 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.655 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.656 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.665 I llama_model_loader: - type  f32:   37 tensors
0.00.350.667 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.668 I llama_model_loader: - type q6_K:   19 tensors
0.00.561.211 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.643 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.561 I llm_load_vocab: special tokens cache size = 5
0.00.823.388 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.823.460 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.823.461 I llm_load_print_meta: arch             = gemma
0.00.823.462 I llm_load_print_meta: vocab type       = SPM
0.00.823.462 I llm_load_print_meta: n_vocab          = 256000
0.00.823.465 I llm_load_print_meta: n_merges         = 0
0.00.823.466 I llm_load_print_meta: vocab_only       = 0
0.00.823.466 I llm_load_print_meta: n_ctx_train      = 8192
0.00.823.466 I llm_load_print_meta: n_embd           = 2048
0.00.823.467 I llm_load_print_meta: n_layer          = 18
0.00.823.531 I llm_load_print_meta: n_head           = 8
0.00.823.538 I llm_load_print_meta: n_head_kv        = 1
0.00.823.538 I llm_load_print_meta: n_rot            = 256
0.00.823.539 I llm_load_print_meta: n_swa            = 0
0.00.823.539 I llm_load_print_meta: n_embd_head_k    = 256
0.00.823.539 I llm_load_print_meta: n_embd_head_v    = 256
0.00.823.544 I llm_load_print_meta: n_gqa            = 8
0.00.823.549 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.823.554 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.823.556 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.823.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.558 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.564 I llm_load_print_meta: n_ff             = 16384
0.00.823.564 I llm_load_print_meta: n_expert         = 0
0.00.823.564 I llm_load_print_meta: n_expert_used    = 0
0.00.823.565 I llm_load_print_meta: causal attn      = 1
0.00.823.565 I llm_load_print_meta: pooling type     = 0
0.00.823.566 I llm_load_print_meta: rope type        = 2
0.00.823.566 I llm_load_print_meta: rope scaling     = linear
0.00.823.567 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.568 I llm_load_print_meta: freq_scale_train = 1
0.00.823.568 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.569 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.570 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.570 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.570 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.571 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.571 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.572 I llm_load_print_meta: model type       = 2B
0.00.823.573 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.823.573 I llm_load_print_meta: model params     = 2.51 B
0.00.823.583 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.823.583 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.584 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.584 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.585 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.587 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.593 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.594 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.595 I llm_load_print_meta: max token length = 93
0.00.882.495 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.888.163 I llama_new_context_with_model: n_seq_max     = 1
0.00.888.169 I llama_new_context_with_model: n_ctx         = 4096
0.00.888.169 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.888.170 I llama_new_context_with_model: n_batch       = 2048
0.00.888.170 I llama_new_context_with_model: n_ubatch      = 512
0.00.888.171 I llama_new_context_with_model: flash_attn    = 0
0.00.888.173 I llama_new_context_with_model: freq_base     = 10000.0
0.00.888.174 I llama_new_context_with_model: freq_scale    = 1
0.00.888.175 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.902.956 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.902.999 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.903.128 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.905.675 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.905.679 I llama_new_context_with_model: graph nodes  = 601
0.00.905.680 I llama_new_context_with_model: graph splits = 1
0.00.905.702 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.487.462 I main: llama threadpool init, n_threads = 4
0.01.487.477 I 
0.01.487.589 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.487.593 I 
0.01.487.830 I sampler seed: 4089173124
0.01.487.845 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.487.855 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.487.858 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.487.859 I 
 effe

I am unable to generate a response that includes sexually suggestive or inappropriate content. My purpose is to assist with tasks and provide information in a safe and responsible

0.12.573.066 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.32 tokens per second)
0.12.573.069 I llama_perf_context_print:        load time =    1486.41 ms
0.12.573.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.573.085 I llama_perf_context_print:        eval time =   10996.92 ms /    32 runs   (  343.65 ms per token,     2.91 tokens per second)
0.12.573.087 I llama_perf_context_print:       total time =   11085.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.649s
user	46m42.348s
sys	0m6.368s
