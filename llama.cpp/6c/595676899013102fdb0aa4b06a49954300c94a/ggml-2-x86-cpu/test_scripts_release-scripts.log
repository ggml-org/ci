+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.605 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.825 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.021.649 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.659 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.667 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.675 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.679 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.683 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.683 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.684 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.685 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.685 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.686 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.690 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.690 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.691 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.691 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.692 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.349 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.581 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.462 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.469 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.470 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.471 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.472 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.472 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.473 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.476 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.477 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.478 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.479 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.480 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.483 I llama_model_loader: - type  f32:   37 tensors
0.00.132.484 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.389 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.250 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.855 I llm_load_vocab: special tokens cache size = 5
0.00.272.127 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.142 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.143 I llm_load_print_meta: arch             = gemma
0.00.272.143 I llm_load_print_meta: vocab type       = SPM
0.00.272.144 I llm_load_print_meta: n_vocab          = 256000
0.00.272.144 I llm_load_print_meta: n_merges         = 0
0.00.272.144 I llm_load_print_meta: vocab_only       = 0
0.00.272.145 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.145 I llm_load_print_meta: n_embd           = 2048
0.00.272.145 I llm_load_print_meta: n_layer          = 18
0.00.272.157 I llm_load_print_meta: n_head           = 8
0.00.272.158 I llm_load_print_meta: n_head_kv        = 1
0.00.272.159 I llm_load_print_meta: n_rot            = 256
0.00.272.159 I llm_load_print_meta: n_swa            = 0
0.00.272.159 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.160 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.161 I llm_load_print_meta: n_gqa            = 8
0.00.272.162 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.163 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.164 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.166 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.166 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.166 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.167 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.168 I llm_load_print_meta: n_ff             = 16384
0.00.272.169 I llm_load_print_meta: n_expert         = 0
0.00.272.169 I llm_load_print_meta: n_expert_used    = 0
0.00.272.169 I llm_load_print_meta: causal attn      = 1
0.00.272.170 I llm_load_print_meta: pooling type     = 0
0.00.272.170 I llm_load_print_meta: rope type        = 2
0.00.272.171 I llm_load_print_meta: rope scaling     = linear
0.00.272.173 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.174 I llm_load_print_meta: freq_scale_train = 1
0.00.272.174 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.175 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.176 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.176 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.176 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.177 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.177 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.177 I llm_load_print_meta: model type       = 2B
0.00.272.178 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.179 I llm_load_print_meta: model params     = 2.51 B
0.00.272.180 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.181 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.181 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.182 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.182 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.183 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.183 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.184 I llm_load_print_meta: max token length = 93
0.00.372.411 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.417 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.418 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.419 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.419 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.420 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.774 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.780 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.780 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.781 I llama_new_context_with_model: n_batch       = 2048
0.00.377.781 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.782 I llama_new_context_with_model: flash_attn    = 0
0.00.377.784 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.785 I llama_new_context_with_model: freq_scale    = 1
0.00.377.786 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.024 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.038 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.123 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.414 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.420 I llama_new_context_with_model: graph nodes  = 601
0.00.393.421 I llama_new_context_with_model: graph splits = 1
0.00.393.423 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.366 I main: llama threadpool init, n_threads = 4
0.00.478.381 I 
0.00.478.453 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.478.456 I 
0.00.478.496 I sampler seed: 950106337
0.00.478.506 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.517 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.521 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.521 I 
 increasements. [end of text]


0.00.764.477 I llama_perf_sampler_print:    sampling time =       0.66 ms /     5 runs   (    0.13 ms per token,  7530.12 tokens per second)
0.00.764.479 I llama_perf_context_print:        load time =     477.52 ms
0.00.764.480 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.764.482 I llama_perf_context_print:        eval time =     282.52 ms /     4 runs   (   70.63 ms per token,    14.16 tokens per second)
0.00.764.483 I llama_perf_context_print:       total time =     286.12 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.785 I main: load the model and apply lora adapter, if any
0.00.021.019 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.034 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.045 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.049 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.054 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.055 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.056 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.057 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.059 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.059 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.065 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.075 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.076 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.077 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.065 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.087 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.094 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.095 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.095 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.096 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.097 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.098 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.101 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.102 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.103 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.103 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.104 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.109 I llama_model_loader: - type  f32:   37 tensors
0.00.133.110 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.158 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.845 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.447 I llm_load_vocab: special tokens cache size = 5
0.00.266.664 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.682 I llm_load_print_meta: arch             = gemma
0.00.266.682 I llm_load_print_meta: vocab type       = SPM
0.00.266.683 I llm_load_print_meta: n_vocab          = 256000
0.00.266.683 I llm_load_print_meta: n_merges         = 0
0.00.266.684 I llm_load_print_meta: vocab_only       = 0
0.00.266.684 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.684 I llm_load_print_meta: n_embd           = 2048
0.00.266.685 I llm_load_print_meta: n_layer          = 18
0.00.266.695 I llm_load_print_meta: n_head           = 8
0.00.266.697 I llm_load_print_meta: n_head_kv        = 1
0.00.266.697 I llm_load_print_meta: n_rot            = 256
0.00.266.697 I llm_load_print_meta: n_swa            = 0
0.00.266.697 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.698 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.699 I llm_load_print_meta: n_gqa            = 8
0.00.266.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.700 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.701 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.702 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.703 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.703 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.704 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.705 I llm_load_print_meta: n_ff             = 16384
0.00.266.705 I llm_load_print_meta: n_expert         = 0
0.00.266.705 I llm_load_print_meta: n_expert_used    = 0
0.00.266.705 I llm_load_print_meta: causal attn      = 1
0.00.266.706 I llm_load_print_meta: pooling type     = 0
0.00.266.706 I llm_load_print_meta: rope type        = 2
0.00.266.707 I llm_load_print_meta: rope scaling     = linear
0.00.266.709 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.710 I llm_load_print_meta: freq_scale_train = 1
0.00.266.711 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.712 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.714 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.714 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.715 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.716 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.716 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.717 I llm_load_print_meta: model type       = 2B
0.00.266.718 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.719 I llm_load_print_meta: model params     = 2.51 B
0.00.266.720 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.721 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.721 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.722 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.722 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.723 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.724 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.725 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.725 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.726 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.727 I llm_load_print_meta: max token length = 93
0.00.362.143 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.367.346 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.352 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.353 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.353 I llama_new_context_with_model: n_batch       = 2048
0.00.367.354 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.355 I llama_new_context_with_model: flash_attn    = 0
0.00.367.358 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.358 I llama_new_context_with_model: freq_scale    = 1
0.00.367.359 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.058 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.072 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.161 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.420 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.427 I llama_new_context_with_model: graph nodes  = 601
0.00.383.427 I llama_new_context_with_model: graph splits = 1
0.00.383.429 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.930 I main: llama threadpool init, n_threads = 4
0.00.463.943 I 
0.00.464.031 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.036 I 
0.00.464.089 I sampler seed: 1617867533
0.00.464.102 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.106 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.108 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.108 I 
 maneuvously.

I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.01.824.298 I llama_perf_sampler_print:    sampling time =       3.04 ms /    21 runs   (    0.14 ms per token,  6901.08 tokens per second)
0.01.824.300 I llama_perf_context_print:        load time =     463.12 ms
0.01.824.301 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.824.303 I llama_perf_context_print:        eval time =    1347.73 ms /    20 runs   (   67.39 ms per token,    14.84 tokens per second)
0.01.824.304 I llama_perf_context_print:       total time =    1360.38 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.538 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.239 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.251 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.259 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.264 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.265 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.269 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.270 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.271 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.271 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.505 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.809 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.496 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.505 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.506 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.507 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.510 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.511 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.515 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.517 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.521 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.522 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.137.523 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.528 I llama_model_loader: - type  f32:   37 tensors
0.00.137.530 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.797 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.425 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.020 I llm_load_vocab: special tokens cache size = 5
0.00.280.366 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.384 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.385 I llm_load_print_meta: arch             = gemma
0.00.280.386 I llm_load_print_meta: vocab type       = SPM
0.00.280.398 I llm_load_print_meta: n_vocab          = 256000
0.00.280.399 I llm_load_print_meta: n_merges         = 0
0.00.280.400 I llm_load_print_meta: vocab_only       = 0
0.00.280.400 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.400 I llm_load_print_meta: n_embd           = 2048
0.00.280.401 I llm_load_print_meta: n_layer          = 18
0.00.280.414 I llm_load_print_meta: n_head           = 8
0.00.280.415 I llm_load_print_meta: n_head_kv        = 1
0.00.280.415 I llm_load_print_meta: n_rot            = 256
0.00.280.416 I llm_load_print_meta: n_swa            = 0
0.00.280.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.418 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.419 I llm_load_print_meta: n_gqa            = 8
0.00.280.420 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.424 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.427 I llm_load_print_meta: n_ff             = 16384
0.00.280.428 I llm_load_print_meta: n_expert         = 0
0.00.280.428 I llm_load_print_meta: n_expert_used    = 0
0.00.280.428 I llm_load_print_meta: causal attn      = 1
0.00.280.428 I llm_load_print_meta: pooling type     = 0
0.00.280.429 I llm_load_print_meta: rope type        = 2
0.00.280.429 I llm_load_print_meta: rope scaling     = linear
0.00.280.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.431 I llm_load_print_meta: freq_scale_train = 1
0.00.280.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.433 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.433 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.434 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.434 I llm_load_print_meta: model type       = 2B
0.00.280.435 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.436 I llm_load_print_meta: model params     = 2.51 B
0.00.280.437 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.438 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.440 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.441 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.441 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.441 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.442 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.442 I llm_load_print_meta: max token length = 93
0.00.355.898 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.355.904 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.905 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.355.906 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.355.906 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.907 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.361.020 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.028 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.028 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.028 I llama_new_context_with_model: n_batch       = 2048
0.00.361.029 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.029 I llama_new_context_with_model: flash_attn    = 0
0.00.361.032 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.032 I llama_new_context_with_model: freq_scale    = 1
0.00.361.034 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.862 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.877 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.969 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.208 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.213 I llama_new_context_with_model: graph nodes  = 601
0.00.377.214 I llama_new_context_with_model: graph splits = 1
0.00.377.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.174 I main: llama threadpool init, n_threads = 4
0.00.469.191 I 
0.00.469.287 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.291 I 
0.00.469.346 I sampler seed: 1914226066
0.00.469.358 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.361 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.362 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.364 I 
 increasively, unaware that her actions were having unintended consequences.

**What is the main theme of the story?**

a) The importance of consequences


0.02.718.894 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6498.62 tokens per second)
0.02.718.896 I llama_perf_context_print:        load time =     468.38 ms
0.02.718.898 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.718.899 I llama_perf_context_print:        eval time =    2230.72 ms /    32 runs   (   69.71 ms per token,    14.35 tokens per second)
0.02.718.900 I llama_perf_context_print:       total time =    2249.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.173 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.397 I main: llama backend init
0.00.000.404 I main: load the model and apply lora adapter, if any
0.00.020.696 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.703 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.711 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.717 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.718 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.724 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.729 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.730 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.731 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.731 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.732 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.737 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.738 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.738 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.739 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.740 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.353 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.052 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.059 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.059 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.060 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.060 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.061 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.062 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.064 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.065 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.066 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.067 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.068 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.072 I llama_model_loader: - type  f32:   37 tensors
0.00.131.074 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.892 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.028 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.738 I llm_load_vocab: special tokens cache size = 5
0.00.268.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.145 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.145 I llm_load_print_meta: arch             = gemma
0.00.268.146 I llm_load_print_meta: vocab type       = SPM
0.00.268.147 I llm_load_print_meta: n_vocab          = 256000
0.00.268.147 I llm_load_print_meta: n_merges         = 0
0.00.268.147 I llm_load_print_meta: vocab_only       = 0
0.00.268.148 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.148 I llm_load_print_meta: n_embd           = 2048
0.00.268.148 I llm_load_print_meta: n_layer          = 18
0.00.268.160 I llm_load_print_meta: n_head           = 8
0.00.268.161 I llm_load_print_meta: n_head_kv        = 1
0.00.268.161 I llm_load_print_meta: n_rot            = 256
0.00.268.161 I llm_load_print_meta: n_swa            = 0
0.00.268.162 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.162 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.163 I llm_load_print_meta: n_gqa            = 8
0.00.268.164 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.165 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.167 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.167 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.168 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.168 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.169 I llm_load_print_meta: n_ff             = 16384
0.00.268.170 I llm_load_print_meta: n_expert         = 0
0.00.268.170 I llm_load_print_meta: n_expert_used    = 0
0.00.268.170 I llm_load_print_meta: causal attn      = 1
0.00.268.170 I llm_load_print_meta: pooling type     = 0
0.00.268.171 I llm_load_print_meta: rope type        = 2
0.00.268.171 I llm_load_print_meta: rope scaling     = linear
0.00.268.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.173 I llm_load_print_meta: freq_scale_train = 1
0.00.268.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.174 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.174 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.174 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.175 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.175 I llm_load_print_meta: model type       = 2B
0.00.268.176 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.177 I llm_load_print_meta: model params     = 2.51 B
0.00.268.178 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.178 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.178 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.179 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.179 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.181 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.181 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.182 I llm_load_print_meta: max token length = 93
0.00.339.230 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.239 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.384 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.390 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.390 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.390 I llama_new_context_with_model: n_batch       = 2048
0.00.344.391 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.391 I llama_new_context_with_model: flash_attn    = 0
0.00.344.394 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.395 I llama_new_context_with_model: freq_scale    = 1
0.00.344.396 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.981 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.995 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.398 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.402 I llama_new_context_with_model: graph nodes  = 601
0.00.360.403 I llama_new_context_with_model: graph splits = 1
0.00.360.404 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.254 I main: llama threadpool init, n_threads = 4
0.00.449.271 I 
0.00.449.354 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.449.357 I 
0.00.449.409 I sampler seed: 3340657136
0.00.449.421 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.424 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.425 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.427 I 
 increasively.

I'm so excited to finally meet you!

I've been looking forward to this moment for so long.

I'm

0.02.849.908 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6666.67 tokens per second)
0.02.849.910 I llama_perf_context_print:        load time =     448.83 ms
0.02.849.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.849.913 I llama_perf_context_print:        eval time =    2381.17 ms /    32 runs   (   74.41 ms per token,    13.44 tokens per second)
0.02.849.914 I llama_perf_context_print:       total time =    2400.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.651s
user	0m28.045s
sys	0m9.422s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4213 (6c595676)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40414.00 ms
main:    total time = 40414.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.022.262 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.270 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.278 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.283 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.284 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.288 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.289 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.290 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.291 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.292 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.295 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.296 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.296 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.297 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.687 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.577 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.585 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.585 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.586 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.587 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.587 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.588 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.591 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.592 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.593 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.593 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.594 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.598 I llama_model_loader: - type  f32:   37 tensors
0.00.132.599 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.599 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.605 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.403 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.009 I llm_load_vocab: special tokens cache size = 5
0.00.281.118 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.134 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.135 I llm_load_print_meta: arch             = gemma
0.00.281.135 I llm_load_print_meta: vocab type       = SPM
0.00.281.136 I llm_load_print_meta: n_vocab          = 256000
0.00.281.136 I llm_load_print_meta: n_merges         = 0
0.00.281.137 I llm_load_print_meta: vocab_only       = 0
0.00.281.137 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.137 I llm_load_print_meta: n_embd           = 2048
0.00.281.138 I llm_load_print_meta: n_layer          = 18
0.00.281.150 I llm_load_print_meta: n_head           = 8
0.00.281.151 I llm_load_print_meta: n_head_kv        = 1
0.00.281.151 I llm_load_print_meta: n_rot            = 256
0.00.281.151 I llm_load_print_meta: n_swa            = 0
0.00.281.152 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.152 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.153 I llm_load_print_meta: n_gqa            = 8
0.00.281.154 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.155 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.156 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.158 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.159 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.160 I llm_load_print_meta: n_ff             = 16384
0.00.281.160 I llm_load_print_meta: n_expert         = 0
0.00.281.160 I llm_load_print_meta: n_expert_used    = 0
0.00.281.161 I llm_load_print_meta: causal attn      = 1
0.00.281.161 I llm_load_print_meta: pooling type     = 0
0.00.281.161 I llm_load_print_meta: rope type        = 2
0.00.281.162 I llm_load_print_meta: rope scaling     = linear
0.00.281.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.163 I llm_load_print_meta: freq_scale_train = 1
0.00.281.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.164 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.164 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.165 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.165 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.165 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.166 I llm_load_print_meta: model type       = 2B
0.00.281.166 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.167 I llm_load_print_meta: model params     = 2.51 B
0.00.281.168 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.168 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.169 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.169 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.169 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.170 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.170 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.171 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.171 I llm_load_print_meta: max token length = 93
0.00.341.139 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.341.145 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.341.146 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.341.146 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.341.147 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.341.148 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.346.285 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.291 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.292 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.292 I llama_new_context_with_model: n_batch       = 2048
0.00.346.292 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.293 I llama_new_context_with_model: flash_attn    = 0
0.00.346.295 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.296 I llama_new_context_with_model: freq_scale    = 1
0.00.346.297 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.691 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.718 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.820 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.123 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.130 I llama_new_context_with_model: graph nodes  = 601
0.00.363.130 I llama_new_context_with_model: graph splits = 1
0.00.363.132 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.829 I main: llama threadpool init, n_threads = 4
0.00.437.844 I 
0.00.437.916 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.437.920 I 
0.00.437.962 I sampler seed: 101476518
0.00.437.973 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.989 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.989 I 
 increasities, and other forms of nonverbal communication can be powerful tools for conveying information and fostering understanding.

**True or False?**

True.

**

0.02.004.238 I llama_perf_sampler_print:    sampling time =       5.21 ms /    33 runs   (    0.16 ms per token,  6335.19 tokens per second)
0.02.004.241 I llama_perf_context_print:        load time =     437.07 ms
0.02.004.242 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.004.244 I llama_perf_context_print:        eval time =    1547.33 ms /    32 runs   (   48.35 ms per token,    20.68 tokens per second)
0.02.004.244 I llama_perf_context_print:       total time =    1566.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4213 (6c595676)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40179.28 ms
main:    total time = 40179.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.560 I build: 4213 (6c595676) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.163 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.188 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.196 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.197 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.197 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.198 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.199 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.622 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.914 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.873 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.882 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.883 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.884 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.885 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.886 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.894 I llama_model_loader: - type  f32:   37 tensors
0.00.131.895 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.896 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.101 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.565 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.172 I llm_load_vocab: special tokens cache size = 5
0.00.271.327 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.344 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.345 I llm_load_print_meta: arch             = gemma
0.00.271.346 I llm_load_print_meta: vocab type       = SPM
0.00.271.347 I llm_load_print_meta: n_vocab          = 256000
0.00.271.347 I llm_load_print_meta: n_merges         = 0
0.00.271.347 I llm_load_print_meta: vocab_only       = 0
0.00.271.348 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.348 I llm_load_print_meta: n_embd           = 2048
0.00.271.348 I llm_load_print_meta: n_layer          = 18
0.00.271.360 I llm_load_print_meta: n_head           = 8
0.00.271.361 I llm_load_print_meta: n_head_kv        = 1
0.00.271.361 I llm_load_print_meta: n_rot            = 256
0.00.271.361 I llm_load_print_meta: n_swa            = 0
0.00.271.361 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.362 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.363 I llm_load_print_meta: n_gqa            = 8
0.00.271.364 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.365 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.366 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.367 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.367 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.368 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.368 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.369 I llm_load_print_meta: n_ff             = 16384
0.00.271.369 I llm_load_print_meta: n_expert         = 0
0.00.271.369 I llm_load_print_meta: n_expert_used    = 0
0.00.271.369 I llm_load_print_meta: causal attn      = 1
0.00.271.369 I llm_load_print_meta: pooling type     = 0
0.00.271.370 I llm_load_print_meta: rope type        = 2
0.00.271.370 I llm_load_print_meta: rope scaling     = linear
0.00.271.372 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.373 I llm_load_print_meta: freq_scale_train = 1
0.00.271.373 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.373 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.374 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.374 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.374 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.374 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.375 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.375 I llm_load_print_meta: model type       = 2B
0.00.271.376 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.377 I llm_load_print_meta: model params     = 2.51 B
0.00.271.377 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.378 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.378 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.378 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.379 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.379 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.380 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.380 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.380 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.381 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.381 I llm_load_print_meta: max token length = 93
0.00.329.506 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.697 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.704 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.704 I llama_new_context_with_model: n_batch       = 2048
0.00.334.705 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.705 I llama_new_context_with_model: flash_attn    = 0
0.00.334.707 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.708 I llama_new_context_with_model: freq_scale    = 1
0.00.334.709 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.129 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.145 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.452 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.458 I llama_new_context_with_model: graph nodes  = 601
0.00.351.459 I llama_new_context_with_model: graph splits = 1
0.00.351.462 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.898 I main: llama threadpool init, n_threads = 4
0.00.425.913 I 
0.00.425.986 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.425.989 I 
0.00.426.031 I sampler seed: 2778103045
0.00.426.042 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.055 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.059 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.059 I 
 squade

## Understanding the Role of Data Visualization in Business

**Data visualization** is a powerful tool that transforms raw data into compelling and informative visuals that bring

0.01.995.160 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6584.20 tokens per second)
0.01.995.162 I llama_perf_context_print:        load time =     425.12 ms
0.01.995.164 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.995.165 I llama_perf_context_print:        eval time =    1550.75 ms /    32 runs   (   48.46 ms per token,    20.64 tokens per second)
0.01.995.166 I llama_perf_context_print:       total time =    1569.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.339s
user	10m24.140s
sys	0m6.999s
