+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.604 I build: 4223 (8074ca80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.820 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.021.684 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.694 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.702 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.718 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.720 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.721 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.721 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.729 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.730 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.097 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.416 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.322 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.328 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.329 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.329 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.330 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.331 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.332 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.334 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.335 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.336 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.336 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.337 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.340 I llama_model_loader: - type  f32:   37 tensors
0.00.131.341 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.857 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.244 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.047 I llm_load_vocab: special tokens cache size = 5
0.00.286.382 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.403 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.403 I llm_load_print_meta: arch             = gemma
0.00.286.404 I llm_load_print_meta: vocab type       = SPM
0.00.286.405 I llm_load_print_meta: n_vocab          = 256000
0.00.286.406 I llm_load_print_meta: n_merges         = 0
0.00.286.406 I llm_load_print_meta: vocab_only       = 0
0.00.286.406 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.406 I llm_load_print_meta: n_embd           = 2048
0.00.286.407 I llm_load_print_meta: n_layer          = 18
0.00.286.419 I llm_load_print_meta: n_head           = 8
0.00.286.420 I llm_load_print_meta: n_head_kv        = 1
0.00.286.420 I llm_load_print_meta: n_rot            = 256
0.00.286.421 I llm_load_print_meta: n_swa            = 0
0.00.286.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.421 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.422 I llm_load_print_meta: n_gqa            = 8
0.00.286.423 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.425 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.426 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.427 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.427 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.427 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.428 I llm_load_print_meta: n_ff             = 16384
0.00.286.429 I llm_load_print_meta: n_expert         = 0
0.00.286.429 I llm_load_print_meta: n_expert_used    = 0
0.00.286.429 I llm_load_print_meta: causal attn      = 1
0.00.286.429 I llm_load_print_meta: pooling type     = 0
0.00.286.430 I llm_load_print_meta: rope type        = 2
0.00.286.430 I llm_load_print_meta: rope scaling     = linear
0.00.286.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.432 I llm_load_print_meta: freq_scale_train = 1
0.00.286.432 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.433 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.433 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.433 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.434 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.434 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.434 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.434 I llm_load_print_meta: model type       = 2B
0.00.286.435 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.436 I llm_load_print_meta: model params     = 2.51 B
0.00.286.437 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.438 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.439 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.440 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.440 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.441 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.441 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.442 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.442 I llm_load_print_meta: max token length = 93
0.00.386.945 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.386.954 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.386.955 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.386.956 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.386.956 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.386.957 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.392.235 I llama_new_context_with_model: n_seq_max     = 1
0.00.392.241 I llama_new_context_with_model: n_ctx         = 4096
0.00.392.242 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.392.242 I llama_new_context_with_model: n_batch       = 2048
0.00.392.243 I llama_new_context_with_model: n_ubatch      = 512
0.00.392.243 I llama_new_context_with_model: flash_attn    = 0
0.00.392.246 I llama_new_context_with_model: freq_base     = 10000.0
0.00.392.247 I llama_new_context_with_model: freq_scale    = 1
0.00.392.248 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.407.299 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.407.315 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.407.410 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.756 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.408.764 I llama_new_context_with_model: graph nodes  = 601
0.00.408.764 I llama_new_context_with_model: graph splits = 1
0.00.408.766 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.737 I main: llama threadpool init, n_threads = 4
0.00.495.753 I 
0.00.495.832 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.495.836 I 
0.00.495.888 I sampler seed: 2208256550
0.00.495.900 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.910 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.915 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.915 I 
 increably.

I am unable to generate a response as requested as I am unable to access external websites or specific data. [end of text]


0.02.338.916 I llama_perf_sampler_print:    sampling time =       3.92 ms /    27 runs   (    0.15 ms per token,  6891.27 tokens per second)
0.02.338.919 I llama_perf_context_print:        load time =     494.89 ms
0.02.338.921 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.338.922 I llama_perf_context_print:        eval time =    1827.02 ms /    26 runs   (   70.27 ms per token,    14.23 tokens per second)
0.02.338.923 I llama_perf_context_print:       total time =    1843.19 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.584 I build: 4223 (8074ca80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.000.789 I main: load the model and apply lora adapter, if any
0.00.021.441 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.457 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.464 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.465 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.468 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.469 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.469 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.470 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.470 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.471 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.477 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.130 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.048 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.877 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.878 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.879 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.880 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.882 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.883 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.883 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.885 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.886 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.889 I llama_model_loader: - type  f32:   37 tensors
0.00.130.890 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.814 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.397 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.043 I llm_load_vocab: special tokens cache size = 5
0.00.271.224 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.244 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.244 I llm_load_print_meta: arch             = gemma
0.00.271.245 I llm_load_print_meta: vocab type       = SPM
0.00.271.246 I llm_load_print_meta: n_vocab          = 256000
0.00.271.246 I llm_load_print_meta: n_merges         = 0
0.00.271.247 I llm_load_print_meta: vocab_only       = 0
0.00.271.247 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.247 I llm_load_print_meta: n_embd           = 2048
0.00.271.247 I llm_load_print_meta: n_layer          = 18
0.00.271.260 I llm_load_print_meta: n_head           = 8
0.00.271.261 I llm_load_print_meta: n_head_kv        = 1
0.00.271.262 I llm_load_print_meta: n_rot            = 256
0.00.271.262 I llm_load_print_meta: n_swa            = 0
0.00.271.262 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.262 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.263 I llm_load_print_meta: n_gqa            = 8
0.00.271.265 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.266 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.266 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.268 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.268 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.269 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.269 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.270 I llm_load_print_meta: n_ff             = 16384
0.00.271.270 I llm_load_print_meta: n_expert         = 0
0.00.271.270 I llm_load_print_meta: n_expert_used    = 0
0.00.271.270 I llm_load_print_meta: causal attn      = 1
0.00.271.271 I llm_load_print_meta: pooling type     = 0
0.00.271.271 I llm_load_print_meta: rope type        = 2
0.00.271.271 I llm_load_print_meta: rope scaling     = linear
0.00.271.273 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.274 I llm_load_print_meta: freq_scale_train = 1
0.00.271.274 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.274 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.275 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.275 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.275 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.275 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.276 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.276 I llm_load_print_meta: model type       = 2B
0.00.271.277 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.277 I llm_load_print_meta: model params     = 2.51 B
0.00.271.278 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.279 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.279 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.280 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.280 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.281 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.281 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.281 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.282 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.282 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.283 I llm_load_print_meta: max token length = 93
0.00.364.706 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.370.007 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.014 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.014 I llama_new_context_with_model: n_batch       = 2048
0.00.370.015 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.015 I llama_new_context_with_model: flash_attn    = 0
0.00.370.019 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.020 I llama_new_context_with_model: freq_scale    = 1
0.00.370.020 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.196 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.211 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.308 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.586 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.592 I llama_new_context_with_model: graph nodes  = 601
0.00.386.592 I llama_new_context_with_model: graph splits = 1
0.00.386.594 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.127 I main: llama threadpool init, n_threads = 4
0.00.469.142 I 
0.00.469.209 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.213 I 
0.00.469.262 I sampler seed: 3020277853
0.00.469.272 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.277 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.278 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.278 I 
 increasities as the sole basis for a strong and enduring marriage. [end of text]


0.01.440.106 I llama_perf_sampler_print:    sampling time =       2.51 ms /    15 runs   (    0.17 ms per token,  5966.59 tokens per second)
0.01.440.109 I llama_perf_context_print:        load time =     468.32 ms
0.01.440.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.440.111 I llama_perf_context_print:        eval time =     961.77 ms /    14 runs   (   68.70 ms per token,    14.56 tokens per second)
0.01.440.112 I llama_perf_context_print:       total time =     970.99 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.550 I build: 4223 (8074ca80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.782 I main: load the model and apply lora adapter, if any
0.00.021.319 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.329 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.336 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.342 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.347 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.348 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.349 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.350 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.350 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.354 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.355 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.356 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.356 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.357 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.646 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.516 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.523 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.524 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.524 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.526 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.529 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.531 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.532 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.532 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.536 I llama_model_loader: - type  f32:   37 tensors
0.00.130.537 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.119 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.416 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.167 I llm_load_vocab: special tokens cache size = 5
0.00.275.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.391 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.392 I llm_load_print_meta: arch             = gemma
0.00.275.392 I llm_load_print_meta: vocab type       = SPM
0.00.275.393 I llm_load_print_meta: n_vocab          = 256000
0.00.275.394 I llm_load_print_meta: n_merges         = 0
0.00.275.394 I llm_load_print_meta: vocab_only       = 0
0.00.275.395 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.395 I llm_load_print_meta: n_embd           = 2048
0.00.275.395 I llm_load_print_meta: n_layer          = 18
0.00.275.407 I llm_load_print_meta: n_head           = 8
0.00.275.408 I llm_load_print_meta: n_head_kv        = 1
0.00.275.409 I llm_load_print_meta: n_rot            = 256
0.00.275.409 I llm_load_print_meta: n_swa            = 0
0.00.275.409 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.410 I llm_load_print_meta: n_gqa            = 8
0.00.275.411 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.412 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.413 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.414 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.415 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.415 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.415 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.416 I llm_load_print_meta: n_ff             = 16384
0.00.275.416 I llm_load_print_meta: n_expert         = 0
0.00.275.417 I llm_load_print_meta: n_expert_used    = 0
0.00.275.417 I llm_load_print_meta: causal attn      = 1
0.00.275.417 I llm_load_print_meta: pooling type     = 0
0.00.275.417 I llm_load_print_meta: rope type        = 2
0.00.275.418 I llm_load_print_meta: rope scaling     = linear
0.00.275.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.420 I llm_load_print_meta: freq_scale_train = 1
0.00.275.420 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.421 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.422 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.422 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.422 I llm_load_print_meta: model type       = 2B
0.00.275.423 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.424 I llm_load_print_meta: model params     = 2.51 B
0.00.275.425 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.425 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.426 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.426 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.427 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.427 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.427 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.428 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.428 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.429 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.429 I llm_load_print_meta: max token length = 93
0.00.349.104 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.112 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.113 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.113 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.114 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.114 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.354.489 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.498 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.498 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.499 I llama_new_context_with_model: n_batch       = 2048
0.00.354.499 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.500 I llama_new_context_with_model: flash_attn    = 0
0.00.354.502 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.502 I llama_new_context_with_model: freq_scale    = 1
0.00.354.503 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.342 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.358 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.470 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.755 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.762 I llama_new_context_with_model: graph nodes  = 601
0.00.370.762 I llama_new_context_with_model: graph splits = 1
0.00.370.764 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.324 I main: llama threadpool init, n_threads = 4
0.00.457.340 I 
0.00.457.418 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.457.422 I 
0.00.457.475 I sampler seed: 3662849418
0.00.457.487 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.491 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.492 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.492 I 
 increasities with a passion for learning and a thirst for knowledge.

These individuals are often described as:

* Curious and inquisitive
* Highly motivated and driven

0.02.767.091 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6798.52 tokens per second)
0.02.767.093 I llama_perf_context_print:        load time =     456.52 ms
0.02.767.094 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.767.096 I llama_perf_context_print:        eval time =    2290.19 ms /    32 runs   (   71.57 ms per token,    13.97 tokens per second)
0.02.767.096 I llama_perf_context_print:       total time =    2309.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.548 I build: 4223 (8074ca80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.020.925 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.935 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.942 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.955 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.962 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.963 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.964 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.965 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.535 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.840 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.744 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.750 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.751 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.751 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.752 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.753 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.753 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.756 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.758 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.758 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.761 I llama_model_loader: - type  f32:   37 tensors
0.00.130.762 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.175 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.270 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.904 I llm_load_vocab: special tokens cache size = 5
0.00.264.820 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.837 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.837 I llm_load_print_meta: arch             = gemma
0.00.264.838 I llm_load_print_meta: vocab type       = SPM
0.00.264.839 I llm_load_print_meta: n_vocab          = 256000
0.00.264.839 I llm_load_print_meta: n_merges         = 0
0.00.264.840 I llm_load_print_meta: vocab_only       = 0
0.00.264.840 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.840 I llm_load_print_meta: n_embd           = 2048
0.00.264.840 I llm_load_print_meta: n_layer          = 18
0.00.264.852 I llm_load_print_meta: n_head           = 8
0.00.264.853 I llm_load_print_meta: n_head_kv        = 1
0.00.264.853 I llm_load_print_meta: n_rot            = 256
0.00.264.853 I llm_load_print_meta: n_swa            = 0
0.00.264.854 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.854 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.855 I llm_load_print_meta: n_gqa            = 8
0.00.264.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.857 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.858 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.859 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.860 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.860 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.861 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.862 I llm_load_print_meta: n_ff             = 16384
0.00.264.862 I llm_load_print_meta: n_expert         = 0
0.00.264.862 I llm_load_print_meta: n_expert_used    = 0
0.00.264.862 I llm_load_print_meta: causal attn      = 1
0.00.264.863 I llm_load_print_meta: pooling type     = 0
0.00.264.863 I llm_load_print_meta: rope type        = 2
0.00.264.863 I llm_load_print_meta: rope scaling     = linear
0.00.264.865 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.865 I llm_load_print_meta: freq_scale_train = 1
0.00.264.866 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.866 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.867 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.867 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.867 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.867 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.868 I llm_load_print_meta: model type       = 2B
0.00.264.869 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.869 I llm_load_print_meta: model params     = 2.51 B
0.00.264.870 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.871 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.871 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.872 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.873 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.873 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.874 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.874 I llm_load_print_meta: max token length = 93
0.00.336.275 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.281 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.332 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.338 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.338 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.338 I llama_new_context_with_model: n_batch       = 2048
0.00.341.339 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.339 I llama_new_context_with_model: flash_attn    = 0
0.00.341.342 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.342 I llama_new_context_with_model: freq_scale    = 1
0.00.341.343 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.903 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.919 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.013 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.310 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.316 I llama_new_context_with_model: graph nodes  = 601
0.00.357.317 I llama_new_context_with_model: graph splits = 1
0.00.357.318 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.567 I main: llama threadpool init, n_threads = 4
0.00.444.583 I 
0.00.444.657 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.662 I 
0.00.444.713 I sampler seed: 2933215918
0.00.444.724 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.733 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.733 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.734 I 
 increasities to this question and provide any additional information required. [end of text]


0.01.431.632 I llama_perf_sampler_print:    sampling time =       1.97 ms /    14 runs   (    0.14 ms per token,  7099.39 tokens per second)
0.01.431.634 I llama_perf_context_print:        load time =     443.79 ms
0.01.431.635 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.431.637 I llama_perf_context_print:        eval time =     978.79 ms /    13 runs   (   75.29 ms per token,    13.28 tokens per second)
0.01.431.637 I llama_perf_context_print:       total time =     987.07 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.806s
user	0m27.340s
sys	0m9.470s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4223 (8074ca80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40224.34 ms
main:    total time = 40224.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 4223 (8074ca80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.207 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.214 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.223 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.227 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.229 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.232 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.233 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.234 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.234 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.235 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.235 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.238 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.239 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.240 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.241 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.159 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.962 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.969 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.970 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.971 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.972 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.973 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.975 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.976 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.977 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.978 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.979 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.983 I llama_model_loader: - type  f32:   37 tensors
0.00.130.985 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.985 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.014 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.266 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.765 I llm_load_vocab: special tokens cache size = 5
0.00.266.558 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.578 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.578 I llm_load_print_meta: arch             = gemma
0.00.266.579 I llm_load_print_meta: vocab type       = SPM
0.00.266.580 I llm_load_print_meta: n_vocab          = 256000
0.00.266.580 I llm_load_print_meta: n_merges         = 0
0.00.266.581 I llm_load_print_meta: vocab_only       = 0
0.00.266.581 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.581 I llm_load_print_meta: n_embd           = 2048
0.00.266.581 I llm_load_print_meta: n_layer          = 18
0.00.266.593 I llm_load_print_meta: n_head           = 8
0.00.266.594 I llm_load_print_meta: n_head_kv        = 1
0.00.266.594 I llm_load_print_meta: n_rot            = 256
0.00.266.595 I llm_load_print_meta: n_swa            = 0
0.00.266.595 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.595 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.596 I llm_load_print_meta: n_gqa            = 8
0.00.266.597 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.598 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.599 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.600 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.601 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.601 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.602 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.603 I llm_load_print_meta: n_ff             = 16384
0.00.266.603 I llm_load_print_meta: n_expert         = 0
0.00.266.603 I llm_load_print_meta: n_expert_used    = 0
0.00.266.603 I llm_load_print_meta: causal attn      = 1
0.00.266.604 I llm_load_print_meta: pooling type     = 0
0.00.266.604 I llm_load_print_meta: rope type        = 2
0.00.266.605 I llm_load_print_meta: rope scaling     = linear
0.00.266.606 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.606 I llm_load_print_meta: freq_scale_train = 1
0.00.266.607 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.607 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.607 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.608 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.608 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.609 I llm_load_print_meta: model type       = 2B
0.00.266.610 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.610 I llm_load_print_meta: model params     = 2.51 B
0.00.266.611 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.613 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.613 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.613 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.614 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.614 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.614 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.615 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.615 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.615 I llm_load_print_meta: max token length = 93
0.00.327.466 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.474 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.475 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.475 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.476 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.476 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.546 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.551 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.552 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.552 I llama_new_context_with_model: n_batch       = 2048
0.00.332.552 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.553 I llama_new_context_with_model: flash_attn    = 0
0.00.332.555 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.556 I llama_new_context_with_model: freq_scale    = 1
0.00.332.557 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.255 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.270 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.730 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.738 I llama_new_context_with_model: graph nodes  = 601
0.00.349.738 I llama_new_context_with_model: graph splits = 1
0.00.349.740 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.584 I main: llama threadpool init, n_threads = 4
0.00.426.599 I 
0.00.426.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.426.677 I 
0.00.426.726 I sampler seed: 422748247
0.00.426.738 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.749 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.753 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.753 I 
 maneutruely.

I am sorry, I am unable to provide assistance or generate responses that contain inappropriate or suggestive content. [end of text]


0.01.741.062 I llama_perf_sampler_print:    sampling time =       4.38 ms /    27 runs   (    0.16 ms per token,  6171.43 tokens per second)
0.01.741.065 I llama_perf_context_print:        load time =     425.81 ms
0.01.741.066 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.741.068 I llama_perf_context_print:        eval time =    1297.65 ms /    26 runs   (   49.91 ms per token,    20.04 tokens per second)
0.01.741.068 I llama_perf_context_print:       total time =    1314.49 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4223 (8074ca80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40177.04 ms
main:    total time = 40177.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.182 I build: 4223 (8074ca80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.399 I main: llama backend init
0.00.000.406 I main: load the model and apply lora adapter, if any
0.00.020.873 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.892 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.904 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.907 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.912 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.912 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.913 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.913 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.914 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.914 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.919 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.920 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.920 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.921 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.921 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.687 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.298 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.163 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.163 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.164 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.165 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.165 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.166 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.169 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.169 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.173 I llama_model_loader: - type  f32:   37 tensors
0.00.130.174 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.175 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.347 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.442 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.937 I llm_load_vocab: special tokens cache size = 5
0.00.262.778 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.794 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.794 I llm_load_print_meta: arch             = gemma
0.00.262.795 I llm_load_print_meta: vocab type       = SPM
0.00.262.795 I llm_load_print_meta: n_vocab          = 256000
0.00.262.796 I llm_load_print_meta: n_merges         = 0
0.00.262.796 I llm_load_print_meta: vocab_only       = 0
0.00.262.797 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.797 I llm_load_print_meta: n_embd           = 2048
0.00.262.797 I llm_load_print_meta: n_layer          = 18
0.00.262.809 I llm_load_print_meta: n_head           = 8
0.00.262.810 I llm_load_print_meta: n_head_kv        = 1
0.00.262.810 I llm_load_print_meta: n_rot            = 256
0.00.262.811 I llm_load_print_meta: n_swa            = 0
0.00.262.811 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.811 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.812 I llm_load_print_meta: n_gqa            = 8
0.00.262.813 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.814 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.815 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.817 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.818 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.818 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.818 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.819 I llm_load_print_meta: n_ff             = 16384
0.00.262.819 I llm_load_print_meta: n_expert         = 0
0.00.262.820 I llm_load_print_meta: n_expert_used    = 0
0.00.262.820 I llm_load_print_meta: causal attn      = 1
0.00.262.820 I llm_load_print_meta: pooling type     = 0
0.00.262.821 I llm_load_print_meta: rope type        = 2
0.00.262.822 I llm_load_print_meta: rope scaling     = linear
0.00.262.823 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.824 I llm_load_print_meta: freq_scale_train = 1
0.00.262.824 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.825 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.825 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.825 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.825 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.826 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.826 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.827 I llm_load_print_meta: model type       = 2B
0.00.262.828 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.828 I llm_load_print_meta: model params     = 2.51 B
0.00.262.829 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.830 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.830 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.830 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.831 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.831 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.832 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.832 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.832 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.833 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.833 I llm_load_print_meta: max token length = 93
0.00.317.144 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.322.254 I llama_new_context_with_model: n_seq_max     = 1
0.00.322.260 I llama_new_context_with_model: n_ctx         = 4096
0.00.322.260 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.322.261 I llama_new_context_with_model: n_batch       = 2048
0.00.322.261 I llama_new_context_with_model: n_ubatch      = 512
0.00.322.262 I llama_new_context_with_model: flash_attn    = 0
0.00.322.264 I llama_new_context_with_model: freq_base     = 10000.0
0.00.322.265 I llama_new_context_with_model: freq_scale    = 1
0.00.322.266 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.166 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.181 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.276 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.508 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.338.514 I llama_new_context_with_model: graph nodes  = 601
0.00.338.514 I llama_new_context_with_model: graph splits = 1
0.00.338.517 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.412.980 I main: llama threadpool init, n_threads = 4
0.00.412.998 I 
0.00.413.071 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.413.074 I 
0.00.413.116 I sampler seed: 342549656
0.00.413.127 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.139 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.143 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.143 I 
 seconary.

**Assistant**

I am unable to access or provide personal or sensitive information, including medical records. Therefore, I am unable to provide medical

0.01.986.185 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6602.64 tokens per second)
0.01.986.187 I llama_perf_context_print:        load time =     412.55 ms
0.01.986.188 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.986.190 I llama_perf_context_print:        eval time =    1554.54 ms /    32 runs   (   48.58 ms per token,    20.58 tokens per second)
0.01.986.190 I llama_perf_context_print:       total time =    1573.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.925s
user	10m23.218s
sys	0m6.921s
