+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 3967 (80273a30) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.001.858 I main: load the model and apply lora adapter, if any
0.00.022.311 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.360 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.367 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.374 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.378 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.379 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.386 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.387 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.388 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.389 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.389 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.575 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.004 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.878 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.879 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.881 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.881 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.884 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.884 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.885 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.885 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.886 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.890 I llama_model_loader: - type  f32:   37 tensors
0.00.133.893 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.548 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.332 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.952 I llm_load_vocab: special tokens cache size = 5
0.00.274.835 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.851 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.852 I llm_load_print_meta: arch             = gemma
0.00.274.852 I llm_load_print_meta: vocab type       = SPM
0.00.274.853 I llm_load_print_meta: n_vocab          = 256000
0.00.274.853 I llm_load_print_meta: n_merges         = 0
0.00.274.854 I llm_load_print_meta: vocab_only       = 0
0.00.274.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.854 I llm_load_print_meta: n_embd           = 2048
0.00.274.855 I llm_load_print_meta: n_layer          = 18
0.00.274.866 I llm_load_print_meta: n_head           = 8
0.00.274.867 I llm_load_print_meta: n_head_kv        = 1
0.00.274.868 I llm_load_print_meta: n_rot            = 256
0.00.274.868 I llm_load_print_meta: n_swa            = 0
0.00.274.868 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.868 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.869 I llm_load_print_meta: n_gqa            = 8
0.00.274.870 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.871 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.873 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.874 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.874 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.874 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.876 I llm_load_print_meta: n_ff             = 16384
0.00.274.876 I llm_load_print_meta: n_expert         = 0
0.00.274.876 I llm_load_print_meta: n_expert_used    = 0
0.00.274.877 I llm_load_print_meta: causal attn      = 1
0.00.274.877 I llm_load_print_meta: pooling type     = 0
0.00.274.877 I llm_load_print_meta: rope type        = 2
0.00.274.878 I llm_load_print_meta: rope scaling     = linear
0.00.274.879 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.880 I llm_load_print_meta: freq_scale_train = 1
0.00.274.880 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.880 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.880 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.881 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.881 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.881 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.881 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.882 I llm_load_print_meta: model type       = 2B
0.00.274.883 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.884 I llm_load_print_meta: model params     = 2.51 B
0.00.274.884 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.885 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.886 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.886 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.886 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.887 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.887 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.887 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.888 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.888 I llm_load_print_meta: max token length = 93
0.00.274.908 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.376.883 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.376.892 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.376.893 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.376.894 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.376.894 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.376.895 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.382.235 I llama_new_context_with_model: n_ctx      = 8192
0.00.382.241 I llama_new_context_with_model: n_batch    = 2048
0.00.382.241 I llama_new_context_with_model: n_ubatch   = 512
0.00.382.242 I llama_new_context_with_model: flash_attn = 0
0.00.382.245 I llama_new_context_with_model: freq_base  = 10000.0
0.00.382.246 I llama_new_context_with_model: freq_scale = 1
0.00.412.351 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.412.365 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.412.459 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.413.375 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.413.383 I llama_new_context_with_model: graph nodes  = 601
0.00.413.383 I llama_new_context_with_model: graph splits = 1
0.00.413.385 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.505.692 I main: llama threadpool init, n_threads = 4
0.00.505.706 I 
0.00.505.785 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.505.789 I 
0.00.505.831 I sampler seed: 2029807424
0.00.505.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.505.845 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.505.845 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.505.845 I 
 increasities in the poem "The Tiger's Tale" by William Blake.

**Answer:**

The provided text does not contain any information regarding the "

0.02.819.955 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6602.64 tokens per second)
0.02.819.957 I llama_perf_context_print:        load time =     503.81 ms
0.02.819.958 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.819.959 I llama_perf_context_print:        eval time =    2293.53 ms /    32 runs   (   71.67 ms per token,    13.95 tokens per second)
0.02.819.960 I llama_perf_context_print:       total time =    2314.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.468 I build: 3967 (80273a30) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.665 I main: llama backend init
0.00.001.760 I main: load the model and apply lora adapter, if any
0.00.021.987 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.998 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.010 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.010 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.014 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.014 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.015 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.016 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.016 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.017 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.021 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.022 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.022 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.023 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.024 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.723 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.230 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.097 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.098 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.099 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.099 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.102 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.103 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.103 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.104 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.104 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.108 I llama_model_loader: - type  f32:   37 tensors
0.00.133.111 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.470 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.604 I llm_load_vocab: special tokens cache size = 5
0.00.275.687 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.706 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.706 I llm_load_print_meta: arch             = gemma
0.00.275.707 I llm_load_print_meta: vocab type       = SPM
0.00.275.707 I llm_load_print_meta: n_vocab          = 256000
0.00.275.708 I llm_load_print_meta: n_merges         = 0
0.00.275.708 I llm_load_print_meta: vocab_only       = 0
0.00.275.708 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.709 I llm_load_print_meta: n_embd           = 2048
0.00.275.709 I llm_load_print_meta: n_layer          = 18
0.00.275.721 I llm_load_print_meta: n_head           = 8
0.00.275.722 I llm_load_print_meta: n_head_kv        = 1
0.00.275.723 I llm_load_print_meta: n_rot            = 256
0.00.275.723 I llm_load_print_meta: n_swa            = 0
0.00.275.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.724 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.724 I llm_load_print_meta: n_gqa            = 8
0.00.275.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.726 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.727 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.729 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.729 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.729 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.729 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.730 I llm_load_print_meta: n_ff             = 16384
0.00.275.731 I llm_load_print_meta: n_expert         = 0
0.00.275.731 I llm_load_print_meta: n_expert_used    = 0
0.00.275.731 I llm_load_print_meta: causal attn      = 1
0.00.275.732 I llm_load_print_meta: pooling type     = 0
0.00.275.732 I llm_load_print_meta: rope type        = 2
0.00.275.732 I llm_load_print_meta: rope scaling     = linear
0.00.275.733 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.734 I llm_load_print_meta: freq_scale_train = 1
0.00.275.734 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.735 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.735 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.735 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.736 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.736 I llm_load_print_meta: model type       = 2B
0.00.275.737 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.738 I llm_load_print_meta: model params     = 2.51 B
0.00.275.738 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.739 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.739 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.740 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.740 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.740 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.741 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.741 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.742 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.742 I llm_load_print_meta: max token length = 93
0.00.275.768 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.371.860 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.376.942 I llama_new_context_with_model: n_ctx      = 8192
0.00.376.949 I llama_new_context_with_model: n_batch    = 2048
0.00.376.949 I llama_new_context_with_model: n_ubatch   = 512
0.00.376.949 I llama_new_context_with_model: flash_attn = 0
0.00.376.952 I llama_new_context_with_model: freq_base  = 10000.0
0.00.376.953 I llama_new_context_with_model: freq_scale = 1
0.00.406.307 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.321 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.413 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.283 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.290 I llama_new_context_with_model: graph nodes  = 601
0.00.407.290 I llama_new_context_with_model: graph splits = 1
0.00.407.292 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.388 I main: llama threadpool init, n_threads = 4
0.00.495.401 I 
0.00.495.477 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.495.480 I 
0.00.495.520 I sampler seed: 17112200
0.00.495.530 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.533 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.533 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.534 I 
 increasively, as the population density increases.

What is the relationship between population density and the distribution of diseases?

**Answer:**

**Population density is

0.02.718.826 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7027.26 tokens per second)
0.02.718.829 I llama_perf_context_print:        load time =     493.60 ms
0.02.718.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.718.833 I llama_perf_context_print:        eval time =    2202.66 ms /    32 runs   (   68.83 ms per token,    14.53 tokens per second)
0.02.718.834 I llama_perf_context_print:       total time =    2223.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.550 I build: 3967 (80273a30) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.022.131 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.197 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.201 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.206 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.207 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.209 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.215 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.215 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.216 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.216 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.216 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.909 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.756 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.764 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.765 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.766 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.767 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.768 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.769 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.772 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.774 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.775 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.776 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.777 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.782 I llama_model_loader: - type  f32:   37 tensors
0.00.133.786 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.880 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.748 I llm_load_vocab: special tokens cache size = 5
0.00.293.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.829 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.830 I llm_load_print_meta: arch             = gemma
0.00.293.831 I llm_load_print_meta: vocab type       = SPM
0.00.293.832 I llm_load_print_meta: n_vocab          = 256000
0.00.293.832 I llm_load_print_meta: n_merges         = 0
0.00.293.833 I llm_load_print_meta: vocab_only       = 0
0.00.293.833 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.833 I llm_load_print_meta: n_embd           = 2048
0.00.293.833 I llm_load_print_meta: n_layer          = 18
0.00.293.845 I llm_load_print_meta: n_head           = 8
0.00.293.846 I llm_load_print_meta: n_head_kv        = 1
0.00.293.847 I llm_load_print_meta: n_rot            = 256
0.00.293.847 I llm_load_print_meta: n_swa            = 0
0.00.293.847 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.849 I llm_load_print_meta: n_gqa            = 8
0.00.293.850 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.851 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.851 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.853 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.853 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.853 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.853 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.854 I llm_load_print_meta: n_ff             = 16384
0.00.293.855 I llm_load_print_meta: n_expert         = 0
0.00.293.855 I llm_load_print_meta: n_expert_used    = 0
0.00.293.855 I llm_load_print_meta: causal attn      = 1
0.00.293.856 I llm_load_print_meta: pooling type     = 0
0.00.293.856 I llm_load_print_meta: rope type        = 2
0.00.293.856 I llm_load_print_meta: rope scaling     = linear
0.00.293.857 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.858 I llm_load_print_meta: freq_scale_train = 1
0.00.293.858 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.859 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.859 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.859 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.859 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.859 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.860 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.860 I llm_load_print_meta: model type       = 2B
0.00.293.861 I llm_load_print_meta: model ftype      = Q8_0
0.00.293.862 I llm_load_print_meta: model params     = 2.51 B
0.00.293.863 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.293.863 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.863 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.864 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.864 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.864 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.865 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.865 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.865 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.866 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.866 I llm_load_print_meta: max token length = 93
0.00.293.889 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.370.459 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.370.467 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.370.468 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.370.469 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.370.469 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.370.470 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.375.629 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.636 I llama_new_context_with_model: n_batch    = 2048
0.00.375.636 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.637 I llama_new_context_with_model: flash_attn = 0
0.00.375.639 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.640 I llama_new_context_with_model: freq_scale = 1
0.00.406.072 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.086 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.177 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.064 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.072 I llama_new_context_with_model: graph nodes  = 601
0.00.407.072 I llama_new_context_with_model: graph splits = 1
0.00.407.074 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.498.203 I main: llama threadpool init, n_threads = 4
0.00.498.217 I 
0.00.498.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.498.297 I 
0.00.498.337 I sampler seed: 2668431057
0.00.498.347 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.350 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.498.351 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.351 I 
 increasities?

I cannot find the requested information in the provided context, so I am unable to answer this question. [end of text]


0.02.307.208 I llama_perf_sampler_print:    sampling time =       3.77 ms /    26 runs   (    0.14 ms per token,  6896.55 tokens per second)
0.02.307.210 I llama_perf_context_print:        load time =     496.35 ms
0.02.307.211 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.307.212 I llama_perf_context_print:        eval time =    1793.29 ms /    25 runs   (   71.73 ms per token,    13.94 tokens per second)
0.02.307.213 I llama_perf_context_print:       total time =    1809.01 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.557 I build: 3967 (80273a30) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.854 I main: llama backend init
0.00.002.059 I main: load the model and apply lora adapter, if any
0.00.022.259 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.309 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.320 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.325 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.329 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.333 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.333 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.334 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.334 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.335 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.335 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.341 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.342 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.342 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.343 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.343 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.197 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.964 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.819 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.826 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.829 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.831 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.834 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.835 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.836 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.837 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.838 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.843 I llama_model_loader: - type  f32:   37 tensors
0.00.133.846 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.503 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.948 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.557 I llm_load_vocab: special tokens cache size = 5
0.00.291.833 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.850 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.850 I llm_load_print_meta: arch             = gemma
0.00.291.851 I llm_load_print_meta: vocab type       = SPM
0.00.291.851 I llm_load_print_meta: n_vocab          = 256000
0.00.291.852 I llm_load_print_meta: n_merges         = 0
0.00.291.852 I llm_load_print_meta: vocab_only       = 0
0.00.291.852 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.852 I llm_load_print_meta: n_embd           = 2048
0.00.291.853 I llm_load_print_meta: n_layer          = 18
0.00.291.864 I llm_load_print_meta: n_head           = 8
0.00.291.865 I llm_load_print_meta: n_head_kv        = 1
0.00.291.866 I llm_load_print_meta: n_rot            = 256
0.00.291.866 I llm_load_print_meta: n_swa            = 0
0.00.291.867 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.867 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.868 I llm_load_print_meta: n_gqa            = 8
0.00.291.869 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.870 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.870 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.872 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.872 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.872 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.873 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.874 I llm_load_print_meta: n_ff             = 16384
0.00.291.874 I llm_load_print_meta: n_expert         = 0
0.00.291.875 I llm_load_print_meta: n_expert_used    = 0
0.00.291.875 I llm_load_print_meta: causal attn      = 1
0.00.291.875 I llm_load_print_meta: pooling type     = 0
0.00.291.875 I llm_load_print_meta: rope type        = 2
0.00.291.876 I llm_load_print_meta: rope scaling     = linear
0.00.291.878 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.879 I llm_load_print_meta: freq_scale_train = 1
0.00.291.880 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.880 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.880 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.880 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.881 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.881 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.881 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.882 I llm_load_print_meta: model type       = 2B
0.00.291.883 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.884 I llm_load_print_meta: model params     = 2.51 B
0.00.291.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.886 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.886 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.887 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.887 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.888 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.888 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.889 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.890 I llm_load_print_meta: max token length = 93
0.00.291.910 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.362.504 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.362.512 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.367.660 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.666 I llama_new_context_with_model: n_batch    = 2048
0.00.367.667 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.667 I llama_new_context_with_model: flash_attn = 0
0.00.367.670 I llama_new_context_with_model: freq_base  = 10000.0
0.00.367.671 I llama_new_context_with_model: freq_scale = 1
0.00.398.729 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.743 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.740 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.399.748 I llama_new_context_with_model: graph nodes  = 601
0.00.399.748 I llama_new_context_with_model: graph splits = 1
0.00.399.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.230 I main: llama threadpool init, n_threads = 4
0.00.494.243 I 
0.00.494.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.494.330 I 
0.00.494.371 I sampler seed: 91409314
0.00.494.382 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.390 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.390 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.390 I 
 maneuvled
I am unable to answer this question as it contains offensive and inappropriate content. [end of text]


0.02.040.496 I llama_perf_sampler_print:    sampling time =       3.03 ms /    21 runs   (    0.14 ms per token,  6935.27 tokens per second)
0.02.040.499 I llama_perf_context_print:        load time =     492.15 ms
0.02.040.500 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.040.502 I llama_perf_context_print:        eval time =    1533.23 ms /    20 runs   (   76.66 ms per token,    13.04 tokens per second)
0.02.040.502 I llama_perf_context_print:       total time =    1546.27 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.097s
user	0m34.533s
sys	0m9.664s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3967 (80273a30)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32350.40 ms
main:    total time = 32350.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.550 I build: 3967 (80273a30) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.022.257 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.318 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.328 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.332 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.333 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.334 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.335 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.336 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.337 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.342 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.343 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.344 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.345 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.345 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.071 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.915 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.771 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.777 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.778 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.778 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.779 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.780 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.781 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.784 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.784 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.785 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.785 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.789 I llama_model_loader: - type  f32:   37 tensors
0.00.133.791 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.792 I llama_model_loader: - type q6_K:   19 tensors
0.00.232.664 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.289.385 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.290.052 I llm_load_vocab: special tokens cache size = 5
0.00.311.277 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.311.299 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.311.299 I llm_load_print_meta: arch             = gemma
0.00.311.300 I llm_load_print_meta: vocab type       = SPM
0.00.311.301 I llm_load_print_meta: n_vocab          = 256000
0.00.311.301 I llm_load_print_meta: n_merges         = 0
0.00.311.301 I llm_load_print_meta: vocab_only       = 0
0.00.311.302 I llm_load_print_meta: n_ctx_train      = 8192
0.00.311.302 I llm_load_print_meta: n_embd           = 2048
0.00.311.302 I llm_load_print_meta: n_layer          = 18
0.00.311.316 I llm_load_print_meta: n_head           = 8
0.00.311.317 I llm_load_print_meta: n_head_kv        = 1
0.00.311.317 I llm_load_print_meta: n_rot            = 256
0.00.311.317 I llm_load_print_meta: n_swa            = 0
0.00.311.317 I llm_load_print_meta: n_embd_head_k    = 256
0.00.311.318 I llm_load_print_meta: n_embd_head_v    = 256
0.00.311.319 I llm_load_print_meta: n_gqa            = 8
0.00.311.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.311.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.311.321 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.311.322 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.311.323 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.311.323 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.311.323 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.311.324 I llm_load_print_meta: n_ff             = 16384
0.00.311.325 I llm_load_print_meta: n_expert         = 0
0.00.311.325 I llm_load_print_meta: n_expert_used    = 0
0.00.311.325 I llm_load_print_meta: causal attn      = 1
0.00.311.326 I llm_load_print_meta: pooling type     = 0
0.00.311.326 I llm_load_print_meta: rope type        = 2
0.00.311.326 I llm_load_print_meta: rope scaling     = linear
0.00.311.329 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.311.329 I llm_load_print_meta: freq_scale_train = 1
0.00.311.329 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.311.330 I llm_load_print_meta: rope_finetuned   = unknown
0.00.311.330 I llm_load_print_meta: ssm_d_conv       = 0
0.00.311.330 I llm_load_print_meta: ssm_d_inner      = 0
0.00.311.330 I llm_load_print_meta: ssm_d_state      = 0
0.00.311.331 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.311.331 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.311.332 I llm_load_print_meta: model type       = 2B
0.00.311.332 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.311.333 I llm_load_print_meta: model params     = 2.51 B
0.00.311.334 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.311.334 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.311.334 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.311.335 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.311.335 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.311.335 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.311.336 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.311.336 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.311.336 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.311.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.311.337 I llm_load_print_meta: max token length = 93
0.00.311.357 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.369.765 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.369.776 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.369.776 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.369.777 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.369.778 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.369.778 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.375.007 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.014 I llama_new_context_with_model: n_batch    = 2048
0.00.375.015 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.015 I llama_new_context_with_model: flash_attn = 0
0.00.375.018 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.019 I llama_new_context_with_model: freq_scale = 1
0.00.405.918 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.405.936 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.028 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.914 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.922 I llama_new_context_with_model: graph nodes  = 601
0.00.406.923 I llama_new_context_with_model: graph splits = 1
0.00.406.925 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.321 I main: llama threadpool init, n_threads = 4
0.00.492.338 I 
0.00.492.421 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.425 I 
0.00.492.464 I sampler seed: 367098023
0.00.492.475 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.483 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.484 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.484 I 
 increasities in the comments section. [end of text]


0.00.918.352 I llama_perf_sampler_print:    sampling time =       1.22 ms /     9 runs   (    0.14 ms per token,  7364.98 tokens per second)
0.00.918.356 I llama_perf_context_print:        load time =     490.46 ms
0.00.918.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.918.359 I llama_perf_context_print:        eval time =     420.30 ms /     8 runs   (   52.54 ms per token,    19.03 tokens per second)
0.00.918.360 I llama_perf_context_print:       total time =     426.04 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3967 (80273a30)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32066.41 ms
main:    total time = 32066.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 3967 (80273a30) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.023.210 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.223 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.231 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.232 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.236 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.237 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.238 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.238 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.238 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.239 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.243 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.244 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.244 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.245 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.246 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.044 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.583 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.491 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.498 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.499 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.500 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.501 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.502 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.503 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.507 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.508 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.512 I llama_model_loader: - type  f32:   37 tensors
0.00.134.514 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.515 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.468 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.875 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.470 I llm_load_vocab: special tokens cache size = 5
0.00.289.767 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.786 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.787 I llm_load_print_meta: arch             = gemma
0.00.289.787 I llm_load_print_meta: vocab type       = SPM
0.00.289.788 I llm_load_print_meta: n_vocab          = 256000
0.00.289.788 I llm_load_print_meta: n_merges         = 0
0.00.289.789 I llm_load_print_meta: vocab_only       = 0
0.00.289.789 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.789 I llm_load_print_meta: n_embd           = 2048
0.00.289.790 I llm_load_print_meta: n_layer          = 18
0.00.289.801 I llm_load_print_meta: n_head           = 8
0.00.289.802 I llm_load_print_meta: n_head_kv        = 1
0.00.289.802 I llm_load_print_meta: n_rot            = 256
0.00.289.802 I llm_load_print_meta: n_swa            = 0
0.00.289.803 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.803 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.804 I llm_load_print_meta: n_gqa            = 8
0.00.289.806 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.807 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.807 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.809 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.809 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.810 I llm_load_print_meta: n_ff             = 16384
0.00.289.810 I llm_load_print_meta: n_expert         = 0
0.00.289.811 I llm_load_print_meta: n_expert_used    = 0
0.00.289.811 I llm_load_print_meta: causal attn      = 1
0.00.289.811 I llm_load_print_meta: pooling type     = 0
0.00.289.812 I llm_load_print_meta: rope type        = 2
0.00.289.812 I llm_load_print_meta: rope scaling     = linear
0.00.289.813 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.814 I llm_load_print_meta: freq_scale_train = 1
0.00.289.814 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.815 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.815 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.815 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.816 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.816 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.816 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.816 I llm_load_print_meta: model type       = 2B
0.00.289.817 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.818 I llm_load_print_meta: model params     = 2.51 B
0.00.289.818 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.819 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.819 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.820 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.820 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.821 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.821 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.821 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.822 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.822 I llm_load_print_meta: max token length = 93
0.00.289.841 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.347.235 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.352.219 I llama_new_context_with_model: n_ctx      = 8192
0.00.352.225 I llama_new_context_with_model: n_batch    = 2048
0.00.352.226 I llama_new_context_with_model: n_ubatch   = 512
0.00.352.226 I llama_new_context_with_model: flash_attn = 0
0.00.352.229 I llama_new_context_with_model: freq_base  = 10000.0
0.00.352.229 I llama_new_context_with_model: freq_scale = 1
0.00.383.931 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.383.948 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.384.052 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.954 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.384.962 I llama_new_context_with_model: graph nodes  = 601
0.00.384.963 I llama_new_context_with_model: graph splits = 1
0.00.384.964 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.092 I main: llama threadpool init, n_threads = 4
0.00.471.105 I 
0.00.471.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.190 I 
0.00.471.231 I sampler seed: 2721907862
0.00.471.241 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.244 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.244 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.245 I 
 seconally. 

I am so sorry, but I am unable to write a response that contains sexually suggestive or inappropriate content. My purpose is to assist with

0.02.136.327 I llama_perf_sampler_print:    sampling time =       4.60 ms /    33 runs   (    0.14 ms per token,  7167.68 tokens per second)
0.02.136.329 I llama_perf_context_print:        load time =     469.21 ms
0.02.136.331 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.136.332 I llama_perf_context_print:        eval time =    1646.00 ms /    32 runs   (   51.44 ms per token,    19.44 tokens per second)
0.02.136.333 I llama_perf_context_print:       total time =    1665.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.346s
user	8m10.718s
sys	0m7.105s
