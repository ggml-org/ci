+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.611 I build: 4068 (80dd7ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.822 I main: llama backend init
0.00.000.958 I main: load the model and apply lora adapter, if any
0.00.021.551 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.560 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.568 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.581 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.585 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.585 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.586 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.587 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.588 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.589 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.593 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.801 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.195 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.997 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.001 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.004 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.005 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.008 I llama_model_loader: - type  f32:   37 tensors
0.00.131.009 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.462 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.820 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.378 I llm_load_vocab: special tokens cache size = 5
0.00.263.116 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.133 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.134 I llm_load_print_meta: arch             = gemma
0.00.263.134 I llm_load_print_meta: vocab type       = SPM
0.00.263.135 I llm_load_print_meta: n_vocab          = 256000
0.00.263.135 I llm_load_print_meta: n_merges         = 0
0.00.263.136 I llm_load_print_meta: vocab_only       = 0
0.00.263.136 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.136 I llm_load_print_meta: n_embd           = 2048
0.00.263.137 I llm_load_print_meta: n_layer          = 18
0.00.263.149 I llm_load_print_meta: n_head           = 8
0.00.263.151 I llm_load_print_meta: n_head_kv        = 1
0.00.263.151 I llm_load_print_meta: n_rot            = 256
0.00.263.151 I llm_load_print_meta: n_swa            = 0
0.00.263.152 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.152 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.153 I llm_load_print_meta: n_gqa            = 8
0.00.263.154 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.155 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.156 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.159 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.160 I llm_load_print_meta: n_ff             = 16384
0.00.263.160 I llm_load_print_meta: n_expert         = 0
0.00.263.161 I llm_load_print_meta: n_expert_used    = 0
0.00.263.161 I llm_load_print_meta: causal attn      = 1
0.00.263.162 I llm_load_print_meta: pooling type     = 0
0.00.263.162 I llm_load_print_meta: rope type        = 2
0.00.263.163 I llm_load_print_meta: rope scaling     = linear
0.00.263.164 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.165 I llm_load_print_meta: freq_scale_train = 1
0.00.263.165 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.166 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.166 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.166 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.167 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.167 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.167 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.168 I llm_load_print_meta: model type       = 2B
0.00.263.169 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.170 I llm_load_print_meta: model params     = 2.51 B
0.00.263.171 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.171 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.172 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.172 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.173 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.173 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.174 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.174 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.175 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.175 I llm_load_print_meta: max token length = 93
0.00.364.728 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.734 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.735 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.735 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.736 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.736 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.024 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.031 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.031 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.031 I llama_new_context_with_model: n_batch       = 2048
0.00.370.032 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.032 I llama_new_context_with_model: flash_attn    = 0
0.00.370.034 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.035 I llama_new_context_with_model: freq_scale    = 1
0.00.370.036 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.459 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.471 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.558 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.777 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.783 I llama_new_context_with_model: graph nodes  = 601
0.00.386.784 I llama_new_context_with_model: graph splits = 1
0.00.386.786 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.279 I main: llama threadpool init, n_threads = 4
0.00.472.291 I 
0.00.472.372 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.375 I 
0.00.472.423 I sampler seed: 3594659035
0.00.472.435 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.438 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.439 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.440 I 
 seconally:

**a) Identify the key points of the given passage.**

**b) Summarize the main idea of the passage.**

**c

0.02.716.239 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6872.14 tokens per second)
0.02.716.241 I llama_perf_context_print:        load time =     471.30 ms
0.02.716.243 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.716.244 I llama_perf_context_print:        eval time =    2224.72 ms /    32 runs   (   69.52 ms per token,    14.38 tokens per second)
0.02.716.245 I llama_perf_context_print:       total time =    2243.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.553 I build: 4068 (80dd7ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.911 I main: load the model and apply lora adapter, if any
0.00.021.387 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.401 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.408 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.410 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.414 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.418 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.419 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.420 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.421 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.422 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.431 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.432 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.432 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.433 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.434 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.469 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.267 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.146 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.147 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.148 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.149 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.150 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.151 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.155 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.155 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.156 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.157 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.158 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.162 I llama_model_loader: - type  f32:   37 tensors
0.00.131.164 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.590 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.140 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.727 I llm_load_vocab: special tokens cache size = 5
0.00.265.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.431 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.431 I llm_load_print_meta: arch             = gemma
0.00.265.432 I llm_load_print_meta: vocab type       = SPM
0.00.265.433 I llm_load_print_meta: n_vocab          = 256000
0.00.265.433 I llm_load_print_meta: n_merges         = 0
0.00.265.433 I llm_load_print_meta: vocab_only       = 0
0.00.265.434 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.434 I llm_load_print_meta: n_embd           = 2048
0.00.265.435 I llm_load_print_meta: n_layer          = 18
0.00.265.450 I llm_load_print_meta: n_head           = 8
0.00.265.452 I llm_load_print_meta: n_head_kv        = 1
0.00.265.453 I llm_load_print_meta: n_rot            = 256
0.00.265.453 I llm_load_print_meta: n_swa            = 0
0.00.265.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.456 I llm_load_print_meta: n_gqa            = 8
0.00.265.457 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.459 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.460 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.462 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.463 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.463 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.464 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.465 I llm_load_print_meta: n_ff             = 16384
0.00.265.466 I llm_load_print_meta: n_expert         = 0
0.00.265.466 I llm_load_print_meta: n_expert_used    = 0
0.00.265.467 I llm_load_print_meta: causal attn      = 1
0.00.265.467 I llm_load_print_meta: pooling type     = 0
0.00.265.468 I llm_load_print_meta: rope type        = 2
0.00.265.468 I llm_load_print_meta: rope scaling     = linear
0.00.265.470 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.471 I llm_load_print_meta: freq_scale_train = 1
0.00.265.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.473 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.474 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.476 I llm_load_print_meta: model type       = 2B
0.00.265.477 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.478 I llm_load_print_meta: model params     = 2.51 B
0.00.265.479 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.480 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.481 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.481 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.485 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.485 I llm_load_print_meta: max token length = 93
0.00.359.784 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.171 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.177 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.178 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.178 I llama_new_context_with_model: n_batch       = 2048
0.00.365.178 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.179 I llama_new_context_with_model: flash_attn    = 0
0.00.365.181 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.182 I llama_new_context_with_model: freq_scale    = 1
0.00.365.183 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.941 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.956 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.054 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.249 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.256 I llama_new_context_with_model: graph nodes  = 601
0.00.382.257 I llama_new_context_with_model: graph splits = 1
0.00.382.258 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.587 I main: llama threadpool init, n_threads = 4
0.00.465.601 I 
0.00.465.694 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.698 I 
0.00.465.744 I sampler seed: 1528966231
0.00.465.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.768 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.775 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.776 I 
 increasels, and other whimsical creatures populate the fantastical world of Eldoria.

**The Realm of Eldoria**

Eldoria is a realm bathed in

0.02.643.671 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7009.35 tokens per second)
0.02.643.673 I llama_perf_context_print:        load time =     464.65 ms
0.02.643.676 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.643.678 I llama_perf_context_print:        eval time =    2158.97 ms /    32 runs   (   67.47 ms per token,    14.82 tokens per second)
0.02.643.679 I llama_perf_context_print:       total time =    2178.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.577 I build: 4068 (80dd7ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.807 I main: llama backend init
0.00.000.950 I main: load the model and apply lora adapter, if any
0.00.021.540 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.547 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.555 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.563 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.566 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.570 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.571 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.572 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.578 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.578 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.579 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.579 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.580 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.851 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.710 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.716 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.717 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.717 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.718 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.719 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.720 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.722 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.722 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.723 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.723 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.724 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.727 I llama_model_loader: - type  f32:   37 tensors
0.00.131.729 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.065 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.434 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.971 I llm_load_vocab: special tokens cache size = 5
0.00.280.712 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.728 I llm_load_print_meta: arch             = gemma
0.00.280.728 I llm_load_print_meta: vocab type       = SPM
0.00.280.729 I llm_load_print_meta: n_vocab          = 256000
0.00.280.729 I llm_load_print_meta: n_merges         = 0
0.00.280.730 I llm_load_print_meta: vocab_only       = 0
0.00.280.730 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.730 I llm_load_print_meta: n_embd           = 2048
0.00.280.730 I llm_load_print_meta: n_layer          = 18
0.00.280.742 I llm_load_print_meta: n_head           = 8
0.00.280.743 I llm_load_print_meta: n_head_kv        = 1
0.00.280.744 I llm_load_print_meta: n_rot            = 256
0.00.280.744 I llm_load_print_meta: n_swa            = 0
0.00.280.744 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.747 I llm_load_print_meta: n_gqa            = 8
0.00.280.748 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.749 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.754 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.757 I llm_load_print_meta: n_ff             = 16384
0.00.280.760 I llm_load_print_meta: n_expert         = 0
0.00.280.761 I llm_load_print_meta: n_expert_used    = 0
0.00.280.762 I llm_load_print_meta: causal attn      = 1
0.00.280.762 I llm_load_print_meta: pooling type     = 0
0.00.280.762 I llm_load_print_meta: rope type        = 2
0.00.280.763 I llm_load_print_meta: rope scaling     = linear
0.00.280.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.766 I llm_load_print_meta: freq_scale_train = 1
0.00.280.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.768 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.768 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.769 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.769 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.770 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.771 I llm_load_print_meta: model type       = 2B
0.00.280.772 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.773 I llm_load_print_meta: model params     = 2.51 B
0.00.280.774 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.775 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.776 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.776 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.778 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.778 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.780 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.780 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.782 I llm_load_print_meta: max token length = 93
0.00.363.207 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.363.213 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.214 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.363.215 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.363.215 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.216 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.368.754 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.760 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.760 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.761 I llama_new_context_with_model: n_batch       = 2048
0.00.368.761 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.762 I llama_new_context_with_model: flash_attn    = 0
0.00.368.764 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.764 I llama_new_context_with_model: freq_scale    = 1
0.00.368.765 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.135 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.151 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.237 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.468 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.472 I llama_new_context_with_model: graph nodes  = 601
0.00.385.473 I llama_new_context_with_model: graph splits = 1
0.00.385.474 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.699 I main: llama threadpool init, n_threads = 4
0.00.471.711 I 
0.00.471.797 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.801 I 
0.00.471.849 I sampler seed: 952243477
0.00.471.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.867 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.872 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.872 I 
 increasities and make sure to mention the context of the story.

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.02.247.950 I llama_perf_sampler_print:    sampling time =       4.05 ms /    27 runs   (    0.15 ms per token,  6669.96 tokens per second)
0.02.247.953 I llama_perf_context_print:        load time =     470.73 ms
0.02.247.954 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.247.955 I llama_perf_context_print:        eval time =    1760.97 ms /    26 runs   (   67.73 ms per token,    14.76 tokens per second)
0.02.247.956 I llama_perf_context_print:       total time =    1776.26 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.526 I build: 4068 (80dd7ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.021.224 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.234 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.241 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.250 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.254 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.257 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.258 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.260 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.265 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.265 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.266 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.838 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.570 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.345 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.351 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.352 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.352 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.353 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.354 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.355 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.357 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.358 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.359 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.360 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.361 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.364 I llama_model_loader: - type  f32:   37 tensors
0.00.131.365 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.691 I llm_load_vocab: special tokens cache size = 5
0.00.272.178 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.193 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.193 I llm_load_print_meta: arch             = gemma
0.00.272.194 I llm_load_print_meta: vocab type       = SPM
0.00.272.195 I llm_load_print_meta: n_vocab          = 256000
0.00.272.195 I llm_load_print_meta: n_merges         = 0
0.00.272.195 I llm_load_print_meta: vocab_only       = 0
0.00.272.196 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.196 I llm_load_print_meta: n_embd           = 2048
0.00.272.196 I llm_load_print_meta: n_layer          = 18
0.00.272.207 I llm_load_print_meta: n_head           = 8
0.00.272.208 I llm_load_print_meta: n_head_kv        = 1
0.00.272.209 I llm_load_print_meta: n_rot            = 256
0.00.272.209 I llm_load_print_meta: n_swa            = 0
0.00.272.209 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.209 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.210 I llm_load_print_meta: n_gqa            = 8
0.00.272.211 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.212 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.213 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.215 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.215 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.215 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.216 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.216 I llm_load_print_meta: n_ff             = 16384
0.00.272.217 I llm_load_print_meta: n_expert         = 0
0.00.272.217 I llm_load_print_meta: n_expert_used    = 0
0.00.272.217 I llm_load_print_meta: causal attn      = 1
0.00.272.218 I llm_load_print_meta: pooling type     = 0
0.00.272.218 I llm_load_print_meta: rope type        = 2
0.00.272.218 I llm_load_print_meta: rope scaling     = linear
0.00.272.220 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.220 I llm_load_print_meta: freq_scale_train = 1
0.00.272.221 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.221 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.221 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.221 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.222 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.222 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.222 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.222 I llm_load_print_meta: model type       = 2B
0.00.272.223 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.224 I llm_load_print_meta: model params     = 2.51 B
0.00.272.225 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.225 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.226 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.226 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.226 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.227 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.227 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.227 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.228 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.228 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.228 I llm_load_print_meta: max token length = 93
0.00.343.073 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.079 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.306 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.313 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.313 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.313 I llama_new_context_with_model: n_batch       = 2048
0.00.348.314 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.314 I llama_new_context_with_model: flash_attn    = 0
0.00.348.316 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.317 I llama_new_context_with_model: freq_scale    = 1
0.00.348.318 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.238 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.252 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.341 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.588 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.594 I llama_new_context_with_model: graph nodes  = 601
0.00.365.595 I llama_new_context_with_model: graph splits = 1
0.00.365.597 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.011 I main: llama threadpool init, n_threads = 4
0.00.453.025 I 
0.00.453.101 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.104 I 
0.00.453.144 I sampler seed: 4054687615
0.00.453.155 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.163 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.164 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.164 I 
 increasities. [end of text]


0.00.758.816 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7812.50 tokens per second)
0.00.758.818 I llama_perf_context_print:        load time =     452.14 ms
0.00.758.819 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.758.821 I llama_perf_context_print:        eval time =     302.30 ms /     4 runs   (   75.58 ms per token,    13.23 tokens per second)
0.00.758.821 I llama_perf_context_print:       total time =     305.81 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.250s
user	0m28.821s
sys	0m9.422s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4068 (80dd7ff2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 33726.25 ms
main:    total time = 33726.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4068 (80dd7ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.000.910 I main: load the model and apply lora adapter, if any
0.00.021.541 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.551 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.560 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.565 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.566 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.570 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.571 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.572 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.572 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.573 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.577 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.578 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.578 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.579 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.579 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.070 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.677 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.683 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.684 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.684 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.685 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.686 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.686 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.689 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.690 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.691 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.692 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.696 I llama_model_loader: - type  f32:   37 tensors
0.00.132.697 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.698 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.975 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.470 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.026 I llm_load_vocab: special tokens cache size = 5
0.00.268.526 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.542 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.543 I llm_load_print_meta: arch             = gemma
0.00.268.544 I llm_load_print_meta: vocab type       = SPM
0.00.268.544 I llm_load_print_meta: n_vocab          = 256000
0.00.268.544 I llm_load_print_meta: n_merges         = 0
0.00.268.545 I llm_load_print_meta: vocab_only       = 0
0.00.268.545 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.546 I llm_load_print_meta: n_embd           = 2048
0.00.268.546 I llm_load_print_meta: n_layer          = 18
0.00.268.557 I llm_load_print_meta: n_head           = 8
0.00.268.558 I llm_load_print_meta: n_head_kv        = 1
0.00.268.558 I llm_load_print_meta: n_rot            = 256
0.00.268.558 I llm_load_print_meta: n_swa            = 0
0.00.268.559 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.559 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.560 I llm_load_print_meta: n_gqa            = 8
0.00.268.561 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.562 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.562 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.564 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.564 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.565 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.565 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.566 I llm_load_print_meta: n_ff             = 16384
0.00.268.566 I llm_load_print_meta: n_expert         = 0
0.00.268.566 I llm_load_print_meta: n_expert_used    = 0
0.00.268.567 I llm_load_print_meta: causal attn      = 1
0.00.268.567 I llm_load_print_meta: pooling type     = 0
0.00.268.567 I llm_load_print_meta: rope type        = 2
0.00.268.568 I llm_load_print_meta: rope scaling     = linear
0.00.268.569 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.570 I llm_load_print_meta: freq_scale_train = 1
0.00.268.570 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.571 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.571 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.571 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.571 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.572 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.572 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.573 I llm_load_print_meta: model type       = 2B
0.00.268.573 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.574 I llm_load_print_meta: model params     = 2.51 B
0.00.268.575 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.575 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.575 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.576 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.576 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.576 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.576 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.577 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.577 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.577 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.578 I llm_load_print_meta: max token length = 93
0.00.330.266 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.272 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.273 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.273 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.274 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.275 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.617 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.624 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.625 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.625 I llama_new_context_with_model: n_batch       = 2048
0.00.335.625 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.626 I llama_new_context_with_model: flash_attn    = 0
0.00.335.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.629 I llama_new_context_with_model: freq_scale    = 1
0.00.335.631 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.349 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.363 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.458 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.704 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.708 I llama_new_context_with_model: graph nodes  = 601
0.00.352.708 I llama_new_context_with_model: graph splits = 1
0.00.352.710 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.671 I main: llama threadpool init, n_threads = 4
0.00.428.683 I 
0.00.428.761 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.428.764 I 
0.00.428.808 I sampler seed: 3466052829
0.00.428.819 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.821 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.822 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.822 I 
 maneuvously. [end of text]


0.00.688.694 I llama_perf_sampler_print:    sampling time =       0.87 ms /     6 runs   (    0.14 ms per token,  6920.42 tokens per second)
0.00.688.697 I llama_perf_context_print:        load time =     427.74 ms
0.00.688.699 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.688.701 I llama_perf_context_print:        eval time =     256.18 ms /     5 runs   (   51.24 ms per token,    19.52 tokens per second)
0.00.688.702 I llama_perf_context_print:       total time =     260.03 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4068 (80dd7ff2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31987.79 ms
main:    total time = 31987.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.529 I build: 4068 (80dd7ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.021.300 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.317 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.323 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.328 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.329 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.329 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.330 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.335 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.335 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.337 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.021 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.813 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.655 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.662 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.663 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.664 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.665 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.666 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.667 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.671 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.671 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.676 I llama_model_loader: - type  f32:   37 tensors
0.00.131.677 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.678 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.183 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.397 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.049 I llm_load_vocab: special tokens cache size = 5
0.00.265.897 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.913 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.914 I llm_load_print_meta: arch             = gemma
0.00.265.915 I llm_load_print_meta: vocab type       = SPM
0.00.265.916 I llm_load_print_meta: n_vocab          = 256000
0.00.265.916 I llm_load_print_meta: n_merges         = 0
0.00.265.917 I llm_load_print_meta: vocab_only       = 0
0.00.265.917 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.917 I llm_load_print_meta: n_embd           = 2048
0.00.265.918 I llm_load_print_meta: n_layer          = 18
0.00.265.929 I llm_load_print_meta: n_head           = 8
0.00.265.930 I llm_load_print_meta: n_head_kv        = 1
0.00.265.930 I llm_load_print_meta: n_rot            = 256
0.00.265.931 I llm_load_print_meta: n_swa            = 0
0.00.265.931 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.932 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.933 I llm_load_print_meta: n_gqa            = 8
0.00.265.934 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.935 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.936 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.937 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.938 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.939 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.939 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.940 I llm_load_print_meta: n_ff             = 16384
0.00.265.940 I llm_load_print_meta: n_expert         = 0
0.00.265.941 I llm_load_print_meta: n_expert_used    = 0
0.00.265.941 I llm_load_print_meta: causal attn      = 1
0.00.265.942 I llm_load_print_meta: pooling type     = 0
0.00.265.942 I llm_load_print_meta: rope type        = 2
0.00.265.943 I llm_load_print_meta: rope scaling     = linear
0.00.265.944 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.945 I llm_load_print_meta: freq_scale_train = 1
0.00.265.946 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.946 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.946 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.947 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.947 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.947 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.948 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.948 I llm_load_print_meta: model type       = 2B
0.00.265.949 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.950 I llm_load_print_meta: model params     = 2.51 B
0.00.265.951 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.951 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.954 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.955 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.955 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.956 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.956 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.957 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.957 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.957 I llm_load_print_meta: max token length = 93
0.00.324.574 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.723 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.729 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.729 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.730 I llama_new_context_with_model: n_batch       = 2048
0.00.329.730 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.730 I llama_new_context_with_model: flash_attn    = 0
0.00.329.732 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.733 I llama_new_context_with_model: freq_scale    = 1
0.00.329.734 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.931 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.946 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.284 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.290 I llama_new_context_with_model: graph nodes  = 601
0.00.347.290 I llama_new_context_with_model: graph splits = 1
0.00.347.292 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.222 I main: llama threadpool init, n_threads = 4
0.00.421.235 I 
0.00.421.312 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.315 I 
0.00.421.356 I sampler seed: 1593609383
0.00.421.367 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.370 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.371 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.372 I 
 increasities, and other forms of unwanted attention can be very distressing and challenging to manage.

**Here are some strategies for managing distressing and challenging situations:**



0.01.987.133 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6745.71 tokens per second)
0.01.987.135 I llama_perf_context_print:        load time =     420.34 ms
0.01.987.136 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.987.137 I llama_perf_context_print:        eval time =    1547.01 ms /    32 runs   (   48.34 ms per token,    20.69 tokens per second)
0.01.987.138 I llama_perf_context_print:       total time =    1565.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.391s
user	8m8.147s
sys	0m6.960s
